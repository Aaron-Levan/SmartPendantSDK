/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// Data structures for passing values to charts for plotting
  /// 
  /// Series data is used for line and scatter charts, while
  /// category data is used for pie and bar charts
  /// </summary>
  public partial class Series : TBase
  {
    private List<double> _x;
    private List<double> _y;
    private List<double> _z;
    private string _color;
    private string _vertex;
    private string _style;
    private bool _hidden;
    private int _maxPts;

    public List<double> X
    {
      get
      {
        return _x;
      }
      set
      {
        __isset.x = true;
        this._x = value;
      }
    }

    public List<double> Y
    {
      get
      {
        return _y;
      }
      set
      {
        __isset.y = true;
        this._y = value;
      }
    }

    public List<double> Z
    {
      get
      {
        return _z;
      }
      set
      {
        __isset.z = true;
        this._z = value;
      }
    }

    public string Color
    {
      get
      {
        return _color;
      }
      set
      {
        __isset.color = true;
        this._color = value;
      }
    }

    public string Vertex
    {
      get
      {
        return _vertex;
      }
      set
      {
        __isset.vertex = true;
        this._vertex = value;
      }
    }

    public string Style
    {
      get
      {
        return _style;
      }
      set
      {
        __isset.style = true;
        this._style = value;
      }
    }

    public bool Hidden
    {
      get
      {
        return _hidden;
      }
      set
      {
        __isset.hidden = true;
        this._hidden = value;
      }
    }

    public int MaxPts
    {
      get
      {
        return _maxPts;
      }
      set
      {
        __isset.maxPts = true;
        this._maxPts = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool x;
      public bool y;
      public bool z;
      public bool color;
      public bool vertex;
      public bool style;
      public bool hidden;
      public bool maxPts;
    }

    public Series()
    {
    }

    public Series DeepCopy()
    {
      var tmp107 = new Series();
      if((X != null) && __isset.x)
      {
        tmp107.X = this.X.DeepCopy();
      }
      tmp107.__isset.x = this.__isset.x;
      if((Y != null) && __isset.y)
      {
        tmp107.Y = this.Y.DeepCopy();
      }
      tmp107.__isset.y = this.__isset.y;
      if((Z != null) && __isset.z)
      {
        tmp107.Z = this.Z.DeepCopy();
      }
      tmp107.__isset.z = this.__isset.z;
      if((Color != null) && __isset.color)
      {
        tmp107.Color = this.Color;
      }
      tmp107.__isset.color = this.__isset.color;
      if((Vertex != null) && __isset.vertex)
      {
        tmp107.Vertex = this.Vertex;
      }
      tmp107.__isset.vertex = this.__isset.vertex;
      if((Style != null) && __isset.style)
      {
        tmp107.Style = this.Style;
      }
      tmp107.__isset.style = this.__isset.style;
      if(__isset.hidden)
      {
        tmp107.Hidden = this.Hidden;
      }
      tmp107.__isset.hidden = this.__isset.hidden;
      if(__isset.maxPts)
      {
        tmp107.MaxPts = this.MaxPts;
      }
      tmp107.__isset.maxPts = this.__isset.maxPts;
      return tmp107;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list108 = await iprot.ReadListBeginAsync(cancellationToken);
                  X = new List<double>(_list108.Count);
                  for(int _i109 = 0; _i109 < _list108.Count; ++_i109)
                  {
                    double _elem110;
                    _elem110 = await iprot.ReadDoubleAsync(cancellationToken);
                    X.Add(_elem110);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list111 = await iprot.ReadListBeginAsync(cancellationToken);
                  Y = new List<double>(_list111.Count);
                  for(int _i112 = 0; _i112 < _list111.Count; ++_i112)
                  {
                    double _elem113;
                    _elem113 = await iprot.ReadDoubleAsync(cancellationToken);
                    Y.Add(_elem113);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list114 = await iprot.ReadListBeginAsync(cancellationToken);
                  Z = new List<double>(_list114.Count);
                  for(int _i115 = 0; _i115 < _list114.Count; ++_i115)
                  {
                    double _elem116;
                    _elem116 = await iprot.ReadDoubleAsync(cancellationToken);
                    Z.Add(_elem116);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Color = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Vertex = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Style = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                Hidden = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                MaxPts = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp117 = new TStruct("Series");
        await oprot.WriteStructBeginAsync(tmp117, cancellationToken);
        var tmp118 = new TField();
        if((X != null) && __isset.x)
        {
          tmp118.Name = "x";
          tmp118.Type = TType.List;
          tmp118.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, X.Count), cancellationToken);
          foreach (double _iter119 in X)
          {
            await oprot.WriteDoubleAsync(_iter119, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Y != null) && __isset.y)
        {
          tmp118.Name = "y";
          tmp118.Type = TType.List;
          tmp118.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, Y.Count), cancellationToken);
          foreach (double _iter120 in Y)
          {
            await oprot.WriteDoubleAsync(_iter120, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Z != null) && __isset.z)
        {
          tmp118.Name = "z";
          tmp118.Type = TType.List;
          tmp118.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, Z.Count), cancellationToken);
          foreach (double _iter121 in Z)
          {
            await oprot.WriteDoubleAsync(_iter121, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Color != null) && __isset.color)
        {
          tmp118.Name = "color";
          tmp118.Type = TType.String;
          tmp118.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteStringAsync(Color, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Vertex != null) && __isset.vertex)
        {
          tmp118.Name = "vertex";
          tmp118.Type = TType.String;
          tmp118.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteStringAsync(Vertex, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Style != null) && __isset.style)
        {
          tmp118.Name = "style";
          tmp118.Type = TType.String;
          tmp118.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteStringAsync(Style, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hidden)
        {
          tmp118.Name = "hidden";
          tmp118.Type = TType.Bool;
          tmp118.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteBoolAsync(Hidden, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxPts)
        {
          tmp118.Name = "maxPts";
          tmp118.Type = TType.I32;
          tmp118.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteI32Async(MaxPts, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Series other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.x == other.__isset.x) && ((!__isset.x) || (global::System.Object.Equals(X, other.X))))
        && ((__isset.y == other.__isset.y) && ((!__isset.y) || (global::System.Object.Equals(Y, other.Y))))
        && ((__isset.z == other.__isset.z) && ((!__isset.z) || (global::System.Object.Equals(Z, other.Z))))
        && ((__isset.color == other.__isset.color) && ((!__isset.color) || (global::System.Object.Equals(Color, other.Color))))
        && ((__isset.vertex == other.__isset.vertex) && ((!__isset.vertex) || (global::System.Object.Equals(Vertex, other.Vertex))))
        && ((__isset.style == other.__isset.style) && ((!__isset.style) || (global::System.Object.Equals(Style, other.Style))))
        && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
        && ((__isset.maxPts == other.__isset.maxPts) && ((!__isset.maxPts) || (global::System.Object.Equals(MaxPts, other.MaxPts))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((X != null) && __isset.x)
        {
          hashcode = (hashcode * 397) + X.GetHashCode();
        }
        if((Y != null) && __isset.y)
        {
          hashcode = (hashcode * 397) + Y.GetHashCode();
        }
        if((Z != null) && __isset.z)
        {
          hashcode = (hashcode * 397) + Z.GetHashCode();
        }
        if((Color != null) && __isset.color)
        {
          hashcode = (hashcode * 397) + Color.GetHashCode();
        }
        if((Vertex != null) && __isset.vertex)
        {
          hashcode = (hashcode * 397) + Vertex.GetHashCode();
        }
        if((Style != null) && __isset.style)
        {
          hashcode = (hashcode * 397) + Style.GetHashCode();
        }
        if(__isset.hidden)
        {
          hashcode = (hashcode * 397) + Hidden.GetHashCode();
        }
        if(__isset.maxPts)
        {
          hashcode = (hashcode * 397) + MaxPts.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp122 = new StringBuilder("Series(");
      int tmp123 = 0;
      if((X != null) && __isset.x)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("X: ");
        X.ToString(tmp122);
      }
      if((Y != null) && __isset.y)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Y: ");
        Y.ToString(tmp122);
      }
      if((Z != null) && __isset.z)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Z: ");
        Z.ToString(tmp122);
      }
      if((Color != null) && __isset.color)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Color: ");
        Color.ToString(tmp122);
      }
      if((Vertex != null) && __isset.vertex)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Vertex: ");
        Vertex.ToString(tmp122);
      }
      if((Style != null) && __isset.style)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Style: ");
        Style.ToString(tmp122);
      }
      if(__isset.hidden)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Hidden: ");
        Hidden.ToString(tmp122);
      }
      if(__isset.maxPts)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("MaxPts: ");
        MaxPts.ToString(tmp122);
      }
      tmp122.Append(')');
      return tmp122.ToString();
    }
  }

}
