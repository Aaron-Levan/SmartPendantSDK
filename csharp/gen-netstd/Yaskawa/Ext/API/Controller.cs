/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Controller
  {
    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Request specified permissions.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check permisions obtained.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permission"></param>
      global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default);

      /// <summary>
      /// Relinquish permissions (no effect if not held).
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Connect to the specified Robot Controller (by IP adress or hostname if DNS available)
      /// Typically, the pendant will already be connected to a controller when extensions are started,
      /// so calling connect() is not required.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="hostName"></param>
      global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Disconnect from the connected controller.  This leaves the pendant in the 'disconnected' state.
      /// When disconnected, many functions are unavailable or will return default values.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to the specified events, if not already.
      /// Note: If using a Yaskawa supplied client library with event consumer callback support,
      ///       registering an event consumer callback will automatically subscribe to the appropriate event.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from the specified events.
      /// If called directly, this may causes event consumers for the events not to be called.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Poll the API Service for pending events.
      /// Note: If using a Yaskawa supplied client library, this does not need to be called explicitly.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is connected to a robot controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the hostname or IP address of the robot controller to which the pendant is connected, if any
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The software version string of the robot controller system software.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is only monitoring the robot controller to which it is connected.  This
      /// implies that no functions that modify the controller and/or robot state will succeed.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if this pendant is the single-point-of-control for the connected Robot Controller.
      /// If not, most functions that modify the controller and/or robot state will fail.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current operation mode of the controller
      /// Automatic (aka Play) - running jobs
      /// Manual (aka Teach) - for editing jobs, teaching points, jogging, setup etc.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Are the servo drives engaged?
      /// On - yes, robot(s) are being actively controlled
      /// Off - no.  Typically brakes are engaged (unless brake-release engaged)
      /// Ready - ready to engage servos.  Typically requires operator to use servo enable switch.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicates if a job us running or stopped.
      /// Run - jobs are running (robot may be moving)
      /// Held - jobs were running but have been held/paused.
      /// Idle - no jobs are running
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Run the current robot job from the current line.  Requires Servos engaged & Automatic/Play operation and 'jobcontrol' permission.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Pause running job (servoes will remain engaged. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resume running job from paused state. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop runnng job (will stop motion and disengage servos). 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the current job (e.g. job being run or edited)
      /// Empty if none.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the current job. 'jobcontrol' permission required. Pass line=1 for start of job, line=0 for default/no-change.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="line"></param>
      global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the default (aka master) job.  Empty if no default job designated
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// query if job with specified name exists
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Details for the named job (throws if non-existent job)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names (empty if not connected)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names matching the name regular expression AND with the given tag
      /// (empty if not connected or no matches)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="nameRegex"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Duplicate an existing job with a new name for the copy
      /// </summary>
      /// <param name="c"></param>
      /// <param name="existingName"></param>
      /// <param name="newName"></param>
      global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default);

      /// <summary>
      /// delete the specified job.  The default job cannot be deleted.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read source code for named job (in the programmingLanguage listed in jobDetails() )
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Replace named job with the source code provided, in given programmingLanguage (e.g. "INFORM").
      /// Will thow if syntax errors in source.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="programmingLanguage"></param>
      /// <param name="sourceCode"></param>
      global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of tools mapping index -> name.
      /// Unset/defaulted tools are omitted (e.g. those with no name, 0 weight etc.)
      /// Indices (map keys) may not be sequential.  Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on a specific tool, by index
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input number of given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output nunber of given output name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified input (asynchronously)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified output (asynchronously)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all inputs in given input group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all outputs in given output group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all inputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all outputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return value of given input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of input groups from specified group number (upto 4 contiguous groups/bytes, from least significant byte)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of given output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of output groups from specified group number (upto 4 contiguous groups/bytes)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the specified output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the values of the outputs in the specified contigous output groups (upto 4 contiguous groups/bytes)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a logical IO address.  Will generate IOValueChanged events
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a logical IO address. (events for address may still be generated if it corresponds to a monitored input or output)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given input by logcial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given output by logcial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given output by logical IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain input group number (byte) of field bus status input.  e.g. busType 'ethip' yields EtherNet/IP status byte group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="busType"></param>
      global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the list of control groups configured on the controller.
      /// If only one robot is connected to the controller, this will return a single element,
      /// containing the simple control group representing the robot.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active control group.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the number of robots connected to the controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active robot.
      /// Note: index is 0-based, but in the UI the first robot is Robot 1.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name and space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name (less efficient)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified zone, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new Zone and returns its index.  It will have default values
      /// which can be change via modifyZone()
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Modify Zone information.  Only fields set in Zone will be updated.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="z"></param>
      global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a Zone
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of user frames mapping index -> name.
      /// NB: Indices (map keys) may not be sequential. Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified User Frame, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new User Frame with default values and returns its index.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the specified User Frame to the provided values
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="f"></param>
      global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a User Frame
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query current controller network interface IP address.
      /// controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3']
      /// (NB: On YRC1000micro, 'LAN' is the external Ethernet port, corresponding to 'LAN2' on the YRC1000)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default);

      /// <summary>
      /// Request external network access via specified protocol and port originating
      /// from the given controller interface. The controllerInferface may be left blank, in which case
      /// connections will be routed from the controller according to the destination address and
      /// current subnetwork of the external LAN ports).
      /// Access only persists while power is maintained to the controller.
      /// The protocol must be either 'tcp' or 'udp'. controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3'].
      /// Returns a handle that can subsequently used to remove the access, or -1 if the access request
      /// failed (may happen in case of network conflicts with other extensions).
      /// Requires 'networking' permision.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      /// <param name="port"></param>
      /// <param name="protocol"></param>
      global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_requestPermissions(c, permissions, cancellationToken);
        return await recv_requestPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1295 = new InternalStructs.requestPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1295.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_requestPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1296 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1296.Type == TMessageType.Exception)
        {
          var tmp1297 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1297;
        }

        var tmp1298 = new InternalStructs.requestPermissions_result();
        await tmp1298.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1298.__isset.success)
        {
          return tmp1298.Success;
        }
        if (tmp1298.__isset.e)
        {
          throw tmp1298.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestPermissions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await send_havePermission(c, permission, cancellationToken);
        return await recv_havePermission(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1299 = new InternalStructs.havePermission_args() {
          C = c,
          Permission = permission,
        };
        
        await tmp1299.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_havePermission(CancellationToken cancellationToken = default)
      {
        
        var tmp1300 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1300.Type == TMessageType.Exception)
        {
          var tmp1301 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1301;
        }

        var tmp1302 = new InternalStructs.havePermission_result();
        await tmp1302.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1302.__isset.success)
        {
          return tmp1302.Success;
        }
        if (tmp1302.__isset.e)
        {
          throw tmp1302.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "havePermission failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_relinquishPermissions(c, permissions, cancellationToken);
        await recv_relinquishPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1303 = new InternalStructs.relinquishPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1303.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_relinquishPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1304 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1304.Type == TMessageType.Exception)
        {
          var tmp1305 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1305;
        }

        var tmp1306 = new InternalStructs.relinquishPermissions_result();
        await tmp1306.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await send_connect(c, hostName, cancellationToken);
        await recv_connect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1307 = new InternalStructs.connect_args() {
          C = c,
          HostName = hostName,
        };
        
        await tmp1307.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_connect(CancellationToken cancellationToken = default)
      {
        
        var tmp1308 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1308.Type == TMessageType.Exception)
        {
          var tmp1309 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1309;
        }

        var tmp1310 = new InternalStructs.connect_result();
        await tmp1310.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default)
      {
        await send_disconnect(c, cancellationToken);
        await recv_disconnect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_disconnect(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1311 = new InternalStructs.disconnect_args() {
          C = c,
        };
        
        await tmp1311.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_disconnect(CancellationToken cancellationToken = default)
      {
        
        var tmp1312 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1312.Type == TMessageType.Exception)
        {
          var tmp1313 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1313;
        }

        var tmp1314 = new InternalStructs.disconnect_result();
        await tmp1314.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(c, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1315 = new InternalStructs.subscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1315.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1316 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1316.Type == TMessageType.Exception)
        {
          var tmp1317 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1317;
        }

        var tmp1318 = new InternalStructs.subscribeEventTypes_result();
        await tmp1318.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(c, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1319 = new InternalStructs.unsubscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1319.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1320 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1320.Type == TMessageType.Exception)
        {
          var tmp1321 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1321;
        }

        var tmp1322 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp1322.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default)
      {
        await send_events(c, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1323 = new InternalStructs.events_args() {
          C = c,
        };
        
        await tmp1323.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp1324 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1324.Type == TMessageType.Exception)
        {
          var tmp1325 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1325;
        }

        var tmp1326 = new InternalStructs.events_result();
        await tmp1326.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1326.__isset.success)
        {
          return tmp1326.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default)
      {
        await send_connected(c, cancellationToken);
        return await recv_connected(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connected(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1327 = new InternalStructs.connected_args() {
          C = c,
        };
        
        await tmp1327.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_connected(CancellationToken cancellationToken = default)
      {
        
        var tmp1328 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1328.Type == TMessageType.Exception)
        {
          var tmp1329 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1329;
        }

        var tmp1330 = new InternalStructs.connected_result();
        await tmp1330.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1330.__isset.success)
        {
          return tmp1330.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connected failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await send_connectedHostName(c, cancellationToken);
        return await recv_connectedHostName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1331 = new InternalStructs.connectedHostName_args() {
          C = c,
        };
        
        await tmp1331.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_connectedHostName(CancellationToken cancellationToken = default)
      {
        
        var tmp1332 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1332.Type == TMessageType.Exception)
        {
          var tmp1333 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1333;
        }

        var tmp1334 = new InternalStructs.connectedHostName_result();
        await tmp1334.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1334.__isset.success)
        {
          return tmp1334.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connectedHostName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await send_softwareVersion(c, cancellationToken);
        return await recv_softwareVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1335 = new InternalStructs.softwareVersion_args() {
          C = c,
        };
        
        await tmp1335.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_softwareVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp1336 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1336.Type == TMessageType.Exception)
        {
          var tmp1337 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1337;
        }

        var tmp1338 = new InternalStructs.softwareVersion_result();
        await tmp1338.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1338.__isset.success)
        {
          return tmp1338.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "softwareVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default)
      {
        await send_monitoring(c, cancellationToken);
        return await recv_monitoring(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitoring(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1339 = new InternalStructs.monitoring_args() {
          C = c,
        };
        
        await tmp1339.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_monitoring(CancellationToken cancellationToken = default)
      {
        
        var tmp1340 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1340.Type == TMessageType.Exception)
        {
          var tmp1341 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1341;
        }

        var tmp1342 = new InternalStructs.monitoring_result();
        await tmp1342.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1342.__isset.success)
        {
          return tmp1342.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "monitoring failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await send_haveExclusiveControl(c, cancellationToken);
        return await recv_haveExclusiveControl(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1343 = new InternalStructs.haveExclusiveControl_args() {
          C = c,
        };
        
        await tmp1343.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_haveExclusiveControl(CancellationToken cancellationToken = default)
      {
        
        var tmp1344 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1344.Type == TMessageType.Exception)
        {
          var tmp1345 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1345;
        }

        var tmp1346 = new InternalStructs.haveExclusiveControl_result();
        await tmp1346.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1346.__isset.success)
        {
          return tmp1346.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "haveExclusiveControl failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default)
      {
        await send_operationMode(c, cancellationToken);
        return await recv_operationMode(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_operationMode(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1347 = new InternalStructs.operationMode_args() {
          C = c,
        };
        
        await tmp1347.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> recv_operationMode(CancellationToken cancellationToken = default)
      {
        
        var tmp1348 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1348.Type == TMessageType.Exception)
        {
          var tmp1349 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1349;
        }

        var tmp1350 = new InternalStructs.operationMode_result();
        await tmp1350.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1350.__isset.success)
        {
          return tmp1350.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "operationMode failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default)
      {
        await send_servoState(c, cancellationToken);
        return await recv_servoState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_servoState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1351 = new InternalStructs.servoState_args() {
          C = c,
        };
        
        await tmp1351.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> recv_servoState(CancellationToken cancellationToken = default)
      {
        
        var tmp1352 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1352.Type == TMessageType.Exception)
        {
          var tmp1353 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1353;
        }

        var tmp1354 = new InternalStructs.servoState_result();
        await tmp1354.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1354.__isset.success)
        {
          return tmp1354.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackState(c, cancellationToken);
        return await recv_playbackState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1355 = new InternalStructs.playbackState_args() {
          C = c,
        };
        
        await tmp1355.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> recv_playbackState(CancellationToken cancellationToken = default)
      {
        
        var tmp1356 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1356.Type == TMessageType.Exception)
        {
          var tmp1357 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1357;
        }

        var tmp1358 = new InternalStructs.playbackState_result();
        await tmp1358.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1358.__isset.success)
        {
          return tmp1358.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default)
      {
        await send_run(c, cancellationToken);
        await recv_run(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_run(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("run", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1359 = new InternalStructs.run_args() {
          C = c,
        };
        
        await tmp1359.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_run(CancellationToken cancellationToken = default)
      {
        
        var tmp1360 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1360.Type == TMessageType.Exception)
        {
          var tmp1361 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1361;
        }

        var tmp1362 = new InternalStructs.run_result();
        await tmp1362.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default)
      {
        await send_pause(c, cancellationToken);
        await recv_pause(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pause(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1363 = new InternalStructs.pause_args() {
          C = c,
        };
        
        await tmp1363.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_pause(CancellationToken cancellationToken = default)
      {
        
        var tmp1364 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1364.Type == TMessageType.Exception)
        {
          var tmp1365 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1365;
        }

        var tmp1366 = new InternalStructs.pause_result();
        await tmp1366.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default)
      {
        await send_resume(c, cancellationToken);
        await recv_resume(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resume(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1367 = new InternalStructs.resume_args() {
          C = c,
        };
        
        await tmp1367.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_resume(CancellationToken cancellationToken = default)
      {
        
        var tmp1368 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1368.Type == TMessageType.Exception)
        {
          var tmp1369 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1369;
        }

        var tmp1370 = new InternalStructs.resume_result();
        await tmp1370.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default)
      {
        await send_stop(c, cancellationToken);
        await recv_stop(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stop(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1371 = new InternalStructs.stop_args() {
          C = c,
        };
        
        await tmp1371.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_stop(CancellationToken cancellationToken = default)
      {
        
        var tmp1372 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1372.Type == TMessageType.Exception)
        {
          var tmp1373 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1373;
        }

        var tmp1374 = new InternalStructs.stop_result();
        await tmp1374.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default)
      {
        await send_currentJob(c, cancellationToken);
        return await recv_currentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1375 = new InternalStructs.currentJob_args() {
          C = c,
        };
        
        await tmp1375.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1376 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1376.Type == TMessageType.Exception)
        {
          var tmp1377 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1377;
        }

        var tmp1378 = new InternalStructs.currentJob_result();
        await tmp1378.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1378.__isset.success)
        {
          return tmp1378.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await send_setCurrentJob(c, name, line, cancellationToken);
        await recv_setCurrentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1379 = new InternalStructs.setCurrentJob_args() {
          C = c,
          Name = name,
          Line = line,
        };
        
        await tmp1379.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setCurrentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1380 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1380.Type == TMessageType.Exception)
        {
          var tmp1381 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1381;
        }

        var tmp1382 = new InternalStructs.setCurrentJob_result();
        await tmp1382.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1382.__isset.e)
        {
          throw tmp1382.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await send_defaultJob(c, cancellationToken);
        return await recv_defaultJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1383 = new InternalStructs.defaultJob_args() {
          C = c,
        };
        
        await tmp1383.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_defaultJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1384 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1384.Type == TMessageType.Exception)
        {
          var tmp1385 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1385;
        }

        var tmp1386 = new InternalStructs.defaultJob_result();
        await tmp1386.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1386.__isset.success)
        {
          return tmp1386.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "defaultJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobExists(c, name, cancellationToken);
        return await recv_jobExists(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1387 = new InternalStructs.jobExists_args() {
          C = c,
          Name = name,
        };
        
        await tmp1387.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_jobExists(CancellationToken cancellationToken = default)
      {
        
        var tmp1388 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1388.Type == TMessageType.Exception)
        {
          var tmp1389 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1389;
        }

        var tmp1390 = new InternalStructs.jobExists_result();
        await tmp1390.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1390.__isset.success)
        {
          return tmp1390.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobExists failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobDetails(c, name, cancellationToken);
        return await recv_jobDetails(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1391 = new InternalStructs.jobDetails_args() {
          C = c,
          Name = name,
        };
        
        await tmp1391.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> recv_jobDetails(CancellationToken cancellationToken = default)
      {
        
        var tmp1392 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1392.Type == TMessageType.Exception)
        {
          var tmp1393 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1393;
        }

        var tmp1394 = new InternalStructs.jobDetails_result();
        await tmp1394.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1394.__isset.success)
        {
          return tmp1394.Success;
        }
        if (tmp1394.__isset.e)
        {
          throw tmp1394.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobDetails failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default)
      {
        await send_jobs(c, cancellationToken);
        return await recv_jobs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobs(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1395 = new InternalStructs.jobs_args() {
          C = c,
        };
        
        await tmp1395.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobs(CancellationToken cancellationToken = default)
      {
        
        var tmp1396 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1396.Type == TMessageType.Exception)
        {
          var tmp1397 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1397;
        }

        var tmp1398 = new InternalStructs.jobs_result();
        await tmp1398.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1398.__isset.success)
        {
          return tmp1398.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await send_jobsMatching(c, nameRegex, tag, cancellationToken);
        return await recv_jobsMatching(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1399 = new InternalStructs.jobsMatching_args() {
          C = c,
          NameRegex = nameRegex,
          Tag = tag,
        };
        
        await tmp1399.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobsMatching(CancellationToken cancellationToken = default)
      {
        
        var tmp1400 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1400.Type == TMessageType.Exception)
        {
          var tmp1401 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1401;
        }

        var tmp1402 = new InternalStructs.jobsMatching_result();
        await tmp1402.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1402.__isset.success)
        {
          return tmp1402.Success;
        }
        if (tmp1402.__isset.e)
        {
          throw tmp1402.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobsMatching failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await send_duplicateJob(c, existingName, newName, cancellationToken);
        await recv_duplicateJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1403 = new InternalStructs.duplicateJob_args() {
          C = c,
          ExistingName = existingName,
          NewName = newName,
        };
        
        await tmp1403.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_duplicateJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1404 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1404.Type == TMessageType.Exception)
        {
          var tmp1405 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1405;
        }

        var tmp1406 = new InternalStructs.duplicateJob_result();
        await tmp1406.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1406.__isset.e)
        {
          throw tmp1406.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_deleteJob(c, name, cancellationToken);
        await recv_deleteJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1407 = new InternalStructs.deleteJob_args() {
          C = c,
          Name = name,
        };
        
        await tmp1407.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1408 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1408.Type == TMessageType.Exception)
        {
          var tmp1409 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1409;
        }

        var tmp1410 = new InternalStructs.deleteJob_result();
        await tmp1410.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1410.__isset.e)
        {
          throw tmp1410.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobSource(c, name, cancellationToken);
        return await recv_jobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1411 = new InternalStructs.jobSource_args() {
          C = c,
          Name = name,
        };
        
        await tmp1411.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_jobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1412 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1412.Type == TMessageType.Exception)
        {
          var tmp1413 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1413;
        }

        var tmp1414 = new InternalStructs.jobSource_result();
        await tmp1414.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1414.__isset.success)
        {
          return tmp1414.Success;
        }
        if (tmp1414.__isset.e)
        {
          throw tmp1414.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobSource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await send_storeJobSource(c, name, programmingLanguage, sourceCode, cancellationToken);
        await recv_storeJobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1415 = new InternalStructs.storeJobSource_args() {
          C = c,
          Name = name,
          ProgrammingLanguage = programmingLanguage,
          SourceCode = sourceCode,
        };
        
        await tmp1415.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_storeJobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1416 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1416.Type == TMessageType.Exception)
        {
          var tmp1417 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1417;
        }

        var tmp1418 = new InternalStructs.storeJobSource_result();
        await tmp1418.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1418.__isset.e)
        {
          throw tmp1418.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default)
      {
        await send_tools(c, cancellationToken);
        return await recv_tools(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tools(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1419 = new InternalStructs.tools_args() {
          C = c,
        };
        
        await tmp1419.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_tools(CancellationToken cancellationToken = default)
      {
        
        var tmp1420 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1420.Type == TMessageType.Exception)
        {
          var tmp1421 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1421;
        }

        var tmp1422 = new InternalStructs.tools_result();
        await tmp1422.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1422.__isset.success)
        {
          return tmp1422.Success;
        }
        if (tmp1422.__isset.e)
        {
          throw tmp1422.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tools failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_tool(c, index, cancellationToken);
        return await recv_tool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1423 = new InternalStructs.tool_args() {
          C = c,
          Index = index,
        };
        
        await tmp1423.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> recv_tool(CancellationToken cancellationToken = default)
      {
        
        var tmp1424 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1424.Type == TMessageType.Exception)
        {
          var tmp1425 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1425;
        }

        var tmp1426 = new InternalStructs.tool_result();
        await tmp1426.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1426.__isset.success)
        {
          return tmp1426.Success;
        }
        if (tmp1426.__isset.e)
        {
          throw tmp1426.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputNumber(c, name, cancellationToken);
        return await recv_inputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1427 = new InternalStructs.inputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1427.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1428 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1428.Type == TMessageType.Exception)
        {
          var tmp1429 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1429;
        }

        var tmp1430 = new InternalStructs.inputNumber_result();
        await tmp1430.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1430.__isset.success)
        {
          return tmp1430.Success;
        }
        if (tmp1430.__isset.e)
        {
          throw tmp1430.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputGroupNumber(c, name, cancellationToken);
        return await recv_inputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1431 = new InternalStructs.inputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1431.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1432 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1432.Type == TMessageType.Exception)
        {
          var tmp1433 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1433;
        }

        var tmp1434 = new InternalStructs.inputGroupNumber_result();
        await tmp1434.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1434.__isset.success)
        {
          return tmp1434.Success;
        }
        if (tmp1434.__isset.e)
        {
          throw tmp1434.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputNumber(c, name, cancellationToken);
        return await recv_outputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1435 = new InternalStructs.outputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1435.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1436 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1436.Type == TMessageType.Exception)
        {
          var tmp1437 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1437;
        }

        var tmp1438 = new InternalStructs.outputNumber_result();
        await tmp1438.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1438.__isset.success)
        {
          return tmp1438.Success;
        }
        if (tmp1438.__isset.e)
        {
          throw tmp1438.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputGroupNumber(c, name, cancellationToken);
        return await recv_outputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1439 = new InternalStructs.outputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1439.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1440 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1440.Type == TMessageType.Exception)
        {
          var tmp1441 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1441;
        }

        var tmp1442 = new InternalStructs.outputGroupNumber_result();
        await tmp1442.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1442.__isset.success)
        {
          return tmp1442.Success;
        }
        if (tmp1442.__isset.e)
        {
          throw tmp1442.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputName(c, num, cancellationToken);
        return await recv_inputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1443 = new InternalStructs.inputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp1443.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_inputName(CancellationToken cancellationToken = default)
      {
        
        var tmp1444 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1444.Type == TMessageType.Exception)
        {
          var tmp1445 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1445;
        }

        var tmp1446 = new InternalStructs.inputName_result();
        await tmp1446.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1446.__isset.success)
        {
          return tmp1446.Success;
        }
        if (tmp1446.__isset.e)
        {
          throw tmp1446.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputName(c, num, cancellationToken);
        return await recv_outputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1447 = new InternalStructs.outputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp1447.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_outputName(CancellationToken cancellationToken = default)
      {
        
        var tmp1448 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1448.Type == TMessageType.Exception)
        {
          var tmp1449 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1449;
        }

        var tmp1450 = new InternalStructs.outputName_result();
        await tmp1450.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1450.__isset.success)
        {
          return tmp1450.Success;
        }
        if (tmp1450.__isset.e)
        {
          throw tmp1450.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setInputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setInputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1451 = new InternalStructs.setInputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp1451.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setOutputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1452 = new InternalStructs.setOutputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp1452.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorInput(c, num, cancellationToken);
        await recv_monitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1453 = new InternalStructs.monitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1453.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp1454 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1454.Type == TMessageType.Exception)
        {
          var tmp1455 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1455;
        }

        var tmp1456 = new InternalStructs.monitorInput_result();
        await tmp1456.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1456.__isset.e)
        {
          throw tmp1456.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1457 = new InternalStructs.monitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1457.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1458 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1458.Type == TMessageType.Exception)
        {
          var tmp1459 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1459;
        }

        var tmp1460 = new InternalStructs.monitorInputGroups_result();
        await tmp1460.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1460.__isset.e)
        {
          throw tmp1460.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorOutput(c, num, cancellationToken);
        await recv_monitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1461 = new InternalStructs.monitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1461.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp1462 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1462.Type == TMessageType.Exception)
        {
          var tmp1463 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1463;
        }

        var tmp1464 = new InternalStructs.monitorOutput_result();
        await tmp1464.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1464.__isset.e)
        {
          throw tmp1464.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1465 = new InternalStructs.monitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1465.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1466 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1466.Type == TMessageType.Exception)
        {
          var tmp1467 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1467;
        }

        var tmp1468 = new InternalStructs.monitorOutputGroups_result();
        await tmp1468.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1468.__isset.e)
        {
          throw tmp1468.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInput(c, num, cancellationToken);
        await recv_unmonitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1469 = new InternalStructs.unmonitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1469.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp1470 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1470.Type == TMessageType.Exception)
        {
          var tmp1471 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1471;
        }

        var tmp1472 = new InternalStructs.unmonitorInput_result();
        await tmp1472.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1473 = new InternalStructs.unmonitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1473.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1474 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1474.Type == TMessageType.Exception)
        {
          var tmp1475 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1475;
        }

        var tmp1476 = new InternalStructs.unmonitorInputGroups_result();
        await tmp1476.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutput(c, num, cancellationToken);
        await recv_unmonitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1477 = new InternalStructs.unmonitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1477.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp1478 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1478.Type == TMessageType.Exception)
        {
          var tmp1479 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1479;
        }

        var tmp1480 = new InternalStructs.unmonitorOutput_result();
        await tmp1480.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1481 = new InternalStructs.unmonitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1481.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1482 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1482.Type == TMessageType.Exception)
        {
          var tmp1483 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1483;
        }

        var tmp1484 = new InternalStructs.unmonitorOutputGroups_result();
        await tmp1484.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputValue(c, num, cancellationToken);
        return await recv_inputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1485 = new InternalStructs.inputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp1485.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1486 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1486.Type == TMessageType.Exception)
        {
          var tmp1487 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1487;
        }

        var tmp1488 = new InternalStructs.inputValue_result();
        await tmp1488.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1488.__isset.success)
        {
          return tmp1488.Success;
        }
        if (tmp1488.__isset.e)
        {
          throw tmp1488.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_inputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_inputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1489 = new InternalStructs.inputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1489.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1490 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1490.Type == TMessageType.Exception)
        {
          var tmp1491 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1491;
        }

        var tmp1492 = new InternalStructs.inputGroupsValue_result();
        await tmp1492.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1492.__isset.success)
        {
          return tmp1492.Success;
        }
        if (tmp1492.__isset.e)
        {
          throw tmp1492.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputValue(c, num, cancellationToken);
        return await recv_outputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1493 = new InternalStructs.outputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp1493.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1494 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1494.Type == TMessageType.Exception)
        {
          var tmp1495 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1495;
        }

        var tmp1496 = new InternalStructs.outputValue_result();
        await tmp1496.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1496.__isset.success)
        {
          return tmp1496.Success;
        }
        if (tmp1496.__isset.e)
        {
          throw tmp1496.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_outputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_outputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1497 = new InternalStructs.outputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1497.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1498 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1498.Type == TMessageType.Exception)
        {
          var tmp1499 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1499;
        }

        var tmp1500 = new InternalStructs.outputGroupsValue_result();
        await tmp1500.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1500.__isset.success)
        {
          return tmp1500.Success;
        }
        if (tmp1500.__isset.e)
        {
          throw tmp1500.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutput(c, num, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutput", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1501 = new InternalStructs.setOutput_args() {
          C = c,
          Num = num,
          Value = @value,
        };
        
        await tmp1501.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputGroups(c, groupNum, count, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputGroups", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1502 = new InternalStructs.setOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
          Value = @value,
        };
        
        await tmp1502.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputAddress(c, name, cancellationToken);
        return await recv_inputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1503 = new InternalStructs.inputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp1503.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1504 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1504.Type == TMessageType.Exception)
        {
          var tmp1505 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1505;
        }

        var tmp1506 = new InternalStructs.inputAddress_result();
        await tmp1506.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1506.__isset.success)
        {
          return tmp1506.Success;
        }
        if (tmp1506.__isset.e)
        {
          throw tmp1506.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputAddressByNumber(c, num, cancellationToken);
        return await recv_inputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1507 = new InternalStructs.inputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp1507.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1508 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1508.Type == TMessageType.Exception)
        {
          var tmp1509 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1509;
        }

        var tmp1510 = new InternalStructs.inputAddressByNumber_result();
        await tmp1510.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1510.__isset.success)
        {
          return tmp1510.Success;
        }
        if (tmp1510.__isset.e)
        {
          throw tmp1510.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputAddress(c, name, cancellationToken);
        return await recv_outputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1511 = new InternalStructs.outputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp1511.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1512 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1512.Type == TMessageType.Exception)
        {
          var tmp1513 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1513;
        }

        var tmp1514 = new InternalStructs.outputAddress_result();
        await tmp1514.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1514.__isset.success)
        {
          return tmp1514.Success;
        }
        if (tmp1514.__isset.e)
        {
          throw tmp1514.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputAddressByNumber(c, num, cancellationToken);
        return await recv_outputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1515 = new InternalStructs.outputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp1515.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1516 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1516.Type == TMessageType.Exception)
        {
          var tmp1517 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1517;
        }

        var tmp1518 = new InternalStructs.outputAddressByNumber_result();
        await tmp1518.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1518.__isset.success)
        {
          return tmp1518.Success;
        }
        if (tmp1518.__isset.e)
        {
          throw tmp1518.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_monitorIOAddress(c, address, cancellationToken);
        await recv_monitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1519 = new InternalStructs.monitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp1519.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1520 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1520.Type == TMessageType.Exception)
        {
          var tmp1521 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1521;
        }

        var tmp1522 = new InternalStructs.monitorIOAddress_result();
        await tmp1522.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1522.__isset.e)
        {
          throw tmp1522.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_unmonitorIOAddress(c, address, cancellationToken);
        await recv_unmonitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1523 = new InternalStructs.unmonitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp1523.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1524 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1524.Type == TMessageType.Exception)
        {
          var tmp1525 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1525;
        }

        var tmp1526 = new InternalStructs.unmonitorIOAddress_result();
        await tmp1526.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_inputAddressValue(c, address, cancellationToken);
        return await recv_inputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1527 = new InternalStructs.inputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1527.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1528 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1528.Type == TMessageType.Exception)
        {
          var tmp1529 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1529;
        }

        var tmp1530 = new InternalStructs.inputAddressValue_result();
        await tmp1530.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1530.__isset.success)
        {
          return tmp1530.Success;
        }
        if (tmp1530.__isset.e)
        {
          throw tmp1530.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_outputAddressValue(c, address, cancellationToken);
        return await recv_outputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1531 = new InternalStructs.outputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1531.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1532 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1532.Type == TMessageType.Exception)
        {
          var tmp1533 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1533;
        }

        var tmp1534 = new InternalStructs.outputAddressValue_result();
        await tmp1534.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1534.__isset.success)
        {
          return tmp1534.Success;
        }
        if (tmp1534.__isset.e)
        {
          throw tmp1534.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1535 = new InternalStructs.setOutputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp1535.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await send_fieldBusStatusInputGroup(c, busType, cancellationToken);
        return await recv_fieldBusStatusInputGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1536 = new InternalStructs.fieldBusStatusInputGroup_args() {
          C = c,
          BusType = busType,
        };
        
        await tmp1536.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_fieldBusStatusInputGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1537 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1537.Type == TMessageType.Exception)
        {
          var tmp1538 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1538;
        }

        var tmp1539 = new InternalStructs.fieldBusStatusInputGroup_result();
        await tmp1539.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1539.__isset.success)
        {
          return tmp1539.Success;
        }
        if (tmp1539.__isset.e)
        {
          throw tmp1539.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fieldBusStatusInputGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await send_controlGroups(c, cancellationToken);
        return await recv_controlGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1540 = new InternalStructs.controlGroups_args() {
          C = c,
        };
        
        await tmp1540.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> recv_controlGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1541 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1541.Type == TMessageType.Exception)
        {
          var tmp1542 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1542;
        }

        var tmp1543 = new InternalStructs.controlGroups_result();
        await tmp1543.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1543.__isset.success)
        {
          return tmp1543.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controlGroups failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await send_currentControlGroup(c, cancellationToken);
        return await recv_currentControlGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1544 = new InternalStructs.currentControlGroup_args() {
          C = c,
        };
        
        await tmp1544.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_currentControlGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1545 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1545.Type == TMessageType.Exception)
        {
          var tmp1546 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1546;
        }

        var tmp1547 = new InternalStructs.currentControlGroup_result();
        await tmp1547.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1547.__isset.success)
        {
          return tmp1547.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentControlGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default)
      {
        await send_robotCount(c, cancellationToken);
        return await recv_robotCount(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_robotCount(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1548 = new InternalStructs.robotCount_args() {
          C = c,
        };
        
        await tmp1548.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_robotCount(CancellationToken cancellationToken = default)
      {
        
        var tmp1549 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1549.Type == TMessageType.Exception)
        {
          var tmp1550 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1550;
        }

        var tmp1551 = new InternalStructs.robotCount_result();
        await tmp1551.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1551.__isset.success)
        {
          return tmp1551.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "robotCount failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await send_currentRobot(c, cancellationToken);
        return await recv_currentRobot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1552 = new InternalStructs.currentRobot_args() {
          C = c,
        };
        
        await tmp1552.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentRobot(CancellationToken cancellationToken = default)
      {
        
        var tmp1553 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1553.Type == TMessageType.Exception)
        {
          var tmp1554 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1554;
        }

        var tmp1555 = new InternalStructs.currentRobot_result();
        await tmp1555.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1555.__isset.success)
        {
          return tmp1555.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentRobot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variable(c, name, cancellationToken);
        return await recv_variable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1556 = new InternalStructs.variable_args() {
          C = c,
          Name = name,
        };
        
        await tmp1556.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variable(CancellationToken cancellationToken = default)
      {
        
        var tmp1557 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1557.Type == TMessageType.Exception)
        {
          var tmp1558 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1558;
        }

        var tmp1559 = new InternalStructs.variable_result();
        await tmp1559.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1559.__isset.success)
        {
          return tmp1559.Success;
        }
        if (tmp1559.__isset.e)
        {
          throw tmp1559.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_variableByAddr(c, addr, cancellationToken);
        return await recv_variableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1560 = new InternalStructs.variableByAddr_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1560.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp1561 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1561.Type == TMessageType.Exception)
        {
          var tmp1562 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1562;
        }

        var tmp1563 = new InternalStructs.variableByAddr_result();
        await tmp1563.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1563.__isset.success)
        {
          return tmp1563.Success;
        }
        if (tmp1563.__isset.e)
        {
          throw tmp1563.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableByAddr failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariable(c, name, @value, cancellationToken);
        await recv_setVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1564 = new InternalStructs.setVariable_args() {
          C = c,
          Name = name,
          Value = @value,
        };
        
        await tmp1564.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1565 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1565.Type == TMessageType.Exception)
        {
          var tmp1566 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1566;
        }

        var tmp1567 = new InternalStructs.setVariable_result();
        await tmp1567.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1567.__isset.e)
        {
          throw tmp1567.E;
        }
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariableByAddr(c, addr, @value, cancellationToken);
        await recv_setVariableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1568 = new InternalStructs.setVariableByAddr_args() {
          C = c,
          Addr = addr,
          Value = @value,
        };
        
        await tmp1568.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp1569 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1569.Type == TMessageType.Exception)
        {
          var tmp1570 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1570;
        }

        var tmp1571 = new InternalStructs.setVariableByAddr_result();
        await tmp1571.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1571.__isset.e)
        {
          throw tmp1571.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByNameAndSpace(c, name, space, cancellationToken);
        return await recv_variableAddrByNameAndSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1572 = new InternalStructs.variableAddrByNameAndSpace_args() {
          C = c,
          Name = name,
          Space = space,
        };
        
        await tmp1572.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByNameAndSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1573 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1573.Type == TMessageType.Exception)
        {
          var tmp1574 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1574;
        }

        var tmp1575 = new InternalStructs.variableAddrByNameAndSpace_result();
        await tmp1575.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1575.__isset.success)
        {
          return tmp1575.Success;
        }
        if (tmp1575.__isset.e)
        {
          throw tmp1575.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByNameAndSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByName(c, name, cancellationToken);
        return await recv_variableAddrByName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1576 = new InternalStructs.variableAddrByName_args() {
          C = c,
          Name = name,
        };
        
        await tmp1576.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByName(CancellationToken cancellationToken = default)
      {
        
        var tmp1577 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1577.Type == TMessageType.Exception)
        {
          var tmp1578 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1578;
        }

        var tmp1579 = new InternalStructs.variableAddrByName_result();
        await tmp1579.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1579.__isset.success)
        {
          return tmp1579.Success;
        }
        if (tmp1579.__isset.e)
        {
          throw tmp1579.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await send_setVariableName(c, addr, name, cancellationToken);
        await recv_setVariableName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1580 = new InternalStructs.setVariableName_args() {
          C = c,
          Addr = addr,
          Name = name,
        };
        
        await tmp1580.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableName(CancellationToken cancellationToken = default)
      {
        
        var tmp1581 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1581.Type == TMessageType.Exception)
        {
          var tmp1582 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1582;
        }

        var tmp1583 = new InternalStructs.setVariableName_result();
        await tmp1583.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1583.__isset.e)
        {
          throw tmp1583.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_zone(c, index, cancellationToken);
        return await recv_zone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1584 = new InternalStructs.zone_args() {
          C = c,
          Index = index,
        };
        
        await tmp1584.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> recv_zone(CancellationToken cancellationToken = default)
      {
        
        var tmp1585 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1585.Type == TMessageType.Exception)
        {
          var tmp1586 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1586;
        }

        var tmp1587 = new InternalStructs.zone_result();
        await tmp1587.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1587.__isset.success)
        {
          return tmp1587.Success;
        }
        if (tmp1587.__isset.e)
        {
          throw tmp1587.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "zone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default)
      {
        await send_newZone(c, cancellationToken);
        return await recv_newZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newZone(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1588 = new InternalStructs.newZone_args() {
          C = c,
        };
        
        await tmp1588.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1589 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1589.Type == TMessageType.Exception)
        {
          var tmp1590 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1590;
        }

        var tmp1591 = new InternalStructs.newZone_result();
        await tmp1591.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1591.__isset.success)
        {
          return tmp1591.Success;
        }
        if (tmp1591.__isset.e)
        {
          throw tmp1591.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await send_modifyZone(c, index, z, cancellationToken);
        await recv_modifyZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1592 = new InternalStructs.modifyZone_args() {
          C = c,
          Index = index,
          Z = z,
        };
        
        await tmp1592.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_modifyZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1593 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1593.Type == TMessageType.Exception)
        {
          var tmp1594 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1594;
        }

        var tmp1595 = new InternalStructs.modifyZone_result();
        await tmp1595.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1595.__isset.e)
        {
          throw tmp1595.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteZone(c, index, cancellationToken);
        await recv_deleteZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1596 = new InternalStructs.deleteZone_args() {
          C = c,
          Index = index,
        };
        
        await tmp1596.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1597 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1597.Type == TMessageType.Exception)
        {
          var tmp1598 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1598;
        }

        var tmp1599 = new InternalStructs.deleteZone_result();
        await tmp1599.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1599.__isset.e)
        {
          throw tmp1599.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default)
      {
        await send_userFrames(c, cancellationToken);
        return await recv_userFrames(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrames(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1600 = new InternalStructs.userFrames_args() {
          C = c,
        };
        
        await tmp1600.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_userFrames(CancellationToken cancellationToken = default)
      {
        
        var tmp1601 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1601.Type == TMessageType.Exception)
        {
          var tmp1602 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1602;
        }

        var tmp1603 = new InternalStructs.userFrames_result();
        await tmp1603.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1603.__isset.success)
        {
          return tmp1603.Success;
        }
        if (tmp1603.__isset.e)
        {
          throw tmp1603.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrames failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_userFrame(c, index, cancellationToken);
        return await recv_userFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1604 = new InternalStructs.userFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp1604.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> recv_userFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1605 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1605.Type == TMessageType.Exception)
        {
          var tmp1606 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1606;
        }

        var tmp1607 = new InternalStructs.userFrame_result();
        await tmp1607.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1607.__isset.success)
        {
          return tmp1607.Success;
        }
        if (tmp1607.__isset.e)
        {
          throw tmp1607.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await send_newUserFrame(c, cancellationToken);
        return await recv_newUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1608 = new InternalStructs.newUserFrame_args() {
          C = c,
        };
        
        await tmp1608.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1609 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1609.Type == TMessageType.Exception)
        {
          var tmp1610 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1610;
        }

        var tmp1611 = new InternalStructs.newUserFrame_result();
        await tmp1611.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1611.__isset.success)
        {
          return tmp1611.Success;
        }
        if (tmp1611.__isset.e)
        {
          throw tmp1611.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newUserFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await send_setUserFrame(c, index, f, cancellationToken);
        await recv_setUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1612 = new InternalStructs.setUserFrame_args() {
          C = c,
          Index = index,
          F = f,
        };
        
        await tmp1612.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1613 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1613.Type == TMessageType.Exception)
        {
          var tmp1614 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1614;
        }

        var tmp1615 = new InternalStructs.setUserFrame_result();
        await tmp1615.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1615.__isset.e)
        {
          throw tmp1615.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteUserFrame(c, index, cancellationToken);
        await recv_deleteUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1616 = new InternalStructs.deleteUserFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp1616.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1617 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1617.Type == TMessageType.Exception)
        {
          var tmp1618 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1618;
        }

        var tmp1619 = new InternalStructs.deleteUserFrame_result();
        await tmp1619.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1619.__isset.e)
        {
          throw tmp1619.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await send_networkInterfaceAddress(c, controllerInterface, cancellationToken);
        return await recv_networkInterfaceAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1620 = new InternalStructs.networkInterfaceAddress_args() {
          C = c,
          ControllerInterface = controllerInterface,
        };
        
        await tmp1620.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_networkInterfaceAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1621 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1621.Type == TMessageType.Exception)
        {
          var tmp1622 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1622;
        }

        var tmp1623 = new InternalStructs.networkInterfaceAddress_result();
        await tmp1623.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1623.__isset.success)
        {
          return tmp1623.Success;
        }
        if (tmp1623.__isset.e)
        {
          throw tmp1623.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "networkInterfaceAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkAccess(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1624 = new InternalStructs.requestNetworkAccess_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp1624.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp1625 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1625.Type == TMessageType.Exception)
        {
          var tmp1626 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1626;
        }

        var tmp1627 = new InternalStructs.requestNetworkAccess_result();
        await tmp1627.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1627.__isset.success)
        {
          return tmp1627.Success;
        }
        if (tmp1627.__isset.e)
        {
          throw tmp1627.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkAccess failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkAccess(c, accessHandle, cancellationToken);
        await recv_removeNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1628 = new InternalStructs.removeNetworkAccess_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp1628.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp1629 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1629.Type == TMessageType.Exception)
        {
          var tmp1630 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1630;
        }

        var tmp1631 = new InternalStructs.removeNetworkAccess_result();
        await tmp1631.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1631.__isset.e)
        {
          throw tmp1631.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkService(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1632 = new InternalStructs.requestNetworkService_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp1632.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp1633 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1633.Type == TMessageType.Exception)
        {
          var tmp1634 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1634;
        }

        var tmp1635 = new InternalStructs.requestNetworkService_result();
        await tmp1635.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1635.__isset.success)
        {
          return tmp1635.Success;
        }
        if (tmp1635.__isset.e)
        {
          throw tmp1635.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkService(c, accessHandle, cancellationToken);
        await recv_removeNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1636 = new InternalStructs.removeNetworkService_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp1636.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp1637 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1637.Type == TMessageType.Exception)
        {
          var tmp1638 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1638;
        }

        var tmp1639 = new InternalStructs.removeNetworkService_result();
        await tmp1639.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1639.__isset.e)
        {
          throw tmp1639.E;
        }
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["requestPermissions"] = requestPermissions_ProcessAsync;
        processMap_["havePermission"] = havePermission_ProcessAsync;
        processMap_["relinquishPermissions"] = relinquishPermissions_ProcessAsync;
        processMap_["connect"] = connect_ProcessAsync;
        processMap_["disconnect"] = disconnect_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["connected"] = connected_ProcessAsync;
        processMap_["connectedHostName"] = connectedHostName_ProcessAsync;
        processMap_["softwareVersion"] = softwareVersion_ProcessAsync;
        processMap_["monitoring"] = monitoring_ProcessAsync;
        processMap_["haveExclusiveControl"] = haveExclusiveControl_ProcessAsync;
        processMap_["operationMode"] = operationMode_ProcessAsync;
        processMap_["servoState"] = servoState_ProcessAsync;
        processMap_["playbackState"] = playbackState_ProcessAsync;
        processMap_["run"] = run_ProcessAsync;
        processMap_["pause"] = pause_ProcessAsync;
        processMap_["resume"] = resume_ProcessAsync;
        processMap_["stop"] = stop_ProcessAsync;
        processMap_["currentJob"] = currentJob_ProcessAsync;
        processMap_["setCurrentJob"] = setCurrentJob_ProcessAsync;
        processMap_["defaultJob"] = defaultJob_ProcessAsync;
        processMap_["jobExists"] = jobExists_ProcessAsync;
        processMap_["jobDetails"] = jobDetails_ProcessAsync;
        processMap_["jobs"] = jobs_ProcessAsync;
        processMap_["jobsMatching"] = jobsMatching_ProcessAsync;
        processMap_["duplicateJob"] = duplicateJob_ProcessAsync;
        processMap_["deleteJob"] = deleteJob_ProcessAsync;
        processMap_["jobSource"] = jobSource_ProcessAsync;
        processMap_["storeJobSource"] = storeJobSource_ProcessAsync;
        processMap_["tools"] = tools_ProcessAsync;
        processMap_["tool"] = tool_ProcessAsync;
        processMap_["inputNumber"] = inputNumber_ProcessAsync;
        processMap_["inputGroupNumber"] = inputGroupNumber_ProcessAsync;
        processMap_["outputNumber"] = outputNumber_ProcessAsync;
        processMap_["outputGroupNumber"] = outputGroupNumber_ProcessAsync;
        processMap_["inputName"] = inputName_ProcessAsync;
        processMap_["outputName"] = outputName_ProcessAsync;
        processMap_["setInputName"] = setInputName_ProcessAsync;
        processMap_["setOutputName"] = setOutputName_ProcessAsync;
        processMap_["monitorInput"] = monitorInput_ProcessAsync;
        processMap_["monitorInputGroups"] = monitorInputGroups_ProcessAsync;
        processMap_["monitorOutput"] = monitorOutput_ProcessAsync;
        processMap_["monitorOutputGroups"] = monitorOutputGroups_ProcessAsync;
        processMap_["unmonitorInput"] = unmonitorInput_ProcessAsync;
        processMap_["unmonitorInputGroups"] = unmonitorInputGroups_ProcessAsync;
        processMap_["unmonitorOutput"] = unmonitorOutput_ProcessAsync;
        processMap_["unmonitorOutputGroups"] = unmonitorOutputGroups_ProcessAsync;
        processMap_["inputValue"] = inputValue_ProcessAsync;
        processMap_["inputGroupsValue"] = inputGroupsValue_ProcessAsync;
        processMap_["outputValue"] = outputValue_ProcessAsync;
        processMap_["outputGroupsValue"] = outputGroupsValue_ProcessAsync;
        processMap_["setOutput"] = setOutput_ProcessAsync;
        processMap_["setOutputGroups"] = setOutputGroups_ProcessAsync;
        processMap_["inputAddress"] = inputAddress_ProcessAsync;
        processMap_["inputAddressByNumber"] = inputAddressByNumber_ProcessAsync;
        processMap_["outputAddress"] = outputAddress_ProcessAsync;
        processMap_["outputAddressByNumber"] = outputAddressByNumber_ProcessAsync;
        processMap_["monitorIOAddress"] = monitorIOAddress_ProcessAsync;
        processMap_["unmonitorIOAddress"] = unmonitorIOAddress_ProcessAsync;
        processMap_["inputAddressValue"] = inputAddressValue_ProcessAsync;
        processMap_["outputAddressValue"] = outputAddressValue_ProcessAsync;
        processMap_["setOutputAddress"] = setOutputAddress_ProcessAsync;
        processMap_["fieldBusStatusInputGroup"] = fieldBusStatusInputGroup_ProcessAsync;
        processMap_["controlGroups"] = controlGroups_ProcessAsync;
        processMap_["currentControlGroup"] = currentControlGroup_ProcessAsync;
        processMap_["robotCount"] = robotCount_ProcessAsync;
        processMap_["currentRobot"] = currentRobot_ProcessAsync;
        processMap_["variable"] = variable_ProcessAsync;
        processMap_["variableByAddr"] = variableByAddr_ProcessAsync;
        processMap_["setVariable"] = setVariable_ProcessAsync;
        processMap_["setVariableByAddr"] = setVariableByAddr_ProcessAsync;
        processMap_["variableAddrByNameAndSpace"] = variableAddrByNameAndSpace_ProcessAsync;
        processMap_["variableAddrByName"] = variableAddrByName_ProcessAsync;
        processMap_["setVariableName"] = setVariableName_ProcessAsync;
        processMap_["zone"] = zone_ProcessAsync;
        processMap_["newZone"] = newZone_ProcessAsync;
        processMap_["modifyZone"] = modifyZone_ProcessAsync;
        processMap_["deleteZone"] = deleteZone_ProcessAsync;
        processMap_["userFrames"] = userFrames_ProcessAsync;
        processMap_["userFrame"] = userFrame_ProcessAsync;
        processMap_["newUserFrame"] = newUserFrame_ProcessAsync;
        processMap_["setUserFrame"] = setUserFrame_ProcessAsync;
        processMap_["deleteUserFrame"] = deleteUserFrame_ProcessAsync;
        processMap_["networkInterfaceAddress"] = networkInterfaceAddress_ProcessAsync;
        processMap_["requestNetworkAccess"] = requestNetworkAccess_ProcessAsync;
        processMap_["removeNetworkAccess"] = removeNetworkAccess_ProcessAsync;
        processMap_["requestNetworkService"] = requestNetworkService_ProcessAsync;
        processMap_["removeNetworkService"] = removeNetworkService_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task requestPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1640 = new InternalStructs.requestPermissions_args();
        await tmp1640.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1641 = new InternalStructs.requestPermissions_result();
        try
        {
          try
          {
            tmp1641.Success = await _iAsync.requestPermissions(tmp1640.C, tmp1640.Permissions, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1642)
          {
            tmp1641.E = tmp1642;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1641.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1643)
        {
          var tmp1644 = $"Error occurred in {GetType().FullName}: {tmp1643.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1643, tmp1644);
          else
            Console.Error.WriteLine(tmp1644);
          var tmp1645 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1645.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task havePermission_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1646 = new InternalStructs.havePermission_args();
        await tmp1646.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1647 = new InternalStructs.havePermission_result();
        try
        {
          try
          {
            tmp1647.Success = await _iAsync.havePermission(tmp1646.C, tmp1646.Permission, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1648)
          {
            tmp1647.E = tmp1648;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1647.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1649)
        {
          var tmp1650 = $"Error occurred in {GetType().FullName}: {tmp1649.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1649, tmp1650);
          else
            Console.Error.WriteLine(tmp1650);
          var tmp1651 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Exception, seqid), cancellationToken);
          await tmp1651.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1652 = new InternalStructs.relinquishPermissions_args();
        await tmp1652.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1653 = new InternalStructs.relinquishPermissions_result();
        try
        {
          await _iAsync.relinquishPermissions(tmp1652.C, tmp1652.Permissions, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1653.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1654)
        {
          var tmp1655 = $"Error occurred in {GetType().FullName}: {tmp1654.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1654, tmp1655);
          else
            Console.Error.WriteLine(tmp1655);
          var tmp1656 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1656.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1657 = new InternalStructs.connect_args();
        await tmp1657.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1658 = new InternalStructs.connect_result();
        try
        {
          await _iAsync.connect(tmp1657.C, tmp1657.HostName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1658.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1659)
        {
          var tmp1660 = $"Error occurred in {GetType().FullName}: {tmp1659.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1659, tmp1660);
          else
            Console.Error.WriteLine(tmp1660);
          var tmp1661 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Exception, seqid), cancellationToken);
          await tmp1661.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1662 = new InternalStructs.disconnect_args();
        await tmp1662.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1663 = new InternalStructs.disconnect_result();
        try
        {
          await _iAsync.disconnect(tmp1662.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1663.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1664)
        {
          var tmp1665 = $"Error occurred in {GetType().FullName}: {tmp1664.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1664, tmp1665);
          else
            Console.Error.WriteLine(tmp1665);
          var tmp1666 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Exception, seqid), cancellationToken);
          await tmp1666.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1667 = new InternalStructs.subscribeEventTypes_args();
        await tmp1667.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1668 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp1667.C, tmp1667.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1668.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1669)
        {
          var tmp1670 = $"Error occurred in {GetType().FullName}: {tmp1669.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1669, tmp1670);
          else
            Console.Error.WriteLine(tmp1670);
          var tmp1671 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1671.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1672 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp1672.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1673 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp1672.C, tmp1672.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1673.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1674)
        {
          var tmp1675 = $"Error occurred in {GetType().FullName}: {tmp1674.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1674, tmp1675);
          else
            Console.Error.WriteLine(tmp1675);
          var tmp1676 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1676.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1677 = new InternalStructs.events_args();
        await tmp1677.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1678 = new InternalStructs.events_result();
        try
        {
          tmp1678.Success = await _iAsync.events(tmp1677.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1678.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1679)
        {
          var tmp1680 = $"Error occurred in {GetType().FullName}: {tmp1679.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1679, tmp1680);
          else
            Console.Error.WriteLine(tmp1680);
          var tmp1681 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp1681.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connected_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1682 = new InternalStructs.connected_args();
        await tmp1682.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1683 = new InternalStructs.connected_result();
        try
        {
          tmp1683.Success = await _iAsync.connected(tmp1682.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1683.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1684)
        {
          var tmp1685 = $"Error occurred in {GetType().FullName}: {tmp1684.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1684, tmp1685);
          else
            Console.Error.WriteLine(tmp1685);
          var tmp1686 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Exception, seqid), cancellationToken);
          await tmp1686.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connectedHostName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1687 = new InternalStructs.connectedHostName_args();
        await tmp1687.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1688 = new InternalStructs.connectedHostName_result();
        try
        {
          tmp1688.Success = await _iAsync.connectedHostName(tmp1687.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1688.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1689)
        {
          var tmp1690 = $"Error occurred in {GetType().FullName}: {tmp1689.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1689, tmp1690);
          else
            Console.Error.WriteLine(tmp1690);
          var tmp1691 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Exception, seqid), cancellationToken);
          await tmp1691.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task softwareVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1692 = new InternalStructs.softwareVersion_args();
        await tmp1692.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1693 = new InternalStructs.softwareVersion_result();
        try
        {
          tmp1693.Success = await _iAsync.softwareVersion(tmp1692.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1693.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1694)
        {
          var tmp1695 = $"Error occurred in {GetType().FullName}: {tmp1694.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1694, tmp1695);
          else
            Console.Error.WriteLine(tmp1695);
          var tmp1696 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp1696.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitoring_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1697 = new InternalStructs.monitoring_args();
        await tmp1697.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1698 = new InternalStructs.monitoring_result();
        try
        {
          tmp1698.Success = await _iAsync.monitoring(tmp1697.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1698.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1699)
        {
          var tmp1700 = $"Error occurred in {GetType().FullName}: {tmp1699.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1699, tmp1700);
          else
            Console.Error.WriteLine(tmp1700);
          var tmp1701 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Exception, seqid), cancellationToken);
          await tmp1701.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task haveExclusiveControl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1702 = new InternalStructs.haveExclusiveControl_args();
        await tmp1702.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1703 = new InternalStructs.haveExclusiveControl_result();
        try
        {
          tmp1703.Success = await _iAsync.haveExclusiveControl(tmp1702.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1703.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1704)
        {
          var tmp1705 = $"Error occurred in {GetType().FullName}: {tmp1704.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1704, tmp1705);
          else
            Console.Error.WriteLine(tmp1705);
          var tmp1706 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Exception, seqid), cancellationToken);
          await tmp1706.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task operationMode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1707 = new InternalStructs.operationMode_args();
        await tmp1707.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1708 = new InternalStructs.operationMode_result();
        try
        {
          tmp1708.Success = await _iAsync.operationMode(tmp1707.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1708.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1709)
        {
          var tmp1710 = $"Error occurred in {GetType().FullName}: {tmp1709.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1709, tmp1710);
          else
            Console.Error.WriteLine(tmp1710);
          var tmp1711 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Exception, seqid), cancellationToken);
          await tmp1711.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task servoState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1712 = new InternalStructs.servoState_args();
        await tmp1712.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1713 = new InternalStructs.servoState_result();
        try
        {
          tmp1713.Success = await _iAsync.servoState(tmp1712.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1713.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1714)
        {
          var tmp1715 = $"Error occurred in {GetType().FullName}: {tmp1714.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1714, tmp1715);
          else
            Console.Error.WriteLine(tmp1715);
          var tmp1716 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Exception, seqid), cancellationToken);
          await tmp1716.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1717 = new InternalStructs.playbackState_args();
        await tmp1717.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1718 = new InternalStructs.playbackState_result();
        try
        {
          tmp1718.Success = await _iAsync.playbackState(tmp1717.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1718.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1719)
        {
          var tmp1720 = $"Error occurred in {GetType().FullName}: {tmp1719.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1719, tmp1720);
          else
            Console.Error.WriteLine(tmp1720);
          var tmp1721 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Exception, seqid), cancellationToken);
          await tmp1721.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1722 = new InternalStructs.run_args();
        await tmp1722.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1723 = new InternalStructs.run_result();
        try
        {
          await _iAsync.run(tmp1722.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1723.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1724)
        {
          var tmp1725 = $"Error occurred in {GetType().FullName}: {tmp1724.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1724, tmp1725);
          else
            Console.Error.WriteLine(tmp1725);
          var tmp1726 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Exception, seqid), cancellationToken);
          await tmp1726.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1727 = new InternalStructs.pause_args();
        await tmp1727.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1728 = new InternalStructs.pause_result();
        try
        {
          await _iAsync.pause(tmp1727.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1728.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1729)
        {
          var tmp1730 = $"Error occurred in {GetType().FullName}: {tmp1729.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1729, tmp1730);
          else
            Console.Error.WriteLine(tmp1730);
          var tmp1731 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Exception, seqid), cancellationToken);
          await tmp1731.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1732 = new InternalStructs.resume_args();
        await tmp1732.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1733 = new InternalStructs.resume_result();
        try
        {
          await _iAsync.resume(tmp1732.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1733.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1734)
        {
          var tmp1735 = $"Error occurred in {GetType().FullName}: {tmp1734.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1734, tmp1735);
          else
            Console.Error.WriteLine(tmp1735);
          var tmp1736 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Exception, seqid), cancellationToken);
          await tmp1736.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1737 = new InternalStructs.stop_args();
        await tmp1737.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1738 = new InternalStructs.stop_result();
        try
        {
          await _iAsync.stop(tmp1737.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1738.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1739)
        {
          var tmp1740 = $"Error occurred in {GetType().FullName}: {tmp1739.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1739, tmp1740);
          else
            Console.Error.WriteLine(tmp1740);
          var tmp1741 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Exception, seqid), cancellationToken);
          await tmp1741.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1742 = new InternalStructs.currentJob_args();
        await tmp1742.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1743 = new InternalStructs.currentJob_result();
        try
        {
          tmp1743.Success = await _iAsync.currentJob(tmp1742.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1743.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1744)
        {
          var tmp1745 = $"Error occurred in {GetType().FullName}: {tmp1744.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1744, tmp1745);
          else
            Console.Error.WriteLine(tmp1745);
          var tmp1746 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1746.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setCurrentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1747 = new InternalStructs.setCurrentJob_args();
        await tmp1747.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1748 = new InternalStructs.setCurrentJob_result();
        try
        {
          try
          {
            await _iAsync.setCurrentJob(tmp1747.C, tmp1747.Name, tmp1747.Line, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1749)
          {
            tmp1748.E = tmp1749;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1748.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1750)
        {
          var tmp1751 = $"Error occurred in {GetType().FullName}: {tmp1750.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1750, tmp1751);
          else
            Console.Error.WriteLine(tmp1751);
          var tmp1752 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1752.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task defaultJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1753 = new InternalStructs.defaultJob_args();
        await tmp1753.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1754 = new InternalStructs.defaultJob_result();
        try
        {
          tmp1754.Success = await _iAsync.defaultJob(tmp1753.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1754.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1755)
        {
          var tmp1756 = $"Error occurred in {GetType().FullName}: {tmp1755.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1755, tmp1756);
          else
            Console.Error.WriteLine(tmp1756);
          var tmp1757 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1757.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobExists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1758 = new InternalStructs.jobExists_args();
        await tmp1758.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1759 = new InternalStructs.jobExists_result();
        try
        {
          tmp1759.Success = await _iAsync.jobExists(tmp1758.C, tmp1758.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1759.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1760)
        {
          var tmp1761 = $"Error occurred in {GetType().FullName}: {tmp1760.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1760, tmp1761);
          else
            Console.Error.WriteLine(tmp1761);
          var tmp1762 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Exception, seqid), cancellationToken);
          await tmp1762.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobDetails_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1763 = new InternalStructs.jobDetails_args();
        await tmp1763.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1764 = new InternalStructs.jobDetails_result();
        try
        {
          try
          {
            tmp1764.Success = await _iAsync.jobDetails(tmp1763.C, tmp1763.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1765)
          {
            tmp1764.E = tmp1765;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1764.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1766)
        {
          var tmp1767 = $"Error occurred in {GetType().FullName}: {tmp1766.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1766, tmp1767);
          else
            Console.Error.WriteLine(tmp1767);
          var tmp1768 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Exception, seqid), cancellationToken);
          await tmp1768.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1769 = new InternalStructs.jobs_args();
        await tmp1769.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1770 = new InternalStructs.jobs_result();
        try
        {
          tmp1770.Success = await _iAsync.jobs(tmp1769.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1770.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1771)
        {
          var tmp1772 = $"Error occurred in {GetType().FullName}: {tmp1771.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1771, tmp1772);
          else
            Console.Error.WriteLine(tmp1772);
          var tmp1773 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Exception, seqid), cancellationToken);
          await tmp1773.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobsMatching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1774 = new InternalStructs.jobsMatching_args();
        await tmp1774.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1775 = new InternalStructs.jobsMatching_result();
        try
        {
          try
          {
            tmp1775.Success = await _iAsync.jobsMatching(tmp1774.C, tmp1774.NameRegex, tmp1774.Tag, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1776)
          {
            tmp1775.E = tmp1776;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1775.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1777)
        {
          var tmp1778 = $"Error occurred in {GetType().FullName}: {tmp1777.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1777, tmp1778);
          else
            Console.Error.WriteLine(tmp1778);
          var tmp1779 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Exception, seqid), cancellationToken);
          await tmp1779.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task duplicateJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1780 = new InternalStructs.duplicateJob_args();
        await tmp1780.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1781 = new InternalStructs.duplicateJob_result();
        try
        {
          try
          {
            await _iAsync.duplicateJob(tmp1780.C, tmp1780.ExistingName, tmp1780.NewName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1782)
          {
            tmp1781.E = tmp1782;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1781.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1783)
        {
          var tmp1784 = $"Error occurred in {GetType().FullName}: {tmp1783.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1783, tmp1784);
          else
            Console.Error.WriteLine(tmp1784);
          var tmp1785 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1785.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1786 = new InternalStructs.deleteJob_args();
        await tmp1786.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1787 = new InternalStructs.deleteJob_result();
        try
        {
          try
          {
            await _iAsync.deleteJob(tmp1786.C, tmp1786.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1788)
          {
            tmp1787.E = tmp1788;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1787.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1789)
        {
          var tmp1790 = $"Error occurred in {GetType().FullName}: {tmp1789.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1789, tmp1790);
          else
            Console.Error.WriteLine(tmp1790);
          var tmp1791 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1791.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1792 = new InternalStructs.jobSource_args();
        await tmp1792.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1793 = new InternalStructs.jobSource_result();
        try
        {
          try
          {
            tmp1793.Success = await _iAsync.jobSource(tmp1792.C, tmp1792.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1794)
          {
            tmp1793.E = tmp1794;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1793.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1795)
        {
          var tmp1796 = $"Error occurred in {GetType().FullName}: {tmp1795.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1795, tmp1796);
          else
            Console.Error.WriteLine(tmp1796);
          var tmp1797 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp1797.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeJobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1798 = new InternalStructs.storeJobSource_args();
        await tmp1798.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1799 = new InternalStructs.storeJobSource_result();
        try
        {
          try
          {
            await _iAsync.storeJobSource(tmp1798.C, tmp1798.Name, tmp1798.ProgrammingLanguage, tmp1798.SourceCode, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1800)
          {
            tmp1799.E = tmp1800;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1799.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1801)
        {
          var tmp1802 = $"Error occurred in {GetType().FullName}: {tmp1801.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1801, tmp1802);
          else
            Console.Error.WriteLine(tmp1802);
          var tmp1803 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp1803.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tools_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1804 = new InternalStructs.tools_args();
        await tmp1804.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1805 = new InternalStructs.tools_result();
        try
        {
          try
          {
            tmp1805.Success = await _iAsync.tools(tmp1804.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1806)
          {
            tmp1805.E = tmp1806;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1805.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1807)
        {
          var tmp1808 = $"Error occurred in {GetType().FullName}: {tmp1807.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1807, tmp1808);
          else
            Console.Error.WriteLine(tmp1808);
          var tmp1809 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Exception, seqid), cancellationToken);
          await tmp1809.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1810 = new InternalStructs.tool_args();
        await tmp1810.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1811 = new InternalStructs.tool_result();
        try
        {
          try
          {
            tmp1811.Success = await _iAsync.tool(tmp1810.C, tmp1810.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1812)
          {
            tmp1811.E = tmp1812;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1811.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1813)
        {
          var tmp1814 = $"Error occurred in {GetType().FullName}: {tmp1813.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1813, tmp1814);
          else
            Console.Error.WriteLine(tmp1814);
          var tmp1815 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Exception, seqid), cancellationToken);
          await tmp1815.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1816 = new InternalStructs.inputNumber_args();
        await tmp1816.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1817 = new InternalStructs.inputNumber_result();
        try
        {
          try
          {
            tmp1817.Success = await _iAsync.inputNumber(tmp1816.C, tmp1816.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1818)
          {
            tmp1817.E = tmp1818;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1817.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1819)
        {
          var tmp1820 = $"Error occurred in {GetType().FullName}: {tmp1819.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1819, tmp1820);
          else
            Console.Error.WriteLine(tmp1820);
          var tmp1821 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp1821.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1822 = new InternalStructs.inputGroupNumber_args();
        await tmp1822.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1823 = new InternalStructs.inputGroupNumber_result();
        try
        {
          try
          {
            tmp1823.Success = await _iAsync.inputGroupNumber(tmp1822.C, tmp1822.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1824)
          {
            tmp1823.E = tmp1824;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1823.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1825)
        {
          var tmp1826 = $"Error occurred in {GetType().FullName}: {tmp1825.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1825, tmp1826);
          else
            Console.Error.WriteLine(tmp1826);
          var tmp1827 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp1827.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1828 = new InternalStructs.outputNumber_args();
        await tmp1828.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1829 = new InternalStructs.outputNumber_result();
        try
        {
          try
          {
            tmp1829.Success = await _iAsync.outputNumber(tmp1828.C, tmp1828.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1830)
          {
            tmp1829.E = tmp1830;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1829.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1831)
        {
          var tmp1832 = $"Error occurred in {GetType().FullName}: {tmp1831.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1831, tmp1832);
          else
            Console.Error.WriteLine(tmp1832);
          var tmp1833 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp1833.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1834 = new InternalStructs.outputGroupNumber_args();
        await tmp1834.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1835 = new InternalStructs.outputGroupNumber_result();
        try
        {
          try
          {
            tmp1835.Success = await _iAsync.outputGroupNumber(tmp1834.C, tmp1834.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1836)
          {
            tmp1835.E = tmp1836;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1835.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1837)
        {
          var tmp1838 = $"Error occurred in {GetType().FullName}: {tmp1837.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1837, tmp1838);
          else
            Console.Error.WriteLine(tmp1838);
          var tmp1839 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp1839.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1840 = new InternalStructs.inputName_args();
        await tmp1840.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1841 = new InternalStructs.inputName_result();
        try
        {
          try
          {
            tmp1841.Success = await _iAsync.inputName(tmp1840.C, tmp1840.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1842)
          {
            tmp1841.E = tmp1842;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1841.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1843)
        {
          var tmp1844 = $"Error occurred in {GetType().FullName}: {tmp1843.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1843, tmp1844);
          else
            Console.Error.WriteLine(tmp1844);
          var tmp1845 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp1845.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1846 = new InternalStructs.outputName_args();
        await tmp1846.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1847 = new InternalStructs.outputName_result();
        try
        {
          try
          {
            tmp1847.Success = await _iAsync.outputName(tmp1846.C, tmp1846.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1848)
          {
            tmp1847.E = tmp1848;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1847.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1849)
        {
          var tmp1850 = $"Error occurred in {GetType().FullName}: {tmp1849.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1849, tmp1850);
          else
            Console.Error.WriteLine(tmp1850);
          var tmp1851 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp1851.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setInputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1852 = new InternalStructs.setInputName_args();
        await tmp1852.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setInputName(tmp1852.C, tmp1852.Num, tmp1852.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1854)
        {
          var tmp1855 = $"Error occurred in {GetType().FullName}: {tmp1854.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1854, tmp1855);
          else
            Console.Error.WriteLine(tmp1855);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1856 = new InternalStructs.setOutputName_args();
        await tmp1856.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputName(tmp1856.C, tmp1856.Num, tmp1856.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1858)
        {
          var tmp1859 = $"Error occurred in {GetType().FullName}: {tmp1858.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1858, tmp1859);
          else
            Console.Error.WriteLine(tmp1859);
        }
      }

      public async global::System.Threading.Tasks.Task monitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1860 = new InternalStructs.monitorInput_args();
        await tmp1860.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1861 = new InternalStructs.monitorInput_result();
        try
        {
          try
          {
            await _iAsync.monitorInput(tmp1860.C, tmp1860.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1862)
          {
            tmp1861.E = tmp1862;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1861.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1863)
        {
          var tmp1864 = $"Error occurred in {GetType().FullName}: {tmp1863.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1863, tmp1864);
          else
            Console.Error.WriteLine(tmp1864);
          var tmp1865 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp1865.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1866 = new InternalStructs.monitorInputGroups_args();
        await tmp1866.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1867 = new InternalStructs.monitorInputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorInputGroups(tmp1866.C, tmp1866.GroupNum, tmp1866.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1868)
          {
            tmp1867.E = tmp1868;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1867.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1869)
        {
          var tmp1870 = $"Error occurred in {GetType().FullName}: {tmp1869.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1869, tmp1870);
          else
            Console.Error.WriteLine(tmp1870);
          var tmp1871 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp1871.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1872 = new InternalStructs.monitorOutput_args();
        await tmp1872.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1873 = new InternalStructs.monitorOutput_result();
        try
        {
          try
          {
            await _iAsync.monitorOutput(tmp1872.C, tmp1872.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1874)
          {
            tmp1873.E = tmp1874;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1873.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1875)
        {
          var tmp1876 = $"Error occurred in {GetType().FullName}: {tmp1875.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1875, tmp1876);
          else
            Console.Error.WriteLine(tmp1876);
          var tmp1877 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp1877.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1878 = new InternalStructs.monitorOutputGroups_args();
        await tmp1878.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1879 = new InternalStructs.monitorOutputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorOutputGroups(tmp1878.C, tmp1878.GroupNum, tmp1878.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1880)
          {
            tmp1879.E = tmp1880;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1879.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1881)
        {
          var tmp1882 = $"Error occurred in {GetType().FullName}: {tmp1881.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1881, tmp1882);
          else
            Console.Error.WriteLine(tmp1882);
          var tmp1883 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp1883.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1884 = new InternalStructs.unmonitorInput_args();
        await tmp1884.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1885 = new InternalStructs.unmonitorInput_result();
        try
        {
          await _iAsync.unmonitorInput(tmp1884.C, tmp1884.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1885.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1886)
        {
          var tmp1887 = $"Error occurred in {GetType().FullName}: {tmp1886.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1886, tmp1887);
          else
            Console.Error.WriteLine(tmp1887);
          var tmp1888 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp1888.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1889 = new InternalStructs.unmonitorInputGroups_args();
        await tmp1889.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1890 = new InternalStructs.unmonitorInputGroups_result();
        try
        {
          await _iAsync.unmonitorInputGroups(tmp1889.C, tmp1889.GroupNum, tmp1889.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1890.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1891)
        {
          var tmp1892 = $"Error occurred in {GetType().FullName}: {tmp1891.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1891, tmp1892);
          else
            Console.Error.WriteLine(tmp1892);
          var tmp1893 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp1893.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1894 = new InternalStructs.unmonitorOutput_args();
        await tmp1894.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1895 = new InternalStructs.unmonitorOutput_result();
        try
        {
          await _iAsync.unmonitorOutput(tmp1894.C, tmp1894.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1895.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1896)
        {
          var tmp1897 = $"Error occurred in {GetType().FullName}: {tmp1896.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1896, tmp1897);
          else
            Console.Error.WriteLine(tmp1897);
          var tmp1898 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp1898.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1899 = new InternalStructs.unmonitorOutputGroups_args();
        await tmp1899.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1900 = new InternalStructs.unmonitorOutputGroups_result();
        try
        {
          await _iAsync.unmonitorOutputGroups(tmp1899.C, tmp1899.GroupNum, tmp1899.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1900.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1901)
        {
          var tmp1902 = $"Error occurred in {GetType().FullName}: {tmp1901.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1901, tmp1902);
          else
            Console.Error.WriteLine(tmp1902);
          var tmp1903 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp1903.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1904 = new InternalStructs.inputValue_args();
        await tmp1904.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1905 = new InternalStructs.inputValue_result();
        try
        {
          try
          {
            tmp1905.Success = await _iAsync.inputValue(tmp1904.C, tmp1904.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1906)
          {
            tmp1905.E = tmp1906;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1905.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1907)
        {
          var tmp1908 = $"Error occurred in {GetType().FullName}: {tmp1907.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1907, tmp1908);
          else
            Console.Error.WriteLine(tmp1908);
          var tmp1909 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp1909.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1910 = new InternalStructs.inputGroupsValue_args();
        await tmp1910.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1911 = new InternalStructs.inputGroupsValue_result();
        try
        {
          try
          {
            tmp1911.Success = await _iAsync.inputGroupsValue(tmp1910.C, tmp1910.GroupNum, tmp1910.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1912)
          {
            tmp1911.E = tmp1912;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1911.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1913)
        {
          var tmp1914 = $"Error occurred in {GetType().FullName}: {tmp1913.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1913, tmp1914);
          else
            Console.Error.WriteLine(tmp1914);
          var tmp1915 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp1915.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1916 = new InternalStructs.outputValue_args();
        await tmp1916.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1917 = new InternalStructs.outputValue_result();
        try
        {
          try
          {
            tmp1917.Success = await _iAsync.outputValue(tmp1916.C, tmp1916.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1918)
          {
            tmp1917.E = tmp1918;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1917.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1919)
        {
          var tmp1920 = $"Error occurred in {GetType().FullName}: {tmp1919.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1919, tmp1920);
          else
            Console.Error.WriteLine(tmp1920);
          var tmp1921 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp1921.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1922 = new InternalStructs.outputGroupsValue_args();
        await tmp1922.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1923 = new InternalStructs.outputGroupsValue_result();
        try
        {
          try
          {
            tmp1923.Success = await _iAsync.outputGroupsValue(tmp1922.C, tmp1922.GroupNum, tmp1922.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1924)
          {
            tmp1923.E = tmp1924;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1923.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1925)
        {
          var tmp1926 = $"Error occurred in {GetType().FullName}: {tmp1925.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1925, tmp1926);
          else
            Console.Error.WriteLine(tmp1926);
          var tmp1927 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp1927.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1928 = new InternalStructs.setOutput_args();
        await tmp1928.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutput(tmp1928.C, tmp1928.Num, tmp1928.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1930)
        {
          var tmp1931 = $"Error occurred in {GetType().FullName}: {tmp1930.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1930, tmp1931);
          else
            Console.Error.WriteLine(tmp1931);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1932 = new InternalStructs.setOutputGroups_args();
        await tmp1932.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputGroups(tmp1932.C, tmp1932.GroupNum, tmp1932.Count, tmp1932.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1934)
        {
          var tmp1935 = $"Error occurred in {GetType().FullName}: {tmp1934.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1934, tmp1935);
          else
            Console.Error.WriteLine(tmp1935);
        }
      }

      public async global::System.Threading.Tasks.Task inputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1936 = new InternalStructs.inputAddress_args();
        await tmp1936.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1937 = new InternalStructs.inputAddress_result();
        try
        {
          try
          {
            tmp1937.Success = await _iAsync.inputAddress(tmp1936.C, tmp1936.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1938)
          {
            tmp1937.E = tmp1938;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1937.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1939)
        {
          var tmp1940 = $"Error occurred in {GetType().FullName}: {tmp1939.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1939, tmp1940);
          else
            Console.Error.WriteLine(tmp1940);
          var tmp1941 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp1941.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1942 = new InternalStructs.inputAddressByNumber_args();
        await tmp1942.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1943 = new InternalStructs.inputAddressByNumber_result();
        try
        {
          try
          {
            tmp1943.Success = await _iAsync.inputAddressByNumber(tmp1942.C, tmp1942.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1944)
          {
            tmp1943.E = tmp1944;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1943.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1945)
        {
          var tmp1946 = $"Error occurred in {GetType().FullName}: {tmp1945.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1945, tmp1946);
          else
            Console.Error.WriteLine(tmp1946);
          var tmp1947 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp1947.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1948 = new InternalStructs.outputAddress_args();
        await tmp1948.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1949 = new InternalStructs.outputAddress_result();
        try
        {
          try
          {
            tmp1949.Success = await _iAsync.outputAddress(tmp1948.C, tmp1948.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1950)
          {
            tmp1949.E = tmp1950;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1949.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1951)
        {
          var tmp1952 = $"Error occurred in {GetType().FullName}: {tmp1951.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1951, tmp1952);
          else
            Console.Error.WriteLine(tmp1952);
          var tmp1953 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp1953.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1954 = new InternalStructs.outputAddressByNumber_args();
        await tmp1954.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1955 = new InternalStructs.outputAddressByNumber_result();
        try
        {
          try
          {
            tmp1955.Success = await _iAsync.outputAddressByNumber(tmp1954.C, tmp1954.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1956)
          {
            tmp1955.E = tmp1956;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1955.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1957)
        {
          var tmp1958 = $"Error occurred in {GetType().FullName}: {tmp1957.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1957, tmp1958);
          else
            Console.Error.WriteLine(tmp1958);
          var tmp1959 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp1959.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1960 = new InternalStructs.monitorIOAddress_args();
        await tmp1960.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1961 = new InternalStructs.monitorIOAddress_result();
        try
        {
          try
          {
            await _iAsync.monitorIOAddress(tmp1960.C, tmp1960.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1962)
          {
            tmp1961.E = tmp1962;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1961.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1963)
        {
          var tmp1964 = $"Error occurred in {GetType().FullName}: {tmp1963.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1963, tmp1964);
          else
            Console.Error.WriteLine(tmp1964);
          var tmp1965 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp1965.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1966 = new InternalStructs.unmonitorIOAddress_args();
        await tmp1966.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1967 = new InternalStructs.unmonitorIOAddress_result();
        try
        {
          await _iAsync.unmonitorIOAddress(tmp1966.C, tmp1966.Address, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1967.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1968)
        {
          var tmp1969 = $"Error occurred in {GetType().FullName}: {tmp1968.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1968, tmp1969);
          else
            Console.Error.WriteLine(tmp1969);
          var tmp1970 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp1970.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1971 = new InternalStructs.inputAddressValue_args();
        await tmp1971.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1972 = new InternalStructs.inputAddressValue_result();
        try
        {
          try
          {
            tmp1972.Success = await _iAsync.inputAddressValue(tmp1971.C, tmp1971.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1973)
          {
            tmp1972.E = tmp1973;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1972.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1974)
        {
          var tmp1975 = $"Error occurred in {GetType().FullName}: {tmp1974.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1974, tmp1975);
          else
            Console.Error.WriteLine(tmp1975);
          var tmp1976 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp1976.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1977 = new InternalStructs.outputAddressValue_args();
        await tmp1977.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1978 = new InternalStructs.outputAddressValue_result();
        try
        {
          try
          {
            tmp1978.Success = await _iAsync.outputAddressValue(tmp1977.C, tmp1977.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1979)
          {
            tmp1978.E = tmp1979;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1978.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1980)
        {
          var tmp1981 = $"Error occurred in {GetType().FullName}: {tmp1980.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1980, tmp1981);
          else
            Console.Error.WriteLine(tmp1981);
          var tmp1982 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp1982.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1983 = new InternalStructs.setOutputAddress_args();
        await tmp1983.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputAddress(tmp1983.C, tmp1983.Address, tmp1983.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1985)
        {
          var tmp1986 = $"Error occurred in {GetType().FullName}: {tmp1985.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1985, tmp1986);
          else
            Console.Error.WriteLine(tmp1986);
        }
      }

      public async global::System.Threading.Tasks.Task fieldBusStatusInputGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1987 = new InternalStructs.fieldBusStatusInputGroup_args();
        await tmp1987.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1988 = new InternalStructs.fieldBusStatusInputGroup_result();
        try
        {
          try
          {
            tmp1988.Success = await _iAsync.fieldBusStatusInputGroup(tmp1987.C, tmp1987.BusType, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1989)
          {
            tmp1988.E = tmp1989;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1988.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1990)
        {
          var tmp1991 = $"Error occurred in {GetType().FullName}: {tmp1990.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1990, tmp1991);
          else
            Console.Error.WriteLine(tmp1991);
          var tmp1992 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1992.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controlGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1993 = new InternalStructs.controlGroups_args();
        await tmp1993.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1994 = new InternalStructs.controlGroups_result();
        try
        {
          tmp1994.Success = await _iAsync.controlGroups(tmp1993.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1994.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1995)
        {
          var tmp1996 = $"Error occurred in {GetType().FullName}: {tmp1995.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1995, tmp1996);
          else
            Console.Error.WriteLine(tmp1996);
          var tmp1997 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp1997.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentControlGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1998 = new InternalStructs.currentControlGroup_args();
        await tmp1998.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1999 = new InternalStructs.currentControlGroup_result();
        try
        {
          tmp1999.Success = await _iAsync.currentControlGroup(tmp1998.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1999.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2000)
        {
          var tmp2001 = $"Error occurred in {GetType().FullName}: {tmp2000.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2000, tmp2001);
          else
            Console.Error.WriteLine(tmp2001);
          var tmp2002 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2002.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task robotCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2003 = new InternalStructs.robotCount_args();
        await tmp2003.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2004 = new InternalStructs.robotCount_result();
        try
        {
          tmp2004.Success = await _iAsync.robotCount(tmp2003.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2004.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2005)
        {
          var tmp2006 = $"Error occurred in {GetType().FullName}: {tmp2005.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2005, tmp2006);
          else
            Console.Error.WriteLine(tmp2006);
          var tmp2007 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Exception, seqid), cancellationToken);
          await tmp2007.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentRobot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2008 = new InternalStructs.currentRobot_args();
        await tmp2008.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2009 = new InternalStructs.currentRobot_result();
        try
        {
          tmp2009.Success = await _iAsync.currentRobot(tmp2008.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2009.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2010)
        {
          var tmp2011 = $"Error occurred in {GetType().FullName}: {tmp2010.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2010, tmp2011);
          else
            Console.Error.WriteLine(tmp2011);
          var tmp2012 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Exception, seqid), cancellationToken);
          await tmp2012.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2013 = new InternalStructs.variable_args();
        await tmp2013.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2014 = new InternalStructs.variable_result();
        try
        {
          try
          {
            tmp2014.Success = await _iAsync.variable(tmp2013.C, tmp2013.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2015)
          {
            tmp2014.E = tmp2015;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2014.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2016)
        {
          var tmp2017 = $"Error occurred in {GetType().FullName}: {tmp2016.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2016, tmp2017);
          else
            Console.Error.WriteLine(tmp2017);
          var tmp2018 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2018.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2019 = new InternalStructs.variableByAddr_args();
        await tmp2019.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2020 = new InternalStructs.variableByAddr_result();
        try
        {
          try
          {
            tmp2020.Success = await _iAsync.variableByAddr(tmp2019.C, tmp2019.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2021)
          {
            tmp2020.E = tmp2021;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2020.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2022)
        {
          var tmp2023 = $"Error occurred in {GetType().FullName}: {tmp2022.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2022, tmp2023);
          else
            Console.Error.WriteLine(tmp2023);
          var tmp2024 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2024.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2025 = new InternalStructs.setVariable_args();
        await tmp2025.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2026 = new InternalStructs.setVariable_result();
        try
        {
          try
          {
            await _iAsync.setVariable(tmp2025.C, tmp2025.Name, tmp2025.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2027)
          {
            tmp2026.E = tmp2027;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2026.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2028)
        {
          var tmp2029 = $"Error occurred in {GetType().FullName}: {tmp2028.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2028, tmp2029);
          else
            Console.Error.WriteLine(tmp2029);
          var tmp2030 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2030.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2031 = new InternalStructs.setVariableByAddr_args();
        await tmp2031.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2032 = new InternalStructs.setVariableByAddr_result();
        try
        {
          try
          {
            await _iAsync.setVariableByAddr(tmp2031.C, tmp2031.Addr, tmp2031.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2033)
          {
            tmp2032.E = tmp2033;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2032.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2034)
        {
          var tmp2035 = $"Error occurred in {GetType().FullName}: {tmp2034.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2034, tmp2035);
          else
            Console.Error.WriteLine(tmp2035);
          var tmp2036 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2036.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByNameAndSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2037 = new InternalStructs.variableAddrByNameAndSpace_args();
        await tmp2037.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2038 = new InternalStructs.variableAddrByNameAndSpace_result();
        try
        {
          try
          {
            tmp2038.Success = await _iAsync.variableAddrByNameAndSpace(tmp2037.C, tmp2037.Name, tmp2037.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2039)
          {
            tmp2038.E = tmp2039;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2038.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2040)
        {
          var tmp2041 = $"Error occurred in {GetType().FullName}: {tmp2040.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2040, tmp2041);
          else
            Console.Error.WriteLine(tmp2041);
          var tmp2042 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp2042.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2043 = new InternalStructs.variableAddrByName_args();
        await tmp2043.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2044 = new InternalStructs.variableAddrByName_result();
        try
        {
          try
          {
            tmp2044.Success = await _iAsync.variableAddrByName(tmp2043.C, tmp2043.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2045)
          {
            tmp2044.E = tmp2045;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2044.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2046)
        {
          var tmp2047 = $"Error occurred in {GetType().FullName}: {tmp2046.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2046, tmp2047);
          else
            Console.Error.WriteLine(tmp2047);
          var tmp2048 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2048.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2049 = new InternalStructs.setVariableName_args();
        await tmp2049.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2050 = new InternalStructs.setVariableName_result();
        try
        {
          try
          {
            await _iAsync.setVariableName(tmp2049.C, tmp2049.Addr, tmp2049.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2051)
          {
            tmp2050.E = tmp2051;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2050.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2052)
        {
          var tmp2053 = $"Error occurred in {GetType().FullName}: {tmp2052.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2052, tmp2053);
          else
            Console.Error.WriteLine(tmp2053);
          var tmp2054 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2054.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task zone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2055 = new InternalStructs.zone_args();
        await tmp2055.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2056 = new InternalStructs.zone_result();
        try
        {
          try
          {
            tmp2056.Success = await _iAsync.zone(tmp2055.C, tmp2055.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2057)
          {
            tmp2056.E = tmp2057;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2056.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2058)
        {
          var tmp2059 = $"Error occurred in {GetType().FullName}: {tmp2058.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2058, tmp2059);
          else
            Console.Error.WriteLine(tmp2059);
          var tmp2060 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2060.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2061 = new InternalStructs.newZone_args();
        await tmp2061.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2062 = new InternalStructs.newZone_result();
        try
        {
          try
          {
            tmp2062.Success = await _iAsync.newZone(tmp2061.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2063)
          {
            tmp2062.E = tmp2063;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2062.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2064)
        {
          var tmp2065 = $"Error occurred in {GetType().FullName}: {tmp2064.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2064, tmp2065);
          else
            Console.Error.WriteLine(tmp2065);
          var tmp2066 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2066.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task modifyZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2067 = new InternalStructs.modifyZone_args();
        await tmp2067.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2068 = new InternalStructs.modifyZone_result();
        try
        {
          try
          {
            await _iAsync.modifyZone(tmp2067.C, tmp2067.Index, tmp2067.Z, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2069)
          {
            tmp2068.E = tmp2069;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2068.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2070)
        {
          var tmp2071 = $"Error occurred in {GetType().FullName}: {tmp2070.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2070, tmp2071);
          else
            Console.Error.WriteLine(tmp2071);
          var tmp2072 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2072.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2073 = new InternalStructs.deleteZone_args();
        await tmp2073.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2074 = new InternalStructs.deleteZone_result();
        try
        {
          try
          {
            await _iAsync.deleteZone(tmp2073.C, tmp2073.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2075)
          {
            tmp2074.E = tmp2075;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2074.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2076)
        {
          var tmp2077 = $"Error occurred in {GetType().FullName}: {tmp2076.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2076, tmp2077);
          else
            Console.Error.WriteLine(tmp2077);
          var tmp2078 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2078.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2079 = new InternalStructs.userFrames_args();
        await tmp2079.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2080 = new InternalStructs.userFrames_result();
        try
        {
          try
          {
            tmp2080.Success = await _iAsync.userFrames(tmp2079.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2081)
          {
            tmp2080.E = tmp2081;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2080.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2082)
        {
          var tmp2083 = $"Error occurred in {GetType().FullName}: {tmp2082.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2082, tmp2083);
          else
            Console.Error.WriteLine(tmp2083);
          var tmp2084 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Exception, seqid), cancellationToken);
          await tmp2084.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2085 = new InternalStructs.userFrame_args();
        await tmp2085.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2086 = new InternalStructs.userFrame_result();
        try
        {
          try
          {
            tmp2086.Success = await _iAsync.userFrame(tmp2085.C, tmp2085.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2087)
          {
            tmp2086.E = tmp2087;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2086.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2088)
        {
          var tmp2089 = $"Error occurred in {GetType().FullName}: {tmp2088.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2088, tmp2089);
          else
            Console.Error.WriteLine(tmp2089);
          var tmp2090 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2090.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2091 = new InternalStructs.newUserFrame_args();
        await tmp2091.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2092 = new InternalStructs.newUserFrame_result();
        try
        {
          try
          {
            tmp2092.Success = await _iAsync.newUserFrame(tmp2091.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2093)
          {
            tmp2092.E = tmp2093;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2092.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2094)
        {
          var tmp2095 = $"Error occurred in {GetType().FullName}: {tmp2094.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2094, tmp2095);
          else
            Console.Error.WriteLine(tmp2095);
          var tmp2096 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2096.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2097 = new InternalStructs.setUserFrame_args();
        await tmp2097.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2098 = new InternalStructs.setUserFrame_result();
        try
        {
          try
          {
            await _iAsync.setUserFrame(tmp2097.C, tmp2097.Index, tmp2097.F, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2099)
          {
            tmp2098.E = tmp2099;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2098.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2100)
        {
          var tmp2101 = $"Error occurred in {GetType().FullName}: {tmp2100.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2100, tmp2101);
          else
            Console.Error.WriteLine(tmp2101);
          var tmp2102 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2102.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2103 = new InternalStructs.deleteUserFrame_args();
        await tmp2103.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2104 = new InternalStructs.deleteUserFrame_result();
        try
        {
          try
          {
            await _iAsync.deleteUserFrame(tmp2103.C, tmp2103.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2105)
          {
            tmp2104.E = tmp2105;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2104.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2106)
        {
          var tmp2107 = $"Error occurred in {GetType().FullName}: {tmp2106.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2106, tmp2107);
          else
            Console.Error.WriteLine(tmp2107);
          var tmp2108 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2108.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task networkInterfaceAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2109 = new InternalStructs.networkInterfaceAddress_args();
        await tmp2109.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2110 = new InternalStructs.networkInterfaceAddress_result();
        try
        {
          try
          {
            tmp2110.Success = await _iAsync.networkInterfaceAddress(tmp2109.C, tmp2109.ControllerInterface, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2111)
          {
            tmp2110.E = tmp2111;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2110.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2112)
        {
          var tmp2113 = $"Error occurred in {GetType().FullName}: {tmp2112.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2112, tmp2113);
          else
            Console.Error.WriteLine(tmp2113);
          var tmp2114 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2114.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2115 = new InternalStructs.requestNetworkAccess_args();
        await tmp2115.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2116 = new InternalStructs.requestNetworkAccess_result();
        try
        {
          try
          {
            tmp2116.Success = await _iAsync.requestNetworkAccess(tmp2115.C, tmp2115.ControllerInterface, tmp2115.Port, tmp2115.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2117)
          {
            tmp2116.E = tmp2117;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2116.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2118)
        {
          var tmp2119 = $"Error occurred in {GetType().FullName}: {tmp2118.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2118, tmp2119);
          else
            Console.Error.WriteLine(tmp2119);
          var tmp2120 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2120.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2121 = new InternalStructs.removeNetworkAccess_args();
        await tmp2121.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2122 = new InternalStructs.removeNetworkAccess_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkAccess(tmp2121.C, tmp2121.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2123)
          {
            tmp2122.E = tmp2123;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2122.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2124)
        {
          var tmp2125 = $"Error occurred in {GetType().FullName}: {tmp2124.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2124, tmp2125);
          else
            Console.Error.WriteLine(tmp2125);
          var tmp2126 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2126.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2127 = new InternalStructs.requestNetworkService_args();
        await tmp2127.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2128 = new InternalStructs.requestNetworkService_result();
        try
        {
          try
          {
            tmp2128.Success = await _iAsync.requestNetworkService(tmp2127.C, tmp2127.ControllerInterface, tmp2127.Port, tmp2127.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2129)
          {
            tmp2128.E = tmp2129;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2128.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2130)
        {
          var tmp2131 = $"Error occurred in {GetType().FullName}: {tmp2130.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2130, tmp2131);
          else
            Console.Error.WriteLine(tmp2131);
          var tmp2132 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2132.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2133 = new InternalStructs.removeNetworkService_args();
        await tmp2133.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2134 = new InternalStructs.removeNetworkService_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkService(tmp2133.C, tmp2133.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2135)
          {
            tmp2134.E = tmp2135;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2134.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2136)
        {
          var tmp2137 = $"Error occurred in {GetType().FullName}: {tmp2136.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2136, tmp2137);
          else
            Console.Error.WriteLine(tmp2137);
          var tmp2138 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2138.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class requestPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public requestPermissions_args()
        {
        }

        public requestPermissions_args DeepCopy()
        {
          var tmp2139 = new requestPermissions_args();
          if(__isset.c)
          {
            tmp2139.C = this.C;
          }
          tmp2139.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2139.Permissions = this.Permissions.DeepCopy();
          }
          tmp2139.__isset.permissions = this.__isset.permissions;
          return tmp2139;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2140 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2140.Count);
                      for(int _i2141 = 0; _i2141 < _set2140.Count; ++_i2141)
                      {
                        string _elem2142;
                        _elem2142 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2142);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2143 = new TStruct("requestPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2143, cancellationToken);
            var tmp2144 = new TField();
            if(__isset.c)
            {
              tmp2144.Name = "c";
              tmp2144.Type = TType.I64;
              tmp2144.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2144, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2144.Name = "permissions";
              tmp2144.Type = TType.Set;
              tmp2144.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2144, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2145 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2145, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2146 = new StringBuilder("requestPermissions_args(");
          int tmp2147 = 0;
          if(__isset.c)
          {
            if(0 < tmp2147++) { tmp2146.Append(", "); }
            tmp2146.Append("C: ");
            C.ToString(tmp2146);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2147++) { tmp2146.Append(", "); }
            tmp2146.Append("Permissions: ");
            Permissions.ToString(tmp2146);
          }
          tmp2146.Append(')');
          return tmp2146.ToString();
        }
      }


      public partial class requestPermissions_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestPermissions_result()
        {
        }

        public requestPermissions_result DeepCopy()
        {
          var tmp2148 = new requestPermissions_result();
          if(__isset.success)
          {
            tmp2148.Success = this.Success;
          }
          tmp2148.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2148.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2148.__isset.e = this.__isset.e;
          return tmp2148;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2149 = new TStruct("requestPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2149, cancellationToken);
            var tmp2150 = new TField();

            if(this.__isset.success)
            {
              tmp2150.Name = "Success";
              tmp2150.Type = TType.Bool;
              tmp2150.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2150, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2150.Name = "E";
                tmp2150.Type = TType.Struct;
                tmp2150.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2150, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2151 = new StringBuilder("requestPermissions_result(");
          int tmp2152 = 0;
          if(__isset.success)
          {
            if(0 < tmp2152++) { tmp2151.Append(", "); }
            tmp2151.Append("Success: ");
            Success.ToString(tmp2151);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2152++) { tmp2151.Append(", "); }
            tmp2151.Append("E: ");
            E.ToString(tmp2151);
          }
          tmp2151.Append(')');
          return tmp2151.ToString();
        }
      }


      public partial class havePermission_args : TBase
      {
        private long _c;
        private string _permission;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Permission
        {
          get
          {
            return _permission;
          }
          set
          {
            __isset.permission = true;
            this._permission = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permission;
        }

        public havePermission_args()
        {
        }

        public havePermission_args DeepCopy()
        {
          var tmp2153 = new havePermission_args();
          if(__isset.c)
          {
            tmp2153.C = this.C;
          }
          tmp2153.__isset.c = this.__isset.c;
          if((Permission != null) && __isset.permission)
          {
            tmp2153.Permission = this.Permission;
          }
          tmp2153.__isset.permission = this.__isset.permission;
          return tmp2153;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Permission = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2154 = new TStruct("havePermission_args");
            await oprot.WriteStructBeginAsync(tmp2154, cancellationToken);
            var tmp2155 = new TField();
            if(__isset.c)
            {
              tmp2155.Name = "c";
              tmp2155.Type = TType.I64;
              tmp2155.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2155, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permission != null) && __isset.permission)
            {
              tmp2155.Name = "permission";
              tmp2155.Type = TType.String;
              tmp2155.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2155, cancellationToken);
              await oprot.WriteStringAsync(Permission, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permission == other.__isset.permission) && ((!__isset.permission) || (global::System.Object.Equals(Permission, other.Permission))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permission != null) && __isset.permission)
            {
              hashcode = (hashcode * 397) + Permission.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2156 = new StringBuilder("havePermission_args(");
          int tmp2157 = 0;
          if(__isset.c)
          {
            if(0 < tmp2157++) { tmp2156.Append(", "); }
            tmp2156.Append("C: ");
            C.ToString(tmp2156);
          }
          if((Permission != null) && __isset.permission)
          {
            if(0 < tmp2157++) { tmp2156.Append(", "); }
            tmp2156.Append("Permission: ");
            Permission.ToString(tmp2156);
          }
          tmp2156.Append(')');
          return tmp2156.ToString();
        }
      }


      public partial class havePermission_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public havePermission_result()
        {
        }

        public havePermission_result DeepCopy()
        {
          var tmp2158 = new havePermission_result();
          if(__isset.success)
          {
            tmp2158.Success = this.Success;
          }
          tmp2158.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2158.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2158.__isset.e = this.__isset.e;
          return tmp2158;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2159 = new TStruct("havePermission_result");
            await oprot.WriteStructBeginAsync(tmp2159, cancellationToken);
            var tmp2160 = new TField();

            if(this.__isset.success)
            {
              tmp2160.Name = "Success";
              tmp2160.Type = TType.Bool;
              tmp2160.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2160, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2160.Name = "E";
                tmp2160.Type = TType.Struct;
                tmp2160.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2160, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2161 = new StringBuilder("havePermission_result(");
          int tmp2162 = 0;
          if(__isset.success)
          {
            if(0 < tmp2162++) { tmp2161.Append(", "); }
            tmp2161.Append("Success: ");
            Success.ToString(tmp2161);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2162++) { tmp2161.Append(", "); }
            tmp2161.Append("E: ");
            E.ToString(tmp2161);
          }
          tmp2161.Append(')');
          return tmp2161.ToString();
        }
      }


      public partial class relinquishPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public relinquishPermissions_args()
        {
        }

        public relinquishPermissions_args DeepCopy()
        {
          var tmp2163 = new relinquishPermissions_args();
          if(__isset.c)
          {
            tmp2163.C = this.C;
          }
          tmp2163.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2163.Permissions = this.Permissions.DeepCopy();
          }
          tmp2163.__isset.permissions = this.__isset.permissions;
          return tmp2163;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2164 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2164.Count);
                      for(int _i2165 = 0; _i2165 < _set2164.Count; ++_i2165)
                      {
                        string _elem2166;
                        _elem2166 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2166);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2167 = new TStruct("relinquishPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2167, cancellationToken);
            var tmp2168 = new TField();
            if(__isset.c)
            {
              tmp2168.Name = "c";
              tmp2168.Type = TType.I64;
              tmp2168.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2168, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2168.Name = "permissions";
              tmp2168.Type = TType.Set;
              tmp2168.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2168, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2169 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2169, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2170 = new StringBuilder("relinquishPermissions_args(");
          int tmp2171 = 0;
          if(__isset.c)
          {
            if(0 < tmp2171++) { tmp2170.Append(", "); }
            tmp2170.Append("C: ");
            C.ToString(tmp2170);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2171++) { tmp2170.Append(", "); }
            tmp2170.Append("Permissions: ");
            Permissions.ToString(tmp2170);
          }
          tmp2170.Append(')');
          return tmp2170.ToString();
        }
      }


      public partial class relinquishPermissions_result : TBase
      {

        public relinquishPermissions_result()
        {
        }

        public relinquishPermissions_result DeepCopy()
        {
          var tmp2172 = new relinquishPermissions_result();
          return tmp2172;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2173 = new TStruct("relinquishPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2173, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2174 = new StringBuilder("relinquishPermissions_result(");
          tmp2174.Append(')');
          return tmp2174.ToString();
        }
      }


      public partial class connect_args : TBase
      {
        private long _c;
        private string _hostName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string HostName
        {
          get
          {
            return _hostName;
          }
          set
          {
            __isset.hostName = true;
            this._hostName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool hostName;
        }

        public connect_args()
        {
        }

        public connect_args DeepCopy()
        {
          var tmp2176 = new connect_args();
          if(__isset.c)
          {
            tmp2176.C = this.C;
          }
          tmp2176.__isset.c = this.__isset.c;
          if((HostName != null) && __isset.hostName)
          {
            tmp2176.HostName = this.HostName;
          }
          tmp2176.__isset.hostName = this.__isset.hostName;
          return tmp2176;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HostName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2177 = new TStruct("connect_args");
            await oprot.WriteStructBeginAsync(tmp2177, cancellationToken);
            var tmp2178 = new TField();
            if(__isset.c)
            {
              tmp2178.Name = "c";
              tmp2178.Type = TType.I64;
              tmp2178.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2178, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HostName != null) && __isset.hostName)
            {
              tmp2178.Name = "hostName";
              tmp2178.Type = TType.String;
              tmp2178.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2178, cancellationToken);
              await oprot.WriteStringAsync(HostName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.hostName == other.__isset.hostName) && ((!__isset.hostName) || (global::System.Object.Equals(HostName, other.HostName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((HostName != null) && __isset.hostName)
            {
              hashcode = (hashcode * 397) + HostName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2179 = new StringBuilder("connect_args(");
          int tmp2180 = 0;
          if(__isset.c)
          {
            if(0 < tmp2180++) { tmp2179.Append(", "); }
            tmp2179.Append("C: ");
            C.ToString(tmp2179);
          }
          if((HostName != null) && __isset.hostName)
          {
            if(0 < tmp2180++) { tmp2179.Append(", "); }
            tmp2179.Append("HostName: ");
            HostName.ToString(tmp2179);
          }
          tmp2179.Append(')');
          return tmp2179.ToString();
        }
      }


      public partial class connect_result : TBase
      {

        public connect_result()
        {
        }

        public connect_result DeepCopy()
        {
          var tmp2181 = new connect_result();
          return tmp2181;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2182 = new TStruct("connect_result");
            await oprot.WriteStructBeginAsync(tmp2182, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2183 = new StringBuilder("connect_result(");
          tmp2183.Append(')');
          return tmp2183.ToString();
        }
      }


      public partial class disconnect_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public disconnect_args()
        {
        }

        public disconnect_args DeepCopy()
        {
          var tmp2185 = new disconnect_args();
          if(__isset.c)
          {
            tmp2185.C = this.C;
          }
          tmp2185.__isset.c = this.__isset.c;
          return tmp2185;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2186 = new TStruct("disconnect_args");
            await oprot.WriteStructBeginAsync(tmp2186, cancellationToken);
            var tmp2187 = new TField();
            if(__isset.c)
            {
              tmp2187.Name = "c";
              tmp2187.Type = TType.I64;
              tmp2187.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2187, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2188 = new StringBuilder("disconnect_args(");
          int tmp2189 = 0;
          if(__isset.c)
          {
            if(0 < tmp2189++) { tmp2188.Append(", "); }
            tmp2188.Append("C: ");
            C.ToString(tmp2188);
          }
          tmp2188.Append(')');
          return tmp2188.ToString();
        }
      }


      public partial class disconnect_result : TBase
      {

        public disconnect_result()
        {
        }

        public disconnect_result DeepCopy()
        {
          var tmp2190 = new disconnect_result();
          return tmp2190;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2191 = new TStruct("disconnect_result");
            await oprot.WriteStructBeginAsync(tmp2191, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2192 = new StringBuilder("disconnect_result(");
          tmp2192.Append(')');
          return tmp2192.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp2194 = new subscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2194.C = this.C;
          }
          tmp2194.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2194.Types = this.Types.DeepCopy();
          }
          tmp2194.__isset.types = this.__isset.types;
          return tmp2194;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2195 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2195.Count);
                      for(int _i2196 = 0; _i2196 < _set2195.Count; ++_i2196)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2197;
                        _elem2197 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2197);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2198 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2198, cancellationToken);
            var tmp2199 = new TField();
            if(__isset.c)
            {
              tmp2199.Name = "c";
              tmp2199.Type = TType.I64;
              tmp2199.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2199, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2199.Name = "types";
              tmp2199.Type = TType.Set;
              tmp2199.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2199, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2200 in Types)
              {
                await oprot.WriteI32Async((int)_iter2200, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2201 = new StringBuilder("subscribeEventTypes_args(");
          int tmp2202 = 0;
          if(__isset.c)
          {
            if(0 < tmp2202++) { tmp2201.Append(", "); }
            tmp2201.Append("C: ");
            C.ToString(tmp2201);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2202++) { tmp2201.Append(", "); }
            tmp2201.Append("Types: ");
            Types.ToString(tmp2201);
          }
          tmp2201.Append(')');
          return tmp2201.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp2203 = new subscribeEventTypes_result();
          return tmp2203;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2204 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2204, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2205 = new StringBuilder("subscribeEventTypes_result(");
          tmp2205.Append(')');
          return tmp2205.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp2207 = new unsubscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2207.C = this.C;
          }
          tmp2207.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2207.Types = this.Types.DeepCopy();
          }
          tmp2207.__isset.types = this.__isset.types;
          return tmp2207;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2208 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2208.Count);
                      for(int _i2209 = 0; _i2209 < _set2208.Count; ++_i2209)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2210;
                        _elem2210 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2210);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2211 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2211, cancellationToken);
            var tmp2212 = new TField();
            if(__isset.c)
            {
              tmp2212.Name = "c";
              tmp2212.Type = TType.I64;
              tmp2212.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2212, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2212.Name = "types";
              tmp2212.Type = TType.Set;
              tmp2212.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2212, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2213 in Types)
              {
                await oprot.WriteI32Async((int)_iter2213, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2214 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp2215 = 0;
          if(__isset.c)
          {
            if(0 < tmp2215++) { tmp2214.Append(", "); }
            tmp2214.Append("C: ");
            C.ToString(tmp2214);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2215++) { tmp2214.Append(", "); }
            tmp2214.Append("Types: ");
            Types.ToString(tmp2214);
          }
          tmp2214.Append(')');
          return tmp2214.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp2216 = new unsubscribeEventTypes_result();
          return tmp2216;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2217 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2217, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2218 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp2218.Append(')');
          return tmp2218.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp2220 = new events_args();
          if(__isset.c)
          {
            tmp2220.C = this.C;
          }
          tmp2220.__isset.c = this.__isset.c;
          return tmp2220;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2221 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp2221, cancellationToken);
            var tmp2222 = new TField();
            if(__isset.c)
            {
              tmp2222.Name = "c";
              tmp2222.Type = TType.I64;
              tmp2222.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2222, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2223 = new StringBuilder("events_args(");
          int tmp2224 = 0;
          if(__isset.c)
          {
            if(0 < tmp2224++) { tmp2223.Append(", "); }
            tmp2223.Append("C: ");
            C.ToString(tmp2223);
          }
          tmp2223.Append(')');
          return tmp2223.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControllerEvent> _success;

        public List<global::Yaskawa.Ext.API.ControllerEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp2225 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp2225.Success = this.Success.DeepCopy();
          }
          tmp2225.__isset.success = this.__isset.success;
          return tmp2225;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2226 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControllerEvent>(_list2226.Count);
                      for(int _i2227 = 0; _i2227 < _list2226.Count; ++_i2227)
                      {
                        global::Yaskawa.Ext.API.ControllerEvent _elem2228;
                        _elem2228 = new global::Yaskawa.Ext.API.ControllerEvent();
                        await _elem2228.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem2228);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2229 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp2229, cancellationToken);
            var tmp2230 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2230.Name = "Success";
                tmp2230.Type = TType.List;
                tmp2230.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2230, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControllerEvent _iter2231 in Success)
                {
                  await _iter2231.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2232 = new StringBuilder("events_result(");
          int tmp2233 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2233++) { tmp2232.Append(", "); }
            tmp2232.Append("Success: ");
            Success.ToString(tmp2232);
          }
          tmp2232.Append(')');
          return tmp2232.ToString();
        }
      }


      public partial class connected_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connected_args()
        {
        }

        public connected_args DeepCopy()
        {
          var tmp2234 = new connected_args();
          if(__isset.c)
          {
            tmp2234.C = this.C;
          }
          tmp2234.__isset.c = this.__isset.c;
          return tmp2234;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2235 = new TStruct("connected_args");
            await oprot.WriteStructBeginAsync(tmp2235, cancellationToken);
            var tmp2236 = new TField();
            if(__isset.c)
            {
              tmp2236.Name = "c";
              tmp2236.Type = TType.I64;
              tmp2236.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2236, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2237 = new StringBuilder("connected_args(");
          int tmp2238 = 0;
          if(__isset.c)
          {
            if(0 < tmp2238++) { tmp2237.Append(", "); }
            tmp2237.Append("C: ");
            C.ToString(tmp2237);
          }
          tmp2237.Append(')');
          return tmp2237.ToString();
        }
      }


      public partial class connected_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connected_result()
        {
        }

        public connected_result DeepCopy()
        {
          var tmp2239 = new connected_result();
          if(__isset.success)
          {
            tmp2239.Success = this.Success;
          }
          tmp2239.__isset.success = this.__isset.success;
          return tmp2239;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2240 = new TStruct("connected_result");
            await oprot.WriteStructBeginAsync(tmp2240, cancellationToken);
            var tmp2241 = new TField();

            if(this.__isset.success)
            {
              tmp2241.Name = "Success";
              tmp2241.Type = TType.Bool;
              tmp2241.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2241, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2242 = new StringBuilder("connected_result(");
          int tmp2243 = 0;
          if(__isset.success)
          {
            if(0 < tmp2243++) { tmp2242.Append(", "); }
            tmp2242.Append("Success: ");
            Success.ToString(tmp2242);
          }
          tmp2242.Append(')');
          return tmp2242.ToString();
        }
      }


      public partial class connectedHostName_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connectedHostName_args()
        {
        }

        public connectedHostName_args DeepCopy()
        {
          var tmp2244 = new connectedHostName_args();
          if(__isset.c)
          {
            tmp2244.C = this.C;
          }
          tmp2244.__isset.c = this.__isset.c;
          return tmp2244;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2245 = new TStruct("connectedHostName_args");
            await oprot.WriteStructBeginAsync(tmp2245, cancellationToken);
            var tmp2246 = new TField();
            if(__isset.c)
            {
              tmp2246.Name = "c";
              tmp2246.Type = TType.I64;
              tmp2246.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2246, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2247 = new StringBuilder("connectedHostName_args(");
          int tmp2248 = 0;
          if(__isset.c)
          {
            if(0 < tmp2248++) { tmp2247.Append(", "); }
            tmp2247.Append("C: ");
            C.ToString(tmp2247);
          }
          tmp2247.Append(')');
          return tmp2247.ToString();
        }
      }


      public partial class connectedHostName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connectedHostName_result()
        {
        }

        public connectedHostName_result DeepCopy()
        {
          var tmp2249 = new connectedHostName_result();
          if((Success != null) && __isset.success)
          {
            tmp2249.Success = this.Success;
          }
          tmp2249.__isset.success = this.__isset.success;
          return tmp2249;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2250 = new TStruct("connectedHostName_result");
            await oprot.WriteStructBeginAsync(tmp2250, cancellationToken);
            var tmp2251 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2251.Name = "Success";
                tmp2251.Type = TType.String;
                tmp2251.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2251, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2252 = new StringBuilder("connectedHostName_result(");
          int tmp2253 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2253++) { tmp2252.Append(", "); }
            tmp2252.Append("Success: ");
            Success.ToString(tmp2252);
          }
          tmp2252.Append(')');
          return tmp2252.ToString();
        }
      }


      public partial class softwareVersion_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public softwareVersion_args()
        {
        }

        public softwareVersion_args DeepCopy()
        {
          var tmp2254 = new softwareVersion_args();
          if(__isset.c)
          {
            tmp2254.C = this.C;
          }
          tmp2254.__isset.c = this.__isset.c;
          return tmp2254;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2255 = new TStruct("softwareVersion_args");
            await oprot.WriteStructBeginAsync(tmp2255, cancellationToken);
            var tmp2256 = new TField();
            if(__isset.c)
            {
              tmp2256.Name = "c";
              tmp2256.Type = TType.I64;
              tmp2256.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2256, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2257 = new StringBuilder("softwareVersion_args(");
          int tmp2258 = 0;
          if(__isset.c)
          {
            if(0 < tmp2258++) { tmp2257.Append(", "); }
            tmp2257.Append("C: ");
            C.ToString(tmp2257);
          }
          tmp2257.Append(')');
          return tmp2257.ToString();
        }
      }


      public partial class softwareVersion_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public softwareVersion_result()
        {
        }

        public softwareVersion_result DeepCopy()
        {
          var tmp2259 = new softwareVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp2259.Success = this.Success;
          }
          tmp2259.__isset.success = this.__isset.success;
          return tmp2259;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2260 = new TStruct("softwareVersion_result");
            await oprot.WriteStructBeginAsync(tmp2260, cancellationToken);
            var tmp2261 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2261.Name = "Success";
                tmp2261.Type = TType.String;
                tmp2261.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2261, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2262 = new StringBuilder("softwareVersion_result(");
          int tmp2263 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2263++) { tmp2262.Append(", "); }
            tmp2262.Append("Success: ");
            Success.ToString(tmp2262);
          }
          tmp2262.Append(')');
          return tmp2262.ToString();
        }
      }


      public partial class monitoring_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public monitoring_args()
        {
        }

        public monitoring_args DeepCopy()
        {
          var tmp2264 = new monitoring_args();
          if(__isset.c)
          {
            tmp2264.C = this.C;
          }
          tmp2264.__isset.c = this.__isset.c;
          return tmp2264;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2265 = new TStruct("monitoring_args");
            await oprot.WriteStructBeginAsync(tmp2265, cancellationToken);
            var tmp2266 = new TField();
            if(__isset.c)
            {
              tmp2266.Name = "c";
              tmp2266.Type = TType.I64;
              tmp2266.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2266, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2267 = new StringBuilder("monitoring_args(");
          int tmp2268 = 0;
          if(__isset.c)
          {
            if(0 < tmp2268++) { tmp2267.Append(", "); }
            tmp2267.Append("C: ");
            C.ToString(tmp2267);
          }
          tmp2267.Append(')');
          return tmp2267.ToString();
        }
      }


      public partial class monitoring_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public monitoring_result()
        {
        }

        public monitoring_result DeepCopy()
        {
          var tmp2269 = new monitoring_result();
          if(__isset.success)
          {
            tmp2269.Success = this.Success;
          }
          tmp2269.__isset.success = this.__isset.success;
          return tmp2269;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2270 = new TStruct("monitoring_result");
            await oprot.WriteStructBeginAsync(tmp2270, cancellationToken);
            var tmp2271 = new TField();

            if(this.__isset.success)
            {
              tmp2271.Name = "Success";
              tmp2271.Type = TType.Bool;
              tmp2271.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2271, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2272 = new StringBuilder("monitoring_result(");
          int tmp2273 = 0;
          if(__isset.success)
          {
            if(0 < tmp2273++) { tmp2272.Append(", "); }
            tmp2272.Append("Success: ");
            Success.ToString(tmp2272);
          }
          tmp2272.Append(')');
          return tmp2272.ToString();
        }
      }


      public partial class haveExclusiveControl_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public haveExclusiveControl_args()
        {
        }

        public haveExclusiveControl_args DeepCopy()
        {
          var tmp2274 = new haveExclusiveControl_args();
          if(__isset.c)
          {
            tmp2274.C = this.C;
          }
          tmp2274.__isset.c = this.__isset.c;
          return tmp2274;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2275 = new TStruct("haveExclusiveControl_args");
            await oprot.WriteStructBeginAsync(tmp2275, cancellationToken);
            var tmp2276 = new TField();
            if(__isset.c)
            {
              tmp2276.Name = "c";
              tmp2276.Type = TType.I64;
              tmp2276.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2276, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2277 = new StringBuilder("haveExclusiveControl_args(");
          int tmp2278 = 0;
          if(__isset.c)
          {
            if(0 < tmp2278++) { tmp2277.Append(", "); }
            tmp2277.Append("C: ");
            C.ToString(tmp2277);
          }
          tmp2277.Append(')');
          return tmp2277.ToString();
        }
      }


      public partial class haveExclusiveControl_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public haveExclusiveControl_result()
        {
        }

        public haveExclusiveControl_result DeepCopy()
        {
          var tmp2279 = new haveExclusiveControl_result();
          if(__isset.success)
          {
            tmp2279.Success = this.Success;
          }
          tmp2279.__isset.success = this.__isset.success;
          return tmp2279;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2280 = new TStruct("haveExclusiveControl_result");
            await oprot.WriteStructBeginAsync(tmp2280, cancellationToken);
            var tmp2281 = new TField();

            if(this.__isset.success)
            {
              tmp2281.Name = "Success";
              tmp2281.Type = TType.Bool;
              tmp2281.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2281, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2282 = new StringBuilder("haveExclusiveControl_result(");
          int tmp2283 = 0;
          if(__isset.success)
          {
            if(0 < tmp2283++) { tmp2282.Append(", "); }
            tmp2282.Append("Success: ");
            Success.ToString(tmp2282);
          }
          tmp2282.Append(')');
          return tmp2282.ToString();
        }
      }


      public partial class operationMode_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public operationMode_args()
        {
        }

        public operationMode_args DeepCopy()
        {
          var tmp2284 = new operationMode_args();
          if(__isset.c)
          {
            tmp2284.C = this.C;
          }
          tmp2284.__isset.c = this.__isset.c;
          return tmp2284;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2285 = new TStruct("operationMode_args");
            await oprot.WriteStructBeginAsync(tmp2285, cancellationToken);
            var tmp2286 = new TField();
            if(__isset.c)
            {
              tmp2286.Name = "c";
              tmp2286.Type = TType.I64;
              tmp2286.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2286, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2287 = new StringBuilder("operationMode_args(");
          int tmp2288 = 0;
          if(__isset.c)
          {
            if(0 < tmp2288++) { tmp2287.Append(", "); }
            tmp2287.Append("C: ");
            C.ToString(tmp2287);
          }
          tmp2287.Append(')');
          return tmp2287.ToString();
        }
      }


      public partial class operationMode_result : TBase
      {
        private global::Yaskawa.Ext.API.OperationMode _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OperationMode"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OperationMode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public operationMode_result()
        {
        }

        public operationMode_result DeepCopy()
        {
          var tmp2289 = new operationMode_result();
          if(__isset.success)
          {
            tmp2289.Success = this.Success;
          }
          tmp2289.__isset.success = this.__isset.success;
          return tmp2289;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.OperationMode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2290 = new TStruct("operationMode_result");
            await oprot.WriteStructBeginAsync(tmp2290, cancellationToken);
            var tmp2291 = new TField();

            if(this.__isset.success)
            {
              tmp2291.Name = "Success";
              tmp2291.Type = TType.I32;
              tmp2291.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2291, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2292 = new StringBuilder("operationMode_result(");
          int tmp2293 = 0;
          if(__isset.success)
          {
            if(0 < tmp2293++) { tmp2292.Append(", "); }
            tmp2292.Append("Success: ");
            Success.ToString(tmp2292);
          }
          tmp2292.Append(')');
          return tmp2292.ToString();
        }
      }


      public partial class servoState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public servoState_args()
        {
        }

        public servoState_args DeepCopy()
        {
          var tmp2294 = new servoState_args();
          if(__isset.c)
          {
            tmp2294.C = this.C;
          }
          tmp2294.__isset.c = this.__isset.c;
          return tmp2294;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2295 = new TStruct("servoState_args");
            await oprot.WriteStructBeginAsync(tmp2295, cancellationToken);
            var tmp2296 = new TField();
            if(__isset.c)
            {
              tmp2296.Name = "c";
              tmp2296.Type = TType.I64;
              tmp2296.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2296, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2297 = new StringBuilder("servoState_args(");
          int tmp2298 = 0;
          if(__isset.c)
          {
            if(0 < tmp2298++) { tmp2297.Append(", "); }
            tmp2297.Append("C: ");
            C.ToString(tmp2297);
          }
          tmp2297.Append(')');
          return tmp2297.ToString();
        }
      }


      public partial class servoState_result : TBase
      {
        private global::Yaskawa.Ext.API.ServoState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.ServoState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.ServoState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public servoState_result()
        {
        }

        public servoState_result DeepCopy()
        {
          var tmp2299 = new servoState_result();
          if(__isset.success)
          {
            tmp2299.Success = this.Success;
          }
          tmp2299.__isset.success = this.__isset.success;
          return tmp2299;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.ServoState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2300 = new TStruct("servoState_result");
            await oprot.WriteStructBeginAsync(tmp2300, cancellationToken);
            var tmp2301 = new TField();

            if(this.__isset.success)
            {
              tmp2301.Name = "Success";
              tmp2301.Type = TType.I32;
              tmp2301.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2301, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2302 = new StringBuilder("servoState_result(");
          int tmp2303 = 0;
          if(__isset.success)
          {
            if(0 < tmp2303++) { tmp2302.Append(", "); }
            tmp2302.Append("Success: ");
            Success.ToString(tmp2302);
          }
          tmp2302.Append(')');
          return tmp2302.ToString();
        }
      }


      public partial class playbackState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackState_args()
        {
        }

        public playbackState_args DeepCopy()
        {
          var tmp2304 = new playbackState_args();
          if(__isset.c)
          {
            tmp2304.C = this.C;
          }
          tmp2304.__isset.c = this.__isset.c;
          return tmp2304;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2305 = new TStruct("playbackState_args");
            await oprot.WriteStructBeginAsync(tmp2305, cancellationToken);
            var tmp2306 = new TField();
            if(__isset.c)
            {
              tmp2306.Name = "c";
              tmp2306.Type = TType.I64;
              tmp2306.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2306, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2307 = new StringBuilder("playbackState_args(");
          int tmp2308 = 0;
          if(__isset.c)
          {
            if(0 < tmp2308++) { tmp2307.Append(", "); }
            tmp2307.Append("C: ");
            C.ToString(tmp2307);
          }
          tmp2307.Append(')');
          return tmp2307.ToString();
        }
      }


      public partial class playbackState_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackState_result()
        {
        }

        public playbackState_result DeepCopy()
        {
          var tmp2309 = new playbackState_result();
          if(__isset.success)
          {
            tmp2309.Success = this.Success;
          }
          tmp2309.__isset.success = this.__isset.success;
          return tmp2309;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2310 = new TStruct("playbackState_result");
            await oprot.WriteStructBeginAsync(tmp2310, cancellationToken);
            var tmp2311 = new TField();

            if(this.__isset.success)
            {
              tmp2311.Name = "Success";
              tmp2311.Type = TType.I32;
              tmp2311.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2311, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2312 = new StringBuilder("playbackState_result(");
          int tmp2313 = 0;
          if(__isset.success)
          {
            if(0 < tmp2313++) { tmp2312.Append(", "); }
            tmp2312.Append("Success: ");
            Success.ToString(tmp2312);
          }
          tmp2312.Append(')');
          return tmp2312.ToString();
        }
      }


      public partial class run_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public run_args()
        {
        }

        public run_args DeepCopy()
        {
          var tmp2314 = new run_args();
          if(__isset.c)
          {
            tmp2314.C = this.C;
          }
          tmp2314.__isset.c = this.__isset.c;
          return tmp2314;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2315 = new TStruct("run_args");
            await oprot.WriteStructBeginAsync(tmp2315, cancellationToken);
            var tmp2316 = new TField();
            if(__isset.c)
            {
              tmp2316.Name = "c";
              tmp2316.Type = TType.I64;
              tmp2316.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2316, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2317 = new StringBuilder("run_args(");
          int tmp2318 = 0;
          if(__isset.c)
          {
            if(0 < tmp2318++) { tmp2317.Append(", "); }
            tmp2317.Append("C: ");
            C.ToString(tmp2317);
          }
          tmp2317.Append(')');
          return tmp2317.ToString();
        }
      }


      public partial class run_result : TBase
      {

        public run_result()
        {
        }

        public run_result DeepCopy()
        {
          var tmp2319 = new run_result();
          return tmp2319;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2320 = new TStruct("run_result");
            await oprot.WriteStructBeginAsync(tmp2320, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2321 = new StringBuilder("run_result(");
          tmp2321.Append(')');
          return tmp2321.ToString();
        }
      }


      public partial class pause_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public pause_args()
        {
        }

        public pause_args DeepCopy()
        {
          var tmp2323 = new pause_args();
          if(__isset.c)
          {
            tmp2323.C = this.C;
          }
          tmp2323.__isset.c = this.__isset.c;
          return tmp2323;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2324 = new TStruct("pause_args");
            await oprot.WriteStructBeginAsync(tmp2324, cancellationToken);
            var tmp2325 = new TField();
            if(__isset.c)
            {
              tmp2325.Name = "c";
              tmp2325.Type = TType.I64;
              tmp2325.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2325, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2326 = new StringBuilder("pause_args(");
          int tmp2327 = 0;
          if(__isset.c)
          {
            if(0 < tmp2327++) { tmp2326.Append(", "); }
            tmp2326.Append("C: ");
            C.ToString(tmp2326);
          }
          tmp2326.Append(')');
          return tmp2326.ToString();
        }
      }


      public partial class pause_result : TBase
      {

        public pause_result()
        {
        }

        public pause_result DeepCopy()
        {
          var tmp2328 = new pause_result();
          return tmp2328;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2329 = new TStruct("pause_result");
            await oprot.WriteStructBeginAsync(tmp2329, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2330 = new StringBuilder("pause_result(");
          tmp2330.Append(')');
          return tmp2330.ToString();
        }
      }


      public partial class resume_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public resume_args()
        {
        }

        public resume_args DeepCopy()
        {
          var tmp2332 = new resume_args();
          if(__isset.c)
          {
            tmp2332.C = this.C;
          }
          tmp2332.__isset.c = this.__isset.c;
          return tmp2332;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2333 = new TStruct("resume_args");
            await oprot.WriteStructBeginAsync(tmp2333, cancellationToken);
            var tmp2334 = new TField();
            if(__isset.c)
            {
              tmp2334.Name = "c";
              tmp2334.Type = TType.I64;
              tmp2334.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2334, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2335 = new StringBuilder("resume_args(");
          int tmp2336 = 0;
          if(__isset.c)
          {
            if(0 < tmp2336++) { tmp2335.Append(", "); }
            tmp2335.Append("C: ");
            C.ToString(tmp2335);
          }
          tmp2335.Append(')');
          return tmp2335.ToString();
        }
      }


      public partial class resume_result : TBase
      {

        public resume_result()
        {
        }

        public resume_result DeepCopy()
        {
          var tmp2337 = new resume_result();
          return tmp2337;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2338 = new TStruct("resume_result");
            await oprot.WriteStructBeginAsync(tmp2338, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2339 = new StringBuilder("resume_result(");
          tmp2339.Append(')');
          return tmp2339.ToString();
        }
      }


      public partial class stop_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public stop_args()
        {
        }

        public stop_args DeepCopy()
        {
          var tmp2341 = new stop_args();
          if(__isset.c)
          {
            tmp2341.C = this.C;
          }
          tmp2341.__isset.c = this.__isset.c;
          return tmp2341;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2342 = new TStruct("stop_args");
            await oprot.WriteStructBeginAsync(tmp2342, cancellationToken);
            var tmp2343 = new TField();
            if(__isset.c)
            {
              tmp2343.Name = "c";
              tmp2343.Type = TType.I64;
              tmp2343.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2343, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2344 = new StringBuilder("stop_args(");
          int tmp2345 = 0;
          if(__isset.c)
          {
            if(0 < tmp2345++) { tmp2344.Append(", "); }
            tmp2344.Append("C: ");
            C.ToString(tmp2344);
          }
          tmp2344.Append(')');
          return tmp2344.ToString();
        }
      }


      public partial class stop_result : TBase
      {

        public stop_result()
        {
        }

        public stop_result DeepCopy()
        {
          var tmp2346 = new stop_result();
          return tmp2346;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2347 = new TStruct("stop_result");
            await oprot.WriteStructBeginAsync(tmp2347, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2348 = new StringBuilder("stop_result(");
          tmp2348.Append(')');
          return tmp2348.ToString();
        }
      }


      public partial class currentJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentJob_args()
        {
        }

        public currentJob_args DeepCopy()
        {
          var tmp2350 = new currentJob_args();
          if(__isset.c)
          {
            tmp2350.C = this.C;
          }
          tmp2350.__isset.c = this.__isset.c;
          return tmp2350;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2351 = new TStruct("currentJob_args");
            await oprot.WriteStructBeginAsync(tmp2351, cancellationToken);
            var tmp2352 = new TField();
            if(__isset.c)
            {
              tmp2352.Name = "c";
              tmp2352.Type = TType.I64;
              tmp2352.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2352, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2353 = new StringBuilder("currentJob_args(");
          int tmp2354 = 0;
          if(__isset.c)
          {
            if(0 < tmp2354++) { tmp2353.Append(", "); }
            tmp2353.Append("C: ");
            C.ToString(tmp2353);
          }
          tmp2353.Append(')');
          return tmp2353.ToString();
        }
      }


      public partial class currentJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJob_result()
        {
        }

        public currentJob_result DeepCopy()
        {
          var tmp2355 = new currentJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2355.Success = this.Success;
          }
          tmp2355.__isset.success = this.__isset.success;
          return tmp2355;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2356 = new TStruct("currentJob_result");
            await oprot.WriteStructBeginAsync(tmp2356, cancellationToken);
            var tmp2357 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2357.Name = "Success";
                tmp2357.Type = TType.String;
                tmp2357.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2357, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2358 = new StringBuilder("currentJob_result(");
          int tmp2359 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2359++) { tmp2358.Append(", "); }
            tmp2358.Append("Success: ");
            Success.ToString(tmp2358);
          }
          tmp2358.Append(')');
          return tmp2358.ToString();
        }
      }


      public partial class setCurrentJob_args : TBase
      {
        private long _c;
        private string _name;
        private int _line;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public int Line
        {
          get
          {
            return _line;
          }
          set
          {
            __isset.line = true;
            this._line = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool line;
        }

        public setCurrentJob_args()
        {
        }

        public setCurrentJob_args DeepCopy()
        {
          var tmp2360 = new setCurrentJob_args();
          if(__isset.c)
          {
            tmp2360.C = this.C;
          }
          tmp2360.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2360.Name = this.Name;
          }
          tmp2360.__isset.name = this.__isset.name;
          if(__isset.line)
          {
            tmp2360.Line = this.Line;
          }
          tmp2360.__isset.line = this.__isset.line;
          return tmp2360;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Line = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2361 = new TStruct("setCurrentJob_args");
            await oprot.WriteStructBeginAsync(tmp2361, cancellationToken);
            var tmp2362 = new TField();
            if(__isset.c)
            {
              tmp2362.Name = "c";
              tmp2362.Type = TType.I64;
              tmp2362.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2362, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2362.Name = "name";
              tmp2362.Type = TType.String;
              tmp2362.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2362, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.line)
            {
              tmp2362.Name = "line";
              tmp2362.Type = TType.I32;
              tmp2362.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2362, cancellationToken);
              await oprot.WriteI32Async(Line, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.line == other.__isset.line) && ((!__isset.line) || (global::System.Object.Equals(Line, other.Line))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.line)
            {
              hashcode = (hashcode * 397) + Line.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2363 = new StringBuilder("setCurrentJob_args(");
          int tmp2364 = 0;
          if(__isset.c)
          {
            if(0 < tmp2364++) { tmp2363.Append(", "); }
            tmp2363.Append("C: ");
            C.ToString(tmp2363);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2364++) { tmp2363.Append(", "); }
            tmp2363.Append("Name: ");
            Name.ToString(tmp2363);
          }
          if(__isset.line)
          {
            if(0 < tmp2364++) { tmp2363.Append(", "); }
            tmp2363.Append("Line: ");
            Line.ToString(tmp2363);
          }
          tmp2363.Append(')');
          return tmp2363.ToString();
        }
      }


      public partial class setCurrentJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setCurrentJob_result()
        {
        }

        public setCurrentJob_result DeepCopy()
        {
          var tmp2365 = new setCurrentJob_result();
          if((E != null) && __isset.e)
          {
            tmp2365.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2365.__isset.e = this.__isset.e;
          return tmp2365;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2366 = new TStruct("setCurrentJob_result");
            await oprot.WriteStructBeginAsync(tmp2366, cancellationToken);
            var tmp2367 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2367.Name = "E";
                tmp2367.Type = TType.Struct;
                tmp2367.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2367, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2368 = new StringBuilder("setCurrentJob_result(");
          int tmp2369 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2369++) { tmp2368.Append(", "); }
            tmp2368.Append("E: ");
            E.ToString(tmp2368);
          }
          tmp2368.Append(')');
          return tmp2368.ToString();
        }
      }


      public partial class defaultJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public defaultJob_args()
        {
        }

        public defaultJob_args DeepCopy()
        {
          var tmp2370 = new defaultJob_args();
          if(__isset.c)
          {
            tmp2370.C = this.C;
          }
          tmp2370.__isset.c = this.__isset.c;
          return tmp2370;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2371 = new TStruct("defaultJob_args");
            await oprot.WriteStructBeginAsync(tmp2371, cancellationToken);
            var tmp2372 = new TField();
            if(__isset.c)
            {
              tmp2372.Name = "c";
              tmp2372.Type = TType.I64;
              tmp2372.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2372, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2373 = new StringBuilder("defaultJob_args(");
          int tmp2374 = 0;
          if(__isset.c)
          {
            if(0 < tmp2374++) { tmp2373.Append(", "); }
            tmp2373.Append("C: ");
            C.ToString(tmp2373);
          }
          tmp2373.Append(')');
          return tmp2373.ToString();
        }
      }


      public partial class defaultJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public defaultJob_result()
        {
        }

        public defaultJob_result DeepCopy()
        {
          var tmp2375 = new defaultJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2375.Success = this.Success;
          }
          tmp2375.__isset.success = this.__isset.success;
          return tmp2375;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2376 = new TStruct("defaultJob_result");
            await oprot.WriteStructBeginAsync(tmp2376, cancellationToken);
            var tmp2377 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2377.Name = "Success";
                tmp2377.Type = TType.String;
                tmp2377.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2377, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2378 = new StringBuilder("defaultJob_result(");
          int tmp2379 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2379++) { tmp2378.Append(", "); }
            tmp2378.Append("Success: ");
            Success.ToString(tmp2378);
          }
          tmp2378.Append(')');
          return tmp2378.ToString();
        }
      }


      public partial class jobExists_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobExists_args()
        {
        }

        public jobExists_args DeepCopy()
        {
          var tmp2380 = new jobExists_args();
          if(__isset.c)
          {
            tmp2380.C = this.C;
          }
          tmp2380.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2380.Name = this.Name;
          }
          tmp2380.__isset.name = this.__isset.name;
          return tmp2380;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2381 = new TStruct("jobExists_args");
            await oprot.WriteStructBeginAsync(tmp2381, cancellationToken);
            var tmp2382 = new TField();
            if(__isset.c)
            {
              tmp2382.Name = "c";
              tmp2382.Type = TType.I64;
              tmp2382.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2382, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2382.Name = "name";
              tmp2382.Type = TType.String;
              tmp2382.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2382, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2383 = new StringBuilder("jobExists_args(");
          int tmp2384 = 0;
          if(__isset.c)
          {
            if(0 < tmp2384++) { tmp2383.Append(", "); }
            tmp2383.Append("C: ");
            C.ToString(tmp2383);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2384++) { tmp2383.Append(", "); }
            tmp2383.Append("Name: ");
            Name.ToString(tmp2383);
          }
          tmp2383.Append(')');
          return tmp2383.ToString();
        }
      }


      public partial class jobExists_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobExists_result()
        {
        }

        public jobExists_result DeepCopy()
        {
          var tmp2385 = new jobExists_result();
          if(__isset.success)
          {
            tmp2385.Success = this.Success;
          }
          tmp2385.__isset.success = this.__isset.success;
          return tmp2385;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2386 = new TStruct("jobExists_result");
            await oprot.WriteStructBeginAsync(tmp2386, cancellationToken);
            var tmp2387 = new TField();

            if(this.__isset.success)
            {
              tmp2387.Name = "Success";
              tmp2387.Type = TType.Bool;
              tmp2387.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2387, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2388 = new StringBuilder("jobExists_result(");
          int tmp2389 = 0;
          if(__isset.success)
          {
            if(0 < tmp2389++) { tmp2388.Append(", "); }
            tmp2388.Append("Success: ");
            Success.ToString(tmp2388);
          }
          tmp2388.Append(')');
          return tmp2388.ToString();
        }
      }


      public partial class jobDetails_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobDetails_args()
        {
        }

        public jobDetails_args DeepCopy()
        {
          var tmp2390 = new jobDetails_args();
          if(__isset.c)
          {
            tmp2390.C = this.C;
          }
          tmp2390.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2390.Name = this.Name;
          }
          tmp2390.__isset.name = this.__isset.name;
          return tmp2390;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2391 = new TStruct("jobDetails_args");
            await oprot.WriteStructBeginAsync(tmp2391, cancellationToken);
            var tmp2392 = new TField();
            if(__isset.c)
            {
              tmp2392.Name = "c";
              tmp2392.Type = TType.I64;
              tmp2392.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2392, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2392.Name = "name";
              tmp2392.Type = TType.String;
              tmp2392.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2392, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2393 = new StringBuilder("jobDetails_args(");
          int tmp2394 = 0;
          if(__isset.c)
          {
            if(0 < tmp2394++) { tmp2393.Append(", "); }
            tmp2393.Append("C: ");
            C.ToString(tmp2393);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2394++) { tmp2393.Append(", "); }
            tmp2393.Append("Name: ");
            Name.ToString(tmp2393);
          }
          tmp2393.Append(')');
          return tmp2393.ToString();
        }
      }


      public partial class jobDetails_result : TBase
      {
        private global::Yaskawa.Ext.API.RobotJobInfo _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.RobotJobInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobDetails_result()
        {
        }

        public jobDetails_result DeepCopy()
        {
          var tmp2395 = new jobDetails_result();
          if((Success != null) && __isset.success)
          {
            tmp2395.Success = (global::Yaskawa.Ext.API.RobotJobInfo)this.Success.DeepCopy();
          }
          tmp2395.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2395.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2395.__isset.e = this.__isset.e;
          return tmp2395;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.RobotJobInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2396 = new TStruct("jobDetails_result");
            await oprot.WriteStructBeginAsync(tmp2396, cancellationToken);
            var tmp2397 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2397.Name = "Success";
                tmp2397.Type = TType.Struct;
                tmp2397.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2397, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2397.Name = "E";
                tmp2397.Type = TType.Struct;
                tmp2397.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2397, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2398 = new StringBuilder("jobDetails_result(");
          int tmp2399 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2399++) { tmp2398.Append(", "); }
            tmp2398.Append("Success: ");
            Success.ToString(tmp2398);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2399++) { tmp2398.Append(", "); }
            tmp2398.Append("E: ");
            E.ToString(tmp2398);
          }
          tmp2398.Append(')');
          return tmp2398.ToString();
        }
      }


      public partial class jobs_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public jobs_args()
        {
        }

        public jobs_args DeepCopy()
        {
          var tmp2400 = new jobs_args();
          if(__isset.c)
          {
            tmp2400.C = this.C;
          }
          tmp2400.__isset.c = this.__isset.c;
          return tmp2400;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2401 = new TStruct("jobs_args");
            await oprot.WriteStructBeginAsync(tmp2401, cancellationToken);
            var tmp2402 = new TField();
            if(__isset.c)
            {
              tmp2402.Name = "c";
              tmp2402.Type = TType.I64;
              tmp2402.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2402, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2403 = new StringBuilder("jobs_args(");
          int tmp2404 = 0;
          if(__isset.c)
          {
            if(0 < tmp2404++) { tmp2403.Append(", "); }
            tmp2403.Append("C: ");
            C.ToString(tmp2403);
          }
          tmp2403.Append(')');
          return tmp2403.ToString();
        }
      }


      public partial class jobs_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobs_result()
        {
        }

        public jobs_result DeepCopy()
        {
          var tmp2405 = new jobs_result();
          if((Success != null) && __isset.success)
          {
            tmp2405.Success = this.Success.DeepCopy();
          }
          tmp2405.__isset.success = this.__isset.success;
          return tmp2405;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2406 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list2406.Count);
                      for(int _i2407 = 0; _i2407 < _list2406.Count; ++_i2407)
                      {
                        string _elem2408;
                        _elem2408 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem2408);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2409 = new TStruct("jobs_result");
            await oprot.WriteStructBeginAsync(tmp2409, cancellationToken);
            var tmp2410 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2410.Name = "Success";
                tmp2410.Type = TType.List;
                tmp2410.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2410, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter2411 in Success)
                {
                  await oprot.WriteStringAsync(_iter2411, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2412 = new StringBuilder("jobs_result(");
          int tmp2413 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2413++) { tmp2412.Append(", "); }
            tmp2412.Append("Success: ");
            Success.ToString(tmp2412);
          }
          tmp2412.Append(')');
          return tmp2412.ToString();
        }
      }


      public partial class jobsMatching_args : TBase
      {
        private long _c;
        private string _nameRegex;
        private string _tag;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string NameRegex
        {
          get
          {
            return _nameRegex;
          }
          set
          {
            __isset.nameRegex = true;
            this._nameRegex = value;
          }
        }

        public string Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool nameRegex;
          public bool tag;
        }

        public jobsMatching_args()
        {
        }

        public jobsMatching_args DeepCopy()
        {
          var tmp2414 = new jobsMatching_args();
          if(__isset.c)
          {
            tmp2414.C = this.C;
          }
          tmp2414.__isset.c = this.__isset.c;
          if((NameRegex != null) && __isset.nameRegex)
          {
            tmp2414.NameRegex = this.NameRegex;
          }
          tmp2414.__isset.nameRegex = this.__isset.nameRegex;
          if((Tag != null) && __isset.tag)
          {
            tmp2414.Tag = this.Tag;
          }
          tmp2414.__isset.tag = this.__isset.tag;
          return tmp2414;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NameRegex = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Tag = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2415 = new TStruct("jobsMatching_args");
            await oprot.WriteStructBeginAsync(tmp2415, cancellationToken);
            var tmp2416 = new TField();
            if(__isset.c)
            {
              tmp2416.Name = "c";
              tmp2416.Type = TType.I64;
              tmp2416.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2416, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              tmp2416.Name = "nameRegex";
              tmp2416.Type = TType.String;
              tmp2416.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2416, cancellationToken);
              await oprot.WriteStringAsync(NameRegex, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp2416.Name = "tag";
              tmp2416.Type = TType.String;
              tmp2416.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2416, cancellationToken);
              await oprot.WriteStringAsync(Tag, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.nameRegex == other.__isset.nameRegex) && ((!__isset.nameRegex) || (global::System.Object.Equals(NameRegex, other.NameRegex))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              hashcode = (hashcode * 397) + NameRegex.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2417 = new StringBuilder("jobsMatching_args(");
          int tmp2418 = 0;
          if(__isset.c)
          {
            if(0 < tmp2418++) { tmp2417.Append(", "); }
            tmp2417.Append("C: ");
            C.ToString(tmp2417);
          }
          if((NameRegex != null) && __isset.nameRegex)
          {
            if(0 < tmp2418++) { tmp2417.Append(", "); }
            tmp2417.Append("NameRegex: ");
            NameRegex.ToString(tmp2417);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp2418++) { tmp2417.Append(", "); }
            tmp2417.Append("Tag: ");
            Tag.ToString(tmp2417);
          }
          tmp2417.Append(')');
          return tmp2417.ToString();
        }
      }


      public partial class jobsMatching_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobsMatching_result()
        {
        }

        public jobsMatching_result DeepCopy()
        {
          var tmp2419 = new jobsMatching_result();
          if((Success != null) && __isset.success)
          {
            tmp2419.Success = this.Success.DeepCopy();
          }
          tmp2419.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2419.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2419.__isset.e = this.__isset.e;
          return tmp2419;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2420 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list2420.Count);
                      for(int _i2421 = 0; _i2421 < _list2420.Count; ++_i2421)
                      {
                        string _elem2422;
                        _elem2422 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem2422);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2423 = new TStruct("jobsMatching_result");
            await oprot.WriteStructBeginAsync(tmp2423, cancellationToken);
            var tmp2424 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2424.Name = "Success";
                tmp2424.Type = TType.List;
                tmp2424.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2424, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter2425 in Success)
                {
                  await oprot.WriteStringAsync(_iter2425, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2424.Name = "E";
                tmp2424.Type = TType.Struct;
                tmp2424.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2424, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2426 = new StringBuilder("jobsMatching_result(");
          int tmp2427 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2427++) { tmp2426.Append(", "); }
            tmp2426.Append("Success: ");
            Success.ToString(tmp2426);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2427++) { tmp2426.Append(", "); }
            tmp2426.Append("E: ");
            E.ToString(tmp2426);
          }
          tmp2426.Append(')');
          return tmp2426.ToString();
        }
      }


      public partial class duplicateJob_args : TBase
      {
        private long _c;
        private string _existingName;
        private string _newName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ExistingName
        {
          get
          {
            return _existingName;
          }
          set
          {
            __isset.existingName = true;
            this._existingName = value;
          }
        }

        public string NewName
        {
          get
          {
            return _newName;
          }
          set
          {
            __isset.newName = true;
            this._newName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool existingName;
          public bool newName;
        }

        public duplicateJob_args()
        {
        }

        public duplicateJob_args DeepCopy()
        {
          var tmp2428 = new duplicateJob_args();
          if(__isset.c)
          {
            tmp2428.C = this.C;
          }
          tmp2428.__isset.c = this.__isset.c;
          if((ExistingName != null) && __isset.existingName)
          {
            tmp2428.ExistingName = this.ExistingName;
          }
          tmp2428.__isset.existingName = this.__isset.existingName;
          if((NewName != null) && __isset.newName)
          {
            tmp2428.NewName = this.NewName;
          }
          tmp2428.__isset.newName = this.__isset.newName;
          return tmp2428;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ExistingName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NewName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2429 = new TStruct("duplicateJob_args");
            await oprot.WriteStructBeginAsync(tmp2429, cancellationToken);
            var tmp2430 = new TField();
            if(__isset.c)
            {
              tmp2430.Name = "c";
              tmp2430.Type = TType.I64;
              tmp2430.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2430, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ExistingName != null) && __isset.existingName)
            {
              tmp2430.Name = "existingName";
              tmp2430.Type = TType.String;
              tmp2430.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2430, cancellationToken);
              await oprot.WriteStringAsync(ExistingName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewName != null) && __isset.newName)
            {
              tmp2430.Name = "newName";
              tmp2430.Type = TType.String;
              tmp2430.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2430, cancellationToken);
              await oprot.WriteStringAsync(NewName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.existingName == other.__isset.existingName) && ((!__isset.existingName) || (global::System.Object.Equals(ExistingName, other.ExistingName))))
            && ((__isset.newName == other.__isset.newName) && ((!__isset.newName) || (global::System.Object.Equals(NewName, other.NewName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ExistingName != null) && __isset.existingName)
            {
              hashcode = (hashcode * 397) + ExistingName.GetHashCode();
            }
            if((NewName != null) && __isset.newName)
            {
              hashcode = (hashcode * 397) + NewName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2431 = new StringBuilder("duplicateJob_args(");
          int tmp2432 = 0;
          if(__isset.c)
          {
            if(0 < tmp2432++) { tmp2431.Append(", "); }
            tmp2431.Append("C: ");
            C.ToString(tmp2431);
          }
          if((ExistingName != null) && __isset.existingName)
          {
            if(0 < tmp2432++) { tmp2431.Append(", "); }
            tmp2431.Append("ExistingName: ");
            ExistingName.ToString(tmp2431);
          }
          if((NewName != null) && __isset.newName)
          {
            if(0 < tmp2432++) { tmp2431.Append(", "); }
            tmp2431.Append("NewName: ");
            NewName.ToString(tmp2431);
          }
          tmp2431.Append(')');
          return tmp2431.ToString();
        }
      }


      public partial class duplicateJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public duplicateJob_result()
        {
        }

        public duplicateJob_result DeepCopy()
        {
          var tmp2433 = new duplicateJob_result();
          if((E != null) && __isset.e)
          {
            tmp2433.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2433.__isset.e = this.__isset.e;
          return tmp2433;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2434 = new TStruct("duplicateJob_result");
            await oprot.WriteStructBeginAsync(tmp2434, cancellationToken);
            var tmp2435 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2435.Name = "E";
                tmp2435.Type = TType.Struct;
                tmp2435.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2435, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2436 = new StringBuilder("duplicateJob_result(");
          int tmp2437 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2437++) { tmp2436.Append(", "); }
            tmp2436.Append("E: ");
            E.ToString(tmp2436);
          }
          tmp2436.Append(')');
          return tmp2436.ToString();
        }
      }


      public partial class deleteJob_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public deleteJob_args()
        {
        }

        public deleteJob_args DeepCopy()
        {
          var tmp2438 = new deleteJob_args();
          if(__isset.c)
          {
            tmp2438.C = this.C;
          }
          tmp2438.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2438.Name = this.Name;
          }
          tmp2438.__isset.name = this.__isset.name;
          return tmp2438;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2439 = new TStruct("deleteJob_args");
            await oprot.WriteStructBeginAsync(tmp2439, cancellationToken);
            var tmp2440 = new TField();
            if(__isset.c)
            {
              tmp2440.Name = "c";
              tmp2440.Type = TType.I64;
              tmp2440.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2440, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2440.Name = "name";
              tmp2440.Type = TType.String;
              tmp2440.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2440, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2441 = new StringBuilder("deleteJob_args(");
          int tmp2442 = 0;
          if(__isset.c)
          {
            if(0 < tmp2442++) { tmp2441.Append(", "); }
            tmp2441.Append("C: ");
            C.ToString(tmp2441);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2442++) { tmp2441.Append(", "); }
            tmp2441.Append("Name: ");
            Name.ToString(tmp2441);
          }
          tmp2441.Append(')');
          return tmp2441.ToString();
        }
      }


      public partial class deleteJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteJob_result()
        {
        }

        public deleteJob_result DeepCopy()
        {
          var tmp2443 = new deleteJob_result();
          if((E != null) && __isset.e)
          {
            tmp2443.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2443.__isset.e = this.__isset.e;
          return tmp2443;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2444 = new TStruct("deleteJob_result");
            await oprot.WriteStructBeginAsync(tmp2444, cancellationToken);
            var tmp2445 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2445.Name = "E";
                tmp2445.Type = TType.Struct;
                tmp2445.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2445, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2446 = new StringBuilder("deleteJob_result(");
          int tmp2447 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2447++) { tmp2446.Append(", "); }
            tmp2446.Append("E: ");
            E.ToString(tmp2446);
          }
          tmp2446.Append(')');
          return tmp2446.ToString();
        }
      }


      public partial class jobSource_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobSource_args()
        {
        }

        public jobSource_args DeepCopy()
        {
          var tmp2448 = new jobSource_args();
          if(__isset.c)
          {
            tmp2448.C = this.C;
          }
          tmp2448.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2448.Name = this.Name;
          }
          tmp2448.__isset.name = this.__isset.name;
          return tmp2448;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2449 = new TStruct("jobSource_args");
            await oprot.WriteStructBeginAsync(tmp2449, cancellationToken);
            var tmp2450 = new TField();
            if(__isset.c)
            {
              tmp2450.Name = "c";
              tmp2450.Type = TType.I64;
              tmp2450.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2450, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2450.Name = "name";
              tmp2450.Type = TType.String;
              tmp2450.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2450, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2451 = new StringBuilder("jobSource_args(");
          int tmp2452 = 0;
          if(__isset.c)
          {
            if(0 < tmp2452++) { tmp2451.Append(", "); }
            tmp2451.Append("C: ");
            C.ToString(tmp2451);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2452++) { tmp2451.Append(", "); }
            tmp2451.Append("Name: ");
            Name.ToString(tmp2451);
          }
          tmp2451.Append(')');
          return tmp2451.ToString();
        }
      }


      public partial class jobSource_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobSource_result()
        {
        }

        public jobSource_result DeepCopy()
        {
          var tmp2453 = new jobSource_result();
          if((Success != null) && __isset.success)
          {
            tmp2453.Success = this.Success;
          }
          tmp2453.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2453.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2453.__isset.e = this.__isset.e;
          return tmp2453;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2454 = new TStruct("jobSource_result");
            await oprot.WriteStructBeginAsync(tmp2454, cancellationToken);
            var tmp2455 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2455.Name = "Success";
                tmp2455.Type = TType.String;
                tmp2455.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2455, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2455.Name = "E";
                tmp2455.Type = TType.Struct;
                tmp2455.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2455, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2456 = new StringBuilder("jobSource_result(");
          int tmp2457 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2457++) { tmp2456.Append(", "); }
            tmp2456.Append("Success: ");
            Success.ToString(tmp2456);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2457++) { tmp2456.Append(", "); }
            tmp2456.Append("E: ");
            E.ToString(tmp2456);
          }
          tmp2456.Append(')');
          return tmp2456.ToString();
        }
      }


      public partial class storeJobSource_args : TBase
      {
        private long _c;
        private string _name;
        private string _programmingLanguage;
        private string _sourceCode;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string ProgrammingLanguage
        {
          get
          {
            return _programmingLanguage;
          }
          set
          {
            __isset.programmingLanguage = true;
            this._programmingLanguage = value;
          }
        }

        public string SourceCode
        {
          get
          {
            return _sourceCode;
          }
          set
          {
            __isset.sourceCode = true;
            this._sourceCode = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool programmingLanguage;
          public bool sourceCode;
        }

        public storeJobSource_args()
        {
        }

        public storeJobSource_args DeepCopy()
        {
          var tmp2458 = new storeJobSource_args();
          if(__isset.c)
          {
            tmp2458.C = this.C;
          }
          tmp2458.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2458.Name = this.Name;
          }
          tmp2458.__isset.name = this.__isset.name;
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            tmp2458.ProgrammingLanguage = this.ProgrammingLanguage;
          }
          tmp2458.__isset.programmingLanguage = this.__isset.programmingLanguage;
          if((SourceCode != null) && __isset.sourceCode)
          {
            tmp2458.SourceCode = this.SourceCode;
          }
          tmp2458.__isset.sourceCode = this.__isset.sourceCode;
          return tmp2458;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ProgrammingLanguage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SourceCode = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2459 = new TStruct("storeJobSource_args");
            await oprot.WriteStructBeginAsync(tmp2459, cancellationToken);
            var tmp2460 = new TField();
            if(__isset.c)
            {
              tmp2460.Name = "c";
              tmp2460.Type = TType.I64;
              tmp2460.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2460, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2460.Name = "name";
              tmp2460.Type = TType.String;
              tmp2460.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2460, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              tmp2460.Name = "programmingLanguage";
              tmp2460.Type = TType.String;
              tmp2460.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2460, cancellationToken);
              await oprot.WriteStringAsync(ProgrammingLanguage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              tmp2460.Name = "sourceCode";
              tmp2460.Type = TType.String;
              tmp2460.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp2460, cancellationToken);
              await oprot.WriteStringAsync(SourceCode, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.programmingLanguage == other.__isset.programmingLanguage) && ((!__isset.programmingLanguage) || (global::System.Object.Equals(ProgrammingLanguage, other.ProgrammingLanguage))))
            && ((__isset.sourceCode == other.__isset.sourceCode) && ((!__isset.sourceCode) || (global::System.Object.Equals(SourceCode, other.SourceCode))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              hashcode = (hashcode * 397) + ProgrammingLanguage.GetHashCode();
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              hashcode = (hashcode * 397) + SourceCode.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2461 = new StringBuilder("storeJobSource_args(");
          int tmp2462 = 0;
          if(__isset.c)
          {
            if(0 < tmp2462++) { tmp2461.Append(", "); }
            tmp2461.Append("C: ");
            C.ToString(tmp2461);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2462++) { tmp2461.Append(", "); }
            tmp2461.Append("Name: ");
            Name.ToString(tmp2461);
          }
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            if(0 < tmp2462++) { tmp2461.Append(", "); }
            tmp2461.Append("ProgrammingLanguage: ");
            ProgrammingLanguage.ToString(tmp2461);
          }
          if((SourceCode != null) && __isset.sourceCode)
          {
            if(0 < tmp2462++) { tmp2461.Append(", "); }
            tmp2461.Append("SourceCode: ");
            SourceCode.ToString(tmp2461);
          }
          tmp2461.Append(')');
          return tmp2461.ToString();
        }
      }


      public partial class storeJobSource_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public storeJobSource_result()
        {
        }

        public storeJobSource_result DeepCopy()
        {
          var tmp2463 = new storeJobSource_result();
          if((E != null) && __isset.e)
          {
            tmp2463.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2463.__isset.e = this.__isset.e;
          return tmp2463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2464 = new TStruct("storeJobSource_result");
            await oprot.WriteStructBeginAsync(tmp2464, cancellationToken);
            var tmp2465 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2465.Name = "E";
                tmp2465.Type = TType.Struct;
                tmp2465.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2465, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2466 = new StringBuilder("storeJobSource_result(");
          int tmp2467 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2467++) { tmp2466.Append(", "); }
            tmp2466.Append("E: ");
            E.ToString(tmp2466);
          }
          tmp2466.Append(')');
          return tmp2466.ToString();
        }
      }


      public partial class tools_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public tools_args()
        {
        }

        public tools_args DeepCopy()
        {
          var tmp2468 = new tools_args();
          if(__isset.c)
          {
            tmp2468.C = this.C;
          }
          tmp2468.__isset.c = this.__isset.c;
          return tmp2468;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2469 = new TStruct("tools_args");
            await oprot.WriteStructBeginAsync(tmp2469, cancellationToken);
            var tmp2470 = new TField();
            if(__isset.c)
            {
              tmp2470.Name = "c";
              tmp2470.Type = TType.I64;
              tmp2470.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2470, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2471 = new StringBuilder("tools_args(");
          int tmp2472 = 0;
          if(__isset.c)
          {
            if(0 < tmp2472++) { tmp2471.Append(", "); }
            tmp2471.Append("C: ");
            C.ToString(tmp2471);
          }
          tmp2471.Append(')');
          return tmp2471.ToString();
        }
      }


      public partial class tools_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tools_result()
        {
        }

        public tools_result DeepCopy()
        {
          var tmp2473 = new tools_result();
          if((Success != null) && __isset.success)
          {
            tmp2473.Success = this.Success.DeepCopy();
          }
          tmp2473.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2473.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2473.__isset.e = this.__isset.e;
          return tmp2473;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map2474 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map2474.Count);
                      for(int _i2475 = 0; _i2475 < _map2474.Count; ++_i2475)
                      {
                        int _key2476;
                        string _val2477;
                        _key2476 = await iprot.ReadI32Async(cancellationToken);
                        _val2477 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key2476] = _val2477;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2478 = new TStruct("tools_result");
            await oprot.WriteStructBeginAsync(tmp2478, cancellationToken);
            var tmp2479 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2479.Name = "Success";
                tmp2479.Type = TType.Map;
                tmp2479.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2479, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter2480 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter2480, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter2480], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2479.Name = "E";
                tmp2479.Type = TType.Struct;
                tmp2479.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2479, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2481 = new StringBuilder("tools_result(");
          int tmp2482 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2482++) { tmp2481.Append(", "); }
            tmp2481.Append("Success: ");
            Success.ToString(tmp2481);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2482++) { tmp2481.Append(", "); }
            tmp2481.Append("E: ");
            E.ToString(tmp2481);
          }
          tmp2481.Append(')');
          return tmp2481.ToString();
        }
      }


      public partial class tool_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public tool_args()
        {
        }

        public tool_args DeepCopy()
        {
          var tmp2483 = new tool_args();
          if(__isset.c)
          {
            tmp2483.C = this.C;
          }
          tmp2483.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2483.Index = this.Index;
          }
          tmp2483.__isset.index = this.__isset.index;
          return tmp2483;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2484 = new TStruct("tool_args");
            await oprot.WriteStructBeginAsync(tmp2484, cancellationToken);
            var tmp2485 = new TField();
            if(__isset.c)
            {
              tmp2485.Name = "c";
              tmp2485.Type = TType.I64;
              tmp2485.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2485, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2485.Name = "index";
              tmp2485.Type = TType.I32;
              tmp2485.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2485, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2486 = new StringBuilder("tool_args(");
          int tmp2487 = 0;
          if(__isset.c)
          {
            if(0 < tmp2487++) { tmp2486.Append(", "); }
            tmp2486.Append("C: ");
            C.ToString(tmp2486);
          }
          if(__isset.index)
          {
            if(0 < tmp2487++) { tmp2486.Append(", "); }
            tmp2486.Append("Index: ");
            Index.ToString(tmp2486);
          }
          tmp2486.Append(')');
          return tmp2486.ToString();
        }
      }


      public partial class tool_result : TBase
      {
        private global::Yaskawa.Ext.API.Tool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Tool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tool_result()
        {
        }

        public tool_result DeepCopy()
        {
          var tmp2488 = new tool_result();
          if((Success != null) && __isset.success)
          {
            tmp2488.Success = (global::Yaskawa.Ext.API.Tool)this.Success.DeepCopy();
          }
          tmp2488.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2488.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2488.__isset.e = this.__isset.e;
          return tmp2488;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Tool();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2489 = new TStruct("tool_result");
            await oprot.WriteStructBeginAsync(tmp2489, cancellationToken);
            var tmp2490 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2490.Name = "Success";
                tmp2490.Type = TType.Struct;
                tmp2490.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2490, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2490.Name = "E";
                tmp2490.Type = TType.Struct;
                tmp2490.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2490, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2491 = new StringBuilder("tool_result(");
          int tmp2492 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2492++) { tmp2491.Append(", "); }
            tmp2491.Append("Success: ");
            Success.ToString(tmp2491);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2492++) { tmp2491.Append(", "); }
            tmp2491.Append("E: ");
            E.ToString(tmp2491);
          }
          tmp2491.Append(')');
          return tmp2491.ToString();
        }
      }


      public partial class inputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputNumber_args()
        {
        }

        public inputNumber_args DeepCopy()
        {
          var tmp2493 = new inputNumber_args();
          if(__isset.c)
          {
            tmp2493.C = this.C;
          }
          tmp2493.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2493.Name = this.Name;
          }
          tmp2493.__isset.name = this.__isset.name;
          return tmp2493;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2494 = new TStruct("inputNumber_args");
            await oprot.WriteStructBeginAsync(tmp2494, cancellationToken);
            var tmp2495 = new TField();
            if(__isset.c)
            {
              tmp2495.Name = "c";
              tmp2495.Type = TType.I64;
              tmp2495.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2495, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2495.Name = "name";
              tmp2495.Type = TType.String;
              tmp2495.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2495, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2496 = new StringBuilder("inputNumber_args(");
          int tmp2497 = 0;
          if(__isset.c)
          {
            if(0 < tmp2497++) { tmp2496.Append(", "); }
            tmp2496.Append("C: ");
            C.ToString(tmp2496);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2497++) { tmp2496.Append(", "); }
            tmp2496.Append("Name: ");
            Name.ToString(tmp2496);
          }
          tmp2496.Append(')');
          return tmp2496.ToString();
        }
      }


      public partial class inputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputNumber_result()
        {
        }

        public inputNumber_result DeepCopy()
        {
          var tmp2498 = new inputNumber_result();
          if(__isset.success)
          {
            tmp2498.Success = this.Success;
          }
          tmp2498.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2498.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2498.__isset.e = this.__isset.e;
          return tmp2498;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2499 = new TStruct("inputNumber_result");
            await oprot.WriteStructBeginAsync(tmp2499, cancellationToken);
            var tmp2500 = new TField();

            if(this.__isset.success)
            {
              tmp2500.Name = "Success";
              tmp2500.Type = TType.I32;
              tmp2500.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2500, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2500.Name = "E";
                tmp2500.Type = TType.Struct;
                tmp2500.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2500, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2501 = new StringBuilder("inputNumber_result(");
          int tmp2502 = 0;
          if(__isset.success)
          {
            if(0 < tmp2502++) { tmp2501.Append(", "); }
            tmp2501.Append("Success: ");
            Success.ToString(tmp2501);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2502++) { tmp2501.Append(", "); }
            tmp2501.Append("E: ");
            E.ToString(tmp2501);
          }
          tmp2501.Append(')');
          return tmp2501.ToString();
        }
      }


      public partial class inputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputGroupNumber_args()
        {
        }

        public inputGroupNumber_args DeepCopy()
        {
          var tmp2503 = new inputGroupNumber_args();
          if(__isset.c)
          {
            tmp2503.C = this.C;
          }
          tmp2503.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2503.Name = this.Name;
          }
          tmp2503.__isset.name = this.__isset.name;
          return tmp2503;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2504 = new TStruct("inputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp2504, cancellationToken);
            var tmp2505 = new TField();
            if(__isset.c)
            {
              tmp2505.Name = "c";
              tmp2505.Type = TType.I64;
              tmp2505.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2505, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2505.Name = "name";
              tmp2505.Type = TType.String;
              tmp2505.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2505, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2506 = new StringBuilder("inputGroupNumber_args(");
          int tmp2507 = 0;
          if(__isset.c)
          {
            if(0 < tmp2507++) { tmp2506.Append(", "); }
            tmp2506.Append("C: ");
            C.ToString(tmp2506);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2507++) { tmp2506.Append(", "); }
            tmp2506.Append("Name: ");
            Name.ToString(tmp2506);
          }
          tmp2506.Append(')');
          return tmp2506.ToString();
        }
      }


      public partial class inputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupNumber_result()
        {
        }

        public inputGroupNumber_result DeepCopy()
        {
          var tmp2508 = new inputGroupNumber_result();
          if(__isset.success)
          {
            tmp2508.Success = this.Success;
          }
          tmp2508.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2508.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2508.__isset.e = this.__isset.e;
          return tmp2508;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2509 = new TStruct("inputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp2509, cancellationToken);
            var tmp2510 = new TField();

            if(this.__isset.success)
            {
              tmp2510.Name = "Success";
              tmp2510.Type = TType.I32;
              tmp2510.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2510, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2510.Name = "E";
                tmp2510.Type = TType.Struct;
                tmp2510.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2510, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2511 = new StringBuilder("inputGroupNumber_result(");
          int tmp2512 = 0;
          if(__isset.success)
          {
            if(0 < tmp2512++) { tmp2511.Append(", "); }
            tmp2511.Append("Success: ");
            Success.ToString(tmp2511);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2512++) { tmp2511.Append(", "); }
            tmp2511.Append("E: ");
            E.ToString(tmp2511);
          }
          tmp2511.Append(')');
          return tmp2511.ToString();
        }
      }


      public partial class outputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputNumber_args()
        {
        }

        public outputNumber_args DeepCopy()
        {
          var tmp2513 = new outputNumber_args();
          if(__isset.c)
          {
            tmp2513.C = this.C;
          }
          tmp2513.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2513.Name = this.Name;
          }
          tmp2513.__isset.name = this.__isset.name;
          return tmp2513;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2514 = new TStruct("outputNumber_args");
            await oprot.WriteStructBeginAsync(tmp2514, cancellationToken);
            var tmp2515 = new TField();
            if(__isset.c)
            {
              tmp2515.Name = "c";
              tmp2515.Type = TType.I64;
              tmp2515.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2515, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2515.Name = "name";
              tmp2515.Type = TType.String;
              tmp2515.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2515, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2516 = new StringBuilder("outputNumber_args(");
          int tmp2517 = 0;
          if(__isset.c)
          {
            if(0 < tmp2517++) { tmp2516.Append(", "); }
            tmp2516.Append("C: ");
            C.ToString(tmp2516);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2517++) { tmp2516.Append(", "); }
            tmp2516.Append("Name: ");
            Name.ToString(tmp2516);
          }
          tmp2516.Append(')');
          return tmp2516.ToString();
        }
      }


      public partial class outputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputNumber_result()
        {
        }

        public outputNumber_result DeepCopy()
        {
          var tmp2518 = new outputNumber_result();
          if(__isset.success)
          {
            tmp2518.Success = this.Success;
          }
          tmp2518.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2518.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2518.__isset.e = this.__isset.e;
          return tmp2518;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2519 = new TStruct("outputNumber_result");
            await oprot.WriteStructBeginAsync(tmp2519, cancellationToken);
            var tmp2520 = new TField();

            if(this.__isset.success)
            {
              tmp2520.Name = "Success";
              tmp2520.Type = TType.I32;
              tmp2520.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2520, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2520.Name = "E";
                tmp2520.Type = TType.Struct;
                tmp2520.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2520, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2521 = new StringBuilder("outputNumber_result(");
          int tmp2522 = 0;
          if(__isset.success)
          {
            if(0 < tmp2522++) { tmp2521.Append(", "); }
            tmp2521.Append("Success: ");
            Success.ToString(tmp2521);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2522++) { tmp2521.Append(", "); }
            tmp2521.Append("E: ");
            E.ToString(tmp2521);
          }
          tmp2521.Append(')');
          return tmp2521.ToString();
        }
      }


      public partial class outputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputGroupNumber_args()
        {
        }

        public outputGroupNumber_args DeepCopy()
        {
          var tmp2523 = new outputGroupNumber_args();
          if(__isset.c)
          {
            tmp2523.C = this.C;
          }
          tmp2523.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2523.Name = this.Name;
          }
          tmp2523.__isset.name = this.__isset.name;
          return tmp2523;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2524 = new TStruct("outputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp2524, cancellationToken);
            var tmp2525 = new TField();
            if(__isset.c)
            {
              tmp2525.Name = "c";
              tmp2525.Type = TType.I64;
              tmp2525.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2525, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2525.Name = "name";
              tmp2525.Type = TType.String;
              tmp2525.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2525, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2526 = new StringBuilder("outputGroupNumber_args(");
          int tmp2527 = 0;
          if(__isset.c)
          {
            if(0 < tmp2527++) { tmp2526.Append(", "); }
            tmp2526.Append("C: ");
            C.ToString(tmp2526);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2527++) { tmp2526.Append(", "); }
            tmp2526.Append("Name: ");
            Name.ToString(tmp2526);
          }
          tmp2526.Append(')');
          return tmp2526.ToString();
        }
      }


      public partial class outputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupNumber_result()
        {
        }

        public outputGroupNumber_result DeepCopy()
        {
          var tmp2528 = new outputGroupNumber_result();
          if(__isset.success)
          {
            tmp2528.Success = this.Success;
          }
          tmp2528.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2528.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2528.__isset.e = this.__isset.e;
          return tmp2528;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2529 = new TStruct("outputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp2529, cancellationToken);
            var tmp2530 = new TField();

            if(this.__isset.success)
            {
              tmp2530.Name = "Success";
              tmp2530.Type = TType.I32;
              tmp2530.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2530, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2530.Name = "E";
                tmp2530.Type = TType.Struct;
                tmp2530.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2530, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2531 = new StringBuilder("outputGroupNumber_result(");
          int tmp2532 = 0;
          if(__isset.success)
          {
            if(0 < tmp2532++) { tmp2531.Append(", "); }
            tmp2531.Append("Success: ");
            Success.ToString(tmp2531);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2532++) { tmp2531.Append(", "); }
            tmp2531.Append("E: ");
            E.ToString(tmp2531);
          }
          tmp2531.Append(')');
          return tmp2531.ToString();
        }
      }


      public partial class inputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputName_args()
        {
        }

        public inputName_args DeepCopy()
        {
          var tmp2533 = new inputName_args();
          if(__isset.c)
          {
            tmp2533.C = this.C;
          }
          tmp2533.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2533.Num = this.Num;
          }
          tmp2533.__isset.num = this.__isset.num;
          return tmp2533;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2534 = new TStruct("inputName_args");
            await oprot.WriteStructBeginAsync(tmp2534, cancellationToken);
            var tmp2535 = new TField();
            if(__isset.c)
            {
              tmp2535.Name = "c";
              tmp2535.Type = TType.I64;
              tmp2535.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2535, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2535.Name = "num";
              tmp2535.Type = TType.I32;
              tmp2535.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2535, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2536 = new StringBuilder("inputName_args(");
          int tmp2537 = 0;
          if(__isset.c)
          {
            if(0 < tmp2537++) { tmp2536.Append(", "); }
            tmp2536.Append("C: ");
            C.ToString(tmp2536);
          }
          if(__isset.num)
          {
            if(0 < tmp2537++) { tmp2536.Append(", "); }
            tmp2536.Append("Num: ");
            Num.ToString(tmp2536);
          }
          tmp2536.Append(')');
          return tmp2536.ToString();
        }
      }


      public partial class inputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputName_result()
        {
        }

        public inputName_result DeepCopy()
        {
          var tmp2538 = new inputName_result();
          if((Success != null) && __isset.success)
          {
            tmp2538.Success = this.Success;
          }
          tmp2538.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2538.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2538.__isset.e = this.__isset.e;
          return tmp2538;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2539 = new TStruct("inputName_result");
            await oprot.WriteStructBeginAsync(tmp2539, cancellationToken);
            var tmp2540 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2540.Name = "Success";
                tmp2540.Type = TType.String;
                tmp2540.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2540, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2540.Name = "E";
                tmp2540.Type = TType.Struct;
                tmp2540.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2540, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2541 = new StringBuilder("inputName_result(");
          int tmp2542 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2542++) { tmp2541.Append(", "); }
            tmp2541.Append("Success: ");
            Success.ToString(tmp2541);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2542++) { tmp2541.Append(", "); }
            tmp2541.Append("E: ");
            E.ToString(tmp2541);
          }
          tmp2541.Append(')');
          return tmp2541.ToString();
        }
      }


      public partial class outputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputName_args()
        {
        }

        public outputName_args DeepCopy()
        {
          var tmp2543 = new outputName_args();
          if(__isset.c)
          {
            tmp2543.C = this.C;
          }
          tmp2543.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2543.Num = this.Num;
          }
          tmp2543.__isset.num = this.__isset.num;
          return tmp2543;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2544 = new TStruct("outputName_args");
            await oprot.WriteStructBeginAsync(tmp2544, cancellationToken);
            var tmp2545 = new TField();
            if(__isset.c)
            {
              tmp2545.Name = "c";
              tmp2545.Type = TType.I64;
              tmp2545.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2545, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2545.Name = "num";
              tmp2545.Type = TType.I32;
              tmp2545.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2545, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2546 = new StringBuilder("outputName_args(");
          int tmp2547 = 0;
          if(__isset.c)
          {
            if(0 < tmp2547++) { tmp2546.Append(", "); }
            tmp2546.Append("C: ");
            C.ToString(tmp2546);
          }
          if(__isset.num)
          {
            if(0 < tmp2547++) { tmp2546.Append(", "); }
            tmp2546.Append("Num: ");
            Num.ToString(tmp2546);
          }
          tmp2546.Append(')');
          return tmp2546.ToString();
        }
      }


      public partial class outputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputName_result()
        {
        }

        public outputName_result DeepCopy()
        {
          var tmp2548 = new outputName_result();
          if((Success != null) && __isset.success)
          {
            tmp2548.Success = this.Success;
          }
          tmp2548.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2548.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2548.__isset.e = this.__isset.e;
          return tmp2548;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2549 = new TStruct("outputName_result");
            await oprot.WriteStructBeginAsync(tmp2549, cancellationToken);
            var tmp2550 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2550.Name = "Success";
                tmp2550.Type = TType.String;
                tmp2550.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2550, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2550.Name = "E";
                tmp2550.Type = TType.Struct;
                tmp2550.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2550, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2551 = new StringBuilder("outputName_result(");
          int tmp2552 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2552++) { tmp2551.Append(", "); }
            tmp2551.Append("Success: ");
            Success.ToString(tmp2551);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2552++) { tmp2551.Append(", "); }
            tmp2551.Append("E: ");
            E.ToString(tmp2551);
          }
          tmp2551.Append(')');
          return tmp2551.ToString();
        }
      }


      public partial class setInputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setInputName_args()
        {
        }

        public setInputName_args DeepCopy()
        {
          var tmp2553 = new setInputName_args();
          if(__isset.c)
          {
            tmp2553.C = this.C;
          }
          tmp2553.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2553.Num = this.Num;
          }
          tmp2553.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp2553.Name = this.Name;
          }
          tmp2553.__isset.name = this.__isset.name;
          return tmp2553;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2554 = new TStruct("setInputName_args");
            await oprot.WriteStructBeginAsync(tmp2554, cancellationToken);
            var tmp2555 = new TField();
            if(__isset.c)
            {
              tmp2555.Name = "c";
              tmp2555.Type = TType.I64;
              tmp2555.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2555, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2555.Name = "num";
              tmp2555.Type = TType.I32;
              tmp2555.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2555, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2555.Name = "name";
              tmp2555.Type = TType.String;
              tmp2555.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2555, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setInputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2556 = new StringBuilder("setInputName_args(");
          int tmp2557 = 0;
          if(__isset.c)
          {
            if(0 < tmp2557++) { tmp2556.Append(", "); }
            tmp2556.Append("C: ");
            C.ToString(tmp2556);
          }
          if(__isset.num)
          {
            if(0 < tmp2557++) { tmp2556.Append(", "); }
            tmp2556.Append("Num: ");
            Num.ToString(tmp2556);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2557++) { tmp2556.Append(", "); }
            tmp2556.Append("Name: ");
            Name.ToString(tmp2556);
          }
          tmp2556.Append(')');
          return tmp2556.ToString();
        }
      }


      public partial class setOutputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setOutputName_args()
        {
        }

        public setOutputName_args DeepCopy()
        {
          var tmp2558 = new setOutputName_args();
          if(__isset.c)
          {
            tmp2558.C = this.C;
          }
          tmp2558.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2558.Num = this.Num;
          }
          tmp2558.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp2558.Name = this.Name;
          }
          tmp2558.__isset.name = this.__isset.name;
          return tmp2558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2559 = new TStruct("setOutputName_args");
            await oprot.WriteStructBeginAsync(tmp2559, cancellationToken);
            var tmp2560 = new TField();
            if(__isset.c)
            {
              tmp2560.Name = "c";
              tmp2560.Type = TType.I64;
              tmp2560.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2560, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2560.Name = "num";
              tmp2560.Type = TType.I32;
              tmp2560.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2560, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2560.Name = "name";
              tmp2560.Type = TType.String;
              tmp2560.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2560, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2561 = new StringBuilder("setOutputName_args(");
          int tmp2562 = 0;
          if(__isset.c)
          {
            if(0 < tmp2562++) { tmp2561.Append(", "); }
            tmp2561.Append("C: ");
            C.ToString(tmp2561);
          }
          if(__isset.num)
          {
            if(0 < tmp2562++) { tmp2561.Append(", "); }
            tmp2561.Append("Num: ");
            Num.ToString(tmp2561);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2562++) { tmp2561.Append(", "); }
            tmp2561.Append("Name: ");
            Name.ToString(tmp2561);
          }
          tmp2561.Append(')');
          return tmp2561.ToString();
        }
      }


      public partial class monitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorInput_args()
        {
        }

        public monitorInput_args DeepCopy()
        {
          var tmp2563 = new monitorInput_args();
          if(__isset.c)
          {
            tmp2563.C = this.C;
          }
          tmp2563.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2563.Num = this.Num;
          }
          tmp2563.__isset.num = this.__isset.num;
          return tmp2563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2564 = new TStruct("monitorInput_args");
            await oprot.WriteStructBeginAsync(tmp2564, cancellationToken);
            var tmp2565 = new TField();
            if(__isset.c)
            {
              tmp2565.Name = "c";
              tmp2565.Type = TType.I64;
              tmp2565.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2565, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2565.Name = "num";
              tmp2565.Type = TType.I32;
              tmp2565.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2565, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2566 = new StringBuilder("monitorInput_args(");
          int tmp2567 = 0;
          if(__isset.c)
          {
            if(0 < tmp2567++) { tmp2566.Append(", "); }
            tmp2566.Append("C: ");
            C.ToString(tmp2566);
          }
          if(__isset.num)
          {
            if(0 < tmp2567++) { tmp2566.Append(", "); }
            tmp2566.Append("Num: ");
            Num.ToString(tmp2566);
          }
          tmp2566.Append(')');
          return tmp2566.ToString();
        }
      }


      public partial class monitorInput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInput_result()
        {
        }

        public monitorInput_result DeepCopy()
        {
          var tmp2568 = new monitorInput_result();
          if((E != null) && __isset.e)
          {
            tmp2568.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2568.__isset.e = this.__isset.e;
          return tmp2568;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2569 = new TStruct("monitorInput_result");
            await oprot.WriteStructBeginAsync(tmp2569, cancellationToken);
            var tmp2570 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2570.Name = "E";
                tmp2570.Type = TType.Struct;
                tmp2570.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2570, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2571 = new StringBuilder("monitorInput_result(");
          int tmp2572 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2572++) { tmp2571.Append(", "); }
            tmp2571.Append("E: ");
            E.ToString(tmp2571);
          }
          tmp2571.Append(')');
          return tmp2571.ToString();
        }
      }


      public partial class monitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorInputGroups_args()
        {
        }

        public monitorInputGroups_args DeepCopy()
        {
          var tmp2573 = new monitorInputGroups_args();
          if(__isset.c)
          {
            tmp2573.C = this.C;
          }
          tmp2573.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2573.GroupNum = this.GroupNum;
          }
          tmp2573.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2573.Count = this.Count;
          }
          tmp2573.__isset.count = this.__isset.count;
          return tmp2573;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2574 = new TStruct("monitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp2574, cancellationToken);
            var tmp2575 = new TField();
            if(__isset.c)
            {
              tmp2575.Name = "c";
              tmp2575.Type = TType.I64;
              tmp2575.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2575, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2575.Name = "groupNum";
              tmp2575.Type = TType.I32;
              tmp2575.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2575, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2575.Name = "count";
              tmp2575.Type = TType.I32;
              tmp2575.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2575, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2576 = new StringBuilder("monitorInputGroups_args(");
          int tmp2577 = 0;
          if(__isset.c)
          {
            if(0 < tmp2577++) { tmp2576.Append(", "); }
            tmp2576.Append("C: ");
            C.ToString(tmp2576);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2577++) { tmp2576.Append(", "); }
            tmp2576.Append("GroupNum: ");
            GroupNum.ToString(tmp2576);
          }
          if(__isset.count)
          {
            if(0 < tmp2577++) { tmp2576.Append(", "); }
            tmp2576.Append("Count: ");
            Count.ToString(tmp2576);
          }
          tmp2576.Append(')');
          return tmp2576.ToString();
        }
      }


      public partial class monitorInputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInputGroups_result()
        {
        }

        public monitorInputGroups_result DeepCopy()
        {
          var tmp2578 = new monitorInputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp2578.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2578.__isset.e = this.__isset.e;
          return tmp2578;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2579 = new TStruct("monitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp2579, cancellationToken);
            var tmp2580 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2580.Name = "E";
                tmp2580.Type = TType.Struct;
                tmp2580.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2580, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2581 = new StringBuilder("monitorInputGroups_result(");
          int tmp2582 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2582++) { tmp2581.Append(", "); }
            tmp2581.Append("E: ");
            E.ToString(tmp2581);
          }
          tmp2581.Append(')');
          return tmp2581.ToString();
        }
      }


      public partial class monitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorOutput_args()
        {
        }

        public monitorOutput_args DeepCopy()
        {
          var tmp2583 = new monitorOutput_args();
          if(__isset.c)
          {
            tmp2583.C = this.C;
          }
          tmp2583.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2583.Num = this.Num;
          }
          tmp2583.__isset.num = this.__isset.num;
          return tmp2583;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2584 = new TStruct("monitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp2584, cancellationToken);
            var tmp2585 = new TField();
            if(__isset.c)
            {
              tmp2585.Name = "c";
              tmp2585.Type = TType.I64;
              tmp2585.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2585, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2585.Name = "num";
              tmp2585.Type = TType.I32;
              tmp2585.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2585, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2586 = new StringBuilder("monitorOutput_args(");
          int tmp2587 = 0;
          if(__isset.c)
          {
            if(0 < tmp2587++) { tmp2586.Append(", "); }
            tmp2586.Append("C: ");
            C.ToString(tmp2586);
          }
          if(__isset.num)
          {
            if(0 < tmp2587++) { tmp2586.Append(", "); }
            tmp2586.Append("Num: ");
            Num.ToString(tmp2586);
          }
          tmp2586.Append(')');
          return tmp2586.ToString();
        }
      }


      public partial class monitorOutput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutput_result()
        {
        }

        public monitorOutput_result DeepCopy()
        {
          var tmp2588 = new monitorOutput_result();
          if((E != null) && __isset.e)
          {
            tmp2588.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2588.__isset.e = this.__isset.e;
          return tmp2588;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2589 = new TStruct("monitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp2589, cancellationToken);
            var tmp2590 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2590.Name = "E";
                tmp2590.Type = TType.Struct;
                tmp2590.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2590, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2591 = new StringBuilder("monitorOutput_result(");
          int tmp2592 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2592++) { tmp2591.Append(", "); }
            tmp2591.Append("E: ");
            E.ToString(tmp2591);
          }
          tmp2591.Append(')');
          return tmp2591.ToString();
        }
      }


      public partial class monitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorOutputGroups_args()
        {
        }

        public monitorOutputGroups_args DeepCopy()
        {
          var tmp2593 = new monitorOutputGroups_args();
          if(__isset.c)
          {
            tmp2593.C = this.C;
          }
          tmp2593.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2593.GroupNum = this.GroupNum;
          }
          tmp2593.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2593.Count = this.Count;
          }
          tmp2593.__isset.count = this.__isset.count;
          return tmp2593;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2594 = new TStruct("monitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp2594, cancellationToken);
            var tmp2595 = new TField();
            if(__isset.c)
            {
              tmp2595.Name = "c";
              tmp2595.Type = TType.I64;
              tmp2595.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2595, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2595.Name = "groupNum";
              tmp2595.Type = TType.I32;
              tmp2595.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2595, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2595.Name = "count";
              tmp2595.Type = TType.I32;
              tmp2595.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2595, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2596 = new StringBuilder("monitorOutputGroups_args(");
          int tmp2597 = 0;
          if(__isset.c)
          {
            if(0 < tmp2597++) { tmp2596.Append(", "); }
            tmp2596.Append("C: ");
            C.ToString(tmp2596);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2597++) { tmp2596.Append(", "); }
            tmp2596.Append("GroupNum: ");
            GroupNum.ToString(tmp2596);
          }
          if(__isset.count)
          {
            if(0 < tmp2597++) { tmp2596.Append(", "); }
            tmp2596.Append("Count: ");
            Count.ToString(tmp2596);
          }
          tmp2596.Append(')');
          return tmp2596.ToString();
        }
      }


      public partial class monitorOutputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutputGroups_result()
        {
        }

        public monitorOutputGroups_result DeepCopy()
        {
          var tmp2598 = new monitorOutputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp2598.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2598.__isset.e = this.__isset.e;
          return tmp2598;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2599 = new TStruct("monitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp2599, cancellationToken);
            var tmp2600 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2600.Name = "E";
                tmp2600.Type = TType.Struct;
                tmp2600.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2600, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2601 = new StringBuilder("monitorOutputGroups_result(");
          int tmp2602 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2602++) { tmp2601.Append(", "); }
            tmp2601.Append("E: ");
            E.ToString(tmp2601);
          }
          tmp2601.Append(')');
          return tmp2601.ToString();
        }
      }


      public partial class unmonitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorInput_args()
        {
        }

        public unmonitorInput_args DeepCopy()
        {
          var tmp2603 = new unmonitorInput_args();
          if(__isset.c)
          {
            tmp2603.C = this.C;
          }
          tmp2603.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2603.Num = this.Num;
          }
          tmp2603.__isset.num = this.__isset.num;
          return tmp2603;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2604 = new TStruct("unmonitorInput_args");
            await oprot.WriteStructBeginAsync(tmp2604, cancellationToken);
            var tmp2605 = new TField();
            if(__isset.c)
            {
              tmp2605.Name = "c";
              tmp2605.Type = TType.I64;
              tmp2605.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2605, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2605.Name = "num";
              tmp2605.Type = TType.I32;
              tmp2605.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2605, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2606 = new StringBuilder("unmonitorInput_args(");
          int tmp2607 = 0;
          if(__isset.c)
          {
            if(0 < tmp2607++) { tmp2606.Append(", "); }
            tmp2606.Append("C: ");
            C.ToString(tmp2606);
          }
          if(__isset.num)
          {
            if(0 < tmp2607++) { tmp2606.Append(", "); }
            tmp2606.Append("Num: ");
            Num.ToString(tmp2606);
          }
          tmp2606.Append(')');
          return tmp2606.ToString();
        }
      }


      public partial class unmonitorInput_result : TBase
      {

        public unmonitorInput_result()
        {
        }

        public unmonitorInput_result DeepCopy()
        {
          var tmp2608 = new unmonitorInput_result();
          return tmp2608;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2609 = new TStruct("unmonitorInput_result");
            await oprot.WriteStructBeginAsync(tmp2609, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2610 = new StringBuilder("unmonitorInput_result(");
          tmp2610.Append(')');
          return tmp2610.ToString();
        }
      }


      public partial class unmonitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorInputGroups_args()
        {
        }

        public unmonitorInputGroups_args DeepCopy()
        {
          var tmp2612 = new unmonitorInputGroups_args();
          if(__isset.c)
          {
            tmp2612.C = this.C;
          }
          tmp2612.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2612.GroupNum = this.GroupNum;
          }
          tmp2612.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2612.Count = this.Count;
          }
          tmp2612.__isset.count = this.__isset.count;
          return tmp2612;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2613 = new TStruct("unmonitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp2613, cancellationToken);
            var tmp2614 = new TField();
            if(__isset.c)
            {
              tmp2614.Name = "c";
              tmp2614.Type = TType.I64;
              tmp2614.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2614, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2614.Name = "groupNum";
              tmp2614.Type = TType.I32;
              tmp2614.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2614, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2614.Name = "count";
              tmp2614.Type = TType.I32;
              tmp2614.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2614, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2615 = new StringBuilder("unmonitorInputGroups_args(");
          int tmp2616 = 0;
          if(__isset.c)
          {
            if(0 < tmp2616++) { tmp2615.Append(", "); }
            tmp2615.Append("C: ");
            C.ToString(tmp2615);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2616++) { tmp2615.Append(", "); }
            tmp2615.Append("GroupNum: ");
            GroupNum.ToString(tmp2615);
          }
          if(__isset.count)
          {
            if(0 < tmp2616++) { tmp2615.Append(", "); }
            tmp2615.Append("Count: ");
            Count.ToString(tmp2615);
          }
          tmp2615.Append(')');
          return tmp2615.ToString();
        }
      }


      public partial class unmonitorInputGroups_result : TBase
      {

        public unmonitorInputGroups_result()
        {
        }

        public unmonitorInputGroups_result DeepCopy()
        {
          var tmp2617 = new unmonitorInputGroups_result();
          return tmp2617;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2618 = new TStruct("unmonitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp2618, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2619 = new StringBuilder("unmonitorInputGroups_result(");
          tmp2619.Append(')');
          return tmp2619.ToString();
        }
      }


      public partial class unmonitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorOutput_args()
        {
        }

        public unmonitorOutput_args DeepCopy()
        {
          var tmp2621 = new unmonitorOutput_args();
          if(__isset.c)
          {
            tmp2621.C = this.C;
          }
          tmp2621.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2621.Num = this.Num;
          }
          tmp2621.__isset.num = this.__isset.num;
          return tmp2621;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2622 = new TStruct("unmonitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp2622, cancellationToken);
            var tmp2623 = new TField();
            if(__isset.c)
            {
              tmp2623.Name = "c";
              tmp2623.Type = TType.I64;
              tmp2623.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2623, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2623.Name = "num";
              tmp2623.Type = TType.I32;
              tmp2623.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2623, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2624 = new StringBuilder("unmonitorOutput_args(");
          int tmp2625 = 0;
          if(__isset.c)
          {
            if(0 < tmp2625++) { tmp2624.Append(", "); }
            tmp2624.Append("C: ");
            C.ToString(tmp2624);
          }
          if(__isset.num)
          {
            if(0 < tmp2625++) { tmp2624.Append(", "); }
            tmp2624.Append("Num: ");
            Num.ToString(tmp2624);
          }
          tmp2624.Append(')');
          return tmp2624.ToString();
        }
      }


      public partial class unmonitorOutput_result : TBase
      {

        public unmonitorOutput_result()
        {
        }

        public unmonitorOutput_result DeepCopy()
        {
          var tmp2626 = new unmonitorOutput_result();
          return tmp2626;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2627 = new TStruct("unmonitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp2627, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2628 = new StringBuilder("unmonitorOutput_result(");
          tmp2628.Append(')');
          return tmp2628.ToString();
        }
      }


      public partial class unmonitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorOutputGroups_args()
        {
        }

        public unmonitorOutputGroups_args DeepCopy()
        {
          var tmp2630 = new unmonitorOutputGroups_args();
          if(__isset.c)
          {
            tmp2630.C = this.C;
          }
          tmp2630.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2630.GroupNum = this.GroupNum;
          }
          tmp2630.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2630.Count = this.Count;
          }
          tmp2630.__isset.count = this.__isset.count;
          return tmp2630;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2631 = new TStruct("unmonitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp2631, cancellationToken);
            var tmp2632 = new TField();
            if(__isset.c)
            {
              tmp2632.Name = "c";
              tmp2632.Type = TType.I64;
              tmp2632.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2632, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2632.Name = "groupNum";
              tmp2632.Type = TType.I32;
              tmp2632.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2632, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2632.Name = "count";
              tmp2632.Type = TType.I32;
              tmp2632.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2632, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2633 = new StringBuilder("unmonitorOutputGroups_args(");
          int tmp2634 = 0;
          if(__isset.c)
          {
            if(0 < tmp2634++) { tmp2633.Append(", "); }
            tmp2633.Append("C: ");
            C.ToString(tmp2633);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2634++) { tmp2633.Append(", "); }
            tmp2633.Append("GroupNum: ");
            GroupNum.ToString(tmp2633);
          }
          if(__isset.count)
          {
            if(0 < tmp2634++) { tmp2633.Append(", "); }
            tmp2633.Append("Count: ");
            Count.ToString(tmp2633);
          }
          tmp2633.Append(')');
          return tmp2633.ToString();
        }
      }


      public partial class unmonitorOutputGroups_result : TBase
      {

        public unmonitorOutputGroups_result()
        {
        }

        public unmonitorOutputGroups_result DeepCopy()
        {
          var tmp2635 = new unmonitorOutputGroups_result();
          return tmp2635;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2636 = new TStruct("unmonitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp2636, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2637 = new StringBuilder("unmonitorOutputGroups_result(");
          tmp2637.Append(')');
          return tmp2637.ToString();
        }
      }


      public partial class inputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputValue_args()
        {
        }

        public inputValue_args DeepCopy()
        {
          var tmp2639 = new inputValue_args();
          if(__isset.c)
          {
            tmp2639.C = this.C;
          }
          tmp2639.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2639.Num = this.Num;
          }
          tmp2639.__isset.num = this.__isset.num;
          return tmp2639;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2640 = new TStruct("inputValue_args");
            await oprot.WriteStructBeginAsync(tmp2640, cancellationToken);
            var tmp2641 = new TField();
            if(__isset.c)
            {
              tmp2641.Name = "c";
              tmp2641.Type = TType.I64;
              tmp2641.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2641, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2641.Name = "num";
              tmp2641.Type = TType.I32;
              tmp2641.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2641, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2642 = new StringBuilder("inputValue_args(");
          int tmp2643 = 0;
          if(__isset.c)
          {
            if(0 < tmp2643++) { tmp2642.Append(", "); }
            tmp2642.Append("C: ");
            C.ToString(tmp2642);
          }
          if(__isset.num)
          {
            if(0 < tmp2643++) { tmp2642.Append(", "); }
            tmp2642.Append("Num: ");
            Num.ToString(tmp2642);
          }
          tmp2642.Append(')');
          return tmp2642.ToString();
        }
      }


      public partial class inputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputValue_result()
        {
        }

        public inputValue_result DeepCopy()
        {
          var tmp2644 = new inputValue_result();
          if(__isset.success)
          {
            tmp2644.Success = this.Success;
          }
          tmp2644.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2644.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2644.__isset.e = this.__isset.e;
          return tmp2644;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2645 = new TStruct("inputValue_result");
            await oprot.WriteStructBeginAsync(tmp2645, cancellationToken);
            var tmp2646 = new TField();

            if(this.__isset.success)
            {
              tmp2646.Name = "Success";
              tmp2646.Type = TType.Bool;
              tmp2646.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2646, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2646.Name = "E";
                tmp2646.Type = TType.Struct;
                tmp2646.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2646, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2647 = new StringBuilder("inputValue_result(");
          int tmp2648 = 0;
          if(__isset.success)
          {
            if(0 < tmp2648++) { tmp2647.Append(", "); }
            tmp2647.Append("Success: ");
            Success.ToString(tmp2647);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2648++) { tmp2647.Append(", "); }
            tmp2647.Append("E: ");
            E.ToString(tmp2647);
          }
          tmp2647.Append(')');
          return tmp2647.ToString();
        }
      }


      public partial class inputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public inputGroupsValue_args()
        {
        }

        public inputGroupsValue_args DeepCopy()
        {
          var tmp2649 = new inputGroupsValue_args();
          if(__isset.c)
          {
            tmp2649.C = this.C;
          }
          tmp2649.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2649.GroupNum = this.GroupNum;
          }
          tmp2649.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2649.Count = this.Count;
          }
          tmp2649.__isset.count = this.__isset.count;
          return tmp2649;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2650 = new TStruct("inputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp2650, cancellationToken);
            var tmp2651 = new TField();
            if(__isset.c)
            {
              tmp2651.Name = "c";
              tmp2651.Type = TType.I64;
              tmp2651.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2651, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2651.Name = "groupNum";
              tmp2651.Type = TType.I32;
              tmp2651.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2651, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2651.Name = "count";
              tmp2651.Type = TType.I32;
              tmp2651.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2651, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2652 = new StringBuilder("inputGroupsValue_args(");
          int tmp2653 = 0;
          if(__isset.c)
          {
            if(0 < tmp2653++) { tmp2652.Append(", "); }
            tmp2652.Append("C: ");
            C.ToString(tmp2652);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2653++) { tmp2652.Append(", "); }
            tmp2652.Append("GroupNum: ");
            GroupNum.ToString(tmp2652);
          }
          if(__isset.count)
          {
            if(0 < tmp2653++) { tmp2652.Append(", "); }
            tmp2652.Append("Count: ");
            Count.ToString(tmp2652);
          }
          tmp2652.Append(')');
          return tmp2652.ToString();
        }
      }


      public partial class inputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupsValue_result()
        {
        }

        public inputGroupsValue_result DeepCopy()
        {
          var tmp2654 = new inputGroupsValue_result();
          if(__isset.success)
          {
            tmp2654.Success = this.Success;
          }
          tmp2654.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2654.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2654.__isset.e = this.__isset.e;
          return tmp2654;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2655 = new TStruct("inputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp2655, cancellationToken);
            var tmp2656 = new TField();

            if(this.__isset.success)
            {
              tmp2656.Name = "Success";
              tmp2656.Type = TType.I32;
              tmp2656.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2656, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2656.Name = "E";
                tmp2656.Type = TType.Struct;
                tmp2656.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2656, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2657 = new StringBuilder("inputGroupsValue_result(");
          int tmp2658 = 0;
          if(__isset.success)
          {
            if(0 < tmp2658++) { tmp2657.Append(", "); }
            tmp2657.Append("Success: ");
            Success.ToString(tmp2657);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2658++) { tmp2657.Append(", "); }
            tmp2657.Append("E: ");
            E.ToString(tmp2657);
          }
          tmp2657.Append(')');
          return tmp2657.ToString();
        }
      }


      public partial class outputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputValue_args()
        {
        }

        public outputValue_args DeepCopy()
        {
          var tmp2659 = new outputValue_args();
          if(__isset.c)
          {
            tmp2659.C = this.C;
          }
          tmp2659.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2659.Num = this.Num;
          }
          tmp2659.__isset.num = this.__isset.num;
          return tmp2659;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2660 = new TStruct("outputValue_args");
            await oprot.WriteStructBeginAsync(tmp2660, cancellationToken);
            var tmp2661 = new TField();
            if(__isset.c)
            {
              tmp2661.Name = "c";
              tmp2661.Type = TType.I64;
              tmp2661.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2661, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2661.Name = "num";
              tmp2661.Type = TType.I32;
              tmp2661.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2661, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2662 = new StringBuilder("outputValue_args(");
          int tmp2663 = 0;
          if(__isset.c)
          {
            if(0 < tmp2663++) { tmp2662.Append(", "); }
            tmp2662.Append("C: ");
            C.ToString(tmp2662);
          }
          if(__isset.num)
          {
            if(0 < tmp2663++) { tmp2662.Append(", "); }
            tmp2662.Append("Num: ");
            Num.ToString(tmp2662);
          }
          tmp2662.Append(')');
          return tmp2662.ToString();
        }
      }


      public partial class outputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputValue_result()
        {
        }

        public outputValue_result DeepCopy()
        {
          var tmp2664 = new outputValue_result();
          if(__isset.success)
          {
            tmp2664.Success = this.Success;
          }
          tmp2664.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2664.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2664.__isset.e = this.__isset.e;
          return tmp2664;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2665 = new TStruct("outputValue_result");
            await oprot.WriteStructBeginAsync(tmp2665, cancellationToken);
            var tmp2666 = new TField();

            if(this.__isset.success)
            {
              tmp2666.Name = "Success";
              tmp2666.Type = TType.Bool;
              tmp2666.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2666, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2666.Name = "E";
                tmp2666.Type = TType.Struct;
                tmp2666.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2666, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2667 = new StringBuilder("outputValue_result(");
          int tmp2668 = 0;
          if(__isset.success)
          {
            if(0 < tmp2668++) { tmp2667.Append(", "); }
            tmp2667.Append("Success: ");
            Success.ToString(tmp2667);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2668++) { tmp2667.Append(", "); }
            tmp2667.Append("E: ");
            E.ToString(tmp2667);
          }
          tmp2667.Append(')');
          return tmp2667.ToString();
        }
      }


      public partial class outputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public outputGroupsValue_args()
        {
        }

        public outputGroupsValue_args DeepCopy()
        {
          var tmp2669 = new outputGroupsValue_args();
          if(__isset.c)
          {
            tmp2669.C = this.C;
          }
          tmp2669.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2669.GroupNum = this.GroupNum;
          }
          tmp2669.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2669.Count = this.Count;
          }
          tmp2669.__isset.count = this.__isset.count;
          return tmp2669;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2670 = new TStruct("outputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp2670, cancellationToken);
            var tmp2671 = new TField();
            if(__isset.c)
            {
              tmp2671.Name = "c";
              tmp2671.Type = TType.I64;
              tmp2671.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2671, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2671.Name = "groupNum";
              tmp2671.Type = TType.I32;
              tmp2671.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2671, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2671.Name = "count";
              tmp2671.Type = TType.I32;
              tmp2671.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2671, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2672 = new StringBuilder("outputGroupsValue_args(");
          int tmp2673 = 0;
          if(__isset.c)
          {
            if(0 < tmp2673++) { tmp2672.Append(", "); }
            tmp2672.Append("C: ");
            C.ToString(tmp2672);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2673++) { tmp2672.Append(", "); }
            tmp2672.Append("GroupNum: ");
            GroupNum.ToString(tmp2672);
          }
          if(__isset.count)
          {
            if(0 < tmp2673++) { tmp2672.Append(", "); }
            tmp2672.Append("Count: ");
            Count.ToString(tmp2672);
          }
          tmp2672.Append(')');
          return tmp2672.ToString();
        }
      }


      public partial class outputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupsValue_result()
        {
        }

        public outputGroupsValue_result DeepCopy()
        {
          var tmp2674 = new outputGroupsValue_result();
          if(__isset.success)
          {
            tmp2674.Success = this.Success;
          }
          tmp2674.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2674.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2674.__isset.e = this.__isset.e;
          return tmp2674;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2675 = new TStruct("outputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp2675, cancellationToken);
            var tmp2676 = new TField();

            if(this.__isset.success)
            {
              tmp2676.Name = "Success";
              tmp2676.Type = TType.I32;
              tmp2676.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2676, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2676.Name = "E";
                tmp2676.Type = TType.Struct;
                tmp2676.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2676, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2677 = new StringBuilder("outputGroupsValue_result(");
          int tmp2678 = 0;
          if(__isset.success)
          {
            if(0 < tmp2678++) { tmp2677.Append(", "); }
            tmp2677.Append("Success: ");
            Success.ToString(tmp2677);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2678++) { tmp2677.Append(", "); }
            tmp2677.Append("E: ");
            E.ToString(tmp2677);
          }
          tmp2677.Append(')');
          return tmp2677.ToString();
        }
      }


      public partial class setOutput_args : TBase
      {
        private long _c;
        private int _num;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool @value;
        }

        public setOutput_args()
        {
        }

        public setOutput_args DeepCopy()
        {
          var tmp2679 = new setOutput_args();
          if(__isset.c)
          {
            tmp2679.C = this.C;
          }
          tmp2679.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2679.Num = this.Num;
          }
          tmp2679.__isset.num = this.__isset.num;
          if(__isset.@value)
          {
            tmp2679.Value = this.Value;
          }
          tmp2679.__isset.@value = this.__isset.@value;
          return tmp2679;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2680 = new TStruct("setOutput_args");
            await oprot.WriteStructBeginAsync(tmp2680, cancellationToken);
            var tmp2681 = new TField();
            if(__isset.c)
            {
              tmp2681.Name = "c";
              tmp2681.Type = TType.I64;
              tmp2681.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2681, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2681.Name = "num";
              tmp2681.Type = TType.I32;
              tmp2681.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2681, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp2681.Name = "value";
              tmp2681.Type = TType.Bool;
              tmp2681.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2681, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2682 = new StringBuilder("setOutput_args(");
          int tmp2683 = 0;
          if(__isset.c)
          {
            if(0 < tmp2683++) { tmp2682.Append(", "); }
            tmp2682.Append("C: ");
            C.ToString(tmp2682);
          }
          if(__isset.num)
          {
            if(0 < tmp2683++) { tmp2682.Append(", "); }
            tmp2682.Append("Num: ");
            Num.ToString(tmp2682);
          }
          if(__isset.@value)
          {
            if(0 < tmp2683++) { tmp2682.Append(", "); }
            tmp2682.Append("Value: ");
            Value.ToString(tmp2682);
          }
          tmp2682.Append(')');
          return tmp2682.ToString();
        }
      }


      public partial class setOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
          public bool @value;
        }

        public setOutputGroups_args()
        {
        }

        public setOutputGroups_args DeepCopy()
        {
          var tmp2684 = new setOutputGroups_args();
          if(__isset.c)
          {
            tmp2684.C = this.C;
          }
          tmp2684.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp2684.GroupNum = this.GroupNum;
          }
          tmp2684.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp2684.Count = this.Count;
          }
          tmp2684.__isset.count = this.__isset.count;
          if(__isset.@value)
          {
            tmp2684.Value = this.Value;
          }
          tmp2684.__isset.@value = this.__isset.@value;
          return tmp2684;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2685 = new TStruct("setOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp2685, cancellationToken);
            var tmp2686 = new TField();
            if(__isset.c)
            {
              tmp2686.Name = "c";
              tmp2686.Type = TType.I64;
              tmp2686.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2686, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp2686.Name = "groupNum";
              tmp2686.Type = TType.I32;
              tmp2686.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2686, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp2686.Name = "count";
              tmp2686.Type = TType.I32;
              tmp2686.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2686, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp2686.Name = "value";
              tmp2686.Type = TType.I32;
              tmp2686.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp2686, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2687 = new StringBuilder("setOutputGroups_args(");
          int tmp2688 = 0;
          if(__isset.c)
          {
            if(0 < tmp2688++) { tmp2687.Append(", "); }
            tmp2687.Append("C: ");
            C.ToString(tmp2687);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp2688++) { tmp2687.Append(", "); }
            tmp2687.Append("GroupNum: ");
            GroupNum.ToString(tmp2687);
          }
          if(__isset.count)
          {
            if(0 < tmp2688++) { tmp2687.Append(", "); }
            tmp2687.Append("Count: ");
            Count.ToString(tmp2687);
          }
          if(__isset.@value)
          {
            if(0 < tmp2688++) { tmp2687.Append(", "); }
            tmp2687.Append("Value: ");
            Value.ToString(tmp2687);
          }
          tmp2687.Append(')');
          return tmp2687.ToString();
        }
      }


      public partial class inputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputAddress_args()
        {
        }

        public inputAddress_args DeepCopy()
        {
          var tmp2689 = new inputAddress_args();
          if(__isset.c)
          {
            tmp2689.C = this.C;
          }
          tmp2689.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2689.Name = this.Name;
          }
          tmp2689.__isset.name = this.__isset.name;
          return tmp2689;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2690 = new TStruct("inputAddress_args");
            await oprot.WriteStructBeginAsync(tmp2690, cancellationToken);
            var tmp2691 = new TField();
            if(__isset.c)
            {
              tmp2691.Name = "c";
              tmp2691.Type = TType.I64;
              tmp2691.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2691, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2691.Name = "name";
              tmp2691.Type = TType.String;
              tmp2691.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2691, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2692 = new StringBuilder("inputAddress_args(");
          int tmp2693 = 0;
          if(__isset.c)
          {
            if(0 < tmp2693++) { tmp2692.Append(", "); }
            tmp2692.Append("C: ");
            C.ToString(tmp2692);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2693++) { tmp2692.Append(", "); }
            tmp2692.Append("Name: ");
            Name.ToString(tmp2692);
          }
          tmp2692.Append(')');
          return tmp2692.ToString();
        }
      }


      public partial class inputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddress_result()
        {
        }

        public inputAddress_result DeepCopy()
        {
          var tmp2694 = new inputAddress_result();
          if(__isset.success)
          {
            tmp2694.Success = this.Success;
          }
          tmp2694.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2694.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2694.__isset.e = this.__isset.e;
          return tmp2694;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2695 = new TStruct("inputAddress_result");
            await oprot.WriteStructBeginAsync(tmp2695, cancellationToken);
            var tmp2696 = new TField();

            if(this.__isset.success)
            {
              tmp2696.Name = "Success";
              tmp2696.Type = TType.I32;
              tmp2696.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2696, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2696.Name = "E";
                tmp2696.Type = TType.Struct;
                tmp2696.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2696, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2697 = new StringBuilder("inputAddress_result(");
          int tmp2698 = 0;
          if(__isset.success)
          {
            if(0 < tmp2698++) { tmp2697.Append(", "); }
            tmp2697.Append("Success: ");
            Success.ToString(tmp2697);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2698++) { tmp2697.Append(", "); }
            tmp2697.Append("E: ");
            E.ToString(tmp2697);
          }
          tmp2697.Append(')');
          return tmp2697.ToString();
        }
      }


      public partial class inputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputAddressByNumber_args()
        {
        }

        public inputAddressByNumber_args DeepCopy()
        {
          var tmp2699 = new inputAddressByNumber_args();
          if(__isset.c)
          {
            tmp2699.C = this.C;
          }
          tmp2699.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2699.Num = this.Num;
          }
          tmp2699.__isset.num = this.__isset.num;
          return tmp2699;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2700 = new TStruct("inputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp2700, cancellationToken);
            var tmp2701 = new TField();
            if(__isset.c)
            {
              tmp2701.Name = "c";
              tmp2701.Type = TType.I64;
              tmp2701.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2701, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2701.Name = "num";
              tmp2701.Type = TType.I32;
              tmp2701.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2701, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2702 = new StringBuilder("inputAddressByNumber_args(");
          int tmp2703 = 0;
          if(__isset.c)
          {
            if(0 < tmp2703++) { tmp2702.Append(", "); }
            tmp2702.Append("C: ");
            C.ToString(tmp2702);
          }
          if(__isset.num)
          {
            if(0 < tmp2703++) { tmp2702.Append(", "); }
            tmp2702.Append("Num: ");
            Num.ToString(tmp2702);
          }
          tmp2702.Append(')');
          return tmp2702.ToString();
        }
      }


      public partial class inputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressByNumber_result()
        {
        }

        public inputAddressByNumber_result DeepCopy()
        {
          var tmp2704 = new inputAddressByNumber_result();
          if(__isset.success)
          {
            tmp2704.Success = this.Success;
          }
          tmp2704.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2704.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2704.__isset.e = this.__isset.e;
          return tmp2704;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2705 = new TStruct("inputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp2705, cancellationToken);
            var tmp2706 = new TField();

            if(this.__isset.success)
            {
              tmp2706.Name = "Success";
              tmp2706.Type = TType.I32;
              tmp2706.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2706, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2706.Name = "E";
                tmp2706.Type = TType.Struct;
                tmp2706.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2706, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2707 = new StringBuilder("inputAddressByNumber_result(");
          int tmp2708 = 0;
          if(__isset.success)
          {
            if(0 < tmp2708++) { tmp2707.Append(", "); }
            tmp2707.Append("Success: ");
            Success.ToString(tmp2707);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2708++) { tmp2707.Append(", "); }
            tmp2707.Append("E: ");
            E.ToString(tmp2707);
          }
          tmp2707.Append(')');
          return tmp2707.ToString();
        }
      }


      public partial class outputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputAddress_args()
        {
        }

        public outputAddress_args DeepCopy()
        {
          var tmp2709 = new outputAddress_args();
          if(__isset.c)
          {
            tmp2709.C = this.C;
          }
          tmp2709.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2709.Name = this.Name;
          }
          tmp2709.__isset.name = this.__isset.name;
          return tmp2709;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2710 = new TStruct("outputAddress_args");
            await oprot.WriteStructBeginAsync(tmp2710, cancellationToken);
            var tmp2711 = new TField();
            if(__isset.c)
            {
              tmp2711.Name = "c";
              tmp2711.Type = TType.I64;
              tmp2711.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2711, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2711.Name = "name";
              tmp2711.Type = TType.String;
              tmp2711.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2711, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2712 = new StringBuilder("outputAddress_args(");
          int tmp2713 = 0;
          if(__isset.c)
          {
            if(0 < tmp2713++) { tmp2712.Append(", "); }
            tmp2712.Append("C: ");
            C.ToString(tmp2712);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2713++) { tmp2712.Append(", "); }
            tmp2712.Append("Name: ");
            Name.ToString(tmp2712);
          }
          tmp2712.Append(')');
          return tmp2712.ToString();
        }
      }


      public partial class outputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddress_result()
        {
        }

        public outputAddress_result DeepCopy()
        {
          var tmp2714 = new outputAddress_result();
          if(__isset.success)
          {
            tmp2714.Success = this.Success;
          }
          tmp2714.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2714.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2714.__isset.e = this.__isset.e;
          return tmp2714;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2715 = new TStruct("outputAddress_result");
            await oprot.WriteStructBeginAsync(tmp2715, cancellationToken);
            var tmp2716 = new TField();

            if(this.__isset.success)
            {
              tmp2716.Name = "Success";
              tmp2716.Type = TType.I32;
              tmp2716.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2716, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2716.Name = "E";
                tmp2716.Type = TType.Struct;
                tmp2716.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2716, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2717 = new StringBuilder("outputAddress_result(");
          int tmp2718 = 0;
          if(__isset.success)
          {
            if(0 < tmp2718++) { tmp2717.Append(", "); }
            tmp2717.Append("Success: ");
            Success.ToString(tmp2717);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2718++) { tmp2717.Append(", "); }
            tmp2717.Append("E: ");
            E.ToString(tmp2717);
          }
          tmp2717.Append(')');
          return tmp2717.ToString();
        }
      }


      public partial class outputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputAddressByNumber_args()
        {
        }

        public outputAddressByNumber_args DeepCopy()
        {
          var tmp2719 = new outputAddressByNumber_args();
          if(__isset.c)
          {
            tmp2719.C = this.C;
          }
          tmp2719.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2719.Num = this.Num;
          }
          tmp2719.__isset.num = this.__isset.num;
          return tmp2719;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2720 = new TStruct("outputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp2720, cancellationToken);
            var tmp2721 = new TField();
            if(__isset.c)
            {
              tmp2721.Name = "c";
              tmp2721.Type = TType.I64;
              tmp2721.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2721, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2721.Name = "num";
              tmp2721.Type = TType.I32;
              tmp2721.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2721, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2722 = new StringBuilder("outputAddressByNumber_args(");
          int tmp2723 = 0;
          if(__isset.c)
          {
            if(0 < tmp2723++) { tmp2722.Append(", "); }
            tmp2722.Append("C: ");
            C.ToString(tmp2722);
          }
          if(__isset.num)
          {
            if(0 < tmp2723++) { tmp2722.Append(", "); }
            tmp2722.Append("Num: ");
            Num.ToString(tmp2722);
          }
          tmp2722.Append(')');
          return tmp2722.ToString();
        }
      }


      public partial class outputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressByNumber_result()
        {
        }

        public outputAddressByNumber_result DeepCopy()
        {
          var tmp2724 = new outputAddressByNumber_result();
          if(__isset.success)
          {
            tmp2724.Success = this.Success;
          }
          tmp2724.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2724.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2724.__isset.e = this.__isset.e;
          return tmp2724;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2725 = new TStruct("outputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp2725, cancellationToken);
            var tmp2726 = new TField();

            if(this.__isset.success)
            {
              tmp2726.Name = "Success";
              tmp2726.Type = TType.I32;
              tmp2726.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2726, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2726.Name = "E";
                tmp2726.Type = TType.Struct;
                tmp2726.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2726, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2727 = new StringBuilder("outputAddressByNumber_result(");
          int tmp2728 = 0;
          if(__isset.success)
          {
            if(0 < tmp2728++) { tmp2727.Append(", "); }
            tmp2727.Append("Success: ");
            Success.ToString(tmp2727);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2728++) { tmp2727.Append(", "); }
            tmp2727.Append("E: ");
            E.ToString(tmp2727);
          }
          tmp2727.Append(')');
          return tmp2727.ToString();
        }
      }


      public partial class monitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public monitorIOAddress_args()
        {
        }

        public monitorIOAddress_args DeepCopy()
        {
          var tmp2729 = new monitorIOAddress_args();
          if(__isset.c)
          {
            tmp2729.C = this.C;
          }
          tmp2729.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp2729.Address = this.Address;
          }
          tmp2729.__isset.address = this.__isset.address;
          return tmp2729;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2730 = new TStruct("monitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp2730, cancellationToken);
            var tmp2731 = new TField();
            if(__isset.c)
            {
              tmp2731.Name = "c";
              tmp2731.Type = TType.I64;
              tmp2731.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2731, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp2731.Name = "address";
              tmp2731.Type = TType.I32;
              tmp2731.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2731, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2732 = new StringBuilder("monitorIOAddress_args(");
          int tmp2733 = 0;
          if(__isset.c)
          {
            if(0 < tmp2733++) { tmp2732.Append(", "); }
            tmp2732.Append("C: ");
            C.ToString(tmp2732);
          }
          if(__isset.address)
          {
            if(0 < tmp2733++) { tmp2732.Append(", "); }
            tmp2732.Append("Address: ");
            Address.ToString(tmp2732);
          }
          tmp2732.Append(')');
          return tmp2732.ToString();
        }
      }


      public partial class monitorIOAddress_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorIOAddress_result()
        {
        }

        public monitorIOAddress_result DeepCopy()
        {
          var tmp2734 = new monitorIOAddress_result();
          if((E != null) && __isset.e)
          {
            tmp2734.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2734.__isset.e = this.__isset.e;
          return tmp2734;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2735 = new TStruct("monitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp2735, cancellationToken);
            var tmp2736 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2736.Name = "E";
                tmp2736.Type = TType.Struct;
                tmp2736.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2736, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2737 = new StringBuilder("monitorIOAddress_result(");
          int tmp2738 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2738++) { tmp2737.Append(", "); }
            tmp2737.Append("E: ");
            E.ToString(tmp2737);
          }
          tmp2737.Append(')');
          return tmp2737.ToString();
        }
      }


      public partial class unmonitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public unmonitorIOAddress_args()
        {
        }

        public unmonitorIOAddress_args DeepCopy()
        {
          var tmp2739 = new unmonitorIOAddress_args();
          if(__isset.c)
          {
            tmp2739.C = this.C;
          }
          tmp2739.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp2739.Address = this.Address;
          }
          tmp2739.__isset.address = this.__isset.address;
          return tmp2739;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2740 = new TStruct("unmonitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp2740, cancellationToken);
            var tmp2741 = new TField();
            if(__isset.c)
            {
              tmp2741.Name = "c";
              tmp2741.Type = TType.I64;
              tmp2741.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2741, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp2741.Name = "address";
              tmp2741.Type = TType.I32;
              tmp2741.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2741, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2742 = new StringBuilder("unmonitorIOAddress_args(");
          int tmp2743 = 0;
          if(__isset.c)
          {
            if(0 < tmp2743++) { tmp2742.Append(", "); }
            tmp2742.Append("C: ");
            C.ToString(tmp2742);
          }
          if(__isset.address)
          {
            if(0 < tmp2743++) { tmp2742.Append(", "); }
            tmp2742.Append("Address: ");
            Address.ToString(tmp2742);
          }
          tmp2742.Append(')');
          return tmp2742.ToString();
        }
      }


      public partial class unmonitorIOAddress_result : TBase
      {

        public unmonitorIOAddress_result()
        {
        }

        public unmonitorIOAddress_result DeepCopy()
        {
          var tmp2744 = new unmonitorIOAddress_result();
          return tmp2744;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2745 = new TStruct("unmonitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp2745, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2746 = new StringBuilder("unmonitorIOAddress_result(");
          tmp2746.Append(')');
          return tmp2746.ToString();
        }
      }


      public partial class inputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public inputAddressValue_args()
        {
        }

        public inputAddressValue_args DeepCopy()
        {
          var tmp2748 = new inputAddressValue_args();
          if(__isset.c)
          {
            tmp2748.C = this.C;
          }
          tmp2748.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp2748.Address = this.Address;
          }
          tmp2748.__isset.address = this.__isset.address;
          return tmp2748;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2749 = new TStruct("inputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp2749, cancellationToken);
            var tmp2750 = new TField();
            if(__isset.c)
            {
              tmp2750.Name = "c";
              tmp2750.Type = TType.I64;
              tmp2750.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2750, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp2750.Name = "address";
              tmp2750.Type = TType.I32;
              tmp2750.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2750, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2751 = new StringBuilder("inputAddressValue_args(");
          int tmp2752 = 0;
          if(__isset.c)
          {
            if(0 < tmp2752++) { tmp2751.Append(", "); }
            tmp2751.Append("C: ");
            C.ToString(tmp2751);
          }
          if(__isset.address)
          {
            if(0 < tmp2752++) { tmp2751.Append(", "); }
            tmp2751.Append("Address: ");
            Address.ToString(tmp2751);
          }
          tmp2751.Append(')');
          return tmp2751.ToString();
        }
      }


      public partial class inputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressValue_result()
        {
        }

        public inputAddressValue_result DeepCopy()
        {
          var tmp2753 = new inputAddressValue_result();
          if(__isset.success)
          {
            tmp2753.Success = this.Success;
          }
          tmp2753.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2753.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2753.__isset.e = this.__isset.e;
          return tmp2753;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2754 = new TStruct("inputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp2754, cancellationToken);
            var tmp2755 = new TField();

            if(this.__isset.success)
            {
              tmp2755.Name = "Success";
              tmp2755.Type = TType.Bool;
              tmp2755.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2755, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2755.Name = "E";
                tmp2755.Type = TType.Struct;
                tmp2755.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2755, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2756 = new StringBuilder("inputAddressValue_result(");
          int tmp2757 = 0;
          if(__isset.success)
          {
            if(0 < tmp2757++) { tmp2756.Append(", "); }
            tmp2756.Append("Success: ");
            Success.ToString(tmp2756);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2757++) { tmp2756.Append(", "); }
            tmp2756.Append("E: ");
            E.ToString(tmp2756);
          }
          tmp2756.Append(')');
          return tmp2756.ToString();
        }
      }


      public partial class outputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public outputAddressValue_args()
        {
        }

        public outputAddressValue_args DeepCopy()
        {
          var tmp2758 = new outputAddressValue_args();
          if(__isset.c)
          {
            tmp2758.C = this.C;
          }
          tmp2758.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp2758.Address = this.Address;
          }
          tmp2758.__isset.address = this.__isset.address;
          return tmp2758;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2759 = new TStruct("outputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp2759, cancellationToken);
            var tmp2760 = new TField();
            if(__isset.c)
            {
              tmp2760.Name = "c";
              tmp2760.Type = TType.I64;
              tmp2760.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2760, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp2760.Name = "address";
              tmp2760.Type = TType.I32;
              tmp2760.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2760, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2761 = new StringBuilder("outputAddressValue_args(");
          int tmp2762 = 0;
          if(__isset.c)
          {
            if(0 < tmp2762++) { tmp2761.Append(", "); }
            tmp2761.Append("C: ");
            C.ToString(tmp2761);
          }
          if(__isset.address)
          {
            if(0 < tmp2762++) { tmp2761.Append(", "); }
            tmp2761.Append("Address: ");
            Address.ToString(tmp2761);
          }
          tmp2761.Append(')');
          return tmp2761.ToString();
        }
      }


      public partial class outputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressValue_result()
        {
        }

        public outputAddressValue_result DeepCopy()
        {
          var tmp2763 = new outputAddressValue_result();
          if(__isset.success)
          {
            tmp2763.Success = this.Success;
          }
          tmp2763.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2763.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2763.__isset.e = this.__isset.e;
          return tmp2763;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2764 = new TStruct("outputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp2764, cancellationToken);
            var tmp2765 = new TField();

            if(this.__isset.success)
            {
              tmp2765.Name = "Success";
              tmp2765.Type = TType.Bool;
              tmp2765.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2765, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2765.Name = "E";
                tmp2765.Type = TType.Struct;
                tmp2765.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2765, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2766 = new StringBuilder("outputAddressValue_result(");
          int tmp2767 = 0;
          if(__isset.success)
          {
            if(0 < tmp2767++) { tmp2766.Append(", "); }
            tmp2766.Append("Success: ");
            Success.ToString(tmp2766);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2767++) { tmp2766.Append(", "); }
            tmp2766.Append("E: ");
            E.ToString(tmp2766);
          }
          tmp2766.Append(')');
          return tmp2766.ToString();
        }
      }


      public partial class setOutputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setOutputAddress_args()
        {
        }

        public setOutputAddress_args DeepCopy()
        {
          var tmp2768 = new setOutputAddress_args();
          if(__isset.c)
          {
            tmp2768.C = this.C;
          }
          tmp2768.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp2768.Address = this.Address;
          }
          tmp2768.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp2768.Value = this.Value;
          }
          tmp2768.__isset.@value = this.__isset.@value;
          return tmp2768;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2769 = new TStruct("setOutputAddress_args");
            await oprot.WriteStructBeginAsync(tmp2769, cancellationToken);
            var tmp2770 = new TField();
            if(__isset.c)
            {
              tmp2770.Name = "c";
              tmp2770.Type = TType.I64;
              tmp2770.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2770, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp2770.Name = "address";
              tmp2770.Type = TType.I32;
              tmp2770.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2770, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp2770.Name = "value";
              tmp2770.Type = TType.Bool;
              tmp2770.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2770, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2771 = new StringBuilder("setOutputAddress_args(");
          int tmp2772 = 0;
          if(__isset.c)
          {
            if(0 < tmp2772++) { tmp2771.Append(", "); }
            tmp2771.Append("C: ");
            C.ToString(tmp2771);
          }
          if(__isset.address)
          {
            if(0 < tmp2772++) { tmp2771.Append(", "); }
            tmp2771.Append("Address: ");
            Address.ToString(tmp2771);
          }
          if(__isset.@value)
          {
            if(0 < tmp2772++) { tmp2771.Append(", "); }
            tmp2771.Append("Value: ");
            Value.ToString(tmp2771);
          }
          tmp2771.Append(')');
          return tmp2771.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_args : TBase
      {
        private long _c;
        private string _busType;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string BusType
        {
          get
          {
            return _busType;
          }
          set
          {
            __isset.busType = true;
            this._busType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool busType;
        }

        public fieldBusStatusInputGroup_args()
        {
        }

        public fieldBusStatusInputGroup_args DeepCopy()
        {
          var tmp2773 = new fieldBusStatusInputGroup_args();
          if(__isset.c)
          {
            tmp2773.C = this.C;
          }
          tmp2773.__isset.c = this.__isset.c;
          if((BusType != null) && __isset.busType)
          {
            tmp2773.BusType = this.BusType;
          }
          tmp2773.__isset.busType = this.__isset.busType;
          return tmp2773;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    BusType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2774 = new TStruct("fieldBusStatusInputGroup_args");
            await oprot.WriteStructBeginAsync(tmp2774, cancellationToken);
            var tmp2775 = new TField();
            if(__isset.c)
            {
              tmp2775.Name = "c";
              tmp2775.Type = TType.I64;
              tmp2775.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2775, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((BusType != null) && __isset.busType)
            {
              tmp2775.Name = "busType";
              tmp2775.Type = TType.String;
              tmp2775.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2775, cancellationToken);
              await oprot.WriteStringAsync(BusType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.busType == other.__isset.busType) && ((!__isset.busType) || (global::System.Object.Equals(BusType, other.BusType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((BusType != null) && __isset.busType)
            {
              hashcode = (hashcode * 397) + BusType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2776 = new StringBuilder("fieldBusStatusInputGroup_args(");
          int tmp2777 = 0;
          if(__isset.c)
          {
            if(0 < tmp2777++) { tmp2776.Append(", "); }
            tmp2776.Append("C: ");
            C.ToString(tmp2776);
          }
          if((BusType != null) && __isset.busType)
          {
            if(0 < tmp2777++) { tmp2776.Append(", "); }
            tmp2776.Append("BusType: ");
            BusType.ToString(tmp2776);
          }
          tmp2776.Append(')');
          return tmp2776.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public fieldBusStatusInputGroup_result()
        {
        }

        public fieldBusStatusInputGroup_result DeepCopy()
        {
          var tmp2778 = new fieldBusStatusInputGroup_result();
          if(__isset.success)
          {
            tmp2778.Success = this.Success;
          }
          tmp2778.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2778.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2778.__isset.e = this.__isset.e;
          return tmp2778;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2779 = new TStruct("fieldBusStatusInputGroup_result");
            await oprot.WriteStructBeginAsync(tmp2779, cancellationToken);
            var tmp2780 = new TField();

            if(this.__isset.success)
            {
              tmp2780.Name = "Success";
              tmp2780.Type = TType.I32;
              tmp2780.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2780, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2780.Name = "E";
                tmp2780.Type = TType.Struct;
                tmp2780.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2780, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2781 = new StringBuilder("fieldBusStatusInputGroup_result(");
          int tmp2782 = 0;
          if(__isset.success)
          {
            if(0 < tmp2782++) { tmp2781.Append(", "); }
            tmp2781.Append("Success: ");
            Success.ToString(tmp2781);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2782++) { tmp2781.Append(", "); }
            tmp2781.Append("E: ");
            E.ToString(tmp2781);
          }
          tmp2781.Append(')');
          return tmp2781.ToString();
        }
      }


      public partial class controlGroups_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public controlGroups_args()
        {
        }

        public controlGroups_args DeepCopy()
        {
          var tmp2783 = new controlGroups_args();
          if(__isset.c)
          {
            tmp2783.C = this.C;
          }
          tmp2783.__isset.c = this.__isset.c;
          return tmp2783;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2784 = new TStruct("controlGroups_args");
            await oprot.WriteStructBeginAsync(tmp2784, cancellationToken);
            var tmp2785 = new TField();
            if(__isset.c)
            {
              tmp2785.Name = "c";
              tmp2785.Type = TType.I64;
              tmp2785.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2785, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2786 = new StringBuilder("controlGroups_args(");
          int tmp2787 = 0;
          if(__isset.c)
          {
            if(0 < tmp2787++) { tmp2786.Append(", "); }
            tmp2786.Append("C: ");
            C.ToString(tmp2786);
          }
          tmp2786.Append(')');
          return tmp2786.ToString();
        }
      }


      public partial class controlGroups_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControlGroup> _success;

        public List<global::Yaskawa.Ext.API.ControlGroup> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public controlGroups_result()
        {
        }

        public controlGroups_result DeepCopy()
        {
          var tmp2788 = new controlGroups_result();
          if((Success != null) && __isset.success)
          {
            tmp2788.Success = this.Success.DeepCopy();
          }
          tmp2788.__isset.success = this.__isset.success;
          return tmp2788;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2789 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControlGroup>(_list2789.Count);
                      for(int _i2790 = 0; _i2790 < _list2789.Count; ++_i2790)
                      {
                        global::Yaskawa.Ext.API.ControlGroup _elem2791;
                        _elem2791 = new global::Yaskawa.Ext.API.ControlGroup();
                        await _elem2791.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem2791);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2792 = new TStruct("controlGroups_result");
            await oprot.WriteStructBeginAsync(tmp2792, cancellationToken);
            var tmp2793 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2793.Name = "Success";
                tmp2793.Type = TType.List;
                tmp2793.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2793, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControlGroup _iter2794 in Success)
                {
                  await _iter2794.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2795 = new StringBuilder("controlGroups_result(");
          int tmp2796 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2796++) { tmp2795.Append(", "); }
            tmp2795.Append("Success: ");
            Success.ToString(tmp2795);
          }
          tmp2795.Append(')');
          return tmp2795.ToString();
        }
      }


      public partial class currentControlGroup_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentControlGroup_args()
        {
        }

        public currentControlGroup_args DeepCopy()
        {
          var tmp2797 = new currentControlGroup_args();
          if(__isset.c)
          {
            tmp2797.C = this.C;
          }
          tmp2797.__isset.c = this.__isset.c;
          return tmp2797;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2798 = new TStruct("currentControlGroup_args");
            await oprot.WriteStructBeginAsync(tmp2798, cancellationToken);
            var tmp2799 = new TField();
            if(__isset.c)
            {
              tmp2799.Name = "c";
              tmp2799.Type = TType.I64;
              tmp2799.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2799, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2800 = new StringBuilder("currentControlGroup_args(");
          int tmp2801 = 0;
          if(__isset.c)
          {
            if(0 < tmp2801++) { tmp2800.Append(", "); }
            tmp2800.Append("C: ");
            C.ToString(tmp2800);
          }
          tmp2800.Append(')');
          return tmp2800.ToString();
        }
      }


      public partial class currentControlGroup_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentControlGroup_result()
        {
        }

        public currentControlGroup_result DeepCopy()
        {
          var tmp2802 = new currentControlGroup_result();
          if(__isset.success)
          {
            tmp2802.Success = this.Success;
          }
          tmp2802.__isset.success = this.__isset.success;
          return tmp2802;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2803 = new TStruct("currentControlGroup_result");
            await oprot.WriteStructBeginAsync(tmp2803, cancellationToken);
            var tmp2804 = new TField();

            if(this.__isset.success)
            {
              tmp2804.Name = "Success";
              tmp2804.Type = TType.Byte;
              tmp2804.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2804, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2805 = new StringBuilder("currentControlGroup_result(");
          int tmp2806 = 0;
          if(__isset.success)
          {
            if(0 < tmp2806++) { tmp2805.Append(", "); }
            tmp2805.Append("Success: ");
            Success.ToString(tmp2805);
          }
          tmp2805.Append(')');
          return tmp2805.ToString();
        }
      }


      public partial class robotCount_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public robotCount_args()
        {
        }

        public robotCount_args DeepCopy()
        {
          var tmp2807 = new robotCount_args();
          if(__isset.c)
          {
            tmp2807.C = this.C;
          }
          tmp2807.__isset.c = this.__isset.c;
          return tmp2807;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2808 = new TStruct("robotCount_args");
            await oprot.WriteStructBeginAsync(tmp2808, cancellationToken);
            var tmp2809 = new TField();
            if(__isset.c)
            {
              tmp2809.Name = "c";
              tmp2809.Type = TType.I64;
              tmp2809.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2809, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2810 = new StringBuilder("robotCount_args(");
          int tmp2811 = 0;
          if(__isset.c)
          {
            if(0 < tmp2811++) { tmp2810.Append(", "); }
            tmp2810.Append("C: ");
            C.ToString(tmp2810);
          }
          tmp2810.Append(')');
          return tmp2810.ToString();
        }
      }


      public partial class robotCount_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public robotCount_result()
        {
        }

        public robotCount_result DeepCopy()
        {
          var tmp2812 = new robotCount_result();
          if(__isset.success)
          {
            tmp2812.Success = this.Success;
          }
          tmp2812.__isset.success = this.__isset.success;
          return tmp2812;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2813 = new TStruct("robotCount_result");
            await oprot.WriteStructBeginAsync(tmp2813, cancellationToken);
            var tmp2814 = new TField();

            if(this.__isset.success)
            {
              tmp2814.Name = "Success";
              tmp2814.Type = TType.Byte;
              tmp2814.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2814, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2815 = new StringBuilder("robotCount_result(");
          int tmp2816 = 0;
          if(__isset.success)
          {
            if(0 < tmp2816++) { tmp2815.Append(", "); }
            tmp2815.Append("Success: ");
            Success.ToString(tmp2815);
          }
          tmp2815.Append(')');
          return tmp2815.ToString();
        }
      }


      public partial class currentRobot_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentRobot_args()
        {
        }

        public currentRobot_args DeepCopy()
        {
          var tmp2817 = new currentRobot_args();
          if(__isset.c)
          {
            tmp2817.C = this.C;
          }
          tmp2817.__isset.c = this.__isset.c;
          return tmp2817;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2818 = new TStruct("currentRobot_args");
            await oprot.WriteStructBeginAsync(tmp2818, cancellationToken);
            var tmp2819 = new TField();
            if(__isset.c)
            {
              tmp2819.Name = "c";
              tmp2819.Type = TType.I64;
              tmp2819.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2819, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2820 = new StringBuilder("currentRobot_args(");
          int tmp2821 = 0;
          if(__isset.c)
          {
            if(0 < tmp2821++) { tmp2820.Append(", "); }
            tmp2820.Append("C: ");
            C.ToString(tmp2820);
          }
          tmp2820.Append(')');
          return tmp2820.ToString();
        }
      }


      public partial class currentRobot_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentRobot_result()
        {
        }

        public currentRobot_result DeepCopy()
        {
          var tmp2822 = new currentRobot_result();
          if(__isset.success)
          {
            tmp2822.Success = this.Success;
          }
          tmp2822.__isset.success = this.__isset.success;
          return tmp2822;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2823 = new TStruct("currentRobot_result");
            await oprot.WriteStructBeginAsync(tmp2823, cancellationToken);
            var tmp2824 = new TField();

            if(this.__isset.success)
            {
              tmp2824.Name = "Success";
              tmp2824.Type = TType.I32;
              tmp2824.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2824, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2825 = new StringBuilder("currentRobot_result(");
          int tmp2826 = 0;
          if(__isset.success)
          {
            if(0 < tmp2826++) { tmp2825.Append(", "); }
            tmp2825.Append("Success: ");
            Success.ToString(tmp2825);
          }
          tmp2825.Append(')');
          return tmp2825.ToString();
        }
      }


      public partial class variable_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variable_args()
        {
        }

        public variable_args DeepCopy()
        {
          var tmp2827 = new variable_args();
          if(__isset.c)
          {
            tmp2827.C = this.C;
          }
          tmp2827.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2827.Name = this.Name;
          }
          tmp2827.__isset.name = this.__isset.name;
          return tmp2827;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2828 = new TStruct("variable_args");
            await oprot.WriteStructBeginAsync(tmp2828, cancellationToken);
            var tmp2829 = new TField();
            if(__isset.c)
            {
              tmp2829.Name = "c";
              tmp2829.Type = TType.I64;
              tmp2829.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2829, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2829.Name = "name";
              tmp2829.Type = TType.String;
              tmp2829.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2829, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2830 = new StringBuilder("variable_args(");
          int tmp2831 = 0;
          if(__isset.c)
          {
            if(0 < tmp2831++) { tmp2830.Append(", "); }
            tmp2830.Append("C: ");
            C.ToString(tmp2830);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2831++) { tmp2830.Append(", "); }
            tmp2830.Append("Name: ");
            Name.ToString(tmp2830);
          }
          tmp2830.Append(')');
          return tmp2830.ToString();
        }
      }


      public partial class variable_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variable_result()
        {
        }

        public variable_result DeepCopy()
        {
          var tmp2832 = new variable_result();
          if((Success != null) && __isset.success)
          {
            tmp2832.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp2832.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2832.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2832.__isset.e = this.__isset.e;
          return tmp2832;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2833 = new TStruct("variable_result");
            await oprot.WriteStructBeginAsync(tmp2833, cancellationToken);
            var tmp2834 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2834.Name = "Success";
                tmp2834.Type = TType.Struct;
                tmp2834.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2834, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2834.Name = "E";
                tmp2834.Type = TType.Struct;
                tmp2834.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2834, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2835 = new StringBuilder("variable_result(");
          int tmp2836 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2836++) { tmp2835.Append(", "); }
            tmp2835.Append("Success: ");
            Success.ToString(tmp2835);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2836++) { tmp2835.Append(", "); }
            tmp2835.Append("E: ");
            E.ToString(tmp2835);
          }
          tmp2835.Append(')');
          return tmp2835.ToString();
        }
      }


      public partial class variableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public variableByAddr_args()
        {
        }

        public variableByAddr_args DeepCopy()
        {
          var tmp2837 = new variableByAddr_args();
          if(__isset.c)
          {
            tmp2837.C = this.C;
          }
          tmp2837.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp2837.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp2837.__isset.addr = this.__isset.addr;
          return tmp2837;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2838 = new TStruct("variableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp2838, cancellationToken);
            var tmp2839 = new TField();
            if(__isset.c)
            {
              tmp2839.Name = "c";
              tmp2839.Type = TType.I64;
              tmp2839.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2839, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp2839.Name = "addr";
              tmp2839.Type = TType.Struct;
              tmp2839.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2839, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2840 = new StringBuilder("variableByAddr_args(");
          int tmp2841 = 0;
          if(__isset.c)
          {
            if(0 < tmp2841++) { tmp2840.Append(", "); }
            tmp2840.Append("C: ");
            C.ToString(tmp2840);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp2841++) { tmp2840.Append(", "); }
            tmp2840.Append("Addr: ");
            Addr.ToString(tmp2840);
          }
          tmp2840.Append(')');
          return tmp2840.ToString();
        }
      }


      public partial class variableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableByAddr_result()
        {
        }

        public variableByAddr_result DeepCopy()
        {
          var tmp2842 = new variableByAddr_result();
          if((Success != null) && __isset.success)
          {
            tmp2842.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp2842.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2842.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2842.__isset.e = this.__isset.e;
          return tmp2842;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2843 = new TStruct("variableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp2843, cancellationToken);
            var tmp2844 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2844.Name = "Success";
                tmp2844.Type = TType.Struct;
                tmp2844.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2844, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2844.Name = "E";
                tmp2844.Type = TType.Struct;
                tmp2844.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2844, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2845 = new StringBuilder("variableByAddr_result(");
          int tmp2846 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2846++) { tmp2845.Append(", "); }
            tmp2845.Append("Success: ");
            Success.ToString(tmp2845);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2846++) { tmp2845.Append(", "); }
            tmp2845.Append("E: ");
            E.ToString(tmp2845);
          }
          tmp2845.Append(')');
          return tmp2845.ToString();
        }
      }


      public partial class setVariable_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool @value;
        }

        public setVariable_args()
        {
        }

        public setVariable_args DeepCopy()
        {
          var tmp2847 = new setVariable_args();
          if(__isset.c)
          {
            tmp2847.C = this.C;
          }
          tmp2847.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2847.Name = this.Name;
          }
          tmp2847.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp2847.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp2847.__isset.@value = this.__isset.@value;
          return tmp2847;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2848 = new TStruct("setVariable_args");
            await oprot.WriteStructBeginAsync(tmp2848, cancellationToken);
            var tmp2849 = new TField();
            if(__isset.c)
            {
              tmp2849.Name = "c";
              tmp2849.Type = TType.I64;
              tmp2849.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2849, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2849.Name = "name";
              tmp2849.Type = TType.String;
              tmp2849.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2849, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp2849.Name = "value";
              tmp2849.Type = TType.Struct;
              tmp2849.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2849, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2850 = new StringBuilder("setVariable_args(");
          int tmp2851 = 0;
          if(__isset.c)
          {
            if(0 < tmp2851++) { tmp2850.Append(", "); }
            tmp2850.Append("C: ");
            C.ToString(tmp2850);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2851++) { tmp2850.Append(", "); }
            tmp2850.Append("Name: ");
            Name.ToString(tmp2850);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp2851++) { tmp2850.Append(", "); }
            tmp2850.Append("Value: ");
            Value.ToString(tmp2850);
          }
          tmp2850.Append(')');
          return tmp2850.ToString();
        }
      }


      public partial class setVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariable_result()
        {
        }

        public setVariable_result DeepCopy()
        {
          var tmp2852 = new setVariable_result();
          if((E != null) && __isset.e)
          {
            tmp2852.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2852.__isset.e = this.__isset.e;
          return tmp2852;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2853 = new TStruct("setVariable_result");
            await oprot.WriteStructBeginAsync(tmp2853, cancellationToken);
            var tmp2854 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2854.Name = "E";
                tmp2854.Type = TType.Struct;
                tmp2854.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2854, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2855 = new StringBuilder("setVariable_result(");
          int tmp2856 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2856++) { tmp2855.Append(", "); }
            tmp2855.Append("E: ");
            E.ToString(tmp2855);
          }
          tmp2855.Append(')');
          return tmp2855.ToString();
        }
      }


      public partial class setVariableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool @value;
        }

        public setVariableByAddr_args()
        {
        }

        public setVariableByAddr_args DeepCopy()
        {
          var tmp2857 = new setVariableByAddr_args();
          if(__isset.c)
          {
            tmp2857.C = this.C;
          }
          tmp2857.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp2857.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp2857.__isset.addr = this.__isset.addr;
          if((Value != null) && __isset.@value)
          {
            tmp2857.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp2857.__isset.@value = this.__isset.@value;
          return tmp2857;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2858 = new TStruct("setVariableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp2858, cancellationToken);
            var tmp2859 = new TField();
            if(__isset.c)
            {
              tmp2859.Name = "c";
              tmp2859.Type = TType.I64;
              tmp2859.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2859, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp2859.Name = "addr";
              tmp2859.Type = TType.Struct;
              tmp2859.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2859, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp2859.Name = "value";
              tmp2859.Type = TType.Struct;
              tmp2859.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2859, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2860 = new StringBuilder("setVariableByAddr_args(");
          int tmp2861 = 0;
          if(__isset.c)
          {
            if(0 < tmp2861++) { tmp2860.Append(", "); }
            tmp2860.Append("C: ");
            C.ToString(tmp2860);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp2861++) { tmp2860.Append(", "); }
            tmp2860.Append("Addr: ");
            Addr.ToString(tmp2860);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp2861++) { tmp2860.Append(", "); }
            tmp2860.Append("Value: ");
            Value.ToString(tmp2860);
          }
          tmp2860.Append(')');
          return tmp2860.ToString();
        }
      }


      public partial class setVariableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableByAddr_result()
        {
        }

        public setVariableByAddr_result DeepCopy()
        {
          var tmp2862 = new setVariableByAddr_result();
          if((E != null) && __isset.e)
          {
            tmp2862.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2862.__isset.e = this.__isset.e;
          return tmp2862;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2863 = new TStruct("setVariableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp2863, cancellationToken);
            var tmp2864 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2864.Name = "E";
                tmp2864.Type = TType.Struct;
                tmp2864.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2864, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2865 = new StringBuilder("setVariableByAddr_result(");
          int tmp2866 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2866++) { tmp2865.Append(", "); }
            tmp2865.Append("E: ");
            E.ToString(tmp2865);
          }
          tmp2865.Append(')');
          return tmp2865.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool space;
        }

        public variableAddrByNameAndSpace_args()
        {
        }

        public variableAddrByNameAndSpace_args DeepCopy()
        {
          var tmp2867 = new variableAddrByNameAndSpace_args();
          if(__isset.c)
          {
            tmp2867.C = this.C;
          }
          tmp2867.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2867.Name = this.Name;
          }
          tmp2867.__isset.name = this.__isset.name;
          if(__isset.space)
          {
            tmp2867.Space = this.Space;
          }
          tmp2867.__isset.space = this.__isset.space;
          return tmp2867;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2868 = new TStruct("variableAddrByNameAndSpace_args");
            await oprot.WriteStructBeginAsync(tmp2868, cancellationToken);
            var tmp2869 = new TField();
            if(__isset.c)
            {
              tmp2869.Name = "c";
              tmp2869.Type = TType.I64;
              tmp2869.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2869, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2869.Name = "name";
              tmp2869.Type = TType.String;
              tmp2869.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2869, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp2869.Name = "space";
              tmp2869.Type = TType.I32;
              tmp2869.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2869, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2870 = new StringBuilder("variableAddrByNameAndSpace_args(");
          int tmp2871 = 0;
          if(__isset.c)
          {
            if(0 < tmp2871++) { tmp2870.Append(", "); }
            tmp2870.Append("C: ");
            C.ToString(tmp2870);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2871++) { tmp2870.Append(", "); }
            tmp2870.Append("Name: ");
            Name.ToString(tmp2870);
          }
          if(__isset.space)
          {
            if(0 < tmp2871++) { tmp2870.Append(", "); }
            tmp2870.Append("Space: ");
            Space.ToString(tmp2870);
          }
          tmp2870.Append(')');
          return tmp2870.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByNameAndSpace_result()
        {
        }

        public variableAddrByNameAndSpace_result DeepCopy()
        {
          var tmp2872 = new variableAddrByNameAndSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp2872.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp2872.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2872.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2872.__isset.e = this.__isset.e;
          return tmp2872;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2873 = new TStruct("variableAddrByNameAndSpace_result");
            await oprot.WriteStructBeginAsync(tmp2873, cancellationToken);
            var tmp2874 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2874.Name = "Success";
                tmp2874.Type = TType.Struct;
                tmp2874.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2874, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2874.Name = "E";
                tmp2874.Type = TType.Struct;
                tmp2874.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2874, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2875 = new StringBuilder("variableAddrByNameAndSpace_result(");
          int tmp2876 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2876++) { tmp2875.Append(", "); }
            tmp2875.Append("Success: ");
            Success.ToString(tmp2875);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2876++) { tmp2875.Append(", "); }
            tmp2875.Append("E: ");
            E.ToString(tmp2875);
          }
          tmp2875.Append(')');
          return tmp2875.ToString();
        }
      }


      public partial class variableAddrByName_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variableAddrByName_args()
        {
        }

        public variableAddrByName_args DeepCopy()
        {
          var tmp2877 = new variableAddrByName_args();
          if(__isset.c)
          {
            tmp2877.C = this.C;
          }
          tmp2877.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2877.Name = this.Name;
          }
          tmp2877.__isset.name = this.__isset.name;
          return tmp2877;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2878 = new TStruct("variableAddrByName_args");
            await oprot.WriteStructBeginAsync(tmp2878, cancellationToken);
            var tmp2879 = new TField();
            if(__isset.c)
            {
              tmp2879.Name = "c";
              tmp2879.Type = TType.I64;
              tmp2879.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2879, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2879.Name = "name";
              tmp2879.Type = TType.String;
              tmp2879.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2879, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2880 = new StringBuilder("variableAddrByName_args(");
          int tmp2881 = 0;
          if(__isset.c)
          {
            if(0 < tmp2881++) { tmp2880.Append(", "); }
            tmp2880.Append("C: ");
            C.ToString(tmp2880);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2881++) { tmp2880.Append(", "); }
            tmp2880.Append("Name: ");
            Name.ToString(tmp2880);
          }
          tmp2880.Append(')');
          return tmp2880.ToString();
        }
      }


      public partial class variableAddrByName_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByName_result()
        {
        }

        public variableAddrByName_result DeepCopy()
        {
          var tmp2882 = new variableAddrByName_result();
          if((Success != null) && __isset.success)
          {
            tmp2882.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp2882.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2882.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2882.__isset.e = this.__isset.e;
          return tmp2882;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2883 = new TStruct("variableAddrByName_result");
            await oprot.WriteStructBeginAsync(tmp2883, cancellationToken);
            var tmp2884 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2884.Name = "Success";
                tmp2884.Type = TType.Struct;
                tmp2884.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2884, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2884.Name = "E";
                tmp2884.Type = TType.Struct;
                tmp2884.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2884, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2885 = new StringBuilder("variableAddrByName_result(");
          int tmp2886 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2886++) { tmp2885.Append(", "); }
            tmp2885.Append("Success: ");
            Success.ToString(tmp2885);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2886++) { tmp2885.Append(", "); }
            tmp2885.Append("E: ");
            E.ToString(tmp2885);
          }
          tmp2885.Append(')');
          return tmp2885.ToString();
        }
      }


      public partial class setVariableName_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool name;
        }

        public setVariableName_args()
        {
        }

        public setVariableName_args DeepCopy()
        {
          var tmp2887 = new setVariableName_args();
          if(__isset.c)
          {
            tmp2887.C = this.C;
          }
          tmp2887.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp2887.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp2887.__isset.addr = this.__isset.addr;
          if((Name != null) && __isset.name)
          {
            tmp2887.Name = this.Name;
          }
          tmp2887.__isset.name = this.__isset.name;
          return tmp2887;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2888 = new TStruct("setVariableName_args");
            await oprot.WriteStructBeginAsync(tmp2888, cancellationToken);
            var tmp2889 = new TField();
            if(__isset.c)
            {
              tmp2889.Name = "c";
              tmp2889.Type = TType.I64;
              tmp2889.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2889, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp2889.Name = "addr";
              tmp2889.Type = TType.Struct;
              tmp2889.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2889, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2889.Name = "name";
              tmp2889.Type = TType.String;
              tmp2889.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2889, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2890 = new StringBuilder("setVariableName_args(");
          int tmp2891 = 0;
          if(__isset.c)
          {
            if(0 < tmp2891++) { tmp2890.Append(", "); }
            tmp2890.Append("C: ");
            C.ToString(tmp2890);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp2891++) { tmp2890.Append(", "); }
            tmp2890.Append("Addr: ");
            Addr.ToString(tmp2890);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2891++) { tmp2890.Append(", "); }
            tmp2890.Append("Name: ");
            Name.ToString(tmp2890);
          }
          tmp2890.Append(')');
          return tmp2890.ToString();
        }
      }


      public partial class setVariableName_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableName_result()
        {
        }

        public setVariableName_result DeepCopy()
        {
          var tmp2892 = new setVariableName_result();
          if((E != null) && __isset.e)
          {
            tmp2892.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2892.__isset.e = this.__isset.e;
          return tmp2892;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2893 = new TStruct("setVariableName_result");
            await oprot.WriteStructBeginAsync(tmp2893, cancellationToken);
            var tmp2894 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2894.Name = "E";
                tmp2894.Type = TType.Struct;
                tmp2894.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2894, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2895 = new StringBuilder("setVariableName_result(");
          int tmp2896 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2896++) { tmp2895.Append(", "); }
            tmp2895.Append("E: ");
            E.ToString(tmp2895);
          }
          tmp2895.Append(')');
          return tmp2895.ToString();
        }
      }


      public partial class zone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public zone_args()
        {
        }

        public zone_args DeepCopy()
        {
          var tmp2897 = new zone_args();
          if(__isset.c)
          {
            tmp2897.C = this.C;
          }
          tmp2897.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2897.Index = this.Index;
          }
          tmp2897.__isset.index = this.__isset.index;
          return tmp2897;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2898 = new TStruct("zone_args");
            await oprot.WriteStructBeginAsync(tmp2898, cancellationToken);
            var tmp2899 = new TField();
            if(__isset.c)
            {
              tmp2899.Name = "c";
              tmp2899.Type = TType.I64;
              tmp2899.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2899, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2899.Name = "index";
              tmp2899.Type = TType.I32;
              tmp2899.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2899, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2900 = new StringBuilder("zone_args(");
          int tmp2901 = 0;
          if(__isset.c)
          {
            if(0 < tmp2901++) { tmp2900.Append(", "); }
            tmp2900.Append("C: ");
            C.ToString(tmp2900);
          }
          if(__isset.index)
          {
            if(0 < tmp2901++) { tmp2900.Append(", "); }
            tmp2900.Append("Index: ");
            Index.ToString(tmp2900);
          }
          tmp2900.Append(')');
          return tmp2900.ToString();
        }
      }


      public partial class zone_result : TBase
      {
        private global::Yaskawa.Ext.API.Zone _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Zone Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public zone_result()
        {
        }

        public zone_result DeepCopy()
        {
          var tmp2902 = new zone_result();
          if((Success != null) && __isset.success)
          {
            tmp2902.Success = (global::Yaskawa.Ext.API.Zone)this.Success.DeepCopy();
          }
          tmp2902.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2902.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2902.__isset.e = this.__isset.e;
          return tmp2902;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Zone();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2903 = new TStruct("zone_result");
            await oprot.WriteStructBeginAsync(tmp2903, cancellationToken);
            var tmp2904 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2904.Name = "Success";
                tmp2904.Type = TType.Struct;
                tmp2904.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2904, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2904.Name = "E";
                tmp2904.Type = TType.Struct;
                tmp2904.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2904, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2905 = new StringBuilder("zone_result(");
          int tmp2906 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2906++) { tmp2905.Append(", "); }
            tmp2905.Append("Success: ");
            Success.ToString(tmp2905);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2906++) { tmp2905.Append(", "); }
            tmp2905.Append("E: ");
            E.ToString(tmp2905);
          }
          tmp2905.Append(')');
          return tmp2905.ToString();
        }
      }


      public partial class newZone_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newZone_args()
        {
        }

        public newZone_args DeepCopy()
        {
          var tmp2907 = new newZone_args();
          if(__isset.c)
          {
            tmp2907.C = this.C;
          }
          tmp2907.__isset.c = this.__isset.c;
          return tmp2907;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2908 = new TStruct("newZone_args");
            await oprot.WriteStructBeginAsync(tmp2908, cancellationToken);
            var tmp2909 = new TField();
            if(__isset.c)
            {
              tmp2909.Name = "c";
              tmp2909.Type = TType.I64;
              tmp2909.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2909, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2910 = new StringBuilder("newZone_args(");
          int tmp2911 = 0;
          if(__isset.c)
          {
            if(0 < tmp2911++) { tmp2910.Append(", "); }
            tmp2910.Append("C: ");
            C.ToString(tmp2910);
          }
          tmp2910.Append(')');
          return tmp2910.ToString();
        }
      }


      public partial class newZone_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newZone_result()
        {
        }

        public newZone_result DeepCopy()
        {
          var tmp2912 = new newZone_result();
          if(__isset.success)
          {
            tmp2912.Success = this.Success;
          }
          tmp2912.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2912.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2912.__isset.e = this.__isset.e;
          return tmp2912;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2913 = new TStruct("newZone_result");
            await oprot.WriteStructBeginAsync(tmp2913, cancellationToken);
            var tmp2914 = new TField();

            if(this.__isset.success)
            {
              tmp2914.Name = "Success";
              tmp2914.Type = TType.I32;
              tmp2914.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2914, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2914.Name = "E";
                tmp2914.Type = TType.Struct;
                tmp2914.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2914, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2915 = new StringBuilder("newZone_result(");
          int tmp2916 = 0;
          if(__isset.success)
          {
            if(0 < tmp2916++) { tmp2915.Append(", "); }
            tmp2915.Append("Success: ");
            Success.ToString(tmp2915);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2916++) { tmp2915.Append(", "); }
            tmp2915.Append("E: ");
            E.ToString(tmp2915);
          }
          tmp2915.Append(')');
          return tmp2915.ToString();
        }
      }


      public partial class modifyZone_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.Zone _z;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.Zone Z
        {
          get
          {
            return _z;
          }
          set
          {
            __isset.z = true;
            this._z = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool z;
        }

        public modifyZone_args()
        {
        }

        public modifyZone_args DeepCopy()
        {
          var tmp2917 = new modifyZone_args();
          if(__isset.c)
          {
            tmp2917.C = this.C;
          }
          tmp2917.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2917.Index = this.Index;
          }
          tmp2917.__isset.index = this.__isset.index;
          if((Z != null) && __isset.z)
          {
            tmp2917.Z = (global::Yaskawa.Ext.API.Zone)this.Z.DeepCopy();
          }
          tmp2917.__isset.z = this.__isset.z;
          return tmp2917;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Z = new global::Yaskawa.Ext.API.Zone();
                    await Z.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2918 = new TStruct("modifyZone_args");
            await oprot.WriteStructBeginAsync(tmp2918, cancellationToken);
            var tmp2919 = new TField();
            if(__isset.c)
            {
              tmp2919.Name = "c";
              tmp2919.Type = TType.I64;
              tmp2919.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2919, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2919.Name = "index";
              tmp2919.Type = TType.I32;
              tmp2919.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2919, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Z != null) && __isset.z)
            {
              tmp2919.Name = "z";
              tmp2919.Type = TType.Struct;
              tmp2919.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2919, cancellationToken);
              await Z.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.z == other.__isset.z) && ((!__isset.z) || (global::System.Object.Equals(Z, other.Z))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Z != null) && __isset.z)
            {
              hashcode = (hashcode * 397) + Z.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2920 = new StringBuilder("modifyZone_args(");
          int tmp2921 = 0;
          if(__isset.c)
          {
            if(0 < tmp2921++) { tmp2920.Append(", "); }
            tmp2920.Append("C: ");
            C.ToString(tmp2920);
          }
          if(__isset.index)
          {
            if(0 < tmp2921++) { tmp2920.Append(", "); }
            tmp2920.Append("Index: ");
            Index.ToString(tmp2920);
          }
          if((Z != null) && __isset.z)
          {
            if(0 < tmp2921++) { tmp2920.Append(", "); }
            tmp2920.Append("Z: ");
            Z.ToString(tmp2920);
          }
          tmp2920.Append(')');
          return tmp2920.ToString();
        }
      }


      public partial class modifyZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public modifyZone_result()
        {
        }

        public modifyZone_result DeepCopy()
        {
          var tmp2922 = new modifyZone_result();
          if((E != null) && __isset.e)
          {
            tmp2922.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2922.__isset.e = this.__isset.e;
          return tmp2922;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2923 = new TStruct("modifyZone_result");
            await oprot.WriteStructBeginAsync(tmp2923, cancellationToken);
            var tmp2924 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2924.Name = "E";
                tmp2924.Type = TType.Struct;
                tmp2924.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2924, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2925 = new StringBuilder("modifyZone_result(");
          int tmp2926 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2926++) { tmp2925.Append(", "); }
            tmp2925.Append("E: ");
            E.ToString(tmp2925);
          }
          tmp2925.Append(')');
          return tmp2925.ToString();
        }
      }


      public partial class deleteZone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteZone_args()
        {
        }

        public deleteZone_args DeepCopy()
        {
          var tmp2927 = new deleteZone_args();
          if(__isset.c)
          {
            tmp2927.C = this.C;
          }
          tmp2927.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2927.Index = this.Index;
          }
          tmp2927.__isset.index = this.__isset.index;
          return tmp2927;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2928 = new TStruct("deleteZone_args");
            await oprot.WriteStructBeginAsync(tmp2928, cancellationToken);
            var tmp2929 = new TField();
            if(__isset.c)
            {
              tmp2929.Name = "c";
              tmp2929.Type = TType.I64;
              tmp2929.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2929, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2929.Name = "index";
              tmp2929.Type = TType.I32;
              tmp2929.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2929, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2930 = new StringBuilder("deleteZone_args(");
          int tmp2931 = 0;
          if(__isset.c)
          {
            if(0 < tmp2931++) { tmp2930.Append(", "); }
            tmp2930.Append("C: ");
            C.ToString(tmp2930);
          }
          if(__isset.index)
          {
            if(0 < tmp2931++) { tmp2930.Append(", "); }
            tmp2930.Append("Index: ");
            Index.ToString(tmp2930);
          }
          tmp2930.Append(')');
          return tmp2930.ToString();
        }
      }


      public partial class deleteZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteZone_result()
        {
        }

        public deleteZone_result DeepCopy()
        {
          var tmp2932 = new deleteZone_result();
          if((E != null) && __isset.e)
          {
            tmp2932.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2932.__isset.e = this.__isset.e;
          return tmp2932;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2933 = new TStruct("deleteZone_result");
            await oprot.WriteStructBeginAsync(tmp2933, cancellationToken);
            var tmp2934 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2934.Name = "E";
                tmp2934.Type = TType.Struct;
                tmp2934.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2934, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2935 = new StringBuilder("deleteZone_result(");
          int tmp2936 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2936++) { tmp2935.Append(", "); }
            tmp2935.Append("E: ");
            E.ToString(tmp2935);
          }
          tmp2935.Append(')');
          return tmp2935.ToString();
        }
      }


      public partial class userFrames_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public userFrames_args()
        {
        }

        public userFrames_args DeepCopy()
        {
          var tmp2937 = new userFrames_args();
          if(__isset.c)
          {
            tmp2937.C = this.C;
          }
          tmp2937.__isset.c = this.__isset.c;
          return tmp2937;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2938 = new TStruct("userFrames_args");
            await oprot.WriteStructBeginAsync(tmp2938, cancellationToken);
            var tmp2939 = new TField();
            if(__isset.c)
            {
              tmp2939.Name = "c";
              tmp2939.Type = TType.I64;
              tmp2939.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2939, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2940 = new StringBuilder("userFrames_args(");
          int tmp2941 = 0;
          if(__isset.c)
          {
            if(0 < tmp2941++) { tmp2940.Append(", "); }
            tmp2940.Append("C: ");
            C.ToString(tmp2940);
          }
          tmp2940.Append(')');
          return tmp2940.ToString();
        }
      }


      public partial class userFrames_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrames_result()
        {
        }

        public userFrames_result DeepCopy()
        {
          var tmp2942 = new userFrames_result();
          if((Success != null) && __isset.success)
          {
            tmp2942.Success = this.Success.DeepCopy();
          }
          tmp2942.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2942.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2942.__isset.e = this.__isset.e;
          return tmp2942;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map2943 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map2943.Count);
                      for(int _i2944 = 0; _i2944 < _map2943.Count; ++_i2944)
                      {
                        int _key2945;
                        string _val2946;
                        _key2945 = await iprot.ReadI32Async(cancellationToken);
                        _val2946 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key2945] = _val2946;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2947 = new TStruct("userFrames_result");
            await oprot.WriteStructBeginAsync(tmp2947, cancellationToken);
            var tmp2948 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2948.Name = "Success";
                tmp2948.Type = TType.Map;
                tmp2948.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2948, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter2949 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter2949, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter2949], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2948.Name = "E";
                tmp2948.Type = TType.Struct;
                tmp2948.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2948, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2950 = new StringBuilder("userFrames_result(");
          int tmp2951 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2951++) { tmp2950.Append(", "); }
            tmp2950.Append("Success: ");
            Success.ToString(tmp2950);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2951++) { tmp2950.Append(", "); }
            tmp2950.Append("E: ");
            E.ToString(tmp2950);
          }
          tmp2950.Append(')');
          return tmp2950.ToString();
        }
      }


      public partial class userFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public userFrame_args()
        {
        }

        public userFrame_args DeepCopy()
        {
          var tmp2952 = new userFrame_args();
          if(__isset.c)
          {
            tmp2952.C = this.C;
          }
          tmp2952.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2952.Index = this.Index;
          }
          tmp2952.__isset.index = this.__isset.index;
          return tmp2952;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2953 = new TStruct("userFrame_args");
            await oprot.WriteStructBeginAsync(tmp2953, cancellationToken);
            var tmp2954 = new TField();
            if(__isset.c)
            {
              tmp2954.Name = "c";
              tmp2954.Type = TType.I64;
              tmp2954.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2954, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2954.Name = "index";
              tmp2954.Type = TType.I32;
              tmp2954.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2954, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2955 = new StringBuilder("userFrame_args(");
          int tmp2956 = 0;
          if(__isset.c)
          {
            if(0 < tmp2956++) { tmp2955.Append(", "); }
            tmp2955.Append("C: ");
            C.ToString(tmp2955);
          }
          if(__isset.index)
          {
            if(0 < tmp2956++) { tmp2955.Append(", "); }
            tmp2955.Append("Index: ");
            Index.ToString(tmp2955);
          }
          tmp2955.Append(')');
          return tmp2955.ToString();
        }
      }


      public partial class userFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.CoordinateFrame _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.CoordinateFrame Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrame_result()
        {
        }

        public userFrame_result DeepCopy()
        {
          var tmp2957 = new userFrame_result();
          if((Success != null) && __isset.success)
          {
            tmp2957.Success = (global::Yaskawa.Ext.API.CoordinateFrame)this.Success.DeepCopy();
          }
          tmp2957.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2957.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2957.__isset.e = this.__isset.e;
          return tmp2957;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2958 = new TStruct("userFrame_result");
            await oprot.WriteStructBeginAsync(tmp2958, cancellationToken);
            var tmp2959 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2959.Name = "Success";
                tmp2959.Type = TType.Struct;
                tmp2959.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2959, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2959.Name = "E";
                tmp2959.Type = TType.Struct;
                tmp2959.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2959, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2960 = new StringBuilder("userFrame_result(");
          int tmp2961 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2961++) { tmp2960.Append(", "); }
            tmp2960.Append("Success: ");
            Success.ToString(tmp2960);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2961++) { tmp2960.Append(", "); }
            tmp2960.Append("E: ");
            E.ToString(tmp2960);
          }
          tmp2960.Append(')');
          return tmp2960.ToString();
        }
      }


      public partial class newUserFrame_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newUserFrame_args()
        {
        }

        public newUserFrame_args DeepCopy()
        {
          var tmp2962 = new newUserFrame_args();
          if(__isset.c)
          {
            tmp2962.C = this.C;
          }
          tmp2962.__isset.c = this.__isset.c;
          return tmp2962;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2963 = new TStruct("newUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp2963, cancellationToken);
            var tmp2964 = new TField();
            if(__isset.c)
            {
              tmp2964.Name = "c";
              tmp2964.Type = TType.I64;
              tmp2964.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2964, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2965 = new StringBuilder("newUserFrame_args(");
          int tmp2966 = 0;
          if(__isset.c)
          {
            if(0 < tmp2966++) { tmp2965.Append(", "); }
            tmp2965.Append("C: ");
            C.ToString(tmp2965);
          }
          tmp2965.Append(')');
          return tmp2965.ToString();
        }
      }


      public partial class newUserFrame_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newUserFrame_result()
        {
        }

        public newUserFrame_result DeepCopy()
        {
          var tmp2967 = new newUserFrame_result();
          if(__isset.success)
          {
            tmp2967.Success = this.Success;
          }
          tmp2967.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2967.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2967.__isset.e = this.__isset.e;
          return tmp2967;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2968 = new TStruct("newUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp2968, cancellationToken);
            var tmp2969 = new TField();

            if(this.__isset.success)
            {
              tmp2969.Name = "Success";
              tmp2969.Type = TType.I32;
              tmp2969.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2969, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2969.Name = "E";
                tmp2969.Type = TType.Struct;
                tmp2969.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2969, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2970 = new StringBuilder("newUserFrame_result(");
          int tmp2971 = 0;
          if(__isset.success)
          {
            if(0 < tmp2971++) { tmp2970.Append(", "); }
            tmp2970.Append("Success: ");
            Success.ToString(tmp2970);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2971++) { tmp2970.Append(", "); }
            tmp2970.Append("E: ");
            E.ToString(tmp2970);
          }
          tmp2970.Append(')');
          return tmp2970.ToString();
        }
      }


      public partial class setUserFrame_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.CoordinateFrame _f;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame F
        {
          get
          {
            return _f;
          }
          set
          {
            __isset.f = true;
            this._f = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool f;
        }

        public setUserFrame_args()
        {
        }

        public setUserFrame_args DeepCopy()
        {
          var tmp2972 = new setUserFrame_args();
          if(__isset.c)
          {
            tmp2972.C = this.C;
          }
          tmp2972.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2972.Index = this.Index;
          }
          tmp2972.__isset.index = this.__isset.index;
          if((F != null) && __isset.f)
          {
            tmp2972.F = (global::Yaskawa.Ext.API.CoordinateFrame)this.F.DeepCopy();
          }
          tmp2972.__isset.f = this.__isset.f;
          return tmp2972;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    F = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await F.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2973 = new TStruct("setUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp2973, cancellationToken);
            var tmp2974 = new TField();
            if(__isset.c)
            {
              tmp2974.Name = "c";
              tmp2974.Type = TType.I64;
              tmp2974.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2974, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2974.Name = "index";
              tmp2974.Type = TType.I32;
              tmp2974.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2974, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((F != null) && __isset.f)
            {
              tmp2974.Name = "f";
              tmp2974.Type = TType.Struct;
              tmp2974.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2974, cancellationToken);
              await F.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.f == other.__isset.f) && ((!__isset.f) || (global::System.Object.Equals(F, other.F))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((F != null) && __isset.f)
            {
              hashcode = (hashcode * 397) + F.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2975 = new StringBuilder("setUserFrame_args(");
          int tmp2976 = 0;
          if(__isset.c)
          {
            if(0 < tmp2976++) { tmp2975.Append(", "); }
            tmp2975.Append("C: ");
            C.ToString(tmp2975);
          }
          if(__isset.index)
          {
            if(0 < tmp2976++) { tmp2975.Append(", "); }
            tmp2975.Append("Index: ");
            Index.ToString(tmp2975);
          }
          if((F != null) && __isset.f)
          {
            if(0 < tmp2976++) { tmp2975.Append(", "); }
            tmp2975.Append("F: ");
            F.ToString(tmp2975);
          }
          tmp2975.Append(')');
          return tmp2975.ToString();
        }
      }


      public partial class setUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setUserFrame_result()
        {
        }

        public setUserFrame_result DeepCopy()
        {
          var tmp2977 = new setUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp2977.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2977.__isset.e = this.__isset.e;
          return tmp2977;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2978 = new TStruct("setUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp2978, cancellationToken);
            var tmp2979 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2979.Name = "E";
                tmp2979.Type = TType.Struct;
                tmp2979.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2979, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2980 = new StringBuilder("setUserFrame_result(");
          int tmp2981 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2981++) { tmp2980.Append(", "); }
            tmp2980.Append("E: ");
            E.ToString(tmp2980);
          }
          tmp2980.Append(')');
          return tmp2980.ToString();
        }
      }


      public partial class deleteUserFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteUserFrame_args()
        {
        }

        public deleteUserFrame_args DeepCopy()
        {
          var tmp2982 = new deleteUserFrame_args();
          if(__isset.c)
          {
            tmp2982.C = this.C;
          }
          tmp2982.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2982.Index = this.Index;
          }
          tmp2982.__isset.index = this.__isset.index;
          return tmp2982;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2983 = new TStruct("deleteUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp2983, cancellationToken);
            var tmp2984 = new TField();
            if(__isset.c)
            {
              tmp2984.Name = "c";
              tmp2984.Type = TType.I64;
              tmp2984.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2984, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2984.Name = "index";
              tmp2984.Type = TType.I32;
              tmp2984.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2984, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2985 = new StringBuilder("deleteUserFrame_args(");
          int tmp2986 = 0;
          if(__isset.c)
          {
            if(0 < tmp2986++) { tmp2985.Append(", "); }
            tmp2985.Append("C: ");
            C.ToString(tmp2985);
          }
          if(__isset.index)
          {
            if(0 < tmp2986++) { tmp2985.Append(", "); }
            tmp2985.Append("Index: ");
            Index.ToString(tmp2985);
          }
          tmp2985.Append(')');
          return tmp2985.ToString();
        }
      }


      public partial class deleteUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteUserFrame_result()
        {
        }

        public deleteUserFrame_result DeepCopy()
        {
          var tmp2987 = new deleteUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp2987.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2987.__isset.e = this.__isset.e;
          return tmp2987;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2988 = new TStruct("deleteUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp2988, cancellationToken);
            var tmp2989 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2989.Name = "E";
                tmp2989.Type = TType.Struct;
                tmp2989.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2989, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2990 = new StringBuilder("deleteUserFrame_result(");
          int tmp2991 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2991++) { tmp2990.Append(", "); }
            tmp2990.Append("E: ");
            E.ToString(tmp2990);
          }
          tmp2990.Append(')');
          return tmp2990.ToString();
        }
      }


      public partial class networkInterfaceAddress_args : TBase
      {
        private long _c;
        private string _controllerInterface;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
        }

        public networkInterfaceAddress_args()
        {
        }

        public networkInterfaceAddress_args DeepCopy()
        {
          var tmp2992 = new networkInterfaceAddress_args();
          if(__isset.c)
          {
            tmp2992.C = this.C;
          }
          tmp2992.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp2992.ControllerInterface = this.ControllerInterface;
          }
          tmp2992.__isset.controllerInterface = this.__isset.controllerInterface;
          return tmp2992;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2993 = new TStruct("networkInterfaceAddress_args");
            await oprot.WriteStructBeginAsync(tmp2993, cancellationToken);
            var tmp2994 = new TField();
            if(__isset.c)
            {
              tmp2994.Name = "c";
              tmp2994.Type = TType.I64;
              tmp2994.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2994, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp2994.Name = "controllerInterface";
              tmp2994.Type = TType.String;
              tmp2994.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2994, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2995 = new StringBuilder("networkInterfaceAddress_args(");
          int tmp2996 = 0;
          if(__isset.c)
          {
            if(0 < tmp2996++) { tmp2995.Append(", "); }
            tmp2995.Append("C: ");
            C.ToString(tmp2995);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp2996++) { tmp2995.Append(", "); }
            tmp2995.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp2995);
          }
          tmp2995.Append(')');
          return tmp2995.ToString();
        }
      }


      public partial class networkInterfaceAddress_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public networkInterfaceAddress_result()
        {
        }

        public networkInterfaceAddress_result DeepCopy()
        {
          var tmp2997 = new networkInterfaceAddress_result();
          if((Success != null) && __isset.success)
          {
            tmp2997.Success = this.Success;
          }
          tmp2997.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2997.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2997.__isset.e = this.__isset.e;
          return tmp2997;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2998 = new TStruct("networkInterfaceAddress_result");
            await oprot.WriteStructBeginAsync(tmp2998, cancellationToken);
            var tmp2999 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2999.Name = "Success";
                tmp2999.Type = TType.String;
                tmp2999.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2999, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2999.Name = "E";
                tmp2999.Type = TType.Struct;
                tmp2999.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2999, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3000 = new StringBuilder("networkInterfaceAddress_result(");
          int tmp3001 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3001++) { tmp3000.Append(", "); }
            tmp3000.Append("Success: ");
            Success.ToString(tmp3000);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3001++) { tmp3000.Append(", "); }
            tmp3000.Append("E: ");
            E.ToString(tmp3000);
          }
          tmp3000.Append(')');
          return tmp3000.ToString();
        }
      }


      public partial class requestNetworkAccess_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkAccess_args()
        {
        }

        public requestNetworkAccess_args DeepCopy()
        {
          var tmp3002 = new requestNetworkAccess_args();
          if(__isset.c)
          {
            tmp3002.C = this.C;
          }
          tmp3002.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3002.ControllerInterface = this.ControllerInterface;
          }
          tmp3002.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3002.Port = this.Port;
          }
          tmp3002.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3002.Protocol = this.Protocol;
          }
          tmp3002.__isset.protocol = this.__isset.protocol;
          return tmp3002;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3003 = new TStruct("requestNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3003, cancellationToken);
            var tmp3004 = new TField();
            if(__isset.c)
            {
              tmp3004.Name = "c";
              tmp3004.Type = TType.I64;
              tmp3004.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3004, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3004.Name = "controllerInterface";
              tmp3004.Type = TType.String;
              tmp3004.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3004, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3004.Name = "port";
              tmp3004.Type = TType.I32;
              tmp3004.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3004, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3004.Name = "protocol";
              tmp3004.Type = TType.String;
              tmp3004.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3004, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3005 = new StringBuilder("requestNetworkAccess_args(");
          int tmp3006 = 0;
          if(__isset.c)
          {
            if(0 < tmp3006++) { tmp3005.Append(", "); }
            tmp3005.Append("C: ");
            C.ToString(tmp3005);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3006++) { tmp3005.Append(", "); }
            tmp3005.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3005);
          }
          if(__isset.port)
          {
            if(0 < tmp3006++) { tmp3005.Append(", "); }
            tmp3005.Append("Port: ");
            Port.ToString(tmp3005);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3006++) { tmp3005.Append(", "); }
            tmp3005.Append("Protocol: ");
            Protocol.ToString(tmp3005);
          }
          tmp3005.Append(')');
          return tmp3005.ToString();
        }
      }


      public partial class requestNetworkAccess_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkAccess_result()
        {
        }

        public requestNetworkAccess_result DeepCopy()
        {
          var tmp3007 = new requestNetworkAccess_result();
          if(__isset.success)
          {
            tmp3007.Success = this.Success;
          }
          tmp3007.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3007.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3007.__isset.e = this.__isset.e;
          return tmp3007;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3008 = new TStruct("requestNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3008, cancellationToken);
            var tmp3009 = new TField();

            if(this.__isset.success)
            {
              tmp3009.Name = "Success";
              tmp3009.Type = TType.I32;
              tmp3009.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3009, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3009.Name = "E";
                tmp3009.Type = TType.Struct;
                tmp3009.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3009, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3010 = new StringBuilder("requestNetworkAccess_result(");
          int tmp3011 = 0;
          if(__isset.success)
          {
            if(0 < tmp3011++) { tmp3010.Append(", "); }
            tmp3010.Append("Success: ");
            Success.ToString(tmp3010);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3011++) { tmp3010.Append(", "); }
            tmp3010.Append("E: ");
            E.ToString(tmp3010);
          }
          tmp3010.Append(')');
          return tmp3010.ToString();
        }
      }


      public partial class removeNetworkAccess_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkAccess_args()
        {
        }

        public removeNetworkAccess_args DeepCopy()
        {
          var tmp3012 = new removeNetworkAccess_args();
          if(__isset.c)
          {
            tmp3012.C = this.C;
          }
          tmp3012.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3012.AccessHandle = this.AccessHandle;
          }
          tmp3012.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3012;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3013 = new TStruct("removeNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3013, cancellationToken);
            var tmp3014 = new TField();
            if(__isset.c)
            {
              tmp3014.Name = "c";
              tmp3014.Type = TType.I64;
              tmp3014.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3014, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3014.Name = "accessHandle";
              tmp3014.Type = TType.I32;
              tmp3014.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3014, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3015 = new StringBuilder("removeNetworkAccess_args(");
          int tmp3016 = 0;
          if(__isset.c)
          {
            if(0 < tmp3016++) { tmp3015.Append(", "); }
            tmp3015.Append("C: ");
            C.ToString(tmp3015);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3016++) { tmp3015.Append(", "); }
            tmp3015.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3015);
          }
          tmp3015.Append(')');
          return tmp3015.ToString();
        }
      }


      public partial class removeNetworkAccess_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkAccess_result()
        {
        }

        public removeNetworkAccess_result DeepCopy()
        {
          var tmp3017 = new removeNetworkAccess_result();
          if((E != null) && __isset.e)
          {
            tmp3017.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3017.__isset.e = this.__isset.e;
          return tmp3017;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3018 = new TStruct("removeNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3018, cancellationToken);
            var tmp3019 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3019.Name = "E";
                tmp3019.Type = TType.Struct;
                tmp3019.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3019, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3020 = new StringBuilder("removeNetworkAccess_result(");
          int tmp3021 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3021++) { tmp3020.Append(", "); }
            tmp3020.Append("E: ");
            E.ToString(tmp3020);
          }
          tmp3020.Append(')');
          return tmp3020.ToString();
        }
      }


      public partial class requestNetworkService_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkService_args()
        {
        }

        public requestNetworkService_args DeepCopy()
        {
          var tmp3022 = new requestNetworkService_args();
          if(__isset.c)
          {
            tmp3022.C = this.C;
          }
          tmp3022.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3022.ControllerInterface = this.ControllerInterface;
          }
          tmp3022.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3022.Port = this.Port;
          }
          tmp3022.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3022.Protocol = this.Protocol;
          }
          tmp3022.__isset.protocol = this.__isset.protocol;
          return tmp3022;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3023 = new TStruct("requestNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3023, cancellationToken);
            var tmp3024 = new TField();
            if(__isset.c)
            {
              tmp3024.Name = "c";
              tmp3024.Type = TType.I64;
              tmp3024.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3024, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3024.Name = "controllerInterface";
              tmp3024.Type = TType.String;
              tmp3024.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3024, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3024.Name = "port";
              tmp3024.Type = TType.I32;
              tmp3024.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3024, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3024.Name = "protocol";
              tmp3024.Type = TType.String;
              tmp3024.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3024, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3025 = new StringBuilder("requestNetworkService_args(");
          int tmp3026 = 0;
          if(__isset.c)
          {
            if(0 < tmp3026++) { tmp3025.Append(", "); }
            tmp3025.Append("C: ");
            C.ToString(tmp3025);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3026++) { tmp3025.Append(", "); }
            tmp3025.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3025);
          }
          if(__isset.port)
          {
            if(0 < tmp3026++) { tmp3025.Append(", "); }
            tmp3025.Append("Port: ");
            Port.ToString(tmp3025);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3026++) { tmp3025.Append(", "); }
            tmp3025.Append("Protocol: ");
            Protocol.ToString(tmp3025);
          }
          tmp3025.Append(')');
          return tmp3025.ToString();
        }
      }


      public partial class requestNetworkService_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkService_result()
        {
        }

        public requestNetworkService_result DeepCopy()
        {
          var tmp3027 = new requestNetworkService_result();
          if(__isset.success)
          {
            tmp3027.Success = this.Success;
          }
          tmp3027.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3027.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3027.__isset.e = this.__isset.e;
          return tmp3027;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3028 = new TStruct("requestNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3028, cancellationToken);
            var tmp3029 = new TField();

            if(this.__isset.success)
            {
              tmp3029.Name = "Success";
              tmp3029.Type = TType.I32;
              tmp3029.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3029, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3029.Name = "E";
                tmp3029.Type = TType.Struct;
                tmp3029.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3029, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3030 = new StringBuilder("requestNetworkService_result(");
          int tmp3031 = 0;
          if(__isset.success)
          {
            if(0 < tmp3031++) { tmp3030.Append(", "); }
            tmp3030.Append("Success: ");
            Success.ToString(tmp3030);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3031++) { tmp3030.Append(", "); }
            tmp3030.Append("E: ");
            E.ToString(tmp3030);
          }
          tmp3030.Append(')');
          return tmp3030.ToString();
        }
      }


      public partial class removeNetworkService_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkService_args()
        {
        }

        public removeNetworkService_args DeepCopy()
        {
          var tmp3032 = new removeNetworkService_args();
          if(__isset.c)
          {
            tmp3032.C = this.C;
          }
          tmp3032.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3032.AccessHandle = this.AccessHandle;
          }
          tmp3032.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3032;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3033 = new TStruct("removeNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3033, cancellationToken);
            var tmp3034 = new TField();
            if(__isset.c)
            {
              tmp3034.Name = "c";
              tmp3034.Type = TType.I64;
              tmp3034.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3034, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3034.Name = "accessHandle";
              tmp3034.Type = TType.I32;
              tmp3034.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3034, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3035 = new StringBuilder("removeNetworkService_args(");
          int tmp3036 = 0;
          if(__isset.c)
          {
            if(0 < tmp3036++) { tmp3035.Append(", "); }
            tmp3035.Append("C: ");
            C.ToString(tmp3035);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3036++) { tmp3035.Append(", "); }
            tmp3035.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3035);
          }
          tmp3035.Append(')');
          return tmp3035.ToString();
        }
      }


      public partial class removeNetworkService_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkService_result()
        {
        }

        public removeNetworkService_result DeepCopy()
        {
          var tmp3037 = new removeNetworkService_result();
          if((E != null) && __isset.e)
          {
            tmp3037.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3037.__isset.e = this.__isset.e;
          return tmp3037;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3038 = new TStruct("removeNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3038, cancellationToken);
            var tmp3039 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3039.Name = "E";
                tmp3039.Type = TType.Struct;
                tmp3039.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3039, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3040 = new StringBuilder("removeNetworkService_result(");
          int tmp3041 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3041++) { tmp3040.Append(", "); }
            tmp3040.Append("E: ");
            E.ToString(tmp3040);
          }
          tmp3040.Append(')');
          return tmp3040.ToString();
        }
      }

    }

  }
}
