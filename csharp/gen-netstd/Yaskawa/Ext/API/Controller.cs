/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Controller
  {
    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Request specified permissions.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check permisions obtained.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permission"></param>
      global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default);

      /// <summary>
      /// Relinquish permissions (no effect if not held).
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Connect to the specified Robot Controller (by IP adress or hostname if DNS available)
      /// Typically, the pendant will already be connected to a controller when extensions are started,
      /// so calling connect() is not required.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="hostName"></param>
      global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Disconnect from the connected controller.  This leaves the pendant in the 'disconnected' state.
      /// When disconnected, many functions are unavailable or will return default values.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to the specified events, if not already.
      /// Note: If using a Yaskawa supplied client library with event consumer callback support,
      ///       registering an event consumer callback will automatically subscribe to the appropriate event.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from the specified events.
      /// If called directly, this may causes event consumers for the events not to be called.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Poll the API Service for pending events.
      /// Note: If using a Yaskawa supplied client library, this does not need to be called explicitly.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is connected to a robot controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the hostname or IP address of the robot controller to which the pendant is connected, if any
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The software version string of the robot controller system software.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is only monitoring the robot controller to which it is connected.  This
      /// implies that no functions that modify the controller and/or robot state will succeed.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if this pendant is the single-point-of-control for the connected Robot Controller.
      /// If not, most functions that modify the controller and/or robot state will fail.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current operation mode of the controller
      /// Automatic (aka Play) - running jobs
      /// Manual (aka Teach) - for editing jobs, teaching points, jogging, setup etc.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Are the servo drives engaged?
      /// On - yes, robot(s) are being actively controlled
      /// Off - no.  Typically brakes are engaged (unless brake-release engaged)
      /// Ready - ready to engage servos.  Typically requires operator to use servo enable switch.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicates if a job us running or stopped.
      /// Run - jobs are running (robot may be moving)
      /// Held - jobs were running but have been held/paused.
      /// Idle - no jobs are running
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The playback cycle affects how the controller runs a job.
      /// Step - a job is run line-for-line.
      /// Once - a job is run from the beginning to the end.
      /// Continuous - a job is run indefinitely from the beginning to the end.
      /// (API 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Sets the playback cycle mode. (API 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="cycle"></param>
      global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default);

      /// <summary>
      /// Run the current robot job from the current line.  Requires Servos engaged & Automatic/Play operation and 'jobcontrol' permission.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Pause running job (servoes will remain engaged. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resume running job from paused state. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop runnng job (will stop motion and disengage servos). 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the current job (e.g. job being run or edited)
      /// Empty if none.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the current job. 'jobcontrol' permission required. Pass line=1 for start of job, line=0 for default/no-change.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="line"></param>
      global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the default (aka master) job.  Empty if no default job designated
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// query if job with specified name exists
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Details for the named job (throws if non-existent job)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names (empty if not connected)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names matching the name regular expression AND with the given tag
      /// (empty if not connected or no matches)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="nameRegex"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Duplicate an existing job with a new name for the copy
      /// </summary>
      /// <param name="c"></param>
      /// <param name="existingName"></param>
      /// <param name="newName"></param>
      global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default);

      /// <summary>
      /// delete the specified job.  The default job cannot be deleted.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read source code for named job (in the programmingLanguage listed in jobDetails() )
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Replace named job with the source code provided, in given programmingLanguage (e.g. "INFORM").
      /// Will thow if syntax errors in source.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="programmingLanguage"></param>
      /// <param name="sourceCode"></param>
      global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of tools mapping index -> name.
      /// Unset/defaulted tools are omitted (e.g. those with no name, 0 weight etc.)
      /// Indices (map keys) may not be sequential.  Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on a specific tool, by index
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input number of given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output nunber of given output name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified input
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified output
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified input
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all inputs in given input group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified output
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all outputs in given output group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all inputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all outputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return value of given input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of input groups from specified group number (upto 4 contiguous groups/bytes, from least significant byte)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of given output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of output groups from specified group number (upto 4 contiguous groups/bytes)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the specified output number
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the values of the outputs in the specified contigous output groups (upto 4 contiguous groups/bytes)
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a logical IO address.  Will generate IOValueChanged events
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a logical IO address. (events for address may still be generated if it corresponds to a monitored input or output)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general input by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general output by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given logicial IO address
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given output by logical IO address
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given network input by logical IO address
      /// Note it is asyncronous so no errors/exceptions are thrown (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given M-Register (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given M-Register by index
      /// Note it is asynchronous so no errors/exceptions are thrown.(SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain input group number (byte) of field bus status input.  e.g. busType 'ethip' yields EtherNet/IP status byte group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="busType"></param>
      global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the list of control groups configured on the controller.
      /// If only one robot is connected to the controller, this will return a single element,
      /// containing the simple control group representing the robot.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active control group.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the number of robots connected to the controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active robot.
      /// Note: index is 0-based, but in the UI the first robot is Robot 1.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name and space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name (less efficient)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a variable.  Will generate VariableChanged events.
      /// Note that a maximum of 1 position variable, 4 string variables and 15 variables of each of the remain types can be monitored at the same time.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a variable.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified zone, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new Zone and returns its index.  It will have default values
      /// which can be change via modifyZone()
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Modify Zone information.  Only fields set in Zone will be updated.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="z"></param>
      global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a Zone
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of user frames mapping index -> name.
      /// NB: Indices (map keys) may not be sequential. Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified User Frame, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new User Frame with default values and returns its index.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the specified User Frame to the provided values
      /// Future: Not implemented yet
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="f"></param>
      global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a User Frame
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query current controller network interface IP address.
      /// controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3']
      /// (NB: On YRC1000micro, 'LAN' is the external Ethernet port, corresponding to 'LAN2' on the YRC1000)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default);

      /// <summary>
      /// Request external network access via specified protocol and port originating
      /// from the given controller interface. The controllerInferface may be left blank, in which case
      /// connections will be routed from the controller according to the destination address and
      /// current subnetwork of the external LAN ports).
      /// Access only persists while power is maintained to the controller.
      /// The protocol must be either 'tcp' or 'udp'. controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3'].
      /// Returns a handle that can subsequently used to remove the access, or -1 if the access request
      /// failed (may happen in case of network conflicts with other extensions).
      /// Requires 'networking' permision.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      /// <param name="port"></param>
      /// <param name="protocol"></param>
      global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.GaugeSensorSpec>> getGaugeSensorSpec(long c, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task gaugeSensorCalibration(long c, sbyte channel, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_requestPermissions(c, permissions, cancellationToken);
        return await recv_requestPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1661 = new InternalStructs.requestPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1661.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_requestPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1662 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1662.Type == TMessageType.Exception)
        {
          var tmp1663 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1663;
        }

        var tmp1664 = new InternalStructs.requestPermissions_result();
        await tmp1664.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1664.__isset.success)
        {
          return tmp1664.Success;
        }
        if (tmp1664.__isset.e)
        {
          throw tmp1664.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestPermissions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await send_havePermission(c, permission, cancellationToken);
        return await recv_havePermission(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1665 = new InternalStructs.havePermission_args() {
          C = c,
          Permission = permission,
        };
        
        await tmp1665.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_havePermission(CancellationToken cancellationToken = default)
      {
        
        var tmp1666 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1666.Type == TMessageType.Exception)
        {
          var tmp1667 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1667;
        }

        var tmp1668 = new InternalStructs.havePermission_result();
        await tmp1668.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1668.__isset.success)
        {
          return tmp1668.Success;
        }
        if (tmp1668.__isset.e)
        {
          throw tmp1668.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "havePermission failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_relinquishPermissions(c, permissions, cancellationToken);
        await recv_relinquishPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1669 = new InternalStructs.relinquishPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1669.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_relinquishPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1670 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1670.Type == TMessageType.Exception)
        {
          var tmp1671 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1671;
        }

        var tmp1672 = new InternalStructs.relinquishPermissions_result();
        await tmp1672.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await send_connect(c, hostName, cancellationToken);
        await recv_connect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1673 = new InternalStructs.connect_args() {
          C = c,
          HostName = hostName,
        };
        
        await tmp1673.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_connect(CancellationToken cancellationToken = default)
      {
        
        var tmp1674 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1674.Type == TMessageType.Exception)
        {
          var tmp1675 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1675;
        }

        var tmp1676 = new InternalStructs.connect_result();
        await tmp1676.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default)
      {
        await send_disconnect(c, cancellationToken);
        await recv_disconnect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_disconnect(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1677 = new InternalStructs.disconnect_args() {
          C = c,
        };
        
        await tmp1677.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_disconnect(CancellationToken cancellationToken = default)
      {
        
        var tmp1678 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1678.Type == TMessageType.Exception)
        {
          var tmp1679 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1679;
        }

        var tmp1680 = new InternalStructs.disconnect_result();
        await tmp1680.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(c, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1681 = new InternalStructs.subscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1681.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1682 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1682.Type == TMessageType.Exception)
        {
          var tmp1683 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1683;
        }

        var tmp1684 = new InternalStructs.subscribeEventTypes_result();
        await tmp1684.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(c, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1685 = new InternalStructs.unsubscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1685.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1686 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1686.Type == TMessageType.Exception)
        {
          var tmp1687 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1687;
        }

        var tmp1688 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp1688.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default)
      {
        await send_events(c, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1689 = new InternalStructs.events_args() {
          C = c,
        };
        
        await tmp1689.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp1690 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1690.Type == TMessageType.Exception)
        {
          var tmp1691 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1691;
        }

        var tmp1692 = new InternalStructs.events_result();
        await tmp1692.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1692.__isset.success)
        {
          return tmp1692.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default)
      {
        await send_connected(c, cancellationToken);
        return await recv_connected(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connected(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1693 = new InternalStructs.connected_args() {
          C = c,
        };
        
        await tmp1693.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_connected(CancellationToken cancellationToken = default)
      {
        
        var tmp1694 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1694.Type == TMessageType.Exception)
        {
          var tmp1695 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1695;
        }

        var tmp1696 = new InternalStructs.connected_result();
        await tmp1696.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1696.__isset.success)
        {
          return tmp1696.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connected failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await send_connectedHostName(c, cancellationToken);
        return await recv_connectedHostName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1697 = new InternalStructs.connectedHostName_args() {
          C = c,
        };
        
        await tmp1697.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_connectedHostName(CancellationToken cancellationToken = default)
      {
        
        var tmp1698 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1698.Type == TMessageType.Exception)
        {
          var tmp1699 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1699;
        }

        var tmp1700 = new InternalStructs.connectedHostName_result();
        await tmp1700.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1700.__isset.success)
        {
          return tmp1700.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connectedHostName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await send_softwareVersion(c, cancellationToken);
        return await recv_softwareVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1701 = new InternalStructs.softwareVersion_args() {
          C = c,
        };
        
        await tmp1701.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_softwareVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp1702 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1702.Type == TMessageType.Exception)
        {
          var tmp1703 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1703;
        }

        var tmp1704 = new InternalStructs.softwareVersion_result();
        await tmp1704.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1704.__isset.success)
        {
          return tmp1704.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "softwareVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default)
      {
        await send_monitoring(c, cancellationToken);
        return await recv_monitoring(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitoring(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1705 = new InternalStructs.monitoring_args() {
          C = c,
        };
        
        await tmp1705.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_monitoring(CancellationToken cancellationToken = default)
      {
        
        var tmp1706 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1706.Type == TMessageType.Exception)
        {
          var tmp1707 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1707;
        }

        var tmp1708 = new InternalStructs.monitoring_result();
        await tmp1708.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1708.__isset.success)
        {
          return tmp1708.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "monitoring failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await send_haveExclusiveControl(c, cancellationToken);
        return await recv_haveExclusiveControl(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1709 = new InternalStructs.haveExclusiveControl_args() {
          C = c,
        };
        
        await tmp1709.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_haveExclusiveControl(CancellationToken cancellationToken = default)
      {
        
        var tmp1710 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1710.Type == TMessageType.Exception)
        {
          var tmp1711 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1711;
        }

        var tmp1712 = new InternalStructs.haveExclusiveControl_result();
        await tmp1712.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1712.__isset.success)
        {
          return tmp1712.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "haveExclusiveControl failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default)
      {
        await send_operationMode(c, cancellationToken);
        return await recv_operationMode(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_operationMode(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1713 = new InternalStructs.operationMode_args() {
          C = c,
        };
        
        await tmp1713.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> recv_operationMode(CancellationToken cancellationToken = default)
      {
        
        var tmp1714 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1714.Type == TMessageType.Exception)
        {
          var tmp1715 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1715;
        }

        var tmp1716 = new InternalStructs.operationMode_result();
        await tmp1716.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1716.__isset.success)
        {
          return tmp1716.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "operationMode failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default)
      {
        await send_servoState(c, cancellationToken);
        return await recv_servoState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_servoState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1717 = new InternalStructs.servoState_args() {
          C = c,
        };
        
        await tmp1717.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> recv_servoState(CancellationToken cancellationToken = default)
      {
        
        var tmp1718 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1718.Type == TMessageType.Exception)
        {
          var tmp1719 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1719;
        }

        var tmp1720 = new InternalStructs.servoState_result();
        await tmp1720.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1720.__isset.success)
        {
          return tmp1720.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackState(c, cancellationToken);
        return await recv_playbackState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1721 = new InternalStructs.playbackState_args() {
          C = c,
        };
        
        await tmp1721.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> recv_playbackState(CancellationToken cancellationToken = default)
      {
        
        var tmp1722 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1722.Type == TMessageType.Exception)
        {
          var tmp1723 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1723;
        }

        var tmp1724 = new InternalStructs.playbackState_result();
        await tmp1724.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1724.__isset.success)
        {
          return tmp1724.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackCycle(c, cancellationToken);
        return await recv_playbackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1725 = new InternalStructs.playbackCycle_args() {
          C = c,
        };
        
        await tmp1725.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> recv_playbackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1726 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1726.Type == TMessageType.Exception)
        {
          var tmp1727 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1727;
        }

        var tmp1728 = new InternalStructs.playbackCycle_result();
        await tmp1728.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1728.__isset.success)
        {
          return tmp1728.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackCycle failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await send_setPlaybackCycle(c, cycle, cancellationToken);
        await recv_setPlaybackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1729 = new InternalStructs.setPlaybackCycle_args() {
          C = c,
          Cycle = cycle,
        };
        
        await tmp1729.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setPlaybackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1730 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1730.Type == TMessageType.Exception)
        {
          var tmp1731 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1731;
        }

        var tmp1732 = new InternalStructs.setPlaybackCycle_result();
        await tmp1732.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default)
      {
        await send_run(c, cancellationToken);
        await recv_run(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_run(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("run", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1733 = new InternalStructs.run_args() {
          C = c,
        };
        
        await tmp1733.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_run(CancellationToken cancellationToken = default)
      {
        
        var tmp1734 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1734.Type == TMessageType.Exception)
        {
          var tmp1735 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1735;
        }

        var tmp1736 = new InternalStructs.run_result();
        await tmp1736.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default)
      {
        await send_pause(c, cancellationToken);
        await recv_pause(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pause(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1737 = new InternalStructs.pause_args() {
          C = c,
        };
        
        await tmp1737.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_pause(CancellationToken cancellationToken = default)
      {
        
        var tmp1738 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1738.Type == TMessageType.Exception)
        {
          var tmp1739 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1739;
        }

        var tmp1740 = new InternalStructs.pause_result();
        await tmp1740.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default)
      {
        await send_resume(c, cancellationToken);
        await recv_resume(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resume(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1741 = new InternalStructs.resume_args() {
          C = c,
        };
        
        await tmp1741.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_resume(CancellationToken cancellationToken = default)
      {
        
        var tmp1742 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1742.Type == TMessageType.Exception)
        {
          var tmp1743 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1743;
        }

        var tmp1744 = new InternalStructs.resume_result();
        await tmp1744.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default)
      {
        await send_stop(c, cancellationToken);
        await recv_stop(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stop(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1745 = new InternalStructs.stop_args() {
          C = c,
        };
        
        await tmp1745.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_stop(CancellationToken cancellationToken = default)
      {
        
        var tmp1746 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1746.Type == TMessageType.Exception)
        {
          var tmp1747 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1747;
        }

        var tmp1748 = new InternalStructs.stop_result();
        await tmp1748.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default)
      {
        await send_currentJob(c, cancellationToken);
        return await recv_currentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1749 = new InternalStructs.currentJob_args() {
          C = c,
        };
        
        await tmp1749.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1750 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1750.Type == TMessageType.Exception)
        {
          var tmp1751 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1751;
        }

        var tmp1752 = new InternalStructs.currentJob_result();
        await tmp1752.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1752.__isset.success)
        {
          return tmp1752.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await send_setCurrentJob(c, name, line, cancellationToken);
        await recv_setCurrentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1753 = new InternalStructs.setCurrentJob_args() {
          C = c,
          Name = name,
          Line = line,
        };
        
        await tmp1753.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setCurrentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1754 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1754.Type == TMessageType.Exception)
        {
          var tmp1755 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1755;
        }

        var tmp1756 = new InternalStructs.setCurrentJob_result();
        await tmp1756.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1756.__isset.e)
        {
          throw tmp1756.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await send_defaultJob(c, cancellationToken);
        return await recv_defaultJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1757 = new InternalStructs.defaultJob_args() {
          C = c,
        };
        
        await tmp1757.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_defaultJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1758 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1758.Type == TMessageType.Exception)
        {
          var tmp1759 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1759;
        }

        var tmp1760 = new InternalStructs.defaultJob_result();
        await tmp1760.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1760.__isset.success)
        {
          return tmp1760.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "defaultJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobExists(c, name, cancellationToken);
        return await recv_jobExists(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1761 = new InternalStructs.jobExists_args() {
          C = c,
          Name = name,
        };
        
        await tmp1761.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_jobExists(CancellationToken cancellationToken = default)
      {
        
        var tmp1762 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1762.Type == TMessageType.Exception)
        {
          var tmp1763 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1763;
        }

        var tmp1764 = new InternalStructs.jobExists_result();
        await tmp1764.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1764.__isset.success)
        {
          return tmp1764.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobExists failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobDetails(c, name, cancellationToken);
        return await recv_jobDetails(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1765 = new InternalStructs.jobDetails_args() {
          C = c,
          Name = name,
        };
        
        await tmp1765.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> recv_jobDetails(CancellationToken cancellationToken = default)
      {
        
        var tmp1766 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1766.Type == TMessageType.Exception)
        {
          var tmp1767 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1767;
        }

        var tmp1768 = new InternalStructs.jobDetails_result();
        await tmp1768.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1768.__isset.success)
        {
          return tmp1768.Success;
        }
        if (tmp1768.__isset.e)
        {
          throw tmp1768.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobDetails failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default)
      {
        await send_jobs(c, cancellationToken);
        return await recv_jobs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobs(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1769 = new InternalStructs.jobs_args() {
          C = c,
        };
        
        await tmp1769.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobs(CancellationToken cancellationToken = default)
      {
        
        var tmp1770 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1770.Type == TMessageType.Exception)
        {
          var tmp1771 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1771;
        }

        var tmp1772 = new InternalStructs.jobs_result();
        await tmp1772.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1772.__isset.success)
        {
          return tmp1772.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await send_jobsMatching(c, nameRegex, tag, cancellationToken);
        return await recv_jobsMatching(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1773 = new InternalStructs.jobsMatching_args() {
          C = c,
          NameRegex = nameRegex,
          Tag = tag,
        };
        
        await tmp1773.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobsMatching(CancellationToken cancellationToken = default)
      {
        
        var tmp1774 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1774.Type == TMessageType.Exception)
        {
          var tmp1775 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1775;
        }

        var tmp1776 = new InternalStructs.jobsMatching_result();
        await tmp1776.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1776.__isset.success)
        {
          return tmp1776.Success;
        }
        if (tmp1776.__isset.e)
        {
          throw tmp1776.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobsMatching failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await send_duplicateJob(c, existingName, newName, cancellationToken);
        await recv_duplicateJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1777 = new InternalStructs.duplicateJob_args() {
          C = c,
          ExistingName = existingName,
          NewName = newName,
        };
        
        await tmp1777.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_duplicateJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1778 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1778.Type == TMessageType.Exception)
        {
          var tmp1779 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1779;
        }

        var tmp1780 = new InternalStructs.duplicateJob_result();
        await tmp1780.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1780.__isset.e)
        {
          throw tmp1780.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_deleteJob(c, name, cancellationToken);
        await recv_deleteJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1781 = new InternalStructs.deleteJob_args() {
          C = c,
          Name = name,
        };
        
        await tmp1781.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1782 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1782.Type == TMessageType.Exception)
        {
          var tmp1783 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1783;
        }

        var tmp1784 = new InternalStructs.deleteJob_result();
        await tmp1784.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1784.__isset.e)
        {
          throw tmp1784.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobSource(c, name, cancellationToken);
        return await recv_jobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1785 = new InternalStructs.jobSource_args() {
          C = c,
          Name = name,
        };
        
        await tmp1785.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_jobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1786 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1786.Type == TMessageType.Exception)
        {
          var tmp1787 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1787;
        }

        var tmp1788 = new InternalStructs.jobSource_result();
        await tmp1788.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1788.__isset.success)
        {
          return tmp1788.Success;
        }
        if (tmp1788.__isset.e)
        {
          throw tmp1788.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobSource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await send_storeJobSource(c, name, programmingLanguage, sourceCode, cancellationToken);
        await recv_storeJobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1789 = new InternalStructs.storeJobSource_args() {
          C = c,
          Name = name,
          ProgrammingLanguage = programmingLanguage,
          SourceCode = sourceCode,
        };
        
        await tmp1789.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_storeJobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1790 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1790.Type == TMessageType.Exception)
        {
          var tmp1791 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1791;
        }

        var tmp1792 = new InternalStructs.storeJobSource_result();
        await tmp1792.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1792.__isset.e)
        {
          throw tmp1792.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default)
      {
        await send_tools(c, cancellationToken);
        return await recv_tools(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tools(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1793 = new InternalStructs.tools_args() {
          C = c,
        };
        
        await tmp1793.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_tools(CancellationToken cancellationToken = default)
      {
        
        var tmp1794 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1794.Type == TMessageType.Exception)
        {
          var tmp1795 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1795;
        }

        var tmp1796 = new InternalStructs.tools_result();
        await tmp1796.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1796.__isset.success)
        {
          return tmp1796.Success;
        }
        if (tmp1796.__isset.e)
        {
          throw tmp1796.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tools failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_tool(c, index, cancellationToken);
        return await recv_tool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1797 = new InternalStructs.tool_args() {
          C = c,
          Index = index,
        };
        
        await tmp1797.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> recv_tool(CancellationToken cancellationToken = default)
      {
        
        var tmp1798 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1798.Type == TMessageType.Exception)
        {
          var tmp1799 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1799;
        }

        var tmp1800 = new InternalStructs.tool_result();
        await tmp1800.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1800.__isset.success)
        {
          return tmp1800.Success;
        }
        if (tmp1800.__isset.e)
        {
          throw tmp1800.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputNumber(c, name, cancellationToken);
        return await recv_inputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1801 = new InternalStructs.inputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1801.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1802 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1802.Type == TMessageType.Exception)
        {
          var tmp1803 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1803;
        }

        var tmp1804 = new InternalStructs.inputNumber_result();
        await tmp1804.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1804.__isset.success)
        {
          return tmp1804.Success;
        }
        if (tmp1804.__isset.e)
        {
          throw tmp1804.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputGroupNumber(c, name, cancellationToken);
        return await recv_inputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1805 = new InternalStructs.inputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1805.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1806 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1806.Type == TMessageType.Exception)
        {
          var tmp1807 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1807;
        }

        var tmp1808 = new InternalStructs.inputGroupNumber_result();
        await tmp1808.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1808.__isset.success)
        {
          return tmp1808.Success;
        }
        if (tmp1808.__isset.e)
        {
          throw tmp1808.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputNumber(c, name, cancellationToken);
        return await recv_outputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1809 = new InternalStructs.outputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1809.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1810 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1810.Type == TMessageType.Exception)
        {
          var tmp1811 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1811;
        }

        var tmp1812 = new InternalStructs.outputNumber_result();
        await tmp1812.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1812.__isset.success)
        {
          return tmp1812.Success;
        }
        if (tmp1812.__isset.e)
        {
          throw tmp1812.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputGroupNumber(c, name, cancellationToken);
        return await recv_outputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1813 = new InternalStructs.outputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1813.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1814 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1814.Type == TMessageType.Exception)
        {
          var tmp1815 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1815;
        }

        var tmp1816 = new InternalStructs.outputGroupNumber_result();
        await tmp1816.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1816.__isset.success)
        {
          return tmp1816.Success;
        }
        if (tmp1816.__isset.e)
        {
          throw tmp1816.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputName(c, num, cancellationToken);
        return await recv_inputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1817 = new InternalStructs.inputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp1817.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_inputName(CancellationToken cancellationToken = default)
      {
        
        var tmp1818 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1818.Type == TMessageType.Exception)
        {
          var tmp1819 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1819;
        }

        var tmp1820 = new InternalStructs.inputName_result();
        await tmp1820.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1820.__isset.success)
        {
          return tmp1820.Success;
        }
        if (tmp1820.__isset.e)
        {
          throw tmp1820.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputName(c, num, cancellationToken);
        return await recv_outputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1821 = new InternalStructs.outputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp1821.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_outputName(CancellationToken cancellationToken = default)
      {
        
        var tmp1822 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1822.Type == TMessageType.Exception)
        {
          var tmp1823 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1823;
        }

        var tmp1824 = new InternalStructs.outputName_result();
        await tmp1824.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1824.__isset.success)
        {
          return tmp1824.Success;
        }
        if (tmp1824.__isset.e)
        {
          throw tmp1824.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setInputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setInputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1825 = new InternalStructs.setInputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp1825.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setOutputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1826 = new InternalStructs.setOutputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp1826.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorInput(c, num, cancellationToken);
        await recv_monitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1827 = new InternalStructs.monitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1827.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp1828 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1828.Type == TMessageType.Exception)
        {
          var tmp1829 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1829;
        }

        var tmp1830 = new InternalStructs.monitorInput_result();
        await tmp1830.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1830.__isset.e)
        {
          throw tmp1830.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1831 = new InternalStructs.monitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1831.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1832 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1832.Type == TMessageType.Exception)
        {
          var tmp1833 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1833;
        }

        var tmp1834 = new InternalStructs.monitorInputGroups_result();
        await tmp1834.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1834.__isset.e)
        {
          throw tmp1834.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorOutput(c, num, cancellationToken);
        await recv_monitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1835 = new InternalStructs.monitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1835.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp1836 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1836.Type == TMessageType.Exception)
        {
          var tmp1837 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1837;
        }

        var tmp1838 = new InternalStructs.monitorOutput_result();
        await tmp1838.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1838.__isset.e)
        {
          throw tmp1838.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1839 = new InternalStructs.monitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1839.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1840 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1840.Type == TMessageType.Exception)
        {
          var tmp1841 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1841;
        }

        var tmp1842 = new InternalStructs.monitorOutputGroups_result();
        await tmp1842.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1842.__isset.e)
        {
          throw tmp1842.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInput(c, num, cancellationToken);
        await recv_unmonitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1843 = new InternalStructs.unmonitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1843.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp1844 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1844.Type == TMessageType.Exception)
        {
          var tmp1845 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1845;
        }

        var tmp1846 = new InternalStructs.unmonitorInput_result();
        await tmp1846.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1847 = new InternalStructs.unmonitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1847.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1848 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1848.Type == TMessageType.Exception)
        {
          var tmp1849 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1849;
        }

        var tmp1850 = new InternalStructs.unmonitorInputGroups_result();
        await tmp1850.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutput(c, num, cancellationToken);
        await recv_unmonitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1851 = new InternalStructs.unmonitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1851.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp1852 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1852.Type == TMessageType.Exception)
        {
          var tmp1853 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1853;
        }

        var tmp1854 = new InternalStructs.unmonitorOutput_result();
        await tmp1854.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1855 = new InternalStructs.unmonitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1855.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1856 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1856.Type == TMessageType.Exception)
        {
          var tmp1857 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1857;
        }

        var tmp1858 = new InternalStructs.unmonitorOutputGroups_result();
        await tmp1858.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputValue(c, num, cancellationToken);
        return await recv_inputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1859 = new InternalStructs.inputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp1859.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1860 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1860.Type == TMessageType.Exception)
        {
          var tmp1861 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1861;
        }

        var tmp1862 = new InternalStructs.inputValue_result();
        await tmp1862.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1862.__isset.success)
        {
          return tmp1862.Success;
        }
        if (tmp1862.__isset.e)
        {
          throw tmp1862.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_inputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_inputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1863 = new InternalStructs.inputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1863.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1864 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1864.Type == TMessageType.Exception)
        {
          var tmp1865 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1865;
        }

        var tmp1866 = new InternalStructs.inputGroupsValue_result();
        await tmp1866.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1866.__isset.success)
        {
          return tmp1866.Success;
        }
        if (tmp1866.__isset.e)
        {
          throw tmp1866.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputValue(c, num, cancellationToken);
        return await recv_outputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1867 = new InternalStructs.outputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp1867.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1868 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1868.Type == TMessageType.Exception)
        {
          var tmp1869 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1869;
        }

        var tmp1870 = new InternalStructs.outputValue_result();
        await tmp1870.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1870.__isset.success)
        {
          return tmp1870.Success;
        }
        if (tmp1870.__isset.e)
        {
          throw tmp1870.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_outputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_outputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1871 = new InternalStructs.outputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1871.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1872 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1872.Type == TMessageType.Exception)
        {
          var tmp1873 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1873;
        }

        var tmp1874 = new InternalStructs.outputGroupsValue_result();
        await tmp1874.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1874.__isset.success)
        {
          return tmp1874.Success;
        }
        if (tmp1874.__isset.e)
        {
          throw tmp1874.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutput(c, num, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutput", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1875 = new InternalStructs.setOutput_args() {
          C = c,
          Num = num,
          Value = @value,
        };
        
        await tmp1875.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputGroups(c, groupNum, count, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputGroups", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1876 = new InternalStructs.setOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
          Value = @value,
        };
        
        await tmp1876.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputAddress(c, name, cancellationToken);
        return await recv_inputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1877 = new InternalStructs.inputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp1877.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1878 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1878.Type == TMessageType.Exception)
        {
          var tmp1879 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1879;
        }

        var tmp1880 = new InternalStructs.inputAddress_result();
        await tmp1880.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1880.__isset.success)
        {
          return tmp1880.Success;
        }
        if (tmp1880.__isset.e)
        {
          throw tmp1880.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputAddressByNumber(c, num, cancellationToken);
        return await recv_inputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1881 = new InternalStructs.inputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp1881.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1882 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1882.Type == TMessageType.Exception)
        {
          var tmp1883 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1883;
        }

        var tmp1884 = new InternalStructs.inputAddressByNumber_result();
        await tmp1884.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1884.__isset.success)
        {
          return tmp1884.Success;
        }
        if (tmp1884.__isset.e)
        {
          throw tmp1884.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputAddress(c, name, cancellationToken);
        return await recv_outputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1885 = new InternalStructs.outputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp1885.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1886 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1886.Type == TMessageType.Exception)
        {
          var tmp1887 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1887;
        }

        var tmp1888 = new InternalStructs.outputAddress_result();
        await tmp1888.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1888.__isset.success)
        {
          return tmp1888.Success;
        }
        if (tmp1888.__isset.e)
        {
          throw tmp1888.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputAddressByNumber(c, num, cancellationToken);
        return await recv_outputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1889 = new InternalStructs.outputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp1889.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1890 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1890.Type == TMessageType.Exception)
        {
          var tmp1891 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1891;
        }

        var tmp1892 = new InternalStructs.outputAddressByNumber_result();
        await tmp1892.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1892.__isset.success)
        {
          return tmp1892.Success;
        }
        if (tmp1892.__isset.e)
        {
          throw tmp1892.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_monitorIOAddress(c, address, cancellationToken);
        await recv_monitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1893 = new InternalStructs.monitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp1893.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1894 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1894.Type == TMessageType.Exception)
        {
          var tmp1895 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1895;
        }

        var tmp1896 = new InternalStructs.monitorIOAddress_result();
        await tmp1896.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1896.__isset.e)
        {
          throw tmp1896.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_unmonitorIOAddress(c, address, cancellationToken);
        await recv_unmonitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1897 = new InternalStructs.unmonitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp1897.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1898 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1898.Type == TMessageType.Exception)
        {
          var tmp1899 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1899;
        }

        var tmp1900 = new InternalStructs.unmonitorIOAddress_result();
        await tmp1900.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_inputAddressValue(c, address, cancellationToken);
        return await recv_inputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1901 = new InternalStructs.inputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1901.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1902 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1902.Type == TMessageType.Exception)
        {
          var tmp1903 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1903;
        }

        var tmp1904 = new InternalStructs.inputAddressValue_result();
        await tmp1904.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1904.__isset.success)
        {
          return tmp1904.Success;
        }
        if (tmp1904.__isset.e)
        {
          throw tmp1904.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_outputAddressValue(c, address, cancellationToken);
        return await recv_outputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1905 = new InternalStructs.outputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1905.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1906 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1906.Type == TMessageType.Exception)
        {
          var tmp1907 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1907;
        }

        var tmp1908 = new InternalStructs.outputAddressValue_result();
        await tmp1908.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1908.__isset.success)
        {
          return tmp1908.Success;
        }
        if (tmp1908.__isset.e)
        {
          throw tmp1908.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_ioAddressValue(c, address, cancellationToken);
        return await recv_ioAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1909 = new InternalStructs.ioAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1909.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ioAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1910 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1910.Type == TMessageType.Exception)
        {
          var tmp1911 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1911;
        }

        var tmp1912 = new InternalStructs.ioAddressValue_result();
        await tmp1912.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1912.__isset.success)
        {
          return tmp1912.Success;
        }
        if (tmp1912.__isset.e)
        {
          throw tmp1912.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ioAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1913 = new InternalStructs.setOutputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp1913.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setNetworkInputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setNetworkInputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1914 = new InternalStructs.setNetworkInputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp1914.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_mRegisterValue(c, index, cancellationToken);
        return await recv_mRegisterValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1915 = new InternalStructs.mRegisterValue_args() {
          C = c,
          Index = index,
        };
        
        await tmp1915.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_mRegisterValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1916 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1916.Type == TMessageType.Exception)
        {
          var tmp1917 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1917;
        }

        var tmp1918 = new InternalStructs.mRegisterValue_result();
        await tmp1918.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1918.__isset.success)
        {
          return tmp1918.Success;
        }
        if (tmp1918.__isset.e)
        {
          throw tmp1918.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mRegisterValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await send_setMRegisterValue(c, index, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setMRegisterValue", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1919 = new InternalStructs.setMRegisterValue_args() {
          C = c,
          Index = index,
          Value = @value,
        };
        
        await tmp1919.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await send_fieldBusStatusInputGroup(c, busType, cancellationToken);
        return await recv_fieldBusStatusInputGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1920 = new InternalStructs.fieldBusStatusInputGroup_args() {
          C = c,
          BusType = busType,
        };
        
        await tmp1920.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_fieldBusStatusInputGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1921 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1921.Type == TMessageType.Exception)
        {
          var tmp1922 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1922;
        }

        var tmp1923 = new InternalStructs.fieldBusStatusInputGroup_result();
        await tmp1923.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1923.__isset.success)
        {
          return tmp1923.Success;
        }
        if (tmp1923.__isset.e)
        {
          throw tmp1923.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fieldBusStatusInputGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await send_controlGroups(c, cancellationToken);
        return await recv_controlGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1924 = new InternalStructs.controlGroups_args() {
          C = c,
        };
        
        await tmp1924.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> recv_controlGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1925 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1925.Type == TMessageType.Exception)
        {
          var tmp1926 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1926;
        }

        var tmp1927 = new InternalStructs.controlGroups_result();
        await tmp1927.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1927.__isset.success)
        {
          return tmp1927.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controlGroups failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await send_currentControlGroup(c, cancellationToken);
        return await recv_currentControlGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1928 = new InternalStructs.currentControlGroup_args() {
          C = c,
        };
        
        await tmp1928.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_currentControlGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1929 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1929.Type == TMessageType.Exception)
        {
          var tmp1930 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1930;
        }

        var tmp1931 = new InternalStructs.currentControlGroup_result();
        await tmp1931.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1931.__isset.success)
        {
          return tmp1931.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentControlGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default)
      {
        await send_robotCount(c, cancellationToken);
        return await recv_robotCount(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_robotCount(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1932 = new InternalStructs.robotCount_args() {
          C = c,
        };
        
        await tmp1932.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_robotCount(CancellationToken cancellationToken = default)
      {
        
        var tmp1933 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1933.Type == TMessageType.Exception)
        {
          var tmp1934 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1934;
        }

        var tmp1935 = new InternalStructs.robotCount_result();
        await tmp1935.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1935.__isset.success)
        {
          return tmp1935.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "robotCount failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await send_currentRobot(c, cancellationToken);
        return await recv_currentRobot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1936 = new InternalStructs.currentRobot_args() {
          C = c,
        };
        
        await tmp1936.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentRobot(CancellationToken cancellationToken = default)
      {
        
        var tmp1937 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1937.Type == TMessageType.Exception)
        {
          var tmp1938 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1938;
        }

        var tmp1939 = new InternalStructs.currentRobot_result();
        await tmp1939.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1939.__isset.success)
        {
          return tmp1939.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentRobot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variable(c, name, cancellationToken);
        return await recv_variable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1940 = new InternalStructs.variable_args() {
          C = c,
          Name = name,
        };
        
        await tmp1940.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variable(CancellationToken cancellationToken = default)
      {
        
        var tmp1941 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1941.Type == TMessageType.Exception)
        {
          var tmp1942 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1942;
        }

        var tmp1943 = new InternalStructs.variable_result();
        await tmp1943.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1943.__isset.success)
        {
          return tmp1943.Success;
        }
        if (tmp1943.__isset.e)
        {
          throw tmp1943.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_variableByAddr(c, addr, cancellationToken);
        return await recv_variableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1944 = new InternalStructs.variableByAddr_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1944.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp1945 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1945.Type == TMessageType.Exception)
        {
          var tmp1946 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1946;
        }

        var tmp1947 = new InternalStructs.variableByAddr_result();
        await tmp1947.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1947.__isset.success)
        {
          return tmp1947.Success;
        }
        if (tmp1947.__isset.e)
        {
          throw tmp1947.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableByAddr failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariable(c, name, @value, cancellationToken);
        await recv_setVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1948 = new InternalStructs.setVariable_args() {
          C = c,
          Name = name,
          Value = @value,
        };
        
        await tmp1948.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1949 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1949.Type == TMessageType.Exception)
        {
          var tmp1950 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1950;
        }

        var tmp1951 = new InternalStructs.setVariable_result();
        await tmp1951.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1951.__isset.e)
        {
          throw tmp1951.E;
        }
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariableByAddr(c, addr, @value, cancellationToken);
        await recv_setVariableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1952 = new InternalStructs.setVariableByAddr_args() {
          C = c,
          Addr = addr,
          Value = @value,
        };
        
        await tmp1952.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp1953 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1953.Type == TMessageType.Exception)
        {
          var tmp1954 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1954;
        }

        var tmp1955 = new InternalStructs.setVariableByAddr_result();
        await tmp1955.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1955.__isset.e)
        {
          throw tmp1955.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByNameAndSpace(c, name, space, cancellationToken);
        return await recv_variableAddrByNameAndSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1956 = new InternalStructs.variableAddrByNameAndSpace_args() {
          C = c,
          Name = name,
          Space = space,
        };
        
        await tmp1956.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByNameAndSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1957 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1957.Type == TMessageType.Exception)
        {
          var tmp1958 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1958;
        }

        var tmp1959 = new InternalStructs.variableAddrByNameAndSpace_result();
        await tmp1959.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1959.__isset.success)
        {
          return tmp1959.Success;
        }
        if (tmp1959.__isset.e)
        {
          throw tmp1959.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByNameAndSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByName(c, name, cancellationToken);
        return await recv_variableAddrByName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1960 = new InternalStructs.variableAddrByName_args() {
          C = c,
          Name = name,
        };
        
        await tmp1960.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByName(CancellationToken cancellationToken = default)
      {
        
        var tmp1961 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1961.Type == TMessageType.Exception)
        {
          var tmp1962 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1962;
        }

        var tmp1963 = new InternalStructs.variableAddrByName_result();
        await tmp1963.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1963.__isset.success)
        {
          return tmp1963.Success;
        }
        if (tmp1963.__isset.e)
        {
          throw tmp1963.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await send_setVariableName(c, addr, name, cancellationToken);
        await recv_setVariableName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1964 = new InternalStructs.setVariableName_args() {
          C = c,
          Addr = addr,
          Name = name,
        };
        
        await tmp1964.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableName(CancellationToken cancellationToken = default)
      {
        
        var tmp1965 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1965.Type == TMessageType.Exception)
        {
          var tmp1966 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1966;
        }

        var tmp1967 = new InternalStructs.setVariableName_result();
        await tmp1967.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1967.__isset.e)
        {
          throw tmp1967.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_monitorVariable(c, addr, cancellationToken);
        await recv_monitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1968 = new InternalStructs.monitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1968.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1969 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1969.Type == TMessageType.Exception)
        {
          var tmp1970 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1970;
        }

        var tmp1971 = new InternalStructs.monitorVariable_result();
        await tmp1971.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1971.__isset.e)
        {
          throw tmp1971.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_unmonitorVariable(c, addr, cancellationToken);
        await recv_unmonitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1972 = new InternalStructs.unmonitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1972.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1973 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1973.Type == TMessageType.Exception)
        {
          var tmp1974 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1974;
        }

        var tmp1975 = new InternalStructs.unmonitorVariable_result();
        await tmp1975.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1975.__isset.e)
        {
          throw tmp1975.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_zone(c, index, cancellationToken);
        return await recv_zone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1976 = new InternalStructs.zone_args() {
          C = c,
          Index = index,
        };
        
        await tmp1976.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> recv_zone(CancellationToken cancellationToken = default)
      {
        
        var tmp1977 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1977.Type == TMessageType.Exception)
        {
          var tmp1978 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1978;
        }

        var tmp1979 = new InternalStructs.zone_result();
        await tmp1979.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1979.__isset.success)
        {
          return tmp1979.Success;
        }
        if (tmp1979.__isset.e)
        {
          throw tmp1979.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "zone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default)
      {
        await send_newZone(c, cancellationToken);
        return await recv_newZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newZone(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1980 = new InternalStructs.newZone_args() {
          C = c,
        };
        
        await tmp1980.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1981 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1981.Type == TMessageType.Exception)
        {
          var tmp1982 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1982;
        }

        var tmp1983 = new InternalStructs.newZone_result();
        await tmp1983.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1983.__isset.success)
        {
          return tmp1983.Success;
        }
        if (tmp1983.__isset.e)
        {
          throw tmp1983.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await send_modifyZone(c, index, z, cancellationToken);
        await recv_modifyZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1984 = new InternalStructs.modifyZone_args() {
          C = c,
          Index = index,
          Z = z,
        };
        
        await tmp1984.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_modifyZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1985 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1985.Type == TMessageType.Exception)
        {
          var tmp1986 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1986;
        }

        var tmp1987 = new InternalStructs.modifyZone_result();
        await tmp1987.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1987.__isset.e)
        {
          throw tmp1987.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteZone(c, index, cancellationToken);
        await recv_deleteZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1988 = new InternalStructs.deleteZone_args() {
          C = c,
          Index = index,
        };
        
        await tmp1988.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1989 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1989.Type == TMessageType.Exception)
        {
          var tmp1990 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1990;
        }

        var tmp1991 = new InternalStructs.deleteZone_result();
        await tmp1991.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1991.__isset.e)
        {
          throw tmp1991.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default)
      {
        await send_userFrames(c, cancellationToken);
        return await recv_userFrames(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrames(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1992 = new InternalStructs.userFrames_args() {
          C = c,
        };
        
        await tmp1992.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_userFrames(CancellationToken cancellationToken = default)
      {
        
        var tmp1993 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1993.Type == TMessageType.Exception)
        {
          var tmp1994 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1994;
        }

        var tmp1995 = new InternalStructs.userFrames_result();
        await tmp1995.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1995.__isset.success)
        {
          return tmp1995.Success;
        }
        if (tmp1995.__isset.e)
        {
          throw tmp1995.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrames failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_userFrame(c, index, cancellationToken);
        return await recv_userFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1996 = new InternalStructs.userFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp1996.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> recv_userFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1997 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1997.Type == TMessageType.Exception)
        {
          var tmp1998 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1998;
        }

        var tmp1999 = new InternalStructs.userFrame_result();
        await tmp1999.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1999.__isset.success)
        {
          return tmp1999.Success;
        }
        if (tmp1999.__isset.e)
        {
          throw tmp1999.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await send_newUserFrame(c, cancellationToken);
        return await recv_newUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2000 = new InternalStructs.newUserFrame_args() {
          C = c,
        };
        
        await tmp2000.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2001 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2001.Type == TMessageType.Exception)
        {
          var tmp2002 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2002;
        }

        var tmp2003 = new InternalStructs.newUserFrame_result();
        await tmp2003.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2003.__isset.success)
        {
          return tmp2003.Success;
        }
        if (tmp2003.__isset.e)
        {
          throw tmp2003.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newUserFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await send_setUserFrame(c, index, f, cancellationToken);
        await recv_setUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2004 = new InternalStructs.setUserFrame_args() {
          C = c,
          Index = index,
          F = f,
        };
        
        await tmp2004.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2005 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2005.Type == TMessageType.Exception)
        {
          var tmp2006 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2006;
        }

        var tmp2007 = new InternalStructs.setUserFrame_result();
        await tmp2007.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2007.__isset.e)
        {
          throw tmp2007.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteUserFrame(c, index, cancellationToken);
        await recv_deleteUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2008 = new InternalStructs.deleteUserFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp2008.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp2009 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2009.Type == TMessageType.Exception)
        {
          var tmp2010 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2010;
        }

        var tmp2011 = new InternalStructs.deleteUserFrame_result();
        await tmp2011.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2011.__isset.e)
        {
          throw tmp2011.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await send_networkInterfaceAddress(c, controllerInterface, cancellationToken);
        return await recv_networkInterfaceAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2012 = new InternalStructs.networkInterfaceAddress_args() {
          C = c,
          ControllerInterface = controllerInterface,
        };
        
        await tmp2012.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_networkInterfaceAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp2013 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2013.Type == TMessageType.Exception)
        {
          var tmp2014 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2014;
        }

        var tmp2015 = new InternalStructs.networkInterfaceAddress_result();
        await tmp2015.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2015.__isset.success)
        {
          return tmp2015.Success;
        }
        if (tmp2015.__isset.e)
        {
          throw tmp2015.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "networkInterfaceAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkAccess(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2016 = new InternalStructs.requestNetworkAccess_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2016.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp2017 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2017.Type == TMessageType.Exception)
        {
          var tmp2018 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2018;
        }

        var tmp2019 = new InternalStructs.requestNetworkAccess_result();
        await tmp2019.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2019.__isset.success)
        {
          return tmp2019.Success;
        }
        if (tmp2019.__isset.e)
        {
          throw tmp2019.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkAccess failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkAccess(c, accessHandle, cancellationToken);
        await recv_removeNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2020 = new InternalStructs.removeNetworkAccess_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2020.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp2021 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2021.Type == TMessageType.Exception)
        {
          var tmp2022 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2022;
        }

        var tmp2023 = new InternalStructs.removeNetworkAccess_result();
        await tmp2023.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2023.__isset.e)
        {
          throw tmp2023.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkService(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2024 = new InternalStructs.requestNetworkService_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2024.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2025 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2025.Type == TMessageType.Exception)
        {
          var tmp2026 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2026;
        }

        var tmp2027 = new InternalStructs.requestNetworkService_result();
        await tmp2027.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2027.__isset.success)
        {
          return tmp2027.Success;
        }
        if (tmp2027.__isset.e)
        {
          throw tmp2027.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkService(c, accessHandle, cancellationToken);
        await recv_removeNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2028 = new InternalStructs.removeNetworkService_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2028.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2029 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2029.Type == TMessageType.Exception)
        {
          var tmp2030 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2030;
        }

        var tmp2031 = new InternalStructs.removeNetworkService_result();
        await tmp2031.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2031.__isset.e)
        {
          throw tmp2031.E;
        }
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.GaugeSensorSpec>> getGaugeSensorSpec(long c, CancellationToken cancellationToken = default)
      {
        await send_getGaugeSensorSpec(c, cancellationToken);
        return await recv_getGaugeSensorSpec(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getGaugeSensorSpec(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getGaugeSensorSpec", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2032 = new InternalStructs.getGaugeSensorSpec_args() {
          C = c,
        };
        
        await tmp2032.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.GaugeSensorSpec>> recv_getGaugeSensorSpec(CancellationToken cancellationToken = default)
      {
        
        var tmp2033 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2033.Type == TMessageType.Exception)
        {
          var tmp2034 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2034;
        }

        var tmp2035 = new InternalStructs.getGaugeSensorSpec_result();
        await tmp2035.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2035.__isset.success)
        {
          return tmp2035.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGaugeSensorSpec failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task gaugeSensorCalibration(long c, sbyte channel, CancellationToken cancellationToken = default)
      {
        await send_gaugeSensorCalibration(c, channel, cancellationToken);
        await recv_gaugeSensorCalibration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_gaugeSensorCalibration(long c, sbyte channel, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("gaugeSensorCalibration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2036 = new InternalStructs.gaugeSensorCalibration_args() {
          C = c,
          Channel = channel,
        };
        
        await tmp2036.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_gaugeSensorCalibration(CancellationToken cancellationToken = default)
      {
        
        var tmp2037 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2037.Type == TMessageType.Exception)
        {
          var tmp2038 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2038;
        }

        var tmp2039 = new InternalStructs.gaugeSensorCalibration_result();
        await tmp2039.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["requestPermissions"] = requestPermissions_ProcessAsync;
        processMap_["havePermission"] = havePermission_ProcessAsync;
        processMap_["relinquishPermissions"] = relinquishPermissions_ProcessAsync;
        processMap_["connect"] = connect_ProcessAsync;
        processMap_["disconnect"] = disconnect_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["connected"] = connected_ProcessAsync;
        processMap_["connectedHostName"] = connectedHostName_ProcessAsync;
        processMap_["softwareVersion"] = softwareVersion_ProcessAsync;
        processMap_["monitoring"] = monitoring_ProcessAsync;
        processMap_["haveExclusiveControl"] = haveExclusiveControl_ProcessAsync;
        processMap_["operationMode"] = operationMode_ProcessAsync;
        processMap_["servoState"] = servoState_ProcessAsync;
        processMap_["playbackState"] = playbackState_ProcessAsync;
        processMap_["playbackCycle"] = playbackCycle_ProcessAsync;
        processMap_["setPlaybackCycle"] = setPlaybackCycle_ProcessAsync;
        processMap_["run"] = run_ProcessAsync;
        processMap_["pause"] = pause_ProcessAsync;
        processMap_["resume"] = resume_ProcessAsync;
        processMap_["stop"] = stop_ProcessAsync;
        processMap_["currentJob"] = currentJob_ProcessAsync;
        processMap_["setCurrentJob"] = setCurrentJob_ProcessAsync;
        processMap_["defaultJob"] = defaultJob_ProcessAsync;
        processMap_["jobExists"] = jobExists_ProcessAsync;
        processMap_["jobDetails"] = jobDetails_ProcessAsync;
        processMap_["jobs"] = jobs_ProcessAsync;
        processMap_["jobsMatching"] = jobsMatching_ProcessAsync;
        processMap_["duplicateJob"] = duplicateJob_ProcessAsync;
        processMap_["deleteJob"] = deleteJob_ProcessAsync;
        processMap_["jobSource"] = jobSource_ProcessAsync;
        processMap_["storeJobSource"] = storeJobSource_ProcessAsync;
        processMap_["tools"] = tools_ProcessAsync;
        processMap_["tool"] = tool_ProcessAsync;
        processMap_["inputNumber"] = inputNumber_ProcessAsync;
        processMap_["inputGroupNumber"] = inputGroupNumber_ProcessAsync;
        processMap_["outputNumber"] = outputNumber_ProcessAsync;
        processMap_["outputGroupNumber"] = outputGroupNumber_ProcessAsync;
        processMap_["inputName"] = inputName_ProcessAsync;
        processMap_["outputName"] = outputName_ProcessAsync;
        processMap_["setInputName"] = setInputName_ProcessAsync;
        processMap_["setOutputName"] = setOutputName_ProcessAsync;
        processMap_["monitorInput"] = monitorInput_ProcessAsync;
        processMap_["monitorInputGroups"] = monitorInputGroups_ProcessAsync;
        processMap_["monitorOutput"] = monitorOutput_ProcessAsync;
        processMap_["monitorOutputGroups"] = monitorOutputGroups_ProcessAsync;
        processMap_["unmonitorInput"] = unmonitorInput_ProcessAsync;
        processMap_["unmonitorInputGroups"] = unmonitorInputGroups_ProcessAsync;
        processMap_["unmonitorOutput"] = unmonitorOutput_ProcessAsync;
        processMap_["unmonitorOutputGroups"] = unmonitorOutputGroups_ProcessAsync;
        processMap_["inputValue"] = inputValue_ProcessAsync;
        processMap_["inputGroupsValue"] = inputGroupsValue_ProcessAsync;
        processMap_["outputValue"] = outputValue_ProcessAsync;
        processMap_["outputGroupsValue"] = outputGroupsValue_ProcessAsync;
        processMap_["setOutput"] = setOutput_ProcessAsync;
        processMap_["setOutputGroups"] = setOutputGroups_ProcessAsync;
        processMap_["inputAddress"] = inputAddress_ProcessAsync;
        processMap_["inputAddressByNumber"] = inputAddressByNumber_ProcessAsync;
        processMap_["outputAddress"] = outputAddress_ProcessAsync;
        processMap_["outputAddressByNumber"] = outputAddressByNumber_ProcessAsync;
        processMap_["monitorIOAddress"] = monitorIOAddress_ProcessAsync;
        processMap_["unmonitorIOAddress"] = unmonitorIOAddress_ProcessAsync;
        processMap_["inputAddressValue"] = inputAddressValue_ProcessAsync;
        processMap_["outputAddressValue"] = outputAddressValue_ProcessAsync;
        processMap_["ioAddressValue"] = ioAddressValue_ProcessAsync;
        processMap_["setOutputAddress"] = setOutputAddress_ProcessAsync;
        processMap_["setNetworkInputAddress"] = setNetworkInputAddress_ProcessAsync;
        processMap_["mRegisterValue"] = mRegisterValue_ProcessAsync;
        processMap_["setMRegisterValue"] = setMRegisterValue_ProcessAsync;
        processMap_["fieldBusStatusInputGroup"] = fieldBusStatusInputGroup_ProcessAsync;
        processMap_["controlGroups"] = controlGroups_ProcessAsync;
        processMap_["currentControlGroup"] = currentControlGroup_ProcessAsync;
        processMap_["robotCount"] = robotCount_ProcessAsync;
        processMap_["currentRobot"] = currentRobot_ProcessAsync;
        processMap_["variable"] = variable_ProcessAsync;
        processMap_["variableByAddr"] = variableByAddr_ProcessAsync;
        processMap_["setVariable"] = setVariable_ProcessAsync;
        processMap_["setVariableByAddr"] = setVariableByAddr_ProcessAsync;
        processMap_["variableAddrByNameAndSpace"] = variableAddrByNameAndSpace_ProcessAsync;
        processMap_["variableAddrByName"] = variableAddrByName_ProcessAsync;
        processMap_["setVariableName"] = setVariableName_ProcessAsync;
        processMap_["monitorVariable"] = monitorVariable_ProcessAsync;
        processMap_["unmonitorVariable"] = unmonitorVariable_ProcessAsync;
        processMap_["zone"] = zone_ProcessAsync;
        processMap_["newZone"] = newZone_ProcessAsync;
        processMap_["modifyZone"] = modifyZone_ProcessAsync;
        processMap_["deleteZone"] = deleteZone_ProcessAsync;
        processMap_["userFrames"] = userFrames_ProcessAsync;
        processMap_["userFrame"] = userFrame_ProcessAsync;
        processMap_["newUserFrame"] = newUserFrame_ProcessAsync;
        processMap_["setUserFrame"] = setUserFrame_ProcessAsync;
        processMap_["deleteUserFrame"] = deleteUserFrame_ProcessAsync;
        processMap_["networkInterfaceAddress"] = networkInterfaceAddress_ProcessAsync;
        processMap_["requestNetworkAccess"] = requestNetworkAccess_ProcessAsync;
        processMap_["removeNetworkAccess"] = removeNetworkAccess_ProcessAsync;
        processMap_["requestNetworkService"] = requestNetworkService_ProcessAsync;
        processMap_["removeNetworkService"] = removeNetworkService_ProcessAsync;
        processMap_["getGaugeSensorSpec"] = getGaugeSensorSpec_ProcessAsync;
        processMap_["gaugeSensorCalibration"] = gaugeSensorCalibration_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task requestPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2040 = new InternalStructs.requestPermissions_args();
        await tmp2040.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2041 = new InternalStructs.requestPermissions_result();
        try
        {
          try
          {
            tmp2041.Success = await _iAsync.requestPermissions(tmp2040.C, tmp2040.Permissions, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2042)
          {
            tmp2041.E = tmp2042;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2041.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2043)
        {
          var tmp2044 = $"Error occurred in {GetType().FullName}: {tmp2043.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2043, tmp2044);
          else
            Console.Error.WriteLine(tmp2044);
          var tmp2045 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2045.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task havePermission_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2046 = new InternalStructs.havePermission_args();
        await tmp2046.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2047 = new InternalStructs.havePermission_result();
        try
        {
          try
          {
            tmp2047.Success = await _iAsync.havePermission(tmp2046.C, tmp2046.Permission, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2048)
          {
            tmp2047.E = tmp2048;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2047.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2049)
        {
          var tmp2050 = $"Error occurred in {GetType().FullName}: {tmp2049.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2049, tmp2050);
          else
            Console.Error.WriteLine(tmp2050);
          var tmp2051 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Exception, seqid), cancellationToken);
          await tmp2051.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2052 = new InternalStructs.relinquishPermissions_args();
        await tmp2052.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2053 = new InternalStructs.relinquishPermissions_result();
        try
        {
          await _iAsync.relinquishPermissions(tmp2052.C, tmp2052.Permissions, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2053.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2054)
        {
          var tmp2055 = $"Error occurred in {GetType().FullName}: {tmp2054.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2054, tmp2055);
          else
            Console.Error.WriteLine(tmp2055);
          var tmp2056 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2056.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2057 = new InternalStructs.connect_args();
        await tmp2057.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2058 = new InternalStructs.connect_result();
        try
        {
          await _iAsync.connect(tmp2057.C, tmp2057.HostName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2058.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2059)
        {
          var tmp2060 = $"Error occurred in {GetType().FullName}: {tmp2059.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2059, tmp2060);
          else
            Console.Error.WriteLine(tmp2060);
          var tmp2061 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2061.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2062 = new InternalStructs.disconnect_args();
        await tmp2062.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2063 = new InternalStructs.disconnect_result();
        try
        {
          await _iAsync.disconnect(tmp2062.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2063.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2064)
        {
          var tmp2065 = $"Error occurred in {GetType().FullName}: {tmp2064.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2064, tmp2065);
          else
            Console.Error.WriteLine(tmp2065);
          var tmp2066 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2066.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2067 = new InternalStructs.subscribeEventTypes_args();
        await tmp2067.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2068 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp2067.C, tmp2067.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2068.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2069)
        {
          var tmp2070 = $"Error occurred in {GetType().FullName}: {tmp2069.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2069, tmp2070);
          else
            Console.Error.WriteLine(tmp2070);
          var tmp2071 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2071.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2072 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp2072.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2073 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp2072.C, tmp2072.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2073.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2074)
        {
          var tmp2075 = $"Error occurred in {GetType().FullName}: {tmp2074.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2074, tmp2075);
          else
            Console.Error.WriteLine(tmp2075);
          var tmp2076 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2076.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2077 = new InternalStructs.events_args();
        await tmp2077.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2078 = new InternalStructs.events_result();
        try
        {
          tmp2078.Success = await _iAsync.events(tmp2077.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2078.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2079)
        {
          var tmp2080 = $"Error occurred in {GetType().FullName}: {tmp2079.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2079, tmp2080);
          else
            Console.Error.WriteLine(tmp2080);
          var tmp2081 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp2081.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connected_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2082 = new InternalStructs.connected_args();
        await tmp2082.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2083 = new InternalStructs.connected_result();
        try
        {
          tmp2083.Success = await _iAsync.connected(tmp2082.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2083.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2084)
        {
          var tmp2085 = $"Error occurred in {GetType().FullName}: {tmp2084.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2084, tmp2085);
          else
            Console.Error.WriteLine(tmp2085);
          var tmp2086 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Exception, seqid), cancellationToken);
          await tmp2086.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connectedHostName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2087 = new InternalStructs.connectedHostName_args();
        await tmp2087.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2088 = new InternalStructs.connectedHostName_result();
        try
        {
          tmp2088.Success = await _iAsync.connectedHostName(tmp2087.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2088.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2089)
        {
          var tmp2090 = $"Error occurred in {GetType().FullName}: {tmp2089.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2089, tmp2090);
          else
            Console.Error.WriteLine(tmp2090);
          var tmp2091 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2091.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task softwareVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2092 = new InternalStructs.softwareVersion_args();
        await tmp2092.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2093 = new InternalStructs.softwareVersion_result();
        try
        {
          tmp2093.Success = await _iAsync.softwareVersion(tmp2092.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2093.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2094)
        {
          var tmp2095 = $"Error occurred in {GetType().FullName}: {tmp2094.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2094, tmp2095);
          else
            Console.Error.WriteLine(tmp2095);
          var tmp2096 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp2096.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitoring_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2097 = new InternalStructs.monitoring_args();
        await tmp2097.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2098 = new InternalStructs.monitoring_result();
        try
        {
          tmp2098.Success = await _iAsync.monitoring(tmp2097.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2098.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2099)
        {
          var tmp2100 = $"Error occurred in {GetType().FullName}: {tmp2099.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2099, tmp2100);
          else
            Console.Error.WriteLine(tmp2100);
          var tmp2101 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Exception, seqid), cancellationToken);
          await tmp2101.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task haveExclusiveControl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2102 = new InternalStructs.haveExclusiveControl_args();
        await tmp2102.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2103 = new InternalStructs.haveExclusiveControl_result();
        try
        {
          tmp2103.Success = await _iAsync.haveExclusiveControl(tmp2102.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2103.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2104)
        {
          var tmp2105 = $"Error occurred in {GetType().FullName}: {tmp2104.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2104, tmp2105);
          else
            Console.Error.WriteLine(tmp2105);
          var tmp2106 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Exception, seqid), cancellationToken);
          await tmp2106.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task operationMode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2107 = new InternalStructs.operationMode_args();
        await tmp2107.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2108 = new InternalStructs.operationMode_result();
        try
        {
          tmp2108.Success = await _iAsync.operationMode(tmp2107.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2108.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2109)
        {
          var tmp2110 = $"Error occurred in {GetType().FullName}: {tmp2109.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2109, tmp2110);
          else
            Console.Error.WriteLine(tmp2110);
          var tmp2111 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Exception, seqid), cancellationToken);
          await tmp2111.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task servoState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2112 = new InternalStructs.servoState_args();
        await tmp2112.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2113 = new InternalStructs.servoState_result();
        try
        {
          tmp2113.Success = await _iAsync.servoState(tmp2112.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2113.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2114)
        {
          var tmp2115 = $"Error occurred in {GetType().FullName}: {tmp2114.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2114, tmp2115);
          else
            Console.Error.WriteLine(tmp2115);
          var tmp2116 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2116.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2117 = new InternalStructs.playbackState_args();
        await tmp2117.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2118 = new InternalStructs.playbackState_result();
        try
        {
          tmp2118.Success = await _iAsync.playbackState(tmp2117.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2118.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2119)
        {
          var tmp2120 = $"Error occurred in {GetType().FullName}: {tmp2119.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2119, tmp2120);
          else
            Console.Error.WriteLine(tmp2120);
          var tmp2121 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2121.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2122 = new InternalStructs.playbackCycle_args();
        await tmp2122.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2123 = new InternalStructs.playbackCycle_result();
        try
        {
          tmp2123.Success = await _iAsync.playbackCycle(tmp2122.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2123.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2124)
        {
          var tmp2125 = $"Error occurred in {GetType().FullName}: {tmp2124.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2124, tmp2125);
          else
            Console.Error.WriteLine(tmp2125);
          var tmp2126 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2126.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2127 = new InternalStructs.setPlaybackCycle_args();
        await tmp2127.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2128 = new InternalStructs.setPlaybackCycle_result();
        try
        {
          await _iAsync.setPlaybackCycle(tmp2127.C, tmp2127.Cycle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2128.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2129)
        {
          var tmp2130 = $"Error occurred in {GetType().FullName}: {tmp2129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2129, tmp2130);
          else
            Console.Error.WriteLine(tmp2130);
          var tmp2131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2132 = new InternalStructs.run_args();
        await tmp2132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2133 = new InternalStructs.run_result();
        try
        {
          await _iAsync.run(tmp2132.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2134)
        {
          var tmp2135 = $"Error occurred in {GetType().FullName}: {tmp2134.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2134, tmp2135);
          else
            Console.Error.WriteLine(tmp2135);
          var tmp2136 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Exception, seqid), cancellationToken);
          await tmp2136.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2137 = new InternalStructs.pause_args();
        await tmp2137.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2138 = new InternalStructs.pause_result();
        try
        {
          await _iAsync.pause(tmp2137.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2138.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2139)
        {
          var tmp2140 = $"Error occurred in {GetType().FullName}: {tmp2139.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2139, tmp2140);
          else
            Console.Error.WriteLine(tmp2140);
          var tmp2141 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Exception, seqid), cancellationToken);
          await tmp2141.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2142 = new InternalStructs.resume_args();
        await tmp2142.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2143 = new InternalStructs.resume_result();
        try
        {
          await _iAsync.resume(tmp2142.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2143.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2144)
        {
          var tmp2145 = $"Error occurred in {GetType().FullName}: {tmp2144.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2144, tmp2145);
          else
            Console.Error.WriteLine(tmp2145);
          var tmp2146 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Exception, seqid), cancellationToken);
          await tmp2146.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2147 = new InternalStructs.stop_args();
        await tmp2147.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2148 = new InternalStructs.stop_result();
        try
        {
          await _iAsync.stop(tmp2147.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2148.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2149)
        {
          var tmp2150 = $"Error occurred in {GetType().FullName}: {tmp2149.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2149, tmp2150);
          else
            Console.Error.WriteLine(tmp2150);
          var tmp2151 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Exception, seqid), cancellationToken);
          await tmp2151.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2152 = new InternalStructs.currentJob_args();
        await tmp2152.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2153 = new InternalStructs.currentJob_result();
        try
        {
          tmp2153.Success = await _iAsync.currentJob(tmp2152.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2153.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2154)
        {
          var tmp2155 = $"Error occurred in {GetType().FullName}: {tmp2154.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2154, tmp2155);
          else
            Console.Error.WriteLine(tmp2155);
          var tmp2156 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2156.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setCurrentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2157 = new InternalStructs.setCurrentJob_args();
        await tmp2157.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2158 = new InternalStructs.setCurrentJob_result();
        try
        {
          try
          {
            await _iAsync.setCurrentJob(tmp2157.C, tmp2157.Name, tmp2157.Line, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2159)
          {
            tmp2158.E = tmp2159;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2158.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2160)
        {
          var tmp2161 = $"Error occurred in {GetType().FullName}: {tmp2160.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2160, tmp2161);
          else
            Console.Error.WriteLine(tmp2161);
          var tmp2162 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2162.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task defaultJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2163 = new InternalStructs.defaultJob_args();
        await tmp2163.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2164 = new InternalStructs.defaultJob_result();
        try
        {
          tmp2164.Success = await _iAsync.defaultJob(tmp2163.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2164.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2165)
        {
          var tmp2166 = $"Error occurred in {GetType().FullName}: {tmp2165.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2165, tmp2166);
          else
            Console.Error.WriteLine(tmp2166);
          var tmp2167 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2167.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobExists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2168 = new InternalStructs.jobExists_args();
        await tmp2168.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2169 = new InternalStructs.jobExists_result();
        try
        {
          tmp2169.Success = await _iAsync.jobExists(tmp2168.C, tmp2168.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2169.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2170)
        {
          var tmp2171 = $"Error occurred in {GetType().FullName}: {tmp2170.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2170, tmp2171);
          else
            Console.Error.WriteLine(tmp2171);
          var tmp2172 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Exception, seqid), cancellationToken);
          await tmp2172.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobDetails_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2173 = new InternalStructs.jobDetails_args();
        await tmp2173.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2174 = new InternalStructs.jobDetails_result();
        try
        {
          try
          {
            tmp2174.Success = await _iAsync.jobDetails(tmp2173.C, tmp2173.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2175)
          {
            tmp2174.E = tmp2175;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2174.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2176)
        {
          var tmp2177 = $"Error occurred in {GetType().FullName}: {tmp2176.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2176, tmp2177);
          else
            Console.Error.WriteLine(tmp2177);
          var tmp2178 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Exception, seqid), cancellationToken);
          await tmp2178.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2179 = new InternalStructs.jobs_args();
        await tmp2179.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2180 = new InternalStructs.jobs_result();
        try
        {
          tmp2180.Success = await _iAsync.jobs(tmp2179.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2180.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2181)
        {
          var tmp2182 = $"Error occurred in {GetType().FullName}: {tmp2181.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2181, tmp2182);
          else
            Console.Error.WriteLine(tmp2182);
          var tmp2183 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Exception, seqid), cancellationToken);
          await tmp2183.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobsMatching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2184 = new InternalStructs.jobsMatching_args();
        await tmp2184.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2185 = new InternalStructs.jobsMatching_result();
        try
        {
          try
          {
            tmp2185.Success = await _iAsync.jobsMatching(tmp2184.C, tmp2184.NameRegex, tmp2184.Tag, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2186)
          {
            tmp2185.E = tmp2186;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2185.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2187)
        {
          var tmp2188 = $"Error occurred in {GetType().FullName}: {tmp2187.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2187, tmp2188);
          else
            Console.Error.WriteLine(tmp2188);
          var tmp2189 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Exception, seqid), cancellationToken);
          await tmp2189.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task duplicateJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2190 = new InternalStructs.duplicateJob_args();
        await tmp2190.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2191 = new InternalStructs.duplicateJob_result();
        try
        {
          try
          {
            await _iAsync.duplicateJob(tmp2190.C, tmp2190.ExistingName, tmp2190.NewName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2192)
          {
            tmp2191.E = tmp2192;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2191.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2193)
        {
          var tmp2194 = $"Error occurred in {GetType().FullName}: {tmp2193.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2193, tmp2194);
          else
            Console.Error.WriteLine(tmp2194);
          var tmp2195 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2195.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2196 = new InternalStructs.deleteJob_args();
        await tmp2196.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2197 = new InternalStructs.deleteJob_result();
        try
        {
          try
          {
            await _iAsync.deleteJob(tmp2196.C, tmp2196.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2198)
          {
            tmp2197.E = tmp2198;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2197.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2199)
        {
          var tmp2200 = $"Error occurred in {GetType().FullName}: {tmp2199.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2199, tmp2200);
          else
            Console.Error.WriteLine(tmp2200);
          var tmp2201 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2201.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2202 = new InternalStructs.jobSource_args();
        await tmp2202.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2203 = new InternalStructs.jobSource_result();
        try
        {
          try
          {
            tmp2203.Success = await _iAsync.jobSource(tmp2202.C, tmp2202.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2204)
          {
            tmp2203.E = tmp2204;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2203.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2205)
        {
          var tmp2206 = $"Error occurred in {GetType().FullName}: {tmp2205.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2205, tmp2206);
          else
            Console.Error.WriteLine(tmp2206);
          var tmp2207 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2207.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeJobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2208 = new InternalStructs.storeJobSource_args();
        await tmp2208.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2209 = new InternalStructs.storeJobSource_result();
        try
        {
          try
          {
            await _iAsync.storeJobSource(tmp2208.C, tmp2208.Name, tmp2208.ProgrammingLanguage, tmp2208.SourceCode, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2210)
          {
            tmp2209.E = tmp2210;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2209.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2211)
        {
          var tmp2212 = $"Error occurred in {GetType().FullName}: {tmp2211.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2211, tmp2212);
          else
            Console.Error.WriteLine(tmp2212);
          var tmp2213 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2213.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tools_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2214 = new InternalStructs.tools_args();
        await tmp2214.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2215 = new InternalStructs.tools_result();
        try
        {
          try
          {
            tmp2215.Success = await _iAsync.tools(tmp2214.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2216)
          {
            tmp2215.E = tmp2216;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2215.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2217)
        {
          var tmp2218 = $"Error occurred in {GetType().FullName}: {tmp2217.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2217, tmp2218);
          else
            Console.Error.WriteLine(tmp2218);
          var tmp2219 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Exception, seqid), cancellationToken);
          await tmp2219.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2220 = new InternalStructs.tool_args();
        await tmp2220.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2221 = new InternalStructs.tool_result();
        try
        {
          try
          {
            tmp2221.Success = await _iAsync.tool(tmp2220.C, tmp2220.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2222)
          {
            tmp2221.E = tmp2222;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2221.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2223)
        {
          var tmp2224 = $"Error occurred in {GetType().FullName}: {tmp2223.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2223, tmp2224);
          else
            Console.Error.WriteLine(tmp2224);
          var tmp2225 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Exception, seqid), cancellationToken);
          await tmp2225.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2226 = new InternalStructs.inputNumber_args();
        await tmp2226.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2227 = new InternalStructs.inputNumber_result();
        try
        {
          try
          {
            tmp2227.Success = await _iAsync.inputNumber(tmp2226.C, tmp2226.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2228)
          {
            tmp2227.E = tmp2228;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2227.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2229)
        {
          var tmp2230 = $"Error occurred in {GetType().FullName}: {tmp2229.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2229, tmp2230);
          else
            Console.Error.WriteLine(tmp2230);
          var tmp2231 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2231.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2232 = new InternalStructs.inputGroupNumber_args();
        await tmp2232.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2233 = new InternalStructs.inputGroupNumber_result();
        try
        {
          try
          {
            tmp2233.Success = await _iAsync.inputGroupNumber(tmp2232.C, tmp2232.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2234)
          {
            tmp2233.E = tmp2234;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2233.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2235)
        {
          var tmp2236 = $"Error occurred in {GetType().FullName}: {tmp2235.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2235, tmp2236);
          else
            Console.Error.WriteLine(tmp2236);
          var tmp2237 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2237.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2238 = new InternalStructs.outputNumber_args();
        await tmp2238.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2239 = new InternalStructs.outputNumber_result();
        try
        {
          try
          {
            tmp2239.Success = await _iAsync.outputNumber(tmp2238.C, tmp2238.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2240)
          {
            tmp2239.E = tmp2240;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2239.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2241)
        {
          var tmp2242 = $"Error occurred in {GetType().FullName}: {tmp2241.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2241, tmp2242);
          else
            Console.Error.WriteLine(tmp2242);
          var tmp2243 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2243.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2244 = new InternalStructs.outputGroupNumber_args();
        await tmp2244.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2245 = new InternalStructs.outputGroupNumber_result();
        try
        {
          try
          {
            tmp2245.Success = await _iAsync.outputGroupNumber(tmp2244.C, tmp2244.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2246)
          {
            tmp2245.E = tmp2246;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2245.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2247)
        {
          var tmp2248 = $"Error occurred in {GetType().FullName}: {tmp2247.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2247, tmp2248);
          else
            Console.Error.WriteLine(tmp2248);
          var tmp2249 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2249.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2250 = new InternalStructs.inputName_args();
        await tmp2250.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2251 = new InternalStructs.inputName_result();
        try
        {
          try
          {
            tmp2251.Success = await _iAsync.inputName(tmp2250.C, tmp2250.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2252)
          {
            tmp2251.E = tmp2252;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2251.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2253)
        {
          var tmp2254 = $"Error occurred in {GetType().FullName}: {tmp2253.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2253, tmp2254);
          else
            Console.Error.WriteLine(tmp2254);
          var tmp2255 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2255.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2256 = new InternalStructs.outputName_args();
        await tmp2256.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2257 = new InternalStructs.outputName_result();
        try
        {
          try
          {
            tmp2257.Success = await _iAsync.outputName(tmp2256.C, tmp2256.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2258)
          {
            tmp2257.E = tmp2258;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2257.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2259)
        {
          var tmp2260 = $"Error occurred in {GetType().FullName}: {tmp2259.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2259, tmp2260);
          else
            Console.Error.WriteLine(tmp2260);
          var tmp2261 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2261.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setInputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2262 = new InternalStructs.setInputName_args();
        await tmp2262.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setInputName(tmp2262.C, tmp2262.Num, tmp2262.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2264)
        {
          var tmp2265 = $"Error occurred in {GetType().FullName}: {tmp2264.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2264, tmp2265);
          else
            Console.Error.WriteLine(tmp2265);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2266 = new InternalStructs.setOutputName_args();
        await tmp2266.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputName(tmp2266.C, tmp2266.Num, tmp2266.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2268)
        {
          var tmp2269 = $"Error occurred in {GetType().FullName}: {tmp2268.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2268, tmp2269);
          else
            Console.Error.WriteLine(tmp2269);
        }
      }

      public async global::System.Threading.Tasks.Task monitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2270 = new InternalStructs.monitorInput_args();
        await tmp2270.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2271 = new InternalStructs.monitorInput_result();
        try
        {
          try
          {
            await _iAsync.monitorInput(tmp2270.C, tmp2270.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2272)
          {
            tmp2271.E = tmp2272;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2271.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2273)
        {
          var tmp2274 = $"Error occurred in {GetType().FullName}: {tmp2273.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2273, tmp2274);
          else
            Console.Error.WriteLine(tmp2274);
          var tmp2275 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2275.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2276 = new InternalStructs.monitorInputGroups_args();
        await tmp2276.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2277 = new InternalStructs.monitorInputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorInputGroups(tmp2276.C, tmp2276.GroupNum, tmp2276.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2278)
          {
            tmp2277.E = tmp2278;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2277.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2279)
        {
          var tmp2280 = $"Error occurred in {GetType().FullName}: {tmp2279.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2279, tmp2280);
          else
            Console.Error.WriteLine(tmp2280);
          var tmp2281 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2281.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2282 = new InternalStructs.monitorOutput_args();
        await tmp2282.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2283 = new InternalStructs.monitorOutput_result();
        try
        {
          try
          {
            await _iAsync.monitorOutput(tmp2282.C, tmp2282.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2284)
          {
            tmp2283.E = tmp2284;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2283.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2285)
        {
          var tmp2286 = $"Error occurred in {GetType().FullName}: {tmp2285.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2285, tmp2286);
          else
            Console.Error.WriteLine(tmp2286);
          var tmp2287 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2287.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2288 = new InternalStructs.monitorOutputGroups_args();
        await tmp2288.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2289 = new InternalStructs.monitorOutputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorOutputGroups(tmp2288.C, tmp2288.GroupNum, tmp2288.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2290)
          {
            tmp2289.E = tmp2290;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2289.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2291)
        {
          var tmp2292 = $"Error occurred in {GetType().FullName}: {tmp2291.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2291, tmp2292);
          else
            Console.Error.WriteLine(tmp2292);
          var tmp2293 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2293.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2294 = new InternalStructs.unmonitorInput_args();
        await tmp2294.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2295 = new InternalStructs.unmonitorInput_result();
        try
        {
          await _iAsync.unmonitorInput(tmp2294.C, tmp2294.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2295.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2296)
        {
          var tmp2297 = $"Error occurred in {GetType().FullName}: {tmp2296.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2296, tmp2297);
          else
            Console.Error.WriteLine(tmp2297);
          var tmp2298 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2298.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2299 = new InternalStructs.unmonitorInputGroups_args();
        await tmp2299.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2300 = new InternalStructs.unmonitorInputGroups_result();
        try
        {
          await _iAsync.unmonitorInputGroups(tmp2299.C, tmp2299.GroupNum, tmp2299.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2300.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2301)
        {
          var tmp2302 = $"Error occurred in {GetType().FullName}: {tmp2301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2301, tmp2302);
          else
            Console.Error.WriteLine(tmp2302);
          var tmp2303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2304 = new InternalStructs.unmonitorOutput_args();
        await tmp2304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2305 = new InternalStructs.unmonitorOutput_result();
        try
        {
          await _iAsync.unmonitorOutput(tmp2304.C, tmp2304.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2305.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2306)
        {
          var tmp2307 = $"Error occurred in {GetType().FullName}: {tmp2306.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2306, tmp2307);
          else
            Console.Error.WriteLine(tmp2307);
          var tmp2308 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2308.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2309 = new InternalStructs.unmonitorOutputGroups_args();
        await tmp2309.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2310 = new InternalStructs.unmonitorOutputGroups_result();
        try
        {
          await _iAsync.unmonitorOutputGroups(tmp2309.C, tmp2309.GroupNum, tmp2309.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2310.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2311)
        {
          var tmp2312 = $"Error occurred in {GetType().FullName}: {tmp2311.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2311, tmp2312);
          else
            Console.Error.WriteLine(tmp2312);
          var tmp2313 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2313.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2314 = new InternalStructs.inputValue_args();
        await tmp2314.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2315 = new InternalStructs.inputValue_result();
        try
        {
          try
          {
            tmp2315.Success = await _iAsync.inputValue(tmp2314.C, tmp2314.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2316)
          {
            tmp2315.E = tmp2316;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2315.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2317)
        {
          var tmp2318 = $"Error occurred in {GetType().FullName}: {tmp2317.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2317, tmp2318);
          else
            Console.Error.WriteLine(tmp2318);
          var tmp2319 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2319.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2320 = new InternalStructs.inputGroupsValue_args();
        await tmp2320.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2321 = new InternalStructs.inputGroupsValue_result();
        try
        {
          try
          {
            tmp2321.Success = await _iAsync.inputGroupsValue(tmp2320.C, tmp2320.GroupNum, tmp2320.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2322)
          {
            tmp2321.E = tmp2322;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2321.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2323)
        {
          var tmp2324 = $"Error occurred in {GetType().FullName}: {tmp2323.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2323, tmp2324);
          else
            Console.Error.WriteLine(tmp2324);
          var tmp2325 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2325.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2326 = new InternalStructs.outputValue_args();
        await tmp2326.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2327 = new InternalStructs.outputValue_result();
        try
        {
          try
          {
            tmp2327.Success = await _iAsync.outputValue(tmp2326.C, tmp2326.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2328)
          {
            tmp2327.E = tmp2328;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2327.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2329)
        {
          var tmp2330 = $"Error occurred in {GetType().FullName}: {tmp2329.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2329, tmp2330);
          else
            Console.Error.WriteLine(tmp2330);
          var tmp2331 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2331.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2332 = new InternalStructs.outputGroupsValue_args();
        await tmp2332.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2333 = new InternalStructs.outputGroupsValue_result();
        try
        {
          try
          {
            tmp2333.Success = await _iAsync.outputGroupsValue(tmp2332.C, tmp2332.GroupNum, tmp2332.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2334)
          {
            tmp2333.E = tmp2334;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2333.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2335)
        {
          var tmp2336 = $"Error occurred in {GetType().FullName}: {tmp2335.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2335, tmp2336);
          else
            Console.Error.WriteLine(tmp2336);
          var tmp2337 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2337.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2338 = new InternalStructs.setOutput_args();
        await tmp2338.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutput(tmp2338.C, tmp2338.Num, tmp2338.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2340)
        {
          var tmp2341 = $"Error occurred in {GetType().FullName}: {tmp2340.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2340, tmp2341);
          else
            Console.Error.WriteLine(tmp2341);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2342 = new InternalStructs.setOutputGroups_args();
        await tmp2342.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputGroups(tmp2342.C, tmp2342.GroupNum, tmp2342.Count, tmp2342.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2344)
        {
          var tmp2345 = $"Error occurred in {GetType().FullName}: {tmp2344.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2344, tmp2345);
          else
            Console.Error.WriteLine(tmp2345);
        }
      }

      public async global::System.Threading.Tasks.Task inputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2346 = new InternalStructs.inputAddress_args();
        await tmp2346.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2347 = new InternalStructs.inputAddress_result();
        try
        {
          try
          {
            tmp2347.Success = await _iAsync.inputAddress(tmp2346.C, tmp2346.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2348)
          {
            tmp2347.E = tmp2348;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2347.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2349)
        {
          var tmp2350 = $"Error occurred in {GetType().FullName}: {tmp2349.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2349, tmp2350);
          else
            Console.Error.WriteLine(tmp2350);
          var tmp2351 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2351.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2352 = new InternalStructs.inputAddressByNumber_args();
        await tmp2352.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2353 = new InternalStructs.inputAddressByNumber_result();
        try
        {
          try
          {
            tmp2353.Success = await _iAsync.inputAddressByNumber(tmp2352.C, tmp2352.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2354)
          {
            tmp2353.E = tmp2354;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2353.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2355)
        {
          var tmp2356 = $"Error occurred in {GetType().FullName}: {tmp2355.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2355, tmp2356);
          else
            Console.Error.WriteLine(tmp2356);
          var tmp2357 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2357.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2358 = new InternalStructs.outputAddress_args();
        await tmp2358.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2359 = new InternalStructs.outputAddress_result();
        try
        {
          try
          {
            tmp2359.Success = await _iAsync.outputAddress(tmp2358.C, tmp2358.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2360)
          {
            tmp2359.E = tmp2360;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2359.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2361)
        {
          var tmp2362 = $"Error occurred in {GetType().FullName}: {tmp2361.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2361, tmp2362);
          else
            Console.Error.WriteLine(tmp2362);
          var tmp2363 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2363.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2364 = new InternalStructs.outputAddressByNumber_args();
        await tmp2364.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2365 = new InternalStructs.outputAddressByNumber_result();
        try
        {
          try
          {
            tmp2365.Success = await _iAsync.outputAddressByNumber(tmp2364.C, tmp2364.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2366)
          {
            tmp2365.E = tmp2366;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2365.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2367)
        {
          var tmp2368 = $"Error occurred in {GetType().FullName}: {tmp2367.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2367, tmp2368);
          else
            Console.Error.WriteLine(tmp2368);
          var tmp2369 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2369.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2370 = new InternalStructs.monitorIOAddress_args();
        await tmp2370.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2371 = new InternalStructs.monitorIOAddress_result();
        try
        {
          try
          {
            await _iAsync.monitorIOAddress(tmp2370.C, tmp2370.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2372)
          {
            tmp2371.E = tmp2372;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2371.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2373)
        {
          var tmp2374 = $"Error occurred in {GetType().FullName}: {tmp2373.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2373, tmp2374);
          else
            Console.Error.WriteLine(tmp2374);
          var tmp2375 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2375.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2376 = new InternalStructs.unmonitorIOAddress_args();
        await tmp2376.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2377 = new InternalStructs.unmonitorIOAddress_result();
        try
        {
          await _iAsync.unmonitorIOAddress(tmp2376.C, tmp2376.Address, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2377.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2378)
        {
          var tmp2379 = $"Error occurred in {GetType().FullName}: {tmp2378.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2378, tmp2379);
          else
            Console.Error.WriteLine(tmp2379);
          var tmp2380 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2380.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2381 = new InternalStructs.inputAddressValue_args();
        await tmp2381.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2382 = new InternalStructs.inputAddressValue_result();
        try
        {
          try
          {
            tmp2382.Success = await _iAsync.inputAddressValue(tmp2381.C, tmp2381.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2383)
          {
            tmp2382.E = tmp2383;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2382.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2384)
        {
          var tmp2385 = $"Error occurred in {GetType().FullName}: {tmp2384.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2384, tmp2385);
          else
            Console.Error.WriteLine(tmp2385);
          var tmp2386 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2386.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2387 = new InternalStructs.outputAddressValue_args();
        await tmp2387.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2388 = new InternalStructs.outputAddressValue_result();
        try
        {
          try
          {
            tmp2388.Success = await _iAsync.outputAddressValue(tmp2387.C, tmp2387.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2389)
          {
            tmp2388.E = tmp2389;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2388.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2390)
        {
          var tmp2391 = $"Error occurred in {GetType().FullName}: {tmp2390.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2390, tmp2391);
          else
            Console.Error.WriteLine(tmp2391);
          var tmp2392 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2392.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ioAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2393 = new InternalStructs.ioAddressValue_args();
        await tmp2393.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2394 = new InternalStructs.ioAddressValue_result();
        try
        {
          try
          {
            tmp2394.Success = await _iAsync.ioAddressValue(tmp2393.C, tmp2393.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2395)
          {
            tmp2394.E = tmp2395;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2394.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2396)
        {
          var tmp2397 = $"Error occurred in {GetType().FullName}: {tmp2396.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2396, tmp2397);
          else
            Console.Error.WriteLine(tmp2397);
          var tmp2398 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2398.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2399 = new InternalStructs.setOutputAddress_args();
        await tmp2399.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputAddress(tmp2399.C, tmp2399.Address, tmp2399.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2401)
        {
          var tmp2402 = $"Error occurred in {GetType().FullName}: {tmp2401.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2401, tmp2402);
          else
            Console.Error.WriteLine(tmp2402);
        }
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2403 = new InternalStructs.setNetworkInputAddress_args();
        await tmp2403.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setNetworkInputAddress(tmp2403.C, tmp2403.Address, tmp2403.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2405)
        {
          var tmp2406 = $"Error occurred in {GetType().FullName}: {tmp2405.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2405, tmp2406);
          else
            Console.Error.WriteLine(tmp2406);
        }
      }

      public async global::System.Threading.Tasks.Task mRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2407 = new InternalStructs.mRegisterValue_args();
        await tmp2407.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2408 = new InternalStructs.mRegisterValue_result();
        try
        {
          try
          {
            tmp2408.Success = await _iAsync.mRegisterValue(tmp2407.C, tmp2407.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2409)
          {
            tmp2408.E = tmp2409;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2408.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2410)
        {
          var tmp2411 = $"Error occurred in {GetType().FullName}: {tmp2410.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2410, tmp2411);
          else
            Console.Error.WriteLine(tmp2411);
          var tmp2412 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2412.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2413 = new InternalStructs.setMRegisterValue_args();
        await tmp2413.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setMRegisterValue(tmp2413.C, tmp2413.Index, tmp2413.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2415)
        {
          var tmp2416 = $"Error occurred in {GetType().FullName}: {tmp2415.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2415, tmp2416);
          else
            Console.Error.WriteLine(tmp2416);
        }
      }

      public async global::System.Threading.Tasks.Task fieldBusStatusInputGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2417 = new InternalStructs.fieldBusStatusInputGroup_args();
        await tmp2417.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2418 = new InternalStructs.fieldBusStatusInputGroup_result();
        try
        {
          try
          {
            tmp2418.Success = await _iAsync.fieldBusStatusInputGroup(tmp2417.C, tmp2417.BusType, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2419)
          {
            tmp2418.E = tmp2419;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2418.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2420)
        {
          var tmp2421 = $"Error occurred in {GetType().FullName}: {tmp2420.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2420, tmp2421);
          else
            Console.Error.WriteLine(tmp2421);
          var tmp2422 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2422.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controlGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2423 = new InternalStructs.controlGroups_args();
        await tmp2423.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2424 = new InternalStructs.controlGroups_result();
        try
        {
          tmp2424.Success = await _iAsync.controlGroups(tmp2423.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2424.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2425)
        {
          var tmp2426 = $"Error occurred in {GetType().FullName}: {tmp2425.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2425, tmp2426);
          else
            Console.Error.WriteLine(tmp2426);
          var tmp2427 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2427.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentControlGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2428 = new InternalStructs.currentControlGroup_args();
        await tmp2428.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2429 = new InternalStructs.currentControlGroup_result();
        try
        {
          tmp2429.Success = await _iAsync.currentControlGroup(tmp2428.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2429.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2430)
        {
          var tmp2431 = $"Error occurred in {GetType().FullName}: {tmp2430.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2430, tmp2431);
          else
            Console.Error.WriteLine(tmp2431);
          var tmp2432 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2432.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task robotCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2433 = new InternalStructs.robotCount_args();
        await tmp2433.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2434 = new InternalStructs.robotCount_result();
        try
        {
          tmp2434.Success = await _iAsync.robotCount(tmp2433.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2434.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2435)
        {
          var tmp2436 = $"Error occurred in {GetType().FullName}: {tmp2435.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2435, tmp2436);
          else
            Console.Error.WriteLine(tmp2436);
          var tmp2437 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Exception, seqid), cancellationToken);
          await tmp2437.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentRobot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2438 = new InternalStructs.currentRobot_args();
        await tmp2438.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2439 = new InternalStructs.currentRobot_result();
        try
        {
          tmp2439.Success = await _iAsync.currentRobot(tmp2438.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2439.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2440)
        {
          var tmp2441 = $"Error occurred in {GetType().FullName}: {tmp2440.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2440, tmp2441);
          else
            Console.Error.WriteLine(tmp2441);
          var tmp2442 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Exception, seqid), cancellationToken);
          await tmp2442.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2443 = new InternalStructs.variable_args();
        await tmp2443.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2444 = new InternalStructs.variable_result();
        try
        {
          try
          {
            tmp2444.Success = await _iAsync.variable(tmp2443.C, tmp2443.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2445)
          {
            tmp2444.E = tmp2445;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2444.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2446)
        {
          var tmp2447 = $"Error occurred in {GetType().FullName}: {tmp2446.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2446, tmp2447);
          else
            Console.Error.WriteLine(tmp2447);
          var tmp2448 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2448.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2449 = new InternalStructs.variableByAddr_args();
        await tmp2449.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2450 = new InternalStructs.variableByAddr_result();
        try
        {
          try
          {
            tmp2450.Success = await _iAsync.variableByAddr(tmp2449.C, tmp2449.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2451)
          {
            tmp2450.E = tmp2451;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2450.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2452)
        {
          var tmp2453 = $"Error occurred in {GetType().FullName}: {tmp2452.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2452, tmp2453);
          else
            Console.Error.WriteLine(tmp2453);
          var tmp2454 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2454.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2455 = new InternalStructs.setVariable_args();
        await tmp2455.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2456 = new InternalStructs.setVariable_result();
        try
        {
          try
          {
            await _iAsync.setVariable(tmp2455.C, tmp2455.Name, tmp2455.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2457)
          {
            tmp2456.E = tmp2457;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2456.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2458)
        {
          var tmp2459 = $"Error occurred in {GetType().FullName}: {tmp2458.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2458, tmp2459);
          else
            Console.Error.WriteLine(tmp2459);
          var tmp2460 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2460.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2461 = new InternalStructs.setVariableByAddr_args();
        await tmp2461.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2462 = new InternalStructs.setVariableByAddr_result();
        try
        {
          try
          {
            await _iAsync.setVariableByAddr(tmp2461.C, tmp2461.Addr, tmp2461.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2463)
          {
            tmp2462.E = tmp2463;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2462.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2464)
        {
          var tmp2465 = $"Error occurred in {GetType().FullName}: {tmp2464.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2464, tmp2465);
          else
            Console.Error.WriteLine(tmp2465);
          var tmp2466 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2466.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByNameAndSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2467 = new InternalStructs.variableAddrByNameAndSpace_args();
        await tmp2467.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2468 = new InternalStructs.variableAddrByNameAndSpace_result();
        try
        {
          try
          {
            tmp2468.Success = await _iAsync.variableAddrByNameAndSpace(tmp2467.C, tmp2467.Name, tmp2467.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2469)
          {
            tmp2468.E = tmp2469;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2468.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2470)
        {
          var tmp2471 = $"Error occurred in {GetType().FullName}: {tmp2470.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2470, tmp2471);
          else
            Console.Error.WriteLine(tmp2471);
          var tmp2472 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp2472.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2473 = new InternalStructs.variableAddrByName_args();
        await tmp2473.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2474 = new InternalStructs.variableAddrByName_result();
        try
        {
          try
          {
            tmp2474.Success = await _iAsync.variableAddrByName(tmp2473.C, tmp2473.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2475)
          {
            tmp2474.E = tmp2475;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2474.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2476)
        {
          var tmp2477 = $"Error occurred in {GetType().FullName}: {tmp2476.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2476, tmp2477);
          else
            Console.Error.WriteLine(tmp2477);
          var tmp2478 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2478.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2479 = new InternalStructs.setVariableName_args();
        await tmp2479.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2480 = new InternalStructs.setVariableName_result();
        try
        {
          try
          {
            await _iAsync.setVariableName(tmp2479.C, tmp2479.Addr, tmp2479.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2481)
          {
            tmp2480.E = tmp2481;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2480.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2482)
        {
          var tmp2483 = $"Error occurred in {GetType().FullName}: {tmp2482.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2482, tmp2483);
          else
            Console.Error.WriteLine(tmp2483);
          var tmp2484 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2484.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2485 = new InternalStructs.monitorVariable_args();
        await tmp2485.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2486 = new InternalStructs.monitorVariable_result();
        try
        {
          try
          {
            await _iAsync.monitorVariable(tmp2485.C, tmp2485.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2487)
          {
            tmp2486.E = tmp2487;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2486.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2488)
        {
          var tmp2489 = $"Error occurred in {GetType().FullName}: {tmp2488.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2488, tmp2489);
          else
            Console.Error.WriteLine(tmp2489);
          var tmp2490 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2490.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2491 = new InternalStructs.unmonitorVariable_args();
        await tmp2491.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2492 = new InternalStructs.unmonitorVariable_result();
        try
        {
          try
          {
            await _iAsync.unmonitorVariable(tmp2491.C, tmp2491.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2493)
          {
            tmp2492.E = tmp2493;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2492.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2494)
        {
          var tmp2495 = $"Error occurred in {GetType().FullName}: {tmp2494.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2494, tmp2495);
          else
            Console.Error.WriteLine(tmp2495);
          var tmp2496 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2496.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task zone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2497 = new InternalStructs.zone_args();
        await tmp2497.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2498 = new InternalStructs.zone_result();
        try
        {
          try
          {
            tmp2498.Success = await _iAsync.zone(tmp2497.C, tmp2497.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2499)
          {
            tmp2498.E = tmp2499;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2498.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2500)
        {
          var tmp2501 = $"Error occurred in {GetType().FullName}: {tmp2500.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2500, tmp2501);
          else
            Console.Error.WriteLine(tmp2501);
          var tmp2502 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2502.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2503 = new InternalStructs.newZone_args();
        await tmp2503.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2504 = new InternalStructs.newZone_result();
        try
        {
          try
          {
            tmp2504.Success = await _iAsync.newZone(tmp2503.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2505)
          {
            tmp2504.E = tmp2505;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2504.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2506)
        {
          var tmp2507 = $"Error occurred in {GetType().FullName}: {tmp2506.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2506, tmp2507);
          else
            Console.Error.WriteLine(tmp2507);
          var tmp2508 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2508.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task modifyZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2509 = new InternalStructs.modifyZone_args();
        await tmp2509.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2510 = new InternalStructs.modifyZone_result();
        try
        {
          try
          {
            await _iAsync.modifyZone(tmp2509.C, tmp2509.Index, tmp2509.Z, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2511)
          {
            tmp2510.E = tmp2511;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2510.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2512)
        {
          var tmp2513 = $"Error occurred in {GetType().FullName}: {tmp2512.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2512, tmp2513);
          else
            Console.Error.WriteLine(tmp2513);
          var tmp2514 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2514.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2515 = new InternalStructs.deleteZone_args();
        await tmp2515.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2516 = new InternalStructs.deleteZone_result();
        try
        {
          try
          {
            await _iAsync.deleteZone(tmp2515.C, tmp2515.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2517)
          {
            tmp2516.E = tmp2517;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2516.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2518)
        {
          var tmp2519 = $"Error occurred in {GetType().FullName}: {tmp2518.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2518, tmp2519);
          else
            Console.Error.WriteLine(tmp2519);
          var tmp2520 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2520.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2521 = new InternalStructs.userFrames_args();
        await tmp2521.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2522 = new InternalStructs.userFrames_result();
        try
        {
          try
          {
            tmp2522.Success = await _iAsync.userFrames(tmp2521.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2523)
          {
            tmp2522.E = tmp2523;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2522.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2524)
        {
          var tmp2525 = $"Error occurred in {GetType().FullName}: {tmp2524.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2524, tmp2525);
          else
            Console.Error.WriteLine(tmp2525);
          var tmp2526 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Exception, seqid), cancellationToken);
          await tmp2526.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2527 = new InternalStructs.userFrame_args();
        await tmp2527.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2528 = new InternalStructs.userFrame_result();
        try
        {
          try
          {
            tmp2528.Success = await _iAsync.userFrame(tmp2527.C, tmp2527.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2529)
          {
            tmp2528.E = tmp2529;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2528.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2530)
        {
          var tmp2531 = $"Error occurred in {GetType().FullName}: {tmp2530.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2530, tmp2531);
          else
            Console.Error.WriteLine(tmp2531);
          var tmp2532 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2532.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2533 = new InternalStructs.newUserFrame_args();
        await tmp2533.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2534 = new InternalStructs.newUserFrame_result();
        try
        {
          try
          {
            tmp2534.Success = await _iAsync.newUserFrame(tmp2533.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2535)
          {
            tmp2534.E = tmp2535;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2534.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2536)
        {
          var tmp2537 = $"Error occurred in {GetType().FullName}: {tmp2536.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2536, tmp2537);
          else
            Console.Error.WriteLine(tmp2537);
          var tmp2538 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2538.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2539 = new InternalStructs.setUserFrame_args();
        await tmp2539.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2540 = new InternalStructs.setUserFrame_result();
        try
        {
          try
          {
            await _iAsync.setUserFrame(tmp2539.C, tmp2539.Index, tmp2539.F, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2541)
          {
            tmp2540.E = tmp2541;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2540.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2542)
        {
          var tmp2543 = $"Error occurred in {GetType().FullName}: {tmp2542.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2542, tmp2543);
          else
            Console.Error.WriteLine(tmp2543);
          var tmp2544 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2544.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2545 = new InternalStructs.deleteUserFrame_args();
        await tmp2545.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2546 = new InternalStructs.deleteUserFrame_result();
        try
        {
          try
          {
            await _iAsync.deleteUserFrame(tmp2545.C, tmp2545.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2547)
          {
            tmp2546.E = tmp2547;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2546.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2548)
        {
          var tmp2549 = $"Error occurred in {GetType().FullName}: {tmp2548.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2548, tmp2549);
          else
            Console.Error.WriteLine(tmp2549);
          var tmp2550 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2550.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task networkInterfaceAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2551 = new InternalStructs.networkInterfaceAddress_args();
        await tmp2551.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2552 = new InternalStructs.networkInterfaceAddress_result();
        try
        {
          try
          {
            tmp2552.Success = await _iAsync.networkInterfaceAddress(tmp2551.C, tmp2551.ControllerInterface, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2553)
          {
            tmp2552.E = tmp2553;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2552.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2554)
        {
          var tmp2555 = $"Error occurred in {GetType().FullName}: {tmp2554.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2554, tmp2555);
          else
            Console.Error.WriteLine(tmp2555);
          var tmp2556 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2556.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2557 = new InternalStructs.requestNetworkAccess_args();
        await tmp2557.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2558 = new InternalStructs.requestNetworkAccess_result();
        try
        {
          try
          {
            tmp2558.Success = await _iAsync.requestNetworkAccess(tmp2557.C, tmp2557.ControllerInterface, tmp2557.Port, tmp2557.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2559)
          {
            tmp2558.E = tmp2559;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2558.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2560)
        {
          var tmp2561 = $"Error occurred in {GetType().FullName}: {tmp2560.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2560, tmp2561);
          else
            Console.Error.WriteLine(tmp2561);
          var tmp2562 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2562.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2563 = new InternalStructs.removeNetworkAccess_args();
        await tmp2563.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2564 = new InternalStructs.removeNetworkAccess_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkAccess(tmp2563.C, tmp2563.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2565)
          {
            tmp2564.E = tmp2565;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2564.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2566)
        {
          var tmp2567 = $"Error occurred in {GetType().FullName}: {tmp2566.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2566, tmp2567);
          else
            Console.Error.WriteLine(tmp2567);
          var tmp2568 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2568.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2569 = new InternalStructs.requestNetworkService_args();
        await tmp2569.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2570 = new InternalStructs.requestNetworkService_result();
        try
        {
          try
          {
            tmp2570.Success = await _iAsync.requestNetworkService(tmp2569.C, tmp2569.ControllerInterface, tmp2569.Port, tmp2569.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2571)
          {
            tmp2570.E = tmp2571;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2570.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2572)
        {
          var tmp2573 = $"Error occurred in {GetType().FullName}: {tmp2572.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2572, tmp2573);
          else
            Console.Error.WriteLine(tmp2573);
          var tmp2574 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2574.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2575 = new InternalStructs.removeNetworkService_args();
        await tmp2575.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2576 = new InternalStructs.removeNetworkService_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkService(tmp2575.C, tmp2575.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2577)
          {
            tmp2576.E = tmp2577;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2576.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2578)
        {
          var tmp2579 = $"Error occurred in {GetType().FullName}: {tmp2578.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2578, tmp2579);
          else
            Console.Error.WriteLine(tmp2579);
          var tmp2580 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2580.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getGaugeSensorSpec_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2581 = new InternalStructs.getGaugeSensorSpec_args();
        await tmp2581.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2582 = new InternalStructs.getGaugeSensorSpec_result();
        try
        {
          tmp2582.Success = await _iAsync.getGaugeSensorSpec(tmp2581.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getGaugeSensorSpec", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2582.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2583)
        {
          var tmp2584 = $"Error occurred in {GetType().FullName}: {tmp2583.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2583, tmp2584);
          else
            Console.Error.WriteLine(tmp2584);
          var tmp2585 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getGaugeSensorSpec", TMessageType.Exception, seqid), cancellationToken);
          await tmp2585.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task gaugeSensorCalibration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2586 = new InternalStructs.gaugeSensorCalibration_args();
        await tmp2586.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2587 = new InternalStructs.gaugeSensorCalibration_result();
        try
        {
          await _iAsync.gaugeSensorCalibration(tmp2586.C, tmp2586.Channel, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("gaugeSensorCalibration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2587.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2588)
        {
          var tmp2589 = $"Error occurred in {GetType().FullName}: {tmp2588.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2588, tmp2589);
          else
            Console.Error.WriteLine(tmp2589);
          var tmp2590 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("gaugeSensorCalibration", TMessageType.Exception, seqid), cancellationToken);
          await tmp2590.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class requestPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public requestPermissions_args()
        {
        }

        public requestPermissions_args DeepCopy()
        {
          var tmp2591 = new requestPermissions_args();
          if(__isset.c)
          {
            tmp2591.C = this.C;
          }
          tmp2591.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2591.Permissions = this.Permissions.DeepCopy();
          }
          tmp2591.__isset.permissions = this.__isset.permissions;
          return tmp2591;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2592 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2592.Count);
                      for(int _i2593 = 0; _i2593 < _set2592.Count; ++_i2593)
                      {
                        string _elem2594;
                        _elem2594 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2594);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2595 = new TStruct("requestPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2595, cancellationToken);
            var tmp2596 = new TField();
            if(__isset.c)
            {
              tmp2596.Name = "c";
              tmp2596.Type = TType.I64;
              tmp2596.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2596, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2596.Name = "permissions";
              tmp2596.Type = TType.Set;
              tmp2596.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2596, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2597 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2597, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2598 = new StringBuilder("requestPermissions_args(");
          int tmp2599 = 0;
          if(__isset.c)
          {
            if(0 < tmp2599++) { tmp2598.Append(", "); }
            tmp2598.Append("C: ");
            C.ToString(tmp2598);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2599++) { tmp2598.Append(", "); }
            tmp2598.Append("Permissions: ");
            Permissions.ToString(tmp2598);
          }
          tmp2598.Append(')');
          return tmp2598.ToString();
        }
      }


      public partial class requestPermissions_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestPermissions_result()
        {
        }

        public requestPermissions_result DeepCopy()
        {
          var tmp2600 = new requestPermissions_result();
          if(__isset.success)
          {
            tmp2600.Success = this.Success;
          }
          tmp2600.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2600.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2600.__isset.e = this.__isset.e;
          return tmp2600;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2601 = new TStruct("requestPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2601, cancellationToken);
            var tmp2602 = new TField();

            if(this.__isset.success)
            {
              tmp2602.Name = "Success";
              tmp2602.Type = TType.Bool;
              tmp2602.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2602, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2602.Name = "E";
                tmp2602.Type = TType.Struct;
                tmp2602.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2602, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2603 = new StringBuilder("requestPermissions_result(");
          int tmp2604 = 0;
          if(__isset.success)
          {
            if(0 < tmp2604++) { tmp2603.Append(", "); }
            tmp2603.Append("Success: ");
            Success.ToString(tmp2603);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2604++) { tmp2603.Append(", "); }
            tmp2603.Append("E: ");
            E.ToString(tmp2603);
          }
          tmp2603.Append(')');
          return tmp2603.ToString();
        }
      }


      public partial class havePermission_args : TBase
      {
        private long _c;
        private string _permission;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Permission
        {
          get
          {
            return _permission;
          }
          set
          {
            __isset.permission = true;
            this._permission = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permission;
        }

        public havePermission_args()
        {
        }

        public havePermission_args DeepCopy()
        {
          var tmp2605 = new havePermission_args();
          if(__isset.c)
          {
            tmp2605.C = this.C;
          }
          tmp2605.__isset.c = this.__isset.c;
          if((Permission != null) && __isset.permission)
          {
            tmp2605.Permission = this.Permission;
          }
          tmp2605.__isset.permission = this.__isset.permission;
          return tmp2605;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Permission = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2606 = new TStruct("havePermission_args");
            await oprot.WriteStructBeginAsync(tmp2606, cancellationToken);
            var tmp2607 = new TField();
            if(__isset.c)
            {
              tmp2607.Name = "c";
              tmp2607.Type = TType.I64;
              tmp2607.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2607, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permission != null) && __isset.permission)
            {
              tmp2607.Name = "permission";
              tmp2607.Type = TType.String;
              tmp2607.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2607, cancellationToken);
              await oprot.WriteStringAsync(Permission, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permission == other.__isset.permission) && ((!__isset.permission) || (global::System.Object.Equals(Permission, other.Permission))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permission != null) && __isset.permission)
            {
              hashcode = (hashcode * 397) + Permission.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2608 = new StringBuilder("havePermission_args(");
          int tmp2609 = 0;
          if(__isset.c)
          {
            if(0 < tmp2609++) { tmp2608.Append(", "); }
            tmp2608.Append("C: ");
            C.ToString(tmp2608);
          }
          if((Permission != null) && __isset.permission)
          {
            if(0 < tmp2609++) { tmp2608.Append(", "); }
            tmp2608.Append("Permission: ");
            Permission.ToString(tmp2608);
          }
          tmp2608.Append(')');
          return tmp2608.ToString();
        }
      }


      public partial class havePermission_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public havePermission_result()
        {
        }

        public havePermission_result DeepCopy()
        {
          var tmp2610 = new havePermission_result();
          if(__isset.success)
          {
            tmp2610.Success = this.Success;
          }
          tmp2610.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2610.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2610.__isset.e = this.__isset.e;
          return tmp2610;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2611 = new TStruct("havePermission_result");
            await oprot.WriteStructBeginAsync(tmp2611, cancellationToken);
            var tmp2612 = new TField();

            if(this.__isset.success)
            {
              tmp2612.Name = "Success";
              tmp2612.Type = TType.Bool;
              tmp2612.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2612, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2612.Name = "E";
                tmp2612.Type = TType.Struct;
                tmp2612.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2612, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2613 = new StringBuilder("havePermission_result(");
          int tmp2614 = 0;
          if(__isset.success)
          {
            if(0 < tmp2614++) { tmp2613.Append(", "); }
            tmp2613.Append("Success: ");
            Success.ToString(tmp2613);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2614++) { tmp2613.Append(", "); }
            tmp2613.Append("E: ");
            E.ToString(tmp2613);
          }
          tmp2613.Append(')');
          return tmp2613.ToString();
        }
      }


      public partial class relinquishPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public relinquishPermissions_args()
        {
        }

        public relinquishPermissions_args DeepCopy()
        {
          var tmp2615 = new relinquishPermissions_args();
          if(__isset.c)
          {
            tmp2615.C = this.C;
          }
          tmp2615.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2615.Permissions = this.Permissions.DeepCopy();
          }
          tmp2615.__isset.permissions = this.__isset.permissions;
          return tmp2615;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2616 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2616.Count);
                      for(int _i2617 = 0; _i2617 < _set2616.Count; ++_i2617)
                      {
                        string _elem2618;
                        _elem2618 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2618);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2619 = new TStruct("relinquishPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2619, cancellationToken);
            var tmp2620 = new TField();
            if(__isset.c)
            {
              tmp2620.Name = "c";
              tmp2620.Type = TType.I64;
              tmp2620.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2620, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2620.Name = "permissions";
              tmp2620.Type = TType.Set;
              tmp2620.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2620, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2621 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2621, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2622 = new StringBuilder("relinquishPermissions_args(");
          int tmp2623 = 0;
          if(__isset.c)
          {
            if(0 < tmp2623++) { tmp2622.Append(", "); }
            tmp2622.Append("C: ");
            C.ToString(tmp2622);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2623++) { tmp2622.Append(", "); }
            tmp2622.Append("Permissions: ");
            Permissions.ToString(tmp2622);
          }
          tmp2622.Append(')');
          return tmp2622.ToString();
        }
      }


      public partial class relinquishPermissions_result : TBase
      {

        public relinquishPermissions_result()
        {
        }

        public relinquishPermissions_result DeepCopy()
        {
          var tmp2624 = new relinquishPermissions_result();
          return tmp2624;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2625 = new TStruct("relinquishPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2625, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2626 = new StringBuilder("relinquishPermissions_result(");
          tmp2626.Append(')');
          return tmp2626.ToString();
        }
      }


      public partial class connect_args : TBase
      {
        private long _c;
        private string _hostName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string HostName
        {
          get
          {
            return _hostName;
          }
          set
          {
            __isset.hostName = true;
            this._hostName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool hostName;
        }

        public connect_args()
        {
        }

        public connect_args DeepCopy()
        {
          var tmp2628 = new connect_args();
          if(__isset.c)
          {
            tmp2628.C = this.C;
          }
          tmp2628.__isset.c = this.__isset.c;
          if((HostName != null) && __isset.hostName)
          {
            tmp2628.HostName = this.HostName;
          }
          tmp2628.__isset.hostName = this.__isset.hostName;
          return tmp2628;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HostName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2629 = new TStruct("connect_args");
            await oprot.WriteStructBeginAsync(tmp2629, cancellationToken);
            var tmp2630 = new TField();
            if(__isset.c)
            {
              tmp2630.Name = "c";
              tmp2630.Type = TType.I64;
              tmp2630.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2630, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HostName != null) && __isset.hostName)
            {
              tmp2630.Name = "hostName";
              tmp2630.Type = TType.String;
              tmp2630.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2630, cancellationToken);
              await oprot.WriteStringAsync(HostName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.hostName == other.__isset.hostName) && ((!__isset.hostName) || (global::System.Object.Equals(HostName, other.HostName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((HostName != null) && __isset.hostName)
            {
              hashcode = (hashcode * 397) + HostName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2631 = new StringBuilder("connect_args(");
          int tmp2632 = 0;
          if(__isset.c)
          {
            if(0 < tmp2632++) { tmp2631.Append(", "); }
            tmp2631.Append("C: ");
            C.ToString(tmp2631);
          }
          if((HostName != null) && __isset.hostName)
          {
            if(0 < tmp2632++) { tmp2631.Append(", "); }
            tmp2631.Append("HostName: ");
            HostName.ToString(tmp2631);
          }
          tmp2631.Append(')');
          return tmp2631.ToString();
        }
      }


      public partial class connect_result : TBase
      {

        public connect_result()
        {
        }

        public connect_result DeepCopy()
        {
          var tmp2633 = new connect_result();
          return tmp2633;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2634 = new TStruct("connect_result");
            await oprot.WriteStructBeginAsync(tmp2634, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2635 = new StringBuilder("connect_result(");
          tmp2635.Append(')');
          return tmp2635.ToString();
        }
      }


      public partial class disconnect_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public disconnect_args()
        {
        }

        public disconnect_args DeepCopy()
        {
          var tmp2637 = new disconnect_args();
          if(__isset.c)
          {
            tmp2637.C = this.C;
          }
          tmp2637.__isset.c = this.__isset.c;
          return tmp2637;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2638 = new TStruct("disconnect_args");
            await oprot.WriteStructBeginAsync(tmp2638, cancellationToken);
            var tmp2639 = new TField();
            if(__isset.c)
            {
              tmp2639.Name = "c";
              tmp2639.Type = TType.I64;
              tmp2639.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2639, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2640 = new StringBuilder("disconnect_args(");
          int tmp2641 = 0;
          if(__isset.c)
          {
            if(0 < tmp2641++) { tmp2640.Append(", "); }
            tmp2640.Append("C: ");
            C.ToString(tmp2640);
          }
          tmp2640.Append(')');
          return tmp2640.ToString();
        }
      }


      public partial class disconnect_result : TBase
      {

        public disconnect_result()
        {
        }

        public disconnect_result DeepCopy()
        {
          var tmp2642 = new disconnect_result();
          return tmp2642;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2643 = new TStruct("disconnect_result");
            await oprot.WriteStructBeginAsync(tmp2643, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2644 = new StringBuilder("disconnect_result(");
          tmp2644.Append(')');
          return tmp2644.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp2646 = new subscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2646.C = this.C;
          }
          tmp2646.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2646.Types = this.Types.DeepCopy();
          }
          tmp2646.__isset.types = this.__isset.types;
          return tmp2646;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2647 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2647.Count);
                      for(int _i2648 = 0; _i2648 < _set2647.Count; ++_i2648)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2649;
                        _elem2649 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2649);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2650 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2650, cancellationToken);
            var tmp2651 = new TField();
            if(__isset.c)
            {
              tmp2651.Name = "c";
              tmp2651.Type = TType.I64;
              tmp2651.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2651, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2651.Name = "types";
              tmp2651.Type = TType.Set;
              tmp2651.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2651, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2652 in Types)
              {
                await oprot.WriteI32Async((int)_iter2652, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2653 = new StringBuilder("subscribeEventTypes_args(");
          int tmp2654 = 0;
          if(__isset.c)
          {
            if(0 < tmp2654++) { tmp2653.Append(", "); }
            tmp2653.Append("C: ");
            C.ToString(tmp2653);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2654++) { tmp2653.Append(", "); }
            tmp2653.Append("Types: ");
            Types.ToString(tmp2653);
          }
          tmp2653.Append(')');
          return tmp2653.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp2655 = new subscribeEventTypes_result();
          return tmp2655;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2656 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2656, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2657 = new StringBuilder("subscribeEventTypes_result(");
          tmp2657.Append(')');
          return tmp2657.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp2659 = new unsubscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2659.C = this.C;
          }
          tmp2659.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2659.Types = this.Types.DeepCopy();
          }
          tmp2659.__isset.types = this.__isset.types;
          return tmp2659;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2660 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2660.Count);
                      for(int _i2661 = 0; _i2661 < _set2660.Count; ++_i2661)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2662;
                        _elem2662 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2662);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2663 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2663, cancellationToken);
            var tmp2664 = new TField();
            if(__isset.c)
            {
              tmp2664.Name = "c";
              tmp2664.Type = TType.I64;
              tmp2664.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2664, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2664.Name = "types";
              tmp2664.Type = TType.Set;
              tmp2664.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2664, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2665 in Types)
              {
                await oprot.WriteI32Async((int)_iter2665, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2666 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp2667 = 0;
          if(__isset.c)
          {
            if(0 < tmp2667++) { tmp2666.Append(", "); }
            tmp2666.Append("C: ");
            C.ToString(tmp2666);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2667++) { tmp2666.Append(", "); }
            tmp2666.Append("Types: ");
            Types.ToString(tmp2666);
          }
          tmp2666.Append(')');
          return tmp2666.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp2668 = new unsubscribeEventTypes_result();
          return tmp2668;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2669 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2669, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2670 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp2670.Append(')');
          return tmp2670.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp2672 = new events_args();
          if(__isset.c)
          {
            tmp2672.C = this.C;
          }
          tmp2672.__isset.c = this.__isset.c;
          return tmp2672;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2673 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp2673, cancellationToken);
            var tmp2674 = new TField();
            if(__isset.c)
            {
              tmp2674.Name = "c";
              tmp2674.Type = TType.I64;
              tmp2674.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2674, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2675 = new StringBuilder("events_args(");
          int tmp2676 = 0;
          if(__isset.c)
          {
            if(0 < tmp2676++) { tmp2675.Append(", "); }
            tmp2675.Append("C: ");
            C.ToString(tmp2675);
          }
          tmp2675.Append(')');
          return tmp2675.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControllerEvent> _success;

        public List<global::Yaskawa.Ext.API.ControllerEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp2677 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp2677.Success = this.Success.DeepCopy();
          }
          tmp2677.__isset.success = this.__isset.success;
          return tmp2677;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2678 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControllerEvent>(_list2678.Count);
                      for(int _i2679 = 0; _i2679 < _list2678.Count; ++_i2679)
                      {
                        global::Yaskawa.Ext.API.ControllerEvent _elem2680;
                        _elem2680 = new global::Yaskawa.Ext.API.ControllerEvent();
                        await _elem2680.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem2680);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2681 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp2681, cancellationToken);
            var tmp2682 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2682.Name = "Success";
                tmp2682.Type = TType.List;
                tmp2682.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2682, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControllerEvent _iter2683 in Success)
                {
                  await _iter2683.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2684 = new StringBuilder("events_result(");
          int tmp2685 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2685++) { tmp2684.Append(", "); }
            tmp2684.Append("Success: ");
            Success.ToString(tmp2684);
          }
          tmp2684.Append(')');
          return tmp2684.ToString();
        }
      }


      public partial class connected_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connected_args()
        {
        }

        public connected_args DeepCopy()
        {
          var tmp2686 = new connected_args();
          if(__isset.c)
          {
            tmp2686.C = this.C;
          }
          tmp2686.__isset.c = this.__isset.c;
          return tmp2686;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2687 = new TStruct("connected_args");
            await oprot.WriteStructBeginAsync(tmp2687, cancellationToken);
            var tmp2688 = new TField();
            if(__isset.c)
            {
              tmp2688.Name = "c";
              tmp2688.Type = TType.I64;
              tmp2688.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2688, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2689 = new StringBuilder("connected_args(");
          int tmp2690 = 0;
          if(__isset.c)
          {
            if(0 < tmp2690++) { tmp2689.Append(", "); }
            tmp2689.Append("C: ");
            C.ToString(tmp2689);
          }
          tmp2689.Append(')');
          return tmp2689.ToString();
        }
      }


      public partial class connected_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connected_result()
        {
        }

        public connected_result DeepCopy()
        {
          var tmp2691 = new connected_result();
          if(__isset.success)
          {
            tmp2691.Success = this.Success;
          }
          tmp2691.__isset.success = this.__isset.success;
          return tmp2691;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2692 = new TStruct("connected_result");
            await oprot.WriteStructBeginAsync(tmp2692, cancellationToken);
            var tmp2693 = new TField();

            if(this.__isset.success)
            {
              tmp2693.Name = "Success";
              tmp2693.Type = TType.Bool;
              tmp2693.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2693, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2694 = new StringBuilder("connected_result(");
          int tmp2695 = 0;
          if(__isset.success)
          {
            if(0 < tmp2695++) { tmp2694.Append(", "); }
            tmp2694.Append("Success: ");
            Success.ToString(tmp2694);
          }
          tmp2694.Append(')');
          return tmp2694.ToString();
        }
      }


      public partial class connectedHostName_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connectedHostName_args()
        {
        }

        public connectedHostName_args DeepCopy()
        {
          var tmp2696 = new connectedHostName_args();
          if(__isset.c)
          {
            tmp2696.C = this.C;
          }
          tmp2696.__isset.c = this.__isset.c;
          return tmp2696;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2697 = new TStruct("connectedHostName_args");
            await oprot.WriteStructBeginAsync(tmp2697, cancellationToken);
            var tmp2698 = new TField();
            if(__isset.c)
            {
              tmp2698.Name = "c";
              tmp2698.Type = TType.I64;
              tmp2698.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2698, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2699 = new StringBuilder("connectedHostName_args(");
          int tmp2700 = 0;
          if(__isset.c)
          {
            if(0 < tmp2700++) { tmp2699.Append(", "); }
            tmp2699.Append("C: ");
            C.ToString(tmp2699);
          }
          tmp2699.Append(')');
          return tmp2699.ToString();
        }
      }


      public partial class connectedHostName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connectedHostName_result()
        {
        }

        public connectedHostName_result DeepCopy()
        {
          var tmp2701 = new connectedHostName_result();
          if((Success != null) && __isset.success)
          {
            tmp2701.Success = this.Success;
          }
          tmp2701.__isset.success = this.__isset.success;
          return tmp2701;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2702 = new TStruct("connectedHostName_result");
            await oprot.WriteStructBeginAsync(tmp2702, cancellationToken);
            var tmp2703 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2703.Name = "Success";
                tmp2703.Type = TType.String;
                tmp2703.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2703, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2704 = new StringBuilder("connectedHostName_result(");
          int tmp2705 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2705++) { tmp2704.Append(", "); }
            tmp2704.Append("Success: ");
            Success.ToString(tmp2704);
          }
          tmp2704.Append(')');
          return tmp2704.ToString();
        }
      }


      public partial class softwareVersion_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public softwareVersion_args()
        {
        }

        public softwareVersion_args DeepCopy()
        {
          var tmp2706 = new softwareVersion_args();
          if(__isset.c)
          {
            tmp2706.C = this.C;
          }
          tmp2706.__isset.c = this.__isset.c;
          return tmp2706;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2707 = new TStruct("softwareVersion_args");
            await oprot.WriteStructBeginAsync(tmp2707, cancellationToken);
            var tmp2708 = new TField();
            if(__isset.c)
            {
              tmp2708.Name = "c";
              tmp2708.Type = TType.I64;
              tmp2708.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2708, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2709 = new StringBuilder("softwareVersion_args(");
          int tmp2710 = 0;
          if(__isset.c)
          {
            if(0 < tmp2710++) { tmp2709.Append(", "); }
            tmp2709.Append("C: ");
            C.ToString(tmp2709);
          }
          tmp2709.Append(')');
          return tmp2709.ToString();
        }
      }


      public partial class softwareVersion_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public softwareVersion_result()
        {
        }

        public softwareVersion_result DeepCopy()
        {
          var tmp2711 = new softwareVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp2711.Success = this.Success;
          }
          tmp2711.__isset.success = this.__isset.success;
          return tmp2711;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2712 = new TStruct("softwareVersion_result");
            await oprot.WriteStructBeginAsync(tmp2712, cancellationToken);
            var tmp2713 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2713.Name = "Success";
                tmp2713.Type = TType.String;
                tmp2713.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2713, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2714 = new StringBuilder("softwareVersion_result(");
          int tmp2715 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2715++) { tmp2714.Append(", "); }
            tmp2714.Append("Success: ");
            Success.ToString(tmp2714);
          }
          tmp2714.Append(')');
          return tmp2714.ToString();
        }
      }


      public partial class monitoring_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public monitoring_args()
        {
        }

        public monitoring_args DeepCopy()
        {
          var tmp2716 = new monitoring_args();
          if(__isset.c)
          {
            tmp2716.C = this.C;
          }
          tmp2716.__isset.c = this.__isset.c;
          return tmp2716;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2717 = new TStruct("monitoring_args");
            await oprot.WriteStructBeginAsync(tmp2717, cancellationToken);
            var tmp2718 = new TField();
            if(__isset.c)
            {
              tmp2718.Name = "c";
              tmp2718.Type = TType.I64;
              tmp2718.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2718, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2719 = new StringBuilder("monitoring_args(");
          int tmp2720 = 0;
          if(__isset.c)
          {
            if(0 < tmp2720++) { tmp2719.Append(", "); }
            tmp2719.Append("C: ");
            C.ToString(tmp2719);
          }
          tmp2719.Append(')');
          return tmp2719.ToString();
        }
      }


      public partial class monitoring_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public monitoring_result()
        {
        }

        public monitoring_result DeepCopy()
        {
          var tmp2721 = new monitoring_result();
          if(__isset.success)
          {
            tmp2721.Success = this.Success;
          }
          tmp2721.__isset.success = this.__isset.success;
          return tmp2721;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2722 = new TStruct("monitoring_result");
            await oprot.WriteStructBeginAsync(tmp2722, cancellationToken);
            var tmp2723 = new TField();

            if(this.__isset.success)
            {
              tmp2723.Name = "Success";
              tmp2723.Type = TType.Bool;
              tmp2723.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2723, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2724 = new StringBuilder("monitoring_result(");
          int tmp2725 = 0;
          if(__isset.success)
          {
            if(0 < tmp2725++) { tmp2724.Append(", "); }
            tmp2724.Append("Success: ");
            Success.ToString(tmp2724);
          }
          tmp2724.Append(')');
          return tmp2724.ToString();
        }
      }


      public partial class haveExclusiveControl_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public haveExclusiveControl_args()
        {
        }

        public haveExclusiveControl_args DeepCopy()
        {
          var tmp2726 = new haveExclusiveControl_args();
          if(__isset.c)
          {
            tmp2726.C = this.C;
          }
          tmp2726.__isset.c = this.__isset.c;
          return tmp2726;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2727 = new TStruct("haveExclusiveControl_args");
            await oprot.WriteStructBeginAsync(tmp2727, cancellationToken);
            var tmp2728 = new TField();
            if(__isset.c)
            {
              tmp2728.Name = "c";
              tmp2728.Type = TType.I64;
              tmp2728.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2728, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2729 = new StringBuilder("haveExclusiveControl_args(");
          int tmp2730 = 0;
          if(__isset.c)
          {
            if(0 < tmp2730++) { tmp2729.Append(", "); }
            tmp2729.Append("C: ");
            C.ToString(tmp2729);
          }
          tmp2729.Append(')');
          return tmp2729.ToString();
        }
      }


      public partial class haveExclusiveControl_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public haveExclusiveControl_result()
        {
        }

        public haveExclusiveControl_result DeepCopy()
        {
          var tmp2731 = new haveExclusiveControl_result();
          if(__isset.success)
          {
            tmp2731.Success = this.Success;
          }
          tmp2731.__isset.success = this.__isset.success;
          return tmp2731;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2732 = new TStruct("haveExclusiveControl_result");
            await oprot.WriteStructBeginAsync(tmp2732, cancellationToken);
            var tmp2733 = new TField();

            if(this.__isset.success)
            {
              tmp2733.Name = "Success";
              tmp2733.Type = TType.Bool;
              tmp2733.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2733, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2734 = new StringBuilder("haveExclusiveControl_result(");
          int tmp2735 = 0;
          if(__isset.success)
          {
            if(0 < tmp2735++) { tmp2734.Append(", "); }
            tmp2734.Append("Success: ");
            Success.ToString(tmp2734);
          }
          tmp2734.Append(')');
          return tmp2734.ToString();
        }
      }


      public partial class operationMode_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public operationMode_args()
        {
        }

        public operationMode_args DeepCopy()
        {
          var tmp2736 = new operationMode_args();
          if(__isset.c)
          {
            tmp2736.C = this.C;
          }
          tmp2736.__isset.c = this.__isset.c;
          return tmp2736;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2737 = new TStruct("operationMode_args");
            await oprot.WriteStructBeginAsync(tmp2737, cancellationToken);
            var tmp2738 = new TField();
            if(__isset.c)
            {
              tmp2738.Name = "c";
              tmp2738.Type = TType.I64;
              tmp2738.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2738, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2739 = new StringBuilder("operationMode_args(");
          int tmp2740 = 0;
          if(__isset.c)
          {
            if(0 < tmp2740++) { tmp2739.Append(", "); }
            tmp2739.Append("C: ");
            C.ToString(tmp2739);
          }
          tmp2739.Append(')');
          return tmp2739.ToString();
        }
      }


      public partial class operationMode_result : TBase
      {
        private global::Yaskawa.Ext.API.OperationMode _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OperationMode"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OperationMode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public operationMode_result()
        {
        }

        public operationMode_result DeepCopy()
        {
          var tmp2741 = new operationMode_result();
          if(__isset.success)
          {
            tmp2741.Success = this.Success;
          }
          tmp2741.__isset.success = this.__isset.success;
          return tmp2741;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.OperationMode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2742 = new TStruct("operationMode_result");
            await oprot.WriteStructBeginAsync(tmp2742, cancellationToken);
            var tmp2743 = new TField();

            if(this.__isset.success)
            {
              tmp2743.Name = "Success";
              tmp2743.Type = TType.I32;
              tmp2743.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2743, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2744 = new StringBuilder("operationMode_result(");
          int tmp2745 = 0;
          if(__isset.success)
          {
            if(0 < tmp2745++) { tmp2744.Append(", "); }
            tmp2744.Append("Success: ");
            Success.ToString(tmp2744);
          }
          tmp2744.Append(')');
          return tmp2744.ToString();
        }
      }


      public partial class servoState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public servoState_args()
        {
        }

        public servoState_args DeepCopy()
        {
          var tmp2746 = new servoState_args();
          if(__isset.c)
          {
            tmp2746.C = this.C;
          }
          tmp2746.__isset.c = this.__isset.c;
          return tmp2746;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2747 = new TStruct("servoState_args");
            await oprot.WriteStructBeginAsync(tmp2747, cancellationToken);
            var tmp2748 = new TField();
            if(__isset.c)
            {
              tmp2748.Name = "c";
              tmp2748.Type = TType.I64;
              tmp2748.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2748, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2749 = new StringBuilder("servoState_args(");
          int tmp2750 = 0;
          if(__isset.c)
          {
            if(0 < tmp2750++) { tmp2749.Append(", "); }
            tmp2749.Append("C: ");
            C.ToString(tmp2749);
          }
          tmp2749.Append(')');
          return tmp2749.ToString();
        }
      }


      public partial class servoState_result : TBase
      {
        private global::Yaskawa.Ext.API.ServoState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.ServoState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.ServoState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public servoState_result()
        {
        }

        public servoState_result DeepCopy()
        {
          var tmp2751 = new servoState_result();
          if(__isset.success)
          {
            tmp2751.Success = this.Success;
          }
          tmp2751.__isset.success = this.__isset.success;
          return tmp2751;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.ServoState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2752 = new TStruct("servoState_result");
            await oprot.WriteStructBeginAsync(tmp2752, cancellationToken);
            var tmp2753 = new TField();

            if(this.__isset.success)
            {
              tmp2753.Name = "Success";
              tmp2753.Type = TType.I32;
              tmp2753.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2753, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2754 = new StringBuilder("servoState_result(");
          int tmp2755 = 0;
          if(__isset.success)
          {
            if(0 < tmp2755++) { tmp2754.Append(", "); }
            tmp2754.Append("Success: ");
            Success.ToString(tmp2754);
          }
          tmp2754.Append(')');
          return tmp2754.ToString();
        }
      }


      public partial class playbackState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackState_args()
        {
        }

        public playbackState_args DeepCopy()
        {
          var tmp2756 = new playbackState_args();
          if(__isset.c)
          {
            tmp2756.C = this.C;
          }
          tmp2756.__isset.c = this.__isset.c;
          return tmp2756;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2757 = new TStruct("playbackState_args");
            await oprot.WriteStructBeginAsync(tmp2757, cancellationToken);
            var tmp2758 = new TField();
            if(__isset.c)
            {
              tmp2758.Name = "c";
              tmp2758.Type = TType.I64;
              tmp2758.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2758, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2759 = new StringBuilder("playbackState_args(");
          int tmp2760 = 0;
          if(__isset.c)
          {
            if(0 < tmp2760++) { tmp2759.Append(", "); }
            tmp2759.Append("C: ");
            C.ToString(tmp2759);
          }
          tmp2759.Append(')');
          return tmp2759.ToString();
        }
      }


      public partial class playbackState_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackState_result()
        {
        }

        public playbackState_result DeepCopy()
        {
          var tmp2761 = new playbackState_result();
          if(__isset.success)
          {
            tmp2761.Success = this.Success;
          }
          tmp2761.__isset.success = this.__isset.success;
          return tmp2761;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2762 = new TStruct("playbackState_result");
            await oprot.WriteStructBeginAsync(tmp2762, cancellationToken);
            var tmp2763 = new TField();

            if(this.__isset.success)
            {
              tmp2763.Name = "Success";
              tmp2763.Type = TType.I32;
              tmp2763.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2763, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2764 = new StringBuilder("playbackState_result(");
          int tmp2765 = 0;
          if(__isset.success)
          {
            if(0 < tmp2765++) { tmp2764.Append(", "); }
            tmp2764.Append("Success: ");
            Success.ToString(tmp2764);
          }
          tmp2764.Append(')');
          return tmp2764.ToString();
        }
      }


      public partial class playbackCycle_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackCycle_args()
        {
        }

        public playbackCycle_args DeepCopy()
        {
          var tmp2766 = new playbackCycle_args();
          if(__isset.c)
          {
            tmp2766.C = this.C;
          }
          tmp2766.__isset.c = this.__isset.c;
          return tmp2766;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2767 = new TStruct("playbackCycle_args");
            await oprot.WriteStructBeginAsync(tmp2767, cancellationToken);
            var tmp2768 = new TField();
            if(__isset.c)
            {
              tmp2768.Name = "c";
              tmp2768.Type = TType.I64;
              tmp2768.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2768, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2769 = new StringBuilder("playbackCycle_args(");
          int tmp2770 = 0;
          if(__isset.c)
          {
            if(0 < tmp2770++) { tmp2769.Append(", "); }
            tmp2769.Append("C: ");
            C.ToString(tmp2769);
          }
          tmp2769.Append(')');
          return tmp2769.ToString();
        }
      }


      public partial class playbackCycle_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackCycle _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackCycle_result()
        {
        }

        public playbackCycle_result DeepCopy()
        {
          var tmp2771 = new playbackCycle_result();
          if(__isset.success)
          {
            tmp2771.Success = this.Success;
          }
          tmp2771.__isset.success = this.__isset.success;
          return tmp2771;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2772 = new TStruct("playbackCycle_result");
            await oprot.WriteStructBeginAsync(tmp2772, cancellationToken);
            var tmp2773 = new TField();

            if(this.__isset.success)
            {
              tmp2773.Name = "Success";
              tmp2773.Type = TType.I32;
              tmp2773.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2773, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2774 = new StringBuilder("playbackCycle_result(");
          int tmp2775 = 0;
          if(__isset.success)
          {
            if(0 < tmp2775++) { tmp2774.Append(", "); }
            tmp2774.Append("Success: ");
            Success.ToString(tmp2774);
          }
          tmp2774.Append(')');
          return tmp2774.ToString();
        }
      }


      public partial class setPlaybackCycle_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.PlaybackCycle _cycle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Cycle
        {
          get
          {
            return _cycle;
          }
          set
          {
            __isset.cycle = true;
            this._cycle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool cycle;
        }

        public setPlaybackCycle_args()
        {
        }

        public setPlaybackCycle_args DeepCopy()
        {
          var tmp2776 = new setPlaybackCycle_args();
          if(__isset.c)
          {
            tmp2776.C = this.C;
          }
          tmp2776.__isset.c = this.__isset.c;
          if(__isset.cycle)
          {
            tmp2776.Cycle = this.Cycle;
          }
          tmp2776.__isset.cycle = this.__isset.cycle;
          return tmp2776;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Cycle = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2777 = new TStruct("setPlaybackCycle_args");
            await oprot.WriteStructBeginAsync(tmp2777, cancellationToken);
            var tmp2778 = new TField();
            if(__isset.c)
            {
              tmp2778.Name = "c";
              tmp2778.Type = TType.I64;
              tmp2778.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2778, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.cycle)
            {
              tmp2778.Name = "cycle";
              tmp2778.Type = TType.I32;
              tmp2778.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2778, cancellationToken);
              await oprot.WriteI32Async((int)Cycle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.cycle == other.__isset.cycle) && ((!__isset.cycle) || (global::System.Object.Equals(Cycle, other.Cycle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.cycle)
            {
              hashcode = (hashcode * 397) + Cycle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2779 = new StringBuilder("setPlaybackCycle_args(");
          int tmp2780 = 0;
          if(__isset.c)
          {
            if(0 < tmp2780++) { tmp2779.Append(", "); }
            tmp2779.Append("C: ");
            C.ToString(tmp2779);
          }
          if(__isset.cycle)
          {
            if(0 < tmp2780++) { tmp2779.Append(", "); }
            tmp2779.Append("Cycle: ");
            Cycle.ToString(tmp2779);
          }
          tmp2779.Append(')');
          return tmp2779.ToString();
        }
      }


      public partial class setPlaybackCycle_result : TBase
      {

        public setPlaybackCycle_result()
        {
        }

        public setPlaybackCycle_result DeepCopy()
        {
          var tmp2781 = new setPlaybackCycle_result();
          return tmp2781;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2782 = new TStruct("setPlaybackCycle_result");
            await oprot.WriteStructBeginAsync(tmp2782, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2783 = new StringBuilder("setPlaybackCycle_result(");
          tmp2783.Append(')');
          return tmp2783.ToString();
        }
      }


      public partial class run_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public run_args()
        {
        }

        public run_args DeepCopy()
        {
          var tmp2785 = new run_args();
          if(__isset.c)
          {
            tmp2785.C = this.C;
          }
          tmp2785.__isset.c = this.__isset.c;
          return tmp2785;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2786 = new TStruct("run_args");
            await oprot.WriteStructBeginAsync(tmp2786, cancellationToken);
            var tmp2787 = new TField();
            if(__isset.c)
            {
              tmp2787.Name = "c";
              tmp2787.Type = TType.I64;
              tmp2787.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2787, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2788 = new StringBuilder("run_args(");
          int tmp2789 = 0;
          if(__isset.c)
          {
            if(0 < tmp2789++) { tmp2788.Append(", "); }
            tmp2788.Append("C: ");
            C.ToString(tmp2788);
          }
          tmp2788.Append(')');
          return tmp2788.ToString();
        }
      }


      public partial class run_result : TBase
      {

        public run_result()
        {
        }

        public run_result DeepCopy()
        {
          var tmp2790 = new run_result();
          return tmp2790;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2791 = new TStruct("run_result");
            await oprot.WriteStructBeginAsync(tmp2791, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2792 = new StringBuilder("run_result(");
          tmp2792.Append(')');
          return tmp2792.ToString();
        }
      }


      public partial class pause_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public pause_args()
        {
        }

        public pause_args DeepCopy()
        {
          var tmp2794 = new pause_args();
          if(__isset.c)
          {
            tmp2794.C = this.C;
          }
          tmp2794.__isset.c = this.__isset.c;
          return tmp2794;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2795 = new TStruct("pause_args");
            await oprot.WriteStructBeginAsync(tmp2795, cancellationToken);
            var tmp2796 = new TField();
            if(__isset.c)
            {
              tmp2796.Name = "c";
              tmp2796.Type = TType.I64;
              tmp2796.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2796, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2797 = new StringBuilder("pause_args(");
          int tmp2798 = 0;
          if(__isset.c)
          {
            if(0 < tmp2798++) { tmp2797.Append(", "); }
            tmp2797.Append("C: ");
            C.ToString(tmp2797);
          }
          tmp2797.Append(')');
          return tmp2797.ToString();
        }
      }


      public partial class pause_result : TBase
      {

        public pause_result()
        {
        }

        public pause_result DeepCopy()
        {
          var tmp2799 = new pause_result();
          return tmp2799;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2800 = new TStruct("pause_result");
            await oprot.WriteStructBeginAsync(tmp2800, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2801 = new StringBuilder("pause_result(");
          tmp2801.Append(')');
          return tmp2801.ToString();
        }
      }


      public partial class resume_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public resume_args()
        {
        }

        public resume_args DeepCopy()
        {
          var tmp2803 = new resume_args();
          if(__isset.c)
          {
            tmp2803.C = this.C;
          }
          tmp2803.__isset.c = this.__isset.c;
          return tmp2803;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2804 = new TStruct("resume_args");
            await oprot.WriteStructBeginAsync(tmp2804, cancellationToken);
            var tmp2805 = new TField();
            if(__isset.c)
            {
              tmp2805.Name = "c";
              tmp2805.Type = TType.I64;
              tmp2805.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2805, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2806 = new StringBuilder("resume_args(");
          int tmp2807 = 0;
          if(__isset.c)
          {
            if(0 < tmp2807++) { tmp2806.Append(", "); }
            tmp2806.Append("C: ");
            C.ToString(tmp2806);
          }
          tmp2806.Append(')');
          return tmp2806.ToString();
        }
      }


      public partial class resume_result : TBase
      {

        public resume_result()
        {
        }

        public resume_result DeepCopy()
        {
          var tmp2808 = new resume_result();
          return tmp2808;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2809 = new TStruct("resume_result");
            await oprot.WriteStructBeginAsync(tmp2809, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2810 = new StringBuilder("resume_result(");
          tmp2810.Append(')');
          return tmp2810.ToString();
        }
      }


      public partial class stop_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public stop_args()
        {
        }

        public stop_args DeepCopy()
        {
          var tmp2812 = new stop_args();
          if(__isset.c)
          {
            tmp2812.C = this.C;
          }
          tmp2812.__isset.c = this.__isset.c;
          return tmp2812;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2813 = new TStruct("stop_args");
            await oprot.WriteStructBeginAsync(tmp2813, cancellationToken);
            var tmp2814 = new TField();
            if(__isset.c)
            {
              tmp2814.Name = "c";
              tmp2814.Type = TType.I64;
              tmp2814.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2814, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2815 = new StringBuilder("stop_args(");
          int tmp2816 = 0;
          if(__isset.c)
          {
            if(0 < tmp2816++) { tmp2815.Append(", "); }
            tmp2815.Append("C: ");
            C.ToString(tmp2815);
          }
          tmp2815.Append(')');
          return tmp2815.ToString();
        }
      }


      public partial class stop_result : TBase
      {

        public stop_result()
        {
        }

        public stop_result DeepCopy()
        {
          var tmp2817 = new stop_result();
          return tmp2817;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2818 = new TStruct("stop_result");
            await oprot.WriteStructBeginAsync(tmp2818, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2819 = new StringBuilder("stop_result(");
          tmp2819.Append(')');
          return tmp2819.ToString();
        }
      }


      public partial class currentJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentJob_args()
        {
        }

        public currentJob_args DeepCopy()
        {
          var tmp2821 = new currentJob_args();
          if(__isset.c)
          {
            tmp2821.C = this.C;
          }
          tmp2821.__isset.c = this.__isset.c;
          return tmp2821;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2822 = new TStruct("currentJob_args");
            await oprot.WriteStructBeginAsync(tmp2822, cancellationToken);
            var tmp2823 = new TField();
            if(__isset.c)
            {
              tmp2823.Name = "c";
              tmp2823.Type = TType.I64;
              tmp2823.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2823, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2824 = new StringBuilder("currentJob_args(");
          int tmp2825 = 0;
          if(__isset.c)
          {
            if(0 < tmp2825++) { tmp2824.Append(", "); }
            tmp2824.Append("C: ");
            C.ToString(tmp2824);
          }
          tmp2824.Append(')');
          return tmp2824.ToString();
        }
      }


      public partial class currentJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJob_result()
        {
        }

        public currentJob_result DeepCopy()
        {
          var tmp2826 = new currentJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2826.Success = this.Success;
          }
          tmp2826.__isset.success = this.__isset.success;
          return tmp2826;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2827 = new TStruct("currentJob_result");
            await oprot.WriteStructBeginAsync(tmp2827, cancellationToken);
            var tmp2828 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2828.Name = "Success";
                tmp2828.Type = TType.String;
                tmp2828.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2828, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2829 = new StringBuilder("currentJob_result(");
          int tmp2830 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2830++) { tmp2829.Append(", "); }
            tmp2829.Append("Success: ");
            Success.ToString(tmp2829);
          }
          tmp2829.Append(')');
          return tmp2829.ToString();
        }
      }


      public partial class setCurrentJob_args : TBase
      {
        private long _c;
        private string _name;
        private int _line;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public int Line
        {
          get
          {
            return _line;
          }
          set
          {
            __isset.line = true;
            this._line = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool line;
        }

        public setCurrentJob_args()
        {
        }

        public setCurrentJob_args DeepCopy()
        {
          var tmp2831 = new setCurrentJob_args();
          if(__isset.c)
          {
            tmp2831.C = this.C;
          }
          tmp2831.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2831.Name = this.Name;
          }
          tmp2831.__isset.name = this.__isset.name;
          if(__isset.line)
          {
            tmp2831.Line = this.Line;
          }
          tmp2831.__isset.line = this.__isset.line;
          return tmp2831;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Line = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2832 = new TStruct("setCurrentJob_args");
            await oprot.WriteStructBeginAsync(tmp2832, cancellationToken);
            var tmp2833 = new TField();
            if(__isset.c)
            {
              tmp2833.Name = "c";
              tmp2833.Type = TType.I64;
              tmp2833.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2833, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2833.Name = "name";
              tmp2833.Type = TType.String;
              tmp2833.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2833, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.line)
            {
              tmp2833.Name = "line";
              tmp2833.Type = TType.I32;
              tmp2833.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2833, cancellationToken);
              await oprot.WriteI32Async(Line, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.line == other.__isset.line) && ((!__isset.line) || (global::System.Object.Equals(Line, other.Line))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.line)
            {
              hashcode = (hashcode * 397) + Line.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2834 = new StringBuilder("setCurrentJob_args(");
          int tmp2835 = 0;
          if(__isset.c)
          {
            if(0 < tmp2835++) { tmp2834.Append(", "); }
            tmp2834.Append("C: ");
            C.ToString(tmp2834);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2835++) { tmp2834.Append(", "); }
            tmp2834.Append("Name: ");
            Name.ToString(tmp2834);
          }
          if(__isset.line)
          {
            if(0 < tmp2835++) { tmp2834.Append(", "); }
            tmp2834.Append("Line: ");
            Line.ToString(tmp2834);
          }
          tmp2834.Append(')');
          return tmp2834.ToString();
        }
      }


      public partial class setCurrentJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setCurrentJob_result()
        {
        }

        public setCurrentJob_result DeepCopy()
        {
          var tmp2836 = new setCurrentJob_result();
          if((E != null) && __isset.e)
          {
            tmp2836.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2836.__isset.e = this.__isset.e;
          return tmp2836;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2837 = new TStruct("setCurrentJob_result");
            await oprot.WriteStructBeginAsync(tmp2837, cancellationToken);
            var tmp2838 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2838.Name = "E";
                tmp2838.Type = TType.Struct;
                tmp2838.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2838, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2839 = new StringBuilder("setCurrentJob_result(");
          int tmp2840 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2840++) { tmp2839.Append(", "); }
            tmp2839.Append("E: ");
            E.ToString(tmp2839);
          }
          tmp2839.Append(')');
          return tmp2839.ToString();
        }
      }


      public partial class defaultJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public defaultJob_args()
        {
        }

        public defaultJob_args DeepCopy()
        {
          var tmp2841 = new defaultJob_args();
          if(__isset.c)
          {
            tmp2841.C = this.C;
          }
          tmp2841.__isset.c = this.__isset.c;
          return tmp2841;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2842 = new TStruct("defaultJob_args");
            await oprot.WriteStructBeginAsync(tmp2842, cancellationToken);
            var tmp2843 = new TField();
            if(__isset.c)
            {
              tmp2843.Name = "c";
              tmp2843.Type = TType.I64;
              tmp2843.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2843, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2844 = new StringBuilder("defaultJob_args(");
          int tmp2845 = 0;
          if(__isset.c)
          {
            if(0 < tmp2845++) { tmp2844.Append(", "); }
            tmp2844.Append("C: ");
            C.ToString(tmp2844);
          }
          tmp2844.Append(')');
          return tmp2844.ToString();
        }
      }


      public partial class defaultJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public defaultJob_result()
        {
        }

        public defaultJob_result DeepCopy()
        {
          var tmp2846 = new defaultJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2846.Success = this.Success;
          }
          tmp2846.__isset.success = this.__isset.success;
          return tmp2846;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2847 = new TStruct("defaultJob_result");
            await oprot.WriteStructBeginAsync(tmp2847, cancellationToken);
            var tmp2848 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2848.Name = "Success";
                tmp2848.Type = TType.String;
                tmp2848.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2848, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2849 = new StringBuilder("defaultJob_result(");
          int tmp2850 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2850++) { tmp2849.Append(", "); }
            tmp2849.Append("Success: ");
            Success.ToString(tmp2849);
          }
          tmp2849.Append(')');
          return tmp2849.ToString();
        }
      }


      public partial class jobExists_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobExists_args()
        {
        }

        public jobExists_args DeepCopy()
        {
          var tmp2851 = new jobExists_args();
          if(__isset.c)
          {
            tmp2851.C = this.C;
          }
          tmp2851.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2851.Name = this.Name;
          }
          tmp2851.__isset.name = this.__isset.name;
          return tmp2851;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2852 = new TStruct("jobExists_args");
            await oprot.WriteStructBeginAsync(tmp2852, cancellationToken);
            var tmp2853 = new TField();
            if(__isset.c)
            {
              tmp2853.Name = "c";
              tmp2853.Type = TType.I64;
              tmp2853.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2853, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2853.Name = "name";
              tmp2853.Type = TType.String;
              tmp2853.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2853, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2854 = new StringBuilder("jobExists_args(");
          int tmp2855 = 0;
          if(__isset.c)
          {
            if(0 < tmp2855++) { tmp2854.Append(", "); }
            tmp2854.Append("C: ");
            C.ToString(tmp2854);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2855++) { tmp2854.Append(", "); }
            tmp2854.Append("Name: ");
            Name.ToString(tmp2854);
          }
          tmp2854.Append(')');
          return tmp2854.ToString();
        }
      }


      public partial class jobExists_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobExists_result()
        {
        }

        public jobExists_result DeepCopy()
        {
          var tmp2856 = new jobExists_result();
          if(__isset.success)
          {
            tmp2856.Success = this.Success;
          }
          tmp2856.__isset.success = this.__isset.success;
          return tmp2856;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2857 = new TStruct("jobExists_result");
            await oprot.WriteStructBeginAsync(tmp2857, cancellationToken);
            var tmp2858 = new TField();

            if(this.__isset.success)
            {
              tmp2858.Name = "Success";
              tmp2858.Type = TType.Bool;
              tmp2858.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2858, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2859 = new StringBuilder("jobExists_result(");
          int tmp2860 = 0;
          if(__isset.success)
          {
            if(0 < tmp2860++) { tmp2859.Append(", "); }
            tmp2859.Append("Success: ");
            Success.ToString(tmp2859);
          }
          tmp2859.Append(')');
          return tmp2859.ToString();
        }
      }


      public partial class jobDetails_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobDetails_args()
        {
        }

        public jobDetails_args DeepCopy()
        {
          var tmp2861 = new jobDetails_args();
          if(__isset.c)
          {
            tmp2861.C = this.C;
          }
          tmp2861.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2861.Name = this.Name;
          }
          tmp2861.__isset.name = this.__isset.name;
          return tmp2861;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2862 = new TStruct("jobDetails_args");
            await oprot.WriteStructBeginAsync(tmp2862, cancellationToken);
            var tmp2863 = new TField();
            if(__isset.c)
            {
              tmp2863.Name = "c";
              tmp2863.Type = TType.I64;
              tmp2863.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2863, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2863.Name = "name";
              tmp2863.Type = TType.String;
              tmp2863.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2863, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2864 = new StringBuilder("jobDetails_args(");
          int tmp2865 = 0;
          if(__isset.c)
          {
            if(0 < tmp2865++) { tmp2864.Append(", "); }
            tmp2864.Append("C: ");
            C.ToString(tmp2864);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2865++) { tmp2864.Append(", "); }
            tmp2864.Append("Name: ");
            Name.ToString(tmp2864);
          }
          tmp2864.Append(')');
          return tmp2864.ToString();
        }
      }


      public partial class jobDetails_result : TBase
      {
        private global::Yaskawa.Ext.API.RobotJobInfo _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.RobotJobInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobDetails_result()
        {
        }

        public jobDetails_result DeepCopy()
        {
          var tmp2866 = new jobDetails_result();
          if((Success != null) && __isset.success)
          {
            tmp2866.Success = (global::Yaskawa.Ext.API.RobotJobInfo)this.Success.DeepCopy();
          }
          tmp2866.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2866.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2866.__isset.e = this.__isset.e;
          return tmp2866;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.RobotJobInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2867 = new TStruct("jobDetails_result");
            await oprot.WriteStructBeginAsync(tmp2867, cancellationToken);
            var tmp2868 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2868.Name = "Success";
                tmp2868.Type = TType.Struct;
                tmp2868.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2868, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2868.Name = "E";
                tmp2868.Type = TType.Struct;
                tmp2868.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2868, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2869 = new StringBuilder("jobDetails_result(");
          int tmp2870 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2870++) { tmp2869.Append(", "); }
            tmp2869.Append("Success: ");
            Success.ToString(tmp2869);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2870++) { tmp2869.Append(", "); }
            tmp2869.Append("E: ");
            E.ToString(tmp2869);
          }
          tmp2869.Append(')');
          return tmp2869.ToString();
        }
      }


      public partial class jobs_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public jobs_args()
        {
        }

        public jobs_args DeepCopy()
        {
          var tmp2871 = new jobs_args();
          if(__isset.c)
          {
            tmp2871.C = this.C;
          }
          tmp2871.__isset.c = this.__isset.c;
          return tmp2871;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2872 = new TStruct("jobs_args");
            await oprot.WriteStructBeginAsync(tmp2872, cancellationToken);
            var tmp2873 = new TField();
            if(__isset.c)
            {
              tmp2873.Name = "c";
              tmp2873.Type = TType.I64;
              tmp2873.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2873, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2874 = new StringBuilder("jobs_args(");
          int tmp2875 = 0;
          if(__isset.c)
          {
            if(0 < tmp2875++) { tmp2874.Append(", "); }
            tmp2874.Append("C: ");
            C.ToString(tmp2874);
          }
          tmp2874.Append(')');
          return tmp2874.ToString();
        }
      }


      public partial class jobs_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobs_result()
        {
        }

        public jobs_result DeepCopy()
        {
          var tmp2876 = new jobs_result();
          if((Success != null) && __isset.success)
          {
            tmp2876.Success = this.Success.DeepCopy();
          }
          tmp2876.__isset.success = this.__isset.success;
          return tmp2876;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2877 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list2877.Count);
                      for(int _i2878 = 0; _i2878 < _list2877.Count; ++_i2878)
                      {
                        string _elem2879;
                        _elem2879 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem2879);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2880 = new TStruct("jobs_result");
            await oprot.WriteStructBeginAsync(tmp2880, cancellationToken);
            var tmp2881 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2881.Name = "Success";
                tmp2881.Type = TType.List;
                tmp2881.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2881, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter2882 in Success)
                {
                  await oprot.WriteStringAsync(_iter2882, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2883 = new StringBuilder("jobs_result(");
          int tmp2884 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2884++) { tmp2883.Append(", "); }
            tmp2883.Append("Success: ");
            Success.ToString(tmp2883);
          }
          tmp2883.Append(')');
          return tmp2883.ToString();
        }
      }


      public partial class jobsMatching_args : TBase
      {
        private long _c;
        private string _nameRegex;
        private string _tag;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string NameRegex
        {
          get
          {
            return _nameRegex;
          }
          set
          {
            __isset.nameRegex = true;
            this._nameRegex = value;
          }
        }

        public string Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool nameRegex;
          public bool tag;
        }

        public jobsMatching_args()
        {
        }

        public jobsMatching_args DeepCopy()
        {
          var tmp2885 = new jobsMatching_args();
          if(__isset.c)
          {
            tmp2885.C = this.C;
          }
          tmp2885.__isset.c = this.__isset.c;
          if((NameRegex != null) && __isset.nameRegex)
          {
            tmp2885.NameRegex = this.NameRegex;
          }
          tmp2885.__isset.nameRegex = this.__isset.nameRegex;
          if((Tag != null) && __isset.tag)
          {
            tmp2885.Tag = this.Tag;
          }
          tmp2885.__isset.tag = this.__isset.tag;
          return tmp2885;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NameRegex = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Tag = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2886 = new TStruct("jobsMatching_args");
            await oprot.WriteStructBeginAsync(tmp2886, cancellationToken);
            var tmp2887 = new TField();
            if(__isset.c)
            {
              tmp2887.Name = "c";
              tmp2887.Type = TType.I64;
              tmp2887.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2887, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              tmp2887.Name = "nameRegex";
              tmp2887.Type = TType.String;
              tmp2887.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2887, cancellationToken);
              await oprot.WriteStringAsync(NameRegex, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp2887.Name = "tag";
              tmp2887.Type = TType.String;
              tmp2887.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2887, cancellationToken);
              await oprot.WriteStringAsync(Tag, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.nameRegex == other.__isset.nameRegex) && ((!__isset.nameRegex) || (global::System.Object.Equals(NameRegex, other.NameRegex))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              hashcode = (hashcode * 397) + NameRegex.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2888 = new StringBuilder("jobsMatching_args(");
          int tmp2889 = 0;
          if(__isset.c)
          {
            if(0 < tmp2889++) { tmp2888.Append(", "); }
            tmp2888.Append("C: ");
            C.ToString(tmp2888);
          }
          if((NameRegex != null) && __isset.nameRegex)
          {
            if(0 < tmp2889++) { tmp2888.Append(", "); }
            tmp2888.Append("NameRegex: ");
            NameRegex.ToString(tmp2888);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp2889++) { tmp2888.Append(", "); }
            tmp2888.Append("Tag: ");
            Tag.ToString(tmp2888);
          }
          tmp2888.Append(')');
          return tmp2888.ToString();
        }
      }


      public partial class jobsMatching_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobsMatching_result()
        {
        }

        public jobsMatching_result DeepCopy()
        {
          var tmp2890 = new jobsMatching_result();
          if((Success != null) && __isset.success)
          {
            tmp2890.Success = this.Success.DeepCopy();
          }
          tmp2890.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2890.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2890.__isset.e = this.__isset.e;
          return tmp2890;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2891 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list2891.Count);
                      for(int _i2892 = 0; _i2892 < _list2891.Count; ++_i2892)
                      {
                        string _elem2893;
                        _elem2893 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem2893);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2894 = new TStruct("jobsMatching_result");
            await oprot.WriteStructBeginAsync(tmp2894, cancellationToken);
            var tmp2895 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2895.Name = "Success";
                tmp2895.Type = TType.List;
                tmp2895.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2895, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter2896 in Success)
                {
                  await oprot.WriteStringAsync(_iter2896, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2895.Name = "E";
                tmp2895.Type = TType.Struct;
                tmp2895.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2895, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2897 = new StringBuilder("jobsMatching_result(");
          int tmp2898 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2898++) { tmp2897.Append(", "); }
            tmp2897.Append("Success: ");
            Success.ToString(tmp2897);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2898++) { tmp2897.Append(", "); }
            tmp2897.Append("E: ");
            E.ToString(tmp2897);
          }
          tmp2897.Append(')');
          return tmp2897.ToString();
        }
      }


      public partial class duplicateJob_args : TBase
      {
        private long _c;
        private string _existingName;
        private string _newName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ExistingName
        {
          get
          {
            return _existingName;
          }
          set
          {
            __isset.existingName = true;
            this._existingName = value;
          }
        }

        public string NewName
        {
          get
          {
            return _newName;
          }
          set
          {
            __isset.newName = true;
            this._newName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool existingName;
          public bool newName;
        }

        public duplicateJob_args()
        {
        }

        public duplicateJob_args DeepCopy()
        {
          var tmp2899 = new duplicateJob_args();
          if(__isset.c)
          {
            tmp2899.C = this.C;
          }
          tmp2899.__isset.c = this.__isset.c;
          if((ExistingName != null) && __isset.existingName)
          {
            tmp2899.ExistingName = this.ExistingName;
          }
          tmp2899.__isset.existingName = this.__isset.existingName;
          if((NewName != null) && __isset.newName)
          {
            tmp2899.NewName = this.NewName;
          }
          tmp2899.__isset.newName = this.__isset.newName;
          return tmp2899;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ExistingName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NewName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2900 = new TStruct("duplicateJob_args");
            await oprot.WriteStructBeginAsync(tmp2900, cancellationToken);
            var tmp2901 = new TField();
            if(__isset.c)
            {
              tmp2901.Name = "c";
              tmp2901.Type = TType.I64;
              tmp2901.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2901, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ExistingName != null) && __isset.existingName)
            {
              tmp2901.Name = "existingName";
              tmp2901.Type = TType.String;
              tmp2901.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2901, cancellationToken);
              await oprot.WriteStringAsync(ExistingName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewName != null) && __isset.newName)
            {
              tmp2901.Name = "newName";
              tmp2901.Type = TType.String;
              tmp2901.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2901, cancellationToken);
              await oprot.WriteStringAsync(NewName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.existingName == other.__isset.existingName) && ((!__isset.existingName) || (global::System.Object.Equals(ExistingName, other.ExistingName))))
            && ((__isset.newName == other.__isset.newName) && ((!__isset.newName) || (global::System.Object.Equals(NewName, other.NewName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ExistingName != null) && __isset.existingName)
            {
              hashcode = (hashcode * 397) + ExistingName.GetHashCode();
            }
            if((NewName != null) && __isset.newName)
            {
              hashcode = (hashcode * 397) + NewName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2902 = new StringBuilder("duplicateJob_args(");
          int tmp2903 = 0;
          if(__isset.c)
          {
            if(0 < tmp2903++) { tmp2902.Append(", "); }
            tmp2902.Append("C: ");
            C.ToString(tmp2902);
          }
          if((ExistingName != null) && __isset.existingName)
          {
            if(0 < tmp2903++) { tmp2902.Append(", "); }
            tmp2902.Append("ExistingName: ");
            ExistingName.ToString(tmp2902);
          }
          if((NewName != null) && __isset.newName)
          {
            if(0 < tmp2903++) { tmp2902.Append(", "); }
            tmp2902.Append("NewName: ");
            NewName.ToString(tmp2902);
          }
          tmp2902.Append(')');
          return tmp2902.ToString();
        }
      }


      public partial class duplicateJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public duplicateJob_result()
        {
        }

        public duplicateJob_result DeepCopy()
        {
          var tmp2904 = new duplicateJob_result();
          if((E != null) && __isset.e)
          {
            tmp2904.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2904.__isset.e = this.__isset.e;
          return tmp2904;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2905 = new TStruct("duplicateJob_result");
            await oprot.WriteStructBeginAsync(tmp2905, cancellationToken);
            var tmp2906 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2906.Name = "E";
                tmp2906.Type = TType.Struct;
                tmp2906.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2906, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2907 = new StringBuilder("duplicateJob_result(");
          int tmp2908 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2908++) { tmp2907.Append(", "); }
            tmp2907.Append("E: ");
            E.ToString(tmp2907);
          }
          tmp2907.Append(')');
          return tmp2907.ToString();
        }
      }


      public partial class deleteJob_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public deleteJob_args()
        {
        }

        public deleteJob_args DeepCopy()
        {
          var tmp2909 = new deleteJob_args();
          if(__isset.c)
          {
            tmp2909.C = this.C;
          }
          tmp2909.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2909.Name = this.Name;
          }
          tmp2909.__isset.name = this.__isset.name;
          return tmp2909;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2910 = new TStruct("deleteJob_args");
            await oprot.WriteStructBeginAsync(tmp2910, cancellationToken);
            var tmp2911 = new TField();
            if(__isset.c)
            {
              tmp2911.Name = "c";
              tmp2911.Type = TType.I64;
              tmp2911.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2911, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2911.Name = "name";
              tmp2911.Type = TType.String;
              tmp2911.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2911, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2912 = new StringBuilder("deleteJob_args(");
          int tmp2913 = 0;
          if(__isset.c)
          {
            if(0 < tmp2913++) { tmp2912.Append(", "); }
            tmp2912.Append("C: ");
            C.ToString(tmp2912);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2913++) { tmp2912.Append(", "); }
            tmp2912.Append("Name: ");
            Name.ToString(tmp2912);
          }
          tmp2912.Append(')');
          return tmp2912.ToString();
        }
      }


      public partial class deleteJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteJob_result()
        {
        }

        public deleteJob_result DeepCopy()
        {
          var tmp2914 = new deleteJob_result();
          if((E != null) && __isset.e)
          {
            tmp2914.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2914.__isset.e = this.__isset.e;
          return tmp2914;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2915 = new TStruct("deleteJob_result");
            await oprot.WriteStructBeginAsync(tmp2915, cancellationToken);
            var tmp2916 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2916.Name = "E";
                tmp2916.Type = TType.Struct;
                tmp2916.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2916, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2917 = new StringBuilder("deleteJob_result(");
          int tmp2918 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2918++) { tmp2917.Append(", "); }
            tmp2917.Append("E: ");
            E.ToString(tmp2917);
          }
          tmp2917.Append(')');
          return tmp2917.ToString();
        }
      }


      public partial class jobSource_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobSource_args()
        {
        }

        public jobSource_args DeepCopy()
        {
          var tmp2919 = new jobSource_args();
          if(__isset.c)
          {
            tmp2919.C = this.C;
          }
          tmp2919.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2919.Name = this.Name;
          }
          tmp2919.__isset.name = this.__isset.name;
          return tmp2919;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2920 = new TStruct("jobSource_args");
            await oprot.WriteStructBeginAsync(tmp2920, cancellationToken);
            var tmp2921 = new TField();
            if(__isset.c)
            {
              tmp2921.Name = "c";
              tmp2921.Type = TType.I64;
              tmp2921.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2921, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2921.Name = "name";
              tmp2921.Type = TType.String;
              tmp2921.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2921, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2922 = new StringBuilder("jobSource_args(");
          int tmp2923 = 0;
          if(__isset.c)
          {
            if(0 < tmp2923++) { tmp2922.Append(", "); }
            tmp2922.Append("C: ");
            C.ToString(tmp2922);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2923++) { tmp2922.Append(", "); }
            tmp2922.Append("Name: ");
            Name.ToString(tmp2922);
          }
          tmp2922.Append(')');
          return tmp2922.ToString();
        }
      }


      public partial class jobSource_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobSource_result()
        {
        }

        public jobSource_result DeepCopy()
        {
          var tmp2924 = new jobSource_result();
          if((Success != null) && __isset.success)
          {
            tmp2924.Success = this.Success;
          }
          tmp2924.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2924.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2924.__isset.e = this.__isset.e;
          return tmp2924;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2925 = new TStruct("jobSource_result");
            await oprot.WriteStructBeginAsync(tmp2925, cancellationToken);
            var tmp2926 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2926.Name = "Success";
                tmp2926.Type = TType.String;
                tmp2926.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2926, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2926.Name = "E";
                tmp2926.Type = TType.Struct;
                tmp2926.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2926, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2927 = new StringBuilder("jobSource_result(");
          int tmp2928 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2928++) { tmp2927.Append(", "); }
            tmp2927.Append("Success: ");
            Success.ToString(tmp2927);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2928++) { tmp2927.Append(", "); }
            tmp2927.Append("E: ");
            E.ToString(tmp2927);
          }
          tmp2927.Append(')');
          return tmp2927.ToString();
        }
      }


      public partial class storeJobSource_args : TBase
      {
        private long _c;
        private string _name;
        private string _programmingLanguage;
        private string _sourceCode;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string ProgrammingLanguage
        {
          get
          {
            return _programmingLanguage;
          }
          set
          {
            __isset.programmingLanguage = true;
            this._programmingLanguage = value;
          }
        }

        public string SourceCode
        {
          get
          {
            return _sourceCode;
          }
          set
          {
            __isset.sourceCode = true;
            this._sourceCode = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool programmingLanguage;
          public bool sourceCode;
        }

        public storeJobSource_args()
        {
        }

        public storeJobSource_args DeepCopy()
        {
          var tmp2929 = new storeJobSource_args();
          if(__isset.c)
          {
            tmp2929.C = this.C;
          }
          tmp2929.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2929.Name = this.Name;
          }
          tmp2929.__isset.name = this.__isset.name;
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            tmp2929.ProgrammingLanguage = this.ProgrammingLanguage;
          }
          tmp2929.__isset.programmingLanguage = this.__isset.programmingLanguage;
          if((SourceCode != null) && __isset.sourceCode)
          {
            tmp2929.SourceCode = this.SourceCode;
          }
          tmp2929.__isset.sourceCode = this.__isset.sourceCode;
          return tmp2929;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ProgrammingLanguage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SourceCode = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2930 = new TStruct("storeJobSource_args");
            await oprot.WriteStructBeginAsync(tmp2930, cancellationToken);
            var tmp2931 = new TField();
            if(__isset.c)
            {
              tmp2931.Name = "c";
              tmp2931.Type = TType.I64;
              tmp2931.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2931, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2931.Name = "name";
              tmp2931.Type = TType.String;
              tmp2931.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2931, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              tmp2931.Name = "programmingLanguage";
              tmp2931.Type = TType.String;
              tmp2931.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2931, cancellationToken);
              await oprot.WriteStringAsync(ProgrammingLanguage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              tmp2931.Name = "sourceCode";
              tmp2931.Type = TType.String;
              tmp2931.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp2931, cancellationToken);
              await oprot.WriteStringAsync(SourceCode, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.programmingLanguage == other.__isset.programmingLanguage) && ((!__isset.programmingLanguage) || (global::System.Object.Equals(ProgrammingLanguage, other.ProgrammingLanguage))))
            && ((__isset.sourceCode == other.__isset.sourceCode) && ((!__isset.sourceCode) || (global::System.Object.Equals(SourceCode, other.SourceCode))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              hashcode = (hashcode * 397) + ProgrammingLanguage.GetHashCode();
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              hashcode = (hashcode * 397) + SourceCode.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2932 = new StringBuilder("storeJobSource_args(");
          int tmp2933 = 0;
          if(__isset.c)
          {
            if(0 < tmp2933++) { tmp2932.Append(", "); }
            tmp2932.Append("C: ");
            C.ToString(tmp2932);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2933++) { tmp2932.Append(", "); }
            tmp2932.Append("Name: ");
            Name.ToString(tmp2932);
          }
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            if(0 < tmp2933++) { tmp2932.Append(", "); }
            tmp2932.Append("ProgrammingLanguage: ");
            ProgrammingLanguage.ToString(tmp2932);
          }
          if((SourceCode != null) && __isset.sourceCode)
          {
            if(0 < tmp2933++) { tmp2932.Append(", "); }
            tmp2932.Append("SourceCode: ");
            SourceCode.ToString(tmp2932);
          }
          tmp2932.Append(')');
          return tmp2932.ToString();
        }
      }


      public partial class storeJobSource_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public storeJobSource_result()
        {
        }

        public storeJobSource_result DeepCopy()
        {
          var tmp2934 = new storeJobSource_result();
          if((E != null) && __isset.e)
          {
            tmp2934.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2934.__isset.e = this.__isset.e;
          return tmp2934;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2935 = new TStruct("storeJobSource_result");
            await oprot.WriteStructBeginAsync(tmp2935, cancellationToken);
            var tmp2936 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2936.Name = "E";
                tmp2936.Type = TType.Struct;
                tmp2936.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2936, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2937 = new StringBuilder("storeJobSource_result(");
          int tmp2938 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2938++) { tmp2937.Append(", "); }
            tmp2937.Append("E: ");
            E.ToString(tmp2937);
          }
          tmp2937.Append(')');
          return tmp2937.ToString();
        }
      }


      public partial class tools_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public tools_args()
        {
        }

        public tools_args DeepCopy()
        {
          var tmp2939 = new tools_args();
          if(__isset.c)
          {
            tmp2939.C = this.C;
          }
          tmp2939.__isset.c = this.__isset.c;
          return tmp2939;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2940 = new TStruct("tools_args");
            await oprot.WriteStructBeginAsync(tmp2940, cancellationToken);
            var tmp2941 = new TField();
            if(__isset.c)
            {
              tmp2941.Name = "c";
              tmp2941.Type = TType.I64;
              tmp2941.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2941, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2942 = new StringBuilder("tools_args(");
          int tmp2943 = 0;
          if(__isset.c)
          {
            if(0 < tmp2943++) { tmp2942.Append(", "); }
            tmp2942.Append("C: ");
            C.ToString(tmp2942);
          }
          tmp2942.Append(')');
          return tmp2942.ToString();
        }
      }


      public partial class tools_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tools_result()
        {
        }

        public tools_result DeepCopy()
        {
          var tmp2944 = new tools_result();
          if((Success != null) && __isset.success)
          {
            tmp2944.Success = this.Success.DeepCopy();
          }
          tmp2944.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2944.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2944.__isset.e = this.__isset.e;
          return tmp2944;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map2945 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map2945.Count);
                      for(int _i2946 = 0; _i2946 < _map2945.Count; ++_i2946)
                      {
                        int _key2947;
                        string _val2948;
                        _key2947 = await iprot.ReadI32Async(cancellationToken);
                        _val2948 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key2947] = _val2948;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2949 = new TStruct("tools_result");
            await oprot.WriteStructBeginAsync(tmp2949, cancellationToken);
            var tmp2950 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2950.Name = "Success";
                tmp2950.Type = TType.Map;
                tmp2950.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2950, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter2951 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter2951, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter2951], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2950.Name = "E";
                tmp2950.Type = TType.Struct;
                tmp2950.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2950, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2952 = new StringBuilder("tools_result(");
          int tmp2953 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2953++) { tmp2952.Append(", "); }
            tmp2952.Append("Success: ");
            Success.ToString(tmp2952);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2953++) { tmp2952.Append(", "); }
            tmp2952.Append("E: ");
            E.ToString(tmp2952);
          }
          tmp2952.Append(')');
          return tmp2952.ToString();
        }
      }


      public partial class tool_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public tool_args()
        {
        }

        public tool_args DeepCopy()
        {
          var tmp2954 = new tool_args();
          if(__isset.c)
          {
            tmp2954.C = this.C;
          }
          tmp2954.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2954.Index = this.Index;
          }
          tmp2954.__isset.index = this.__isset.index;
          return tmp2954;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2955 = new TStruct("tool_args");
            await oprot.WriteStructBeginAsync(tmp2955, cancellationToken);
            var tmp2956 = new TField();
            if(__isset.c)
            {
              tmp2956.Name = "c";
              tmp2956.Type = TType.I64;
              tmp2956.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2956, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2956.Name = "index";
              tmp2956.Type = TType.I32;
              tmp2956.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2956, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2957 = new StringBuilder("tool_args(");
          int tmp2958 = 0;
          if(__isset.c)
          {
            if(0 < tmp2958++) { tmp2957.Append(", "); }
            tmp2957.Append("C: ");
            C.ToString(tmp2957);
          }
          if(__isset.index)
          {
            if(0 < tmp2958++) { tmp2957.Append(", "); }
            tmp2957.Append("Index: ");
            Index.ToString(tmp2957);
          }
          tmp2957.Append(')');
          return tmp2957.ToString();
        }
      }


      public partial class tool_result : TBase
      {
        private global::Yaskawa.Ext.API.Tool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Tool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tool_result()
        {
        }

        public tool_result DeepCopy()
        {
          var tmp2959 = new tool_result();
          if((Success != null) && __isset.success)
          {
            tmp2959.Success = (global::Yaskawa.Ext.API.Tool)this.Success.DeepCopy();
          }
          tmp2959.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2959.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2959.__isset.e = this.__isset.e;
          return tmp2959;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Tool();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2960 = new TStruct("tool_result");
            await oprot.WriteStructBeginAsync(tmp2960, cancellationToken);
            var tmp2961 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2961.Name = "Success";
                tmp2961.Type = TType.Struct;
                tmp2961.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2961, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2961.Name = "E";
                tmp2961.Type = TType.Struct;
                tmp2961.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2961, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2962 = new StringBuilder("tool_result(");
          int tmp2963 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2963++) { tmp2962.Append(", "); }
            tmp2962.Append("Success: ");
            Success.ToString(tmp2962);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2963++) { tmp2962.Append(", "); }
            tmp2962.Append("E: ");
            E.ToString(tmp2962);
          }
          tmp2962.Append(')');
          return tmp2962.ToString();
        }
      }


      public partial class inputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputNumber_args()
        {
        }

        public inputNumber_args DeepCopy()
        {
          var tmp2964 = new inputNumber_args();
          if(__isset.c)
          {
            tmp2964.C = this.C;
          }
          tmp2964.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2964.Name = this.Name;
          }
          tmp2964.__isset.name = this.__isset.name;
          return tmp2964;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2965 = new TStruct("inputNumber_args");
            await oprot.WriteStructBeginAsync(tmp2965, cancellationToken);
            var tmp2966 = new TField();
            if(__isset.c)
            {
              tmp2966.Name = "c";
              tmp2966.Type = TType.I64;
              tmp2966.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2966, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2966.Name = "name";
              tmp2966.Type = TType.String;
              tmp2966.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2966, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2967 = new StringBuilder("inputNumber_args(");
          int tmp2968 = 0;
          if(__isset.c)
          {
            if(0 < tmp2968++) { tmp2967.Append(", "); }
            tmp2967.Append("C: ");
            C.ToString(tmp2967);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2968++) { tmp2967.Append(", "); }
            tmp2967.Append("Name: ");
            Name.ToString(tmp2967);
          }
          tmp2967.Append(')');
          return tmp2967.ToString();
        }
      }


      public partial class inputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputNumber_result()
        {
        }

        public inputNumber_result DeepCopy()
        {
          var tmp2969 = new inputNumber_result();
          if(__isset.success)
          {
            tmp2969.Success = this.Success;
          }
          tmp2969.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2969.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2969.__isset.e = this.__isset.e;
          return tmp2969;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2970 = new TStruct("inputNumber_result");
            await oprot.WriteStructBeginAsync(tmp2970, cancellationToken);
            var tmp2971 = new TField();

            if(this.__isset.success)
            {
              tmp2971.Name = "Success";
              tmp2971.Type = TType.I32;
              tmp2971.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2971, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2971.Name = "E";
                tmp2971.Type = TType.Struct;
                tmp2971.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2971, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2972 = new StringBuilder("inputNumber_result(");
          int tmp2973 = 0;
          if(__isset.success)
          {
            if(0 < tmp2973++) { tmp2972.Append(", "); }
            tmp2972.Append("Success: ");
            Success.ToString(tmp2972);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2973++) { tmp2972.Append(", "); }
            tmp2972.Append("E: ");
            E.ToString(tmp2972);
          }
          tmp2972.Append(')');
          return tmp2972.ToString();
        }
      }


      public partial class inputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputGroupNumber_args()
        {
        }

        public inputGroupNumber_args DeepCopy()
        {
          var tmp2974 = new inputGroupNumber_args();
          if(__isset.c)
          {
            tmp2974.C = this.C;
          }
          tmp2974.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2974.Name = this.Name;
          }
          tmp2974.__isset.name = this.__isset.name;
          return tmp2974;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2975 = new TStruct("inputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp2975, cancellationToken);
            var tmp2976 = new TField();
            if(__isset.c)
            {
              tmp2976.Name = "c";
              tmp2976.Type = TType.I64;
              tmp2976.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2976, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2976.Name = "name";
              tmp2976.Type = TType.String;
              tmp2976.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2976, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2977 = new StringBuilder("inputGroupNumber_args(");
          int tmp2978 = 0;
          if(__isset.c)
          {
            if(0 < tmp2978++) { tmp2977.Append(", "); }
            tmp2977.Append("C: ");
            C.ToString(tmp2977);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2978++) { tmp2977.Append(", "); }
            tmp2977.Append("Name: ");
            Name.ToString(tmp2977);
          }
          tmp2977.Append(')');
          return tmp2977.ToString();
        }
      }


      public partial class inputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupNumber_result()
        {
        }

        public inputGroupNumber_result DeepCopy()
        {
          var tmp2979 = new inputGroupNumber_result();
          if(__isset.success)
          {
            tmp2979.Success = this.Success;
          }
          tmp2979.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2979.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2979.__isset.e = this.__isset.e;
          return tmp2979;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2980 = new TStruct("inputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp2980, cancellationToken);
            var tmp2981 = new TField();

            if(this.__isset.success)
            {
              tmp2981.Name = "Success";
              tmp2981.Type = TType.I32;
              tmp2981.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2981, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2981.Name = "E";
                tmp2981.Type = TType.Struct;
                tmp2981.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2981, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2982 = new StringBuilder("inputGroupNumber_result(");
          int tmp2983 = 0;
          if(__isset.success)
          {
            if(0 < tmp2983++) { tmp2982.Append(", "); }
            tmp2982.Append("Success: ");
            Success.ToString(tmp2982);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2983++) { tmp2982.Append(", "); }
            tmp2982.Append("E: ");
            E.ToString(tmp2982);
          }
          tmp2982.Append(')');
          return tmp2982.ToString();
        }
      }


      public partial class outputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputNumber_args()
        {
        }

        public outputNumber_args DeepCopy()
        {
          var tmp2984 = new outputNumber_args();
          if(__isset.c)
          {
            tmp2984.C = this.C;
          }
          tmp2984.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2984.Name = this.Name;
          }
          tmp2984.__isset.name = this.__isset.name;
          return tmp2984;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2985 = new TStruct("outputNumber_args");
            await oprot.WriteStructBeginAsync(tmp2985, cancellationToken);
            var tmp2986 = new TField();
            if(__isset.c)
            {
              tmp2986.Name = "c";
              tmp2986.Type = TType.I64;
              tmp2986.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2986, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2986.Name = "name";
              tmp2986.Type = TType.String;
              tmp2986.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2986, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2987 = new StringBuilder("outputNumber_args(");
          int tmp2988 = 0;
          if(__isset.c)
          {
            if(0 < tmp2988++) { tmp2987.Append(", "); }
            tmp2987.Append("C: ");
            C.ToString(tmp2987);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2988++) { tmp2987.Append(", "); }
            tmp2987.Append("Name: ");
            Name.ToString(tmp2987);
          }
          tmp2987.Append(')');
          return tmp2987.ToString();
        }
      }


      public partial class outputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputNumber_result()
        {
        }

        public outputNumber_result DeepCopy()
        {
          var tmp2989 = new outputNumber_result();
          if(__isset.success)
          {
            tmp2989.Success = this.Success;
          }
          tmp2989.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2989.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2989.__isset.e = this.__isset.e;
          return tmp2989;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2990 = new TStruct("outputNumber_result");
            await oprot.WriteStructBeginAsync(tmp2990, cancellationToken);
            var tmp2991 = new TField();

            if(this.__isset.success)
            {
              tmp2991.Name = "Success";
              tmp2991.Type = TType.I32;
              tmp2991.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2991, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2991.Name = "E";
                tmp2991.Type = TType.Struct;
                tmp2991.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2991, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2992 = new StringBuilder("outputNumber_result(");
          int tmp2993 = 0;
          if(__isset.success)
          {
            if(0 < tmp2993++) { tmp2992.Append(", "); }
            tmp2992.Append("Success: ");
            Success.ToString(tmp2992);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2993++) { tmp2992.Append(", "); }
            tmp2992.Append("E: ");
            E.ToString(tmp2992);
          }
          tmp2992.Append(')');
          return tmp2992.ToString();
        }
      }


      public partial class outputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputGroupNumber_args()
        {
        }

        public outputGroupNumber_args DeepCopy()
        {
          var tmp2994 = new outputGroupNumber_args();
          if(__isset.c)
          {
            tmp2994.C = this.C;
          }
          tmp2994.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2994.Name = this.Name;
          }
          tmp2994.__isset.name = this.__isset.name;
          return tmp2994;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2995 = new TStruct("outputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp2995, cancellationToken);
            var tmp2996 = new TField();
            if(__isset.c)
            {
              tmp2996.Name = "c";
              tmp2996.Type = TType.I64;
              tmp2996.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2996, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2996.Name = "name";
              tmp2996.Type = TType.String;
              tmp2996.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2996, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2997 = new StringBuilder("outputGroupNumber_args(");
          int tmp2998 = 0;
          if(__isset.c)
          {
            if(0 < tmp2998++) { tmp2997.Append(", "); }
            tmp2997.Append("C: ");
            C.ToString(tmp2997);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2998++) { tmp2997.Append(", "); }
            tmp2997.Append("Name: ");
            Name.ToString(tmp2997);
          }
          tmp2997.Append(')');
          return tmp2997.ToString();
        }
      }


      public partial class outputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupNumber_result()
        {
        }

        public outputGroupNumber_result DeepCopy()
        {
          var tmp2999 = new outputGroupNumber_result();
          if(__isset.success)
          {
            tmp2999.Success = this.Success;
          }
          tmp2999.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2999.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2999.__isset.e = this.__isset.e;
          return tmp2999;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3000 = new TStruct("outputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp3000, cancellationToken);
            var tmp3001 = new TField();

            if(this.__isset.success)
            {
              tmp3001.Name = "Success";
              tmp3001.Type = TType.I32;
              tmp3001.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3001, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3001.Name = "E";
                tmp3001.Type = TType.Struct;
                tmp3001.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3001, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3002 = new StringBuilder("outputGroupNumber_result(");
          int tmp3003 = 0;
          if(__isset.success)
          {
            if(0 < tmp3003++) { tmp3002.Append(", "); }
            tmp3002.Append("Success: ");
            Success.ToString(tmp3002);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3003++) { tmp3002.Append(", "); }
            tmp3002.Append("E: ");
            E.ToString(tmp3002);
          }
          tmp3002.Append(')');
          return tmp3002.ToString();
        }
      }


      public partial class inputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputName_args()
        {
        }

        public inputName_args DeepCopy()
        {
          var tmp3004 = new inputName_args();
          if(__isset.c)
          {
            tmp3004.C = this.C;
          }
          tmp3004.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3004.Num = this.Num;
          }
          tmp3004.__isset.num = this.__isset.num;
          return tmp3004;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3005 = new TStruct("inputName_args");
            await oprot.WriteStructBeginAsync(tmp3005, cancellationToken);
            var tmp3006 = new TField();
            if(__isset.c)
            {
              tmp3006.Name = "c";
              tmp3006.Type = TType.I64;
              tmp3006.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3006, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3006.Name = "num";
              tmp3006.Type = TType.I32;
              tmp3006.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3006, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3007 = new StringBuilder("inputName_args(");
          int tmp3008 = 0;
          if(__isset.c)
          {
            if(0 < tmp3008++) { tmp3007.Append(", "); }
            tmp3007.Append("C: ");
            C.ToString(tmp3007);
          }
          if(__isset.num)
          {
            if(0 < tmp3008++) { tmp3007.Append(", "); }
            tmp3007.Append("Num: ");
            Num.ToString(tmp3007);
          }
          tmp3007.Append(')');
          return tmp3007.ToString();
        }
      }


      public partial class inputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputName_result()
        {
        }

        public inputName_result DeepCopy()
        {
          var tmp3009 = new inputName_result();
          if((Success != null) && __isset.success)
          {
            tmp3009.Success = this.Success;
          }
          tmp3009.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3009.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3009.__isset.e = this.__isset.e;
          return tmp3009;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3010 = new TStruct("inputName_result");
            await oprot.WriteStructBeginAsync(tmp3010, cancellationToken);
            var tmp3011 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3011.Name = "Success";
                tmp3011.Type = TType.String;
                tmp3011.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3011, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3011.Name = "E";
                tmp3011.Type = TType.Struct;
                tmp3011.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3011, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3012 = new StringBuilder("inputName_result(");
          int tmp3013 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3013++) { tmp3012.Append(", "); }
            tmp3012.Append("Success: ");
            Success.ToString(tmp3012);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3013++) { tmp3012.Append(", "); }
            tmp3012.Append("E: ");
            E.ToString(tmp3012);
          }
          tmp3012.Append(')');
          return tmp3012.ToString();
        }
      }


      public partial class outputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputName_args()
        {
        }

        public outputName_args DeepCopy()
        {
          var tmp3014 = new outputName_args();
          if(__isset.c)
          {
            tmp3014.C = this.C;
          }
          tmp3014.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3014.Num = this.Num;
          }
          tmp3014.__isset.num = this.__isset.num;
          return tmp3014;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3015 = new TStruct("outputName_args");
            await oprot.WriteStructBeginAsync(tmp3015, cancellationToken);
            var tmp3016 = new TField();
            if(__isset.c)
            {
              tmp3016.Name = "c";
              tmp3016.Type = TType.I64;
              tmp3016.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3016, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3016.Name = "num";
              tmp3016.Type = TType.I32;
              tmp3016.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3016, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3017 = new StringBuilder("outputName_args(");
          int tmp3018 = 0;
          if(__isset.c)
          {
            if(0 < tmp3018++) { tmp3017.Append(", "); }
            tmp3017.Append("C: ");
            C.ToString(tmp3017);
          }
          if(__isset.num)
          {
            if(0 < tmp3018++) { tmp3017.Append(", "); }
            tmp3017.Append("Num: ");
            Num.ToString(tmp3017);
          }
          tmp3017.Append(')');
          return tmp3017.ToString();
        }
      }


      public partial class outputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputName_result()
        {
        }

        public outputName_result DeepCopy()
        {
          var tmp3019 = new outputName_result();
          if((Success != null) && __isset.success)
          {
            tmp3019.Success = this.Success;
          }
          tmp3019.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3019.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3019.__isset.e = this.__isset.e;
          return tmp3019;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3020 = new TStruct("outputName_result");
            await oprot.WriteStructBeginAsync(tmp3020, cancellationToken);
            var tmp3021 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3021.Name = "Success";
                tmp3021.Type = TType.String;
                tmp3021.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3021, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3021.Name = "E";
                tmp3021.Type = TType.Struct;
                tmp3021.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3021, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3022 = new StringBuilder("outputName_result(");
          int tmp3023 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3023++) { tmp3022.Append(", "); }
            tmp3022.Append("Success: ");
            Success.ToString(tmp3022);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3023++) { tmp3022.Append(", "); }
            tmp3022.Append("E: ");
            E.ToString(tmp3022);
          }
          tmp3022.Append(')');
          return tmp3022.ToString();
        }
      }


      public partial class setInputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setInputName_args()
        {
        }

        public setInputName_args DeepCopy()
        {
          var tmp3024 = new setInputName_args();
          if(__isset.c)
          {
            tmp3024.C = this.C;
          }
          tmp3024.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3024.Num = this.Num;
          }
          tmp3024.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp3024.Name = this.Name;
          }
          tmp3024.__isset.name = this.__isset.name;
          return tmp3024;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3025 = new TStruct("setInputName_args");
            await oprot.WriteStructBeginAsync(tmp3025, cancellationToken);
            var tmp3026 = new TField();
            if(__isset.c)
            {
              tmp3026.Name = "c";
              tmp3026.Type = TType.I64;
              tmp3026.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3026, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3026.Name = "num";
              tmp3026.Type = TType.I32;
              tmp3026.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3026, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3026.Name = "name";
              tmp3026.Type = TType.String;
              tmp3026.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3026, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setInputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3027 = new StringBuilder("setInputName_args(");
          int tmp3028 = 0;
          if(__isset.c)
          {
            if(0 < tmp3028++) { tmp3027.Append(", "); }
            tmp3027.Append("C: ");
            C.ToString(tmp3027);
          }
          if(__isset.num)
          {
            if(0 < tmp3028++) { tmp3027.Append(", "); }
            tmp3027.Append("Num: ");
            Num.ToString(tmp3027);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3028++) { tmp3027.Append(", "); }
            tmp3027.Append("Name: ");
            Name.ToString(tmp3027);
          }
          tmp3027.Append(')');
          return tmp3027.ToString();
        }
      }


      public partial class setOutputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setOutputName_args()
        {
        }

        public setOutputName_args DeepCopy()
        {
          var tmp3029 = new setOutputName_args();
          if(__isset.c)
          {
            tmp3029.C = this.C;
          }
          tmp3029.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3029.Num = this.Num;
          }
          tmp3029.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp3029.Name = this.Name;
          }
          tmp3029.__isset.name = this.__isset.name;
          return tmp3029;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3030 = new TStruct("setOutputName_args");
            await oprot.WriteStructBeginAsync(tmp3030, cancellationToken);
            var tmp3031 = new TField();
            if(__isset.c)
            {
              tmp3031.Name = "c";
              tmp3031.Type = TType.I64;
              tmp3031.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3031, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3031.Name = "num";
              tmp3031.Type = TType.I32;
              tmp3031.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3031, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3031.Name = "name";
              tmp3031.Type = TType.String;
              tmp3031.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3031, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3032 = new StringBuilder("setOutputName_args(");
          int tmp3033 = 0;
          if(__isset.c)
          {
            if(0 < tmp3033++) { tmp3032.Append(", "); }
            tmp3032.Append("C: ");
            C.ToString(tmp3032);
          }
          if(__isset.num)
          {
            if(0 < tmp3033++) { tmp3032.Append(", "); }
            tmp3032.Append("Num: ");
            Num.ToString(tmp3032);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3033++) { tmp3032.Append(", "); }
            tmp3032.Append("Name: ");
            Name.ToString(tmp3032);
          }
          tmp3032.Append(')');
          return tmp3032.ToString();
        }
      }


      public partial class monitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorInput_args()
        {
        }

        public monitorInput_args DeepCopy()
        {
          var tmp3034 = new monitorInput_args();
          if(__isset.c)
          {
            tmp3034.C = this.C;
          }
          tmp3034.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3034.Num = this.Num;
          }
          tmp3034.__isset.num = this.__isset.num;
          return tmp3034;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3035 = new TStruct("monitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3035, cancellationToken);
            var tmp3036 = new TField();
            if(__isset.c)
            {
              tmp3036.Name = "c";
              tmp3036.Type = TType.I64;
              tmp3036.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3036, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3036.Name = "num";
              tmp3036.Type = TType.I32;
              tmp3036.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3036, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3037 = new StringBuilder("monitorInput_args(");
          int tmp3038 = 0;
          if(__isset.c)
          {
            if(0 < tmp3038++) { tmp3037.Append(", "); }
            tmp3037.Append("C: ");
            C.ToString(tmp3037);
          }
          if(__isset.num)
          {
            if(0 < tmp3038++) { tmp3037.Append(", "); }
            tmp3037.Append("Num: ");
            Num.ToString(tmp3037);
          }
          tmp3037.Append(')');
          return tmp3037.ToString();
        }
      }


      public partial class monitorInput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInput_result()
        {
        }

        public monitorInput_result DeepCopy()
        {
          var tmp3039 = new monitorInput_result();
          if((E != null) && __isset.e)
          {
            tmp3039.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3039.__isset.e = this.__isset.e;
          return tmp3039;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3040 = new TStruct("monitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3040, cancellationToken);
            var tmp3041 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3041.Name = "E";
                tmp3041.Type = TType.Struct;
                tmp3041.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3041, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3042 = new StringBuilder("monitorInput_result(");
          int tmp3043 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3043++) { tmp3042.Append(", "); }
            tmp3042.Append("E: ");
            E.ToString(tmp3042);
          }
          tmp3042.Append(')');
          return tmp3042.ToString();
        }
      }


      public partial class monitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorInputGroups_args()
        {
        }

        public monitorInputGroups_args DeepCopy()
        {
          var tmp3044 = new monitorInputGroups_args();
          if(__isset.c)
          {
            tmp3044.C = this.C;
          }
          tmp3044.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3044.GroupNum = this.GroupNum;
          }
          tmp3044.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3044.Count = this.Count;
          }
          tmp3044.__isset.count = this.__isset.count;
          return tmp3044;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3045 = new TStruct("monitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3045, cancellationToken);
            var tmp3046 = new TField();
            if(__isset.c)
            {
              tmp3046.Name = "c";
              tmp3046.Type = TType.I64;
              tmp3046.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3046, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3046.Name = "groupNum";
              tmp3046.Type = TType.I32;
              tmp3046.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3046, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3046.Name = "count";
              tmp3046.Type = TType.I32;
              tmp3046.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3046, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3047 = new StringBuilder("monitorInputGroups_args(");
          int tmp3048 = 0;
          if(__isset.c)
          {
            if(0 < tmp3048++) { tmp3047.Append(", "); }
            tmp3047.Append("C: ");
            C.ToString(tmp3047);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3048++) { tmp3047.Append(", "); }
            tmp3047.Append("GroupNum: ");
            GroupNum.ToString(tmp3047);
          }
          if(__isset.count)
          {
            if(0 < tmp3048++) { tmp3047.Append(", "); }
            tmp3047.Append("Count: ");
            Count.ToString(tmp3047);
          }
          tmp3047.Append(')');
          return tmp3047.ToString();
        }
      }


      public partial class monitorInputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInputGroups_result()
        {
        }

        public monitorInputGroups_result DeepCopy()
        {
          var tmp3049 = new monitorInputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3049.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3049.__isset.e = this.__isset.e;
          return tmp3049;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3050 = new TStruct("monitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3050, cancellationToken);
            var tmp3051 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3051.Name = "E";
                tmp3051.Type = TType.Struct;
                tmp3051.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3051, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3052 = new StringBuilder("monitorInputGroups_result(");
          int tmp3053 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3053++) { tmp3052.Append(", "); }
            tmp3052.Append("E: ");
            E.ToString(tmp3052);
          }
          tmp3052.Append(')');
          return tmp3052.ToString();
        }
      }


      public partial class monitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorOutput_args()
        {
        }

        public monitorOutput_args DeepCopy()
        {
          var tmp3054 = new monitorOutput_args();
          if(__isset.c)
          {
            tmp3054.C = this.C;
          }
          tmp3054.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3054.Num = this.Num;
          }
          tmp3054.__isset.num = this.__isset.num;
          return tmp3054;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3055 = new TStruct("monitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3055, cancellationToken);
            var tmp3056 = new TField();
            if(__isset.c)
            {
              tmp3056.Name = "c";
              tmp3056.Type = TType.I64;
              tmp3056.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3056, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3056.Name = "num";
              tmp3056.Type = TType.I32;
              tmp3056.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3056, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3057 = new StringBuilder("monitorOutput_args(");
          int tmp3058 = 0;
          if(__isset.c)
          {
            if(0 < tmp3058++) { tmp3057.Append(", "); }
            tmp3057.Append("C: ");
            C.ToString(tmp3057);
          }
          if(__isset.num)
          {
            if(0 < tmp3058++) { tmp3057.Append(", "); }
            tmp3057.Append("Num: ");
            Num.ToString(tmp3057);
          }
          tmp3057.Append(')');
          return tmp3057.ToString();
        }
      }


      public partial class monitorOutput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutput_result()
        {
        }

        public monitorOutput_result DeepCopy()
        {
          var tmp3059 = new monitorOutput_result();
          if((E != null) && __isset.e)
          {
            tmp3059.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3059.__isset.e = this.__isset.e;
          return tmp3059;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3060 = new TStruct("monitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3060, cancellationToken);
            var tmp3061 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3061.Name = "E";
                tmp3061.Type = TType.Struct;
                tmp3061.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3061, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3062 = new StringBuilder("monitorOutput_result(");
          int tmp3063 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3063++) { tmp3062.Append(", "); }
            tmp3062.Append("E: ");
            E.ToString(tmp3062);
          }
          tmp3062.Append(')');
          return tmp3062.ToString();
        }
      }


      public partial class monitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorOutputGroups_args()
        {
        }

        public monitorOutputGroups_args DeepCopy()
        {
          var tmp3064 = new monitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3064.C = this.C;
          }
          tmp3064.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3064.GroupNum = this.GroupNum;
          }
          tmp3064.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3064.Count = this.Count;
          }
          tmp3064.__isset.count = this.__isset.count;
          return tmp3064;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3065 = new TStruct("monitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3065, cancellationToken);
            var tmp3066 = new TField();
            if(__isset.c)
            {
              tmp3066.Name = "c";
              tmp3066.Type = TType.I64;
              tmp3066.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3066, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3066.Name = "groupNum";
              tmp3066.Type = TType.I32;
              tmp3066.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3066, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3066.Name = "count";
              tmp3066.Type = TType.I32;
              tmp3066.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3066, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3067 = new StringBuilder("monitorOutputGroups_args(");
          int tmp3068 = 0;
          if(__isset.c)
          {
            if(0 < tmp3068++) { tmp3067.Append(", "); }
            tmp3067.Append("C: ");
            C.ToString(tmp3067);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3068++) { tmp3067.Append(", "); }
            tmp3067.Append("GroupNum: ");
            GroupNum.ToString(tmp3067);
          }
          if(__isset.count)
          {
            if(0 < tmp3068++) { tmp3067.Append(", "); }
            tmp3067.Append("Count: ");
            Count.ToString(tmp3067);
          }
          tmp3067.Append(')');
          return tmp3067.ToString();
        }
      }


      public partial class monitorOutputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutputGroups_result()
        {
        }

        public monitorOutputGroups_result DeepCopy()
        {
          var tmp3069 = new monitorOutputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3069.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3069.__isset.e = this.__isset.e;
          return tmp3069;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3070 = new TStruct("monitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3070, cancellationToken);
            var tmp3071 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3071.Name = "E";
                tmp3071.Type = TType.Struct;
                tmp3071.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3071, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3072 = new StringBuilder("monitorOutputGroups_result(");
          int tmp3073 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3073++) { tmp3072.Append(", "); }
            tmp3072.Append("E: ");
            E.ToString(tmp3072);
          }
          tmp3072.Append(')');
          return tmp3072.ToString();
        }
      }


      public partial class unmonitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorInput_args()
        {
        }

        public unmonitorInput_args DeepCopy()
        {
          var tmp3074 = new unmonitorInput_args();
          if(__isset.c)
          {
            tmp3074.C = this.C;
          }
          tmp3074.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3074.Num = this.Num;
          }
          tmp3074.__isset.num = this.__isset.num;
          return tmp3074;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3075 = new TStruct("unmonitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3075, cancellationToken);
            var tmp3076 = new TField();
            if(__isset.c)
            {
              tmp3076.Name = "c";
              tmp3076.Type = TType.I64;
              tmp3076.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3076, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3076.Name = "num";
              tmp3076.Type = TType.I32;
              tmp3076.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3076, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3077 = new StringBuilder("unmonitorInput_args(");
          int tmp3078 = 0;
          if(__isset.c)
          {
            if(0 < tmp3078++) { tmp3077.Append(", "); }
            tmp3077.Append("C: ");
            C.ToString(tmp3077);
          }
          if(__isset.num)
          {
            if(0 < tmp3078++) { tmp3077.Append(", "); }
            tmp3077.Append("Num: ");
            Num.ToString(tmp3077);
          }
          tmp3077.Append(')');
          return tmp3077.ToString();
        }
      }


      public partial class unmonitorInput_result : TBase
      {

        public unmonitorInput_result()
        {
        }

        public unmonitorInput_result DeepCopy()
        {
          var tmp3079 = new unmonitorInput_result();
          return tmp3079;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3080 = new TStruct("unmonitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3080, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3081 = new StringBuilder("unmonitorInput_result(");
          tmp3081.Append(')');
          return tmp3081.ToString();
        }
      }


      public partial class unmonitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorInputGroups_args()
        {
        }

        public unmonitorInputGroups_args DeepCopy()
        {
          var tmp3083 = new unmonitorInputGroups_args();
          if(__isset.c)
          {
            tmp3083.C = this.C;
          }
          tmp3083.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3083.GroupNum = this.GroupNum;
          }
          tmp3083.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3083.Count = this.Count;
          }
          tmp3083.__isset.count = this.__isset.count;
          return tmp3083;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3084 = new TStruct("unmonitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3084, cancellationToken);
            var tmp3085 = new TField();
            if(__isset.c)
            {
              tmp3085.Name = "c";
              tmp3085.Type = TType.I64;
              tmp3085.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3085, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3085.Name = "groupNum";
              tmp3085.Type = TType.I32;
              tmp3085.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3085, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3085.Name = "count";
              tmp3085.Type = TType.I32;
              tmp3085.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3085, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3086 = new StringBuilder("unmonitorInputGroups_args(");
          int tmp3087 = 0;
          if(__isset.c)
          {
            if(0 < tmp3087++) { tmp3086.Append(", "); }
            tmp3086.Append("C: ");
            C.ToString(tmp3086);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3087++) { tmp3086.Append(", "); }
            tmp3086.Append("GroupNum: ");
            GroupNum.ToString(tmp3086);
          }
          if(__isset.count)
          {
            if(0 < tmp3087++) { tmp3086.Append(", "); }
            tmp3086.Append("Count: ");
            Count.ToString(tmp3086);
          }
          tmp3086.Append(')');
          return tmp3086.ToString();
        }
      }


      public partial class unmonitorInputGroups_result : TBase
      {

        public unmonitorInputGroups_result()
        {
        }

        public unmonitorInputGroups_result DeepCopy()
        {
          var tmp3088 = new unmonitorInputGroups_result();
          return tmp3088;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3089 = new TStruct("unmonitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3089, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3090 = new StringBuilder("unmonitorInputGroups_result(");
          tmp3090.Append(')');
          return tmp3090.ToString();
        }
      }


      public partial class unmonitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorOutput_args()
        {
        }

        public unmonitorOutput_args DeepCopy()
        {
          var tmp3092 = new unmonitorOutput_args();
          if(__isset.c)
          {
            tmp3092.C = this.C;
          }
          tmp3092.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3092.Num = this.Num;
          }
          tmp3092.__isset.num = this.__isset.num;
          return tmp3092;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3093 = new TStruct("unmonitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3093, cancellationToken);
            var tmp3094 = new TField();
            if(__isset.c)
            {
              tmp3094.Name = "c";
              tmp3094.Type = TType.I64;
              tmp3094.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3094, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3094.Name = "num";
              tmp3094.Type = TType.I32;
              tmp3094.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3094, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3095 = new StringBuilder("unmonitorOutput_args(");
          int tmp3096 = 0;
          if(__isset.c)
          {
            if(0 < tmp3096++) { tmp3095.Append(", "); }
            tmp3095.Append("C: ");
            C.ToString(tmp3095);
          }
          if(__isset.num)
          {
            if(0 < tmp3096++) { tmp3095.Append(", "); }
            tmp3095.Append("Num: ");
            Num.ToString(tmp3095);
          }
          tmp3095.Append(')');
          return tmp3095.ToString();
        }
      }


      public partial class unmonitorOutput_result : TBase
      {

        public unmonitorOutput_result()
        {
        }

        public unmonitorOutput_result DeepCopy()
        {
          var tmp3097 = new unmonitorOutput_result();
          return tmp3097;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3098 = new TStruct("unmonitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3098, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3099 = new StringBuilder("unmonitorOutput_result(");
          tmp3099.Append(')');
          return tmp3099.ToString();
        }
      }


      public partial class unmonitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorOutputGroups_args()
        {
        }

        public unmonitorOutputGroups_args DeepCopy()
        {
          var tmp3101 = new unmonitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3101.C = this.C;
          }
          tmp3101.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3101.GroupNum = this.GroupNum;
          }
          tmp3101.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3101.Count = this.Count;
          }
          tmp3101.__isset.count = this.__isset.count;
          return tmp3101;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3102 = new TStruct("unmonitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3102, cancellationToken);
            var tmp3103 = new TField();
            if(__isset.c)
            {
              tmp3103.Name = "c";
              tmp3103.Type = TType.I64;
              tmp3103.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3103, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3103.Name = "groupNum";
              tmp3103.Type = TType.I32;
              tmp3103.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3103, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3103.Name = "count";
              tmp3103.Type = TType.I32;
              tmp3103.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3103, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3104 = new StringBuilder("unmonitorOutputGroups_args(");
          int tmp3105 = 0;
          if(__isset.c)
          {
            if(0 < tmp3105++) { tmp3104.Append(", "); }
            tmp3104.Append("C: ");
            C.ToString(tmp3104);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3105++) { tmp3104.Append(", "); }
            tmp3104.Append("GroupNum: ");
            GroupNum.ToString(tmp3104);
          }
          if(__isset.count)
          {
            if(0 < tmp3105++) { tmp3104.Append(", "); }
            tmp3104.Append("Count: ");
            Count.ToString(tmp3104);
          }
          tmp3104.Append(')');
          return tmp3104.ToString();
        }
      }


      public partial class unmonitorOutputGroups_result : TBase
      {

        public unmonitorOutputGroups_result()
        {
        }

        public unmonitorOutputGroups_result DeepCopy()
        {
          var tmp3106 = new unmonitorOutputGroups_result();
          return tmp3106;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3107 = new TStruct("unmonitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3107, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3108 = new StringBuilder("unmonitorOutputGroups_result(");
          tmp3108.Append(')');
          return tmp3108.ToString();
        }
      }


      public partial class inputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputValue_args()
        {
        }

        public inputValue_args DeepCopy()
        {
          var tmp3110 = new inputValue_args();
          if(__isset.c)
          {
            tmp3110.C = this.C;
          }
          tmp3110.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3110.Num = this.Num;
          }
          tmp3110.__isset.num = this.__isset.num;
          return tmp3110;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3111 = new TStruct("inputValue_args");
            await oprot.WriteStructBeginAsync(tmp3111, cancellationToken);
            var tmp3112 = new TField();
            if(__isset.c)
            {
              tmp3112.Name = "c";
              tmp3112.Type = TType.I64;
              tmp3112.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3112, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3112.Name = "num";
              tmp3112.Type = TType.I32;
              tmp3112.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3112, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3113 = new StringBuilder("inputValue_args(");
          int tmp3114 = 0;
          if(__isset.c)
          {
            if(0 < tmp3114++) { tmp3113.Append(", "); }
            tmp3113.Append("C: ");
            C.ToString(tmp3113);
          }
          if(__isset.num)
          {
            if(0 < tmp3114++) { tmp3113.Append(", "); }
            tmp3113.Append("Num: ");
            Num.ToString(tmp3113);
          }
          tmp3113.Append(')');
          return tmp3113.ToString();
        }
      }


      public partial class inputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputValue_result()
        {
        }

        public inputValue_result DeepCopy()
        {
          var tmp3115 = new inputValue_result();
          if(__isset.success)
          {
            tmp3115.Success = this.Success;
          }
          tmp3115.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3115.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3115.__isset.e = this.__isset.e;
          return tmp3115;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3116 = new TStruct("inputValue_result");
            await oprot.WriteStructBeginAsync(tmp3116, cancellationToken);
            var tmp3117 = new TField();

            if(this.__isset.success)
            {
              tmp3117.Name = "Success";
              tmp3117.Type = TType.Bool;
              tmp3117.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3117, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3117.Name = "E";
                tmp3117.Type = TType.Struct;
                tmp3117.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3117, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3118 = new StringBuilder("inputValue_result(");
          int tmp3119 = 0;
          if(__isset.success)
          {
            if(0 < tmp3119++) { tmp3118.Append(", "); }
            tmp3118.Append("Success: ");
            Success.ToString(tmp3118);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3119++) { tmp3118.Append(", "); }
            tmp3118.Append("E: ");
            E.ToString(tmp3118);
          }
          tmp3118.Append(')');
          return tmp3118.ToString();
        }
      }


      public partial class inputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public inputGroupsValue_args()
        {
        }

        public inputGroupsValue_args DeepCopy()
        {
          var tmp3120 = new inputGroupsValue_args();
          if(__isset.c)
          {
            tmp3120.C = this.C;
          }
          tmp3120.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3120.GroupNum = this.GroupNum;
          }
          tmp3120.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3120.Count = this.Count;
          }
          tmp3120.__isset.count = this.__isset.count;
          return tmp3120;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3121 = new TStruct("inputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3121, cancellationToken);
            var tmp3122 = new TField();
            if(__isset.c)
            {
              tmp3122.Name = "c";
              tmp3122.Type = TType.I64;
              tmp3122.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3122, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3122.Name = "groupNum";
              tmp3122.Type = TType.I32;
              tmp3122.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3122, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3122.Name = "count";
              tmp3122.Type = TType.I32;
              tmp3122.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3122, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3123 = new StringBuilder("inputGroupsValue_args(");
          int tmp3124 = 0;
          if(__isset.c)
          {
            if(0 < tmp3124++) { tmp3123.Append(", "); }
            tmp3123.Append("C: ");
            C.ToString(tmp3123);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3124++) { tmp3123.Append(", "); }
            tmp3123.Append("GroupNum: ");
            GroupNum.ToString(tmp3123);
          }
          if(__isset.count)
          {
            if(0 < tmp3124++) { tmp3123.Append(", "); }
            tmp3123.Append("Count: ");
            Count.ToString(tmp3123);
          }
          tmp3123.Append(')');
          return tmp3123.ToString();
        }
      }


      public partial class inputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupsValue_result()
        {
        }

        public inputGroupsValue_result DeepCopy()
        {
          var tmp3125 = new inputGroupsValue_result();
          if(__isset.success)
          {
            tmp3125.Success = this.Success;
          }
          tmp3125.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3125.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3125.__isset.e = this.__isset.e;
          return tmp3125;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3126 = new TStruct("inputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3126, cancellationToken);
            var tmp3127 = new TField();

            if(this.__isset.success)
            {
              tmp3127.Name = "Success";
              tmp3127.Type = TType.I32;
              tmp3127.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3127, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3127.Name = "E";
                tmp3127.Type = TType.Struct;
                tmp3127.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3127, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3128 = new StringBuilder("inputGroupsValue_result(");
          int tmp3129 = 0;
          if(__isset.success)
          {
            if(0 < tmp3129++) { tmp3128.Append(", "); }
            tmp3128.Append("Success: ");
            Success.ToString(tmp3128);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3129++) { tmp3128.Append(", "); }
            tmp3128.Append("E: ");
            E.ToString(tmp3128);
          }
          tmp3128.Append(')');
          return tmp3128.ToString();
        }
      }


      public partial class outputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputValue_args()
        {
        }

        public outputValue_args DeepCopy()
        {
          var tmp3130 = new outputValue_args();
          if(__isset.c)
          {
            tmp3130.C = this.C;
          }
          tmp3130.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3130.Num = this.Num;
          }
          tmp3130.__isset.num = this.__isset.num;
          return tmp3130;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3131 = new TStruct("outputValue_args");
            await oprot.WriteStructBeginAsync(tmp3131, cancellationToken);
            var tmp3132 = new TField();
            if(__isset.c)
            {
              tmp3132.Name = "c";
              tmp3132.Type = TType.I64;
              tmp3132.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3132, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3132.Name = "num";
              tmp3132.Type = TType.I32;
              tmp3132.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3132, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3133 = new StringBuilder("outputValue_args(");
          int tmp3134 = 0;
          if(__isset.c)
          {
            if(0 < tmp3134++) { tmp3133.Append(", "); }
            tmp3133.Append("C: ");
            C.ToString(tmp3133);
          }
          if(__isset.num)
          {
            if(0 < tmp3134++) { tmp3133.Append(", "); }
            tmp3133.Append("Num: ");
            Num.ToString(tmp3133);
          }
          tmp3133.Append(')');
          return tmp3133.ToString();
        }
      }


      public partial class outputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputValue_result()
        {
        }

        public outputValue_result DeepCopy()
        {
          var tmp3135 = new outputValue_result();
          if(__isset.success)
          {
            tmp3135.Success = this.Success;
          }
          tmp3135.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3135.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3135.__isset.e = this.__isset.e;
          return tmp3135;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3136 = new TStruct("outputValue_result");
            await oprot.WriteStructBeginAsync(tmp3136, cancellationToken);
            var tmp3137 = new TField();

            if(this.__isset.success)
            {
              tmp3137.Name = "Success";
              tmp3137.Type = TType.Bool;
              tmp3137.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3137, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3137.Name = "E";
                tmp3137.Type = TType.Struct;
                tmp3137.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3137, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3138 = new StringBuilder("outputValue_result(");
          int tmp3139 = 0;
          if(__isset.success)
          {
            if(0 < tmp3139++) { tmp3138.Append(", "); }
            tmp3138.Append("Success: ");
            Success.ToString(tmp3138);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3139++) { tmp3138.Append(", "); }
            tmp3138.Append("E: ");
            E.ToString(tmp3138);
          }
          tmp3138.Append(')');
          return tmp3138.ToString();
        }
      }


      public partial class outputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public outputGroupsValue_args()
        {
        }

        public outputGroupsValue_args DeepCopy()
        {
          var tmp3140 = new outputGroupsValue_args();
          if(__isset.c)
          {
            tmp3140.C = this.C;
          }
          tmp3140.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3140.GroupNum = this.GroupNum;
          }
          tmp3140.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3140.Count = this.Count;
          }
          tmp3140.__isset.count = this.__isset.count;
          return tmp3140;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3141 = new TStruct("outputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3141, cancellationToken);
            var tmp3142 = new TField();
            if(__isset.c)
            {
              tmp3142.Name = "c";
              tmp3142.Type = TType.I64;
              tmp3142.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3142.Name = "groupNum";
              tmp3142.Type = TType.I32;
              tmp3142.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3142.Name = "count";
              tmp3142.Type = TType.I32;
              tmp3142.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3142, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3143 = new StringBuilder("outputGroupsValue_args(");
          int tmp3144 = 0;
          if(__isset.c)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("C: ");
            C.ToString(tmp3143);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("GroupNum: ");
            GroupNum.ToString(tmp3143);
          }
          if(__isset.count)
          {
            if(0 < tmp3144++) { tmp3143.Append(", "); }
            tmp3143.Append("Count: ");
            Count.ToString(tmp3143);
          }
          tmp3143.Append(')');
          return tmp3143.ToString();
        }
      }


      public partial class outputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupsValue_result()
        {
        }

        public outputGroupsValue_result DeepCopy()
        {
          var tmp3145 = new outputGroupsValue_result();
          if(__isset.success)
          {
            tmp3145.Success = this.Success;
          }
          tmp3145.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3145.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3145.__isset.e = this.__isset.e;
          return tmp3145;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3146 = new TStruct("outputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3146, cancellationToken);
            var tmp3147 = new TField();

            if(this.__isset.success)
            {
              tmp3147.Name = "Success";
              tmp3147.Type = TType.I32;
              tmp3147.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3147, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3147.Name = "E";
                tmp3147.Type = TType.Struct;
                tmp3147.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3147, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3148 = new StringBuilder("outputGroupsValue_result(");
          int tmp3149 = 0;
          if(__isset.success)
          {
            if(0 < tmp3149++) { tmp3148.Append(", "); }
            tmp3148.Append("Success: ");
            Success.ToString(tmp3148);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3149++) { tmp3148.Append(", "); }
            tmp3148.Append("E: ");
            E.ToString(tmp3148);
          }
          tmp3148.Append(')');
          return tmp3148.ToString();
        }
      }


      public partial class setOutput_args : TBase
      {
        private long _c;
        private int _num;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool @value;
        }

        public setOutput_args()
        {
        }

        public setOutput_args DeepCopy()
        {
          var tmp3150 = new setOutput_args();
          if(__isset.c)
          {
            tmp3150.C = this.C;
          }
          tmp3150.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3150.Num = this.Num;
          }
          tmp3150.__isset.num = this.__isset.num;
          if(__isset.@value)
          {
            tmp3150.Value = this.Value;
          }
          tmp3150.__isset.@value = this.__isset.@value;
          return tmp3150;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3151 = new TStruct("setOutput_args");
            await oprot.WriteStructBeginAsync(tmp3151, cancellationToken);
            var tmp3152 = new TField();
            if(__isset.c)
            {
              tmp3152.Name = "c";
              tmp3152.Type = TType.I64;
              tmp3152.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3152, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3152.Name = "num";
              tmp3152.Type = TType.I32;
              tmp3152.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3152, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3152.Name = "value";
              tmp3152.Type = TType.Bool;
              tmp3152.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3152, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3153 = new StringBuilder("setOutput_args(");
          int tmp3154 = 0;
          if(__isset.c)
          {
            if(0 < tmp3154++) { tmp3153.Append(", "); }
            tmp3153.Append("C: ");
            C.ToString(tmp3153);
          }
          if(__isset.num)
          {
            if(0 < tmp3154++) { tmp3153.Append(", "); }
            tmp3153.Append("Num: ");
            Num.ToString(tmp3153);
          }
          if(__isset.@value)
          {
            if(0 < tmp3154++) { tmp3153.Append(", "); }
            tmp3153.Append("Value: ");
            Value.ToString(tmp3153);
          }
          tmp3153.Append(')');
          return tmp3153.ToString();
        }
      }


      public partial class setOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
          public bool @value;
        }

        public setOutputGroups_args()
        {
        }

        public setOutputGroups_args DeepCopy()
        {
          var tmp3155 = new setOutputGroups_args();
          if(__isset.c)
          {
            tmp3155.C = this.C;
          }
          tmp3155.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3155.GroupNum = this.GroupNum;
          }
          tmp3155.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3155.Count = this.Count;
          }
          tmp3155.__isset.count = this.__isset.count;
          if(__isset.@value)
          {
            tmp3155.Value = this.Value;
          }
          tmp3155.__isset.@value = this.__isset.@value;
          return tmp3155;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3156 = new TStruct("setOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3156, cancellationToken);
            var tmp3157 = new TField();
            if(__isset.c)
            {
              tmp3157.Name = "c";
              tmp3157.Type = TType.I64;
              tmp3157.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3157, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3157.Name = "groupNum";
              tmp3157.Type = TType.I32;
              tmp3157.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3157, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3157.Name = "count";
              tmp3157.Type = TType.I32;
              tmp3157.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3157, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3157.Name = "value";
              tmp3157.Type = TType.I32;
              tmp3157.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3157, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3158 = new StringBuilder("setOutputGroups_args(");
          int tmp3159 = 0;
          if(__isset.c)
          {
            if(0 < tmp3159++) { tmp3158.Append(", "); }
            tmp3158.Append("C: ");
            C.ToString(tmp3158);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3159++) { tmp3158.Append(", "); }
            tmp3158.Append("GroupNum: ");
            GroupNum.ToString(tmp3158);
          }
          if(__isset.count)
          {
            if(0 < tmp3159++) { tmp3158.Append(", "); }
            tmp3158.Append("Count: ");
            Count.ToString(tmp3158);
          }
          if(__isset.@value)
          {
            if(0 < tmp3159++) { tmp3158.Append(", "); }
            tmp3158.Append("Value: ");
            Value.ToString(tmp3158);
          }
          tmp3158.Append(')');
          return tmp3158.ToString();
        }
      }


      public partial class inputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputAddress_args()
        {
        }

        public inputAddress_args DeepCopy()
        {
          var tmp3160 = new inputAddress_args();
          if(__isset.c)
          {
            tmp3160.C = this.C;
          }
          tmp3160.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3160.Name = this.Name;
          }
          tmp3160.__isset.name = this.__isset.name;
          return tmp3160;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3161 = new TStruct("inputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3161, cancellationToken);
            var tmp3162 = new TField();
            if(__isset.c)
            {
              tmp3162.Name = "c";
              tmp3162.Type = TType.I64;
              tmp3162.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3162, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3162.Name = "name";
              tmp3162.Type = TType.String;
              tmp3162.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3162, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3163 = new StringBuilder("inputAddress_args(");
          int tmp3164 = 0;
          if(__isset.c)
          {
            if(0 < tmp3164++) { tmp3163.Append(", "); }
            tmp3163.Append("C: ");
            C.ToString(tmp3163);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3164++) { tmp3163.Append(", "); }
            tmp3163.Append("Name: ");
            Name.ToString(tmp3163);
          }
          tmp3163.Append(')');
          return tmp3163.ToString();
        }
      }


      public partial class inputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddress_result()
        {
        }

        public inputAddress_result DeepCopy()
        {
          var tmp3165 = new inputAddress_result();
          if(__isset.success)
          {
            tmp3165.Success = this.Success;
          }
          tmp3165.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3165.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3165.__isset.e = this.__isset.e;
          return tmp3165;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3166 = new TStruct("inputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3166, cancellationToken);
            var tmp3167 = new TField();

            if(this.__isset.success)
            {
              tmp3167.Name = "Success";
              tmp3167.Type = TType.I32;
              tmp3167.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3167, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3167.Name = "E";
                tmp3167.Type = TType.Struct;
                tmp3167.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3167, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3168 = new StringBuilder("inputAddress_result(");
          int tmp3169 = 0;
          if(__isset.success)
          {
            if(0 < tmp3169++) { tmp3168.Append(", "); }
            tmp3168.Append("Success: ");
            Success.ToString(tmp3168);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3169++) { tmp3168.Append(", "); }
            tmp3168.Append("E: ");
            E.ToString(tmp3168);
          }
          tmp3168.Append(')');
          return tmp3168.ToString();
        }
      }


      public partial class inputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputAddressByNumber_args()
        {
        }

        public inputAddressByNumber_args DeepCopy()
        {
          var tmp3170 = new inputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3170.C = this.C;
          }
          tmp3170.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3170.Num = this.Num;
          }
          tmp3170.__isset.num = this.__isset.num;
          return tmp3170;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3171 = new TStruct("inputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3171, cancellationToken);
            var tmp3172 = new TField();
            if(__isset.c)
            {
              tmp3172.Name = "c";
              tmp3172.Type = TType.I64;
              tmp3172.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3172, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3172.Name = "num";
              tmp3172.Type = TType.I32;
              tmp3172.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3172, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3173 = new StringBuilder("inputAddressByNumber_args(");
          int tmp3174 = 0;
          if(__isset.c)
          {
            if(0 < tmp3174++) { tmp3173.Append(", "); }
            tmp3173.Append("C: ");
            C.ToString(tmp3173);
          }
          if(__isset.num)
          {
            if(0 < tmp3174++) { tmp3173.Append(", "); }
            tmp3173.Append("Num: ");
            Num.ToString(tmp3173);
          }
          tmp3173.Append(')');
          return tmp3173.ToString();
        }
      }


      public partial class inputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressByNumber_result()
        {
        }

        public inputAddressByNumber_result DeepCopy()
        {
          var tmp3175 = new inputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3175.Success = this.Success;
          }
          tmp3175.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3175.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3175.__isset.e = this.__isset.e;
          return tmp3175;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3176 = new TStruct("inputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3176, cancellationToken);
            var tmp3177 = new TField();

            if(this.__isset.success)
            {
              tmp3177.Name = "Success";
              tmp3177.Type = TType.I32;
              tmp3177.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3177, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3177.Name = "E";
                tmp3177.Type = TType.Struct;
                tmp3177.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3177, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3178 = new StringBuilder("inputAddressByNumber_result(");
          int tmp3179 = 0;
          if(__isset.success)
          {
            if(0 < tmp3179++) { tmp3178.Append(", "); }
            tmp3178.Append("Success: ");
            Success.ToString(tmp3178);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3179++) { tmp3178.Append(", "); }
            tmp3178.Append("E: ");
            E.ToString(tmp3178);
          }
          tmp3178.Append(')');
          return tmp3178.ToString();
        }
      }


      public partial class outputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputAddress_args()
        {
        }

        public outputAddress_args DeepCopy()
        {
          var tmp3180 = new outputAddress_args();
          if(__isset.c)
          {
            tmp3180.C = this.C;
          }
          tmp3180.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3180.Name = this.Name;
          }
          tmp3180.__isset.name = this.__isset.name;
          return tmp3180;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3181 = new TStruct("outputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3181, cancellationToken);
            var tmp3182 = new TField();
            if(__isset.c)
            {
              tmp3182.Name = "c";
              tmp3182.Type = TType.I64;
              tmp3182.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3182, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3182.Name = "name";
              tmp3182.Type = TType.String;
              tmp3182.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3182, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3183 = new StringBuilder("outputAddress_args(");
          int tmp3184 = 0;
          if(__isset.c)
          {
            if(0 < tmp3184++) { tmp3183.Append(", "); }
            tmp3183.Append("C: ");
            C.ToString(tmp3183);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3184++) { tmp3183.Append(", "); }
            tmp3183.Append("Name: ");
            Name.ToString(tmp3183);
          }
          tmp3183.Append(')');
          return tmp3183.ToString();
        }
      }


      public partial class outputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddress_result()
        {
        }

        public outputAddress_result DeepCopy()
        {
          var tmp3185 = new outputAddress_result();
          if(__isset.success)
          {
            tmp3185.Success = this.Success;
          }
          tmp3185.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3185.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3185.__isset.e = this.__isset.e;
          return tmp3185;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3186 = new TStruct("outputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3186, cancellationToken);
            var tmp3187 = new TField();

            if(this.__isset.success)
            {
              tmp3187.Name = "Success";
              tmp3187.Type = TType.I32;
              tmp3187.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3187, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3187.Name = "E";
                tmp3187.Type = TType.Struct;
                tmp3187.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3187, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3188 = new StringBuilder("outputAddress_result(");
          int tmp3189 = 0;
          if(__isset.success)
          {
            if(0 < tmp3189++) { tmp3188.Append(", "); }
            tmp3188.Append("Success: ");
            Success.ToString(tmp3188);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3189++) { tmp3188.Append(", "); }
            tmp3188.Append("E: ");
            E.ToString(tmp3188);
          }
          tmp3188.Append(')');
          return tmp3188.ToString();
        }
      }


      public partial class outputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputAddressByNumber_args()
        {
        }

        public outputAddressByNumber_args DeepCopy()
        {
          var tmp3190 = new outputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3190.C = this.C;
          }
          tmp3190.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3190.Num = this.Num;
          }
          tmp3190.__isset.num = this.__isset.num;
          return tmp3190;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3191 = new TStruct("outputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3191, cancellationToken);
            var tmp3192 = new TField();
            if(__isset.c)
            {
              tmp3192.Name = "c";
              tmp3192.Type = TType.I64;
              tmp3192.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3192, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3192.Name = "num";
              tmp3192.Type = TType.I32;
              tmp3192.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3192, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3193 = new StringBuilder("outputAddressByNumber_args(");
          int tmp3194 = 0;
          if(__isset.c)
          {
            if(0 < tmp3194++) { tmp3193.Append(", "); }
            tmp3193.Append("C: ");
            C.ToString(tmp3193);
          }
          if(__isset.num)
          {
            if(0 < tmp3194++) { tmp3193.Append(", "); }
            tmp3193.Append("Num: ");
            Num.ToString(tmp3193);
          }
          tmp3193.Append(')');
          return tmp3193.ToString();
        }
      }


      public partial class outputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressByNumber_result()
        {
        }

        public outputAddressByNumber_result DeepCopy()
        {
          var tmp3195 = new outputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3195.Success = this.Success;
          }
          tmp3195.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3195.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3195.__isset.e = this.__isset.e;
          return tmp3195;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3196 = new TStruct("outputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3196, cancellationToken);
            var tmp3197 = new TField();

            if(this.__isset.success)
            {
              tmp3197.Name = "Success";
              tmp3197.Type = TType.I32;
              tmp3197.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3197, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3197.Name = "E";
                tmp3197.Type = TType.Struct;
                tmp3197.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3197, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3198 = new StringBuilder("outputAddressByNumber_result(");
          int tmp3199 = 0;
          if(__isset.success)
          {
            if(0 < tmp3199++) { tmp3198.Append(", "); }
            tmp3198.Append("Success: ");
            Success.ToString(tmp3198);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3199++) { tmp3198.Append(", "); }
            tmp3198.Append("E: ");
            E.ToString(tmp3198);
          }
          tmp3198.Append(')');
          return tmp3198.ToString();
        }
      }


      public partial class monitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public monitorIOAddress_args()
        {
        }

        public monitorIOAddress_args DeepCopy()
        {
          var tmp3200 = new monitorIOAddress_args();
          if(__isset.c)
          {
            tmp3200.C = this.C;
          }
          tmp3200.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3200.Address = this.Address;
          }
          tmp3200.__isset.address = this.__isset.address;
          return tmp3200;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3201 = new TStruct("monitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3201, cancellationToken);
            var tmp3202 = new TField();
            if(__isset.c)
            {
              tmp3202.Name = "c";
              tmp3202.Type = TType.I64;
              tmp3202.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3202, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3202.Name = "address";
              tmp3202.Type = TType.I32;
              tmp3202.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3202, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3203 = new StringBuilder("monitorIOAddress_args(");
          int tmp3204 = 0;
          if(__isset.c)
          {
            if(0 < tmp3204++) { tmp3203.Append(", "); }
            tmp3203.Append("C: ");
            C.ToString(tmp3203);
          }
          if(__isset.address)
          {
            if(0 < tmp3204++) { tmp3203.Append(", "); }
            tmp3203.Append("Address: ");
            Address.ToString(tmp3203);
          }
          tmp3203.Append(')');
          return tmp3203.ToString();
        }
      }


      public partial class monitorIOAddress_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorIOAddress_result()
        {
        }

        public monitorIOAddress_result DeepCopy()
        {
          var tmp3205 = new monitorIOAddress_result();
          if((E != null) && __isset.e)
          {
            tmp3205.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3205.__isset.e = this.__isset.e;
          return tmp3205;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3206 = new TStruct("monitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3206, cancellationToken);
            var tmp3207 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3207.Name = "E";
                tmp3207.Type = TType.Struct;
                tmp3207.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3207, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3208 = new StringBuilder("monitorIOAddress_result(");
          int tmp3209 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3209++) { tmp3208.Append(", "); }
            tmp3208.Append("E: ");
            E.ToString(tmp3208);
          }
          tmp3208.Append(')');
          return tmp3208.ToString();
        }
      }


      public partial class unmonitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public unmonitorIOAddress_args()
        {
        }

        public unmonitorIOAddress_args DeepCopy()
        {
          var tmp3210 = new unmonitorIOAddress_args();
          if(__isset.c)
          {
            tmp3210.C = this.C;
          }
          tmp3210.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3210.Address = this.Address;
          }
          tmp3210.__isset.address = this.__isset.address;
          return tmp3210;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3211 = new TStruct("unmonitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3211, cancellationToken);
            var tmp3212 = new TField();
            if(__isset.c)
            {
              tmp3212.Name = "c";
              tmp3212.Type = TType.I64;
              tmp3212.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3212, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3212.Name = "address";
              tmp3212.Type = TType.I32;
              tmp3212.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3212, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3213 = new StringBuilder("unmonitorIOAddress_args(");
          int tmp3214 = 0;
          if(__isset.c)
          {
            if(0 < tmp3214++) { tmp3213.Append(", "); }
            tmp3213.Append("C: ");
            C.ToString(tmp3213);
          }
          if(__isset.address)
          {
            if(0 < tmp3214++) { tmp3213.Append(", "); }
            tmp3213.Append("Address: ");
            Address.ToString(tmp3213);
          }
          tmp3213.Append(')');
          return tmp3213.ToString();
        }
      }


      public partial class unmonitorIOAddress_result : TBase
      {

        public unmonitorIOAddress_result()
        {
        }

        public unmonitorIOAddress_result DeepCopy()
        {
          var tmp3215 = new unmonitorIOAddress_result();
          return tmp3215;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3216 = new TStruct("unmonitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3216, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3217 = new StringBuilder("unmonitorIOAddress_result(");
          tmp3217.Append(')');
          return tmp3217.ToString();
        }
      }


      public partial class inputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public inputAddressValue_args()
        {
        }

        public inputAddressValue_args DeepCopy()
        {
          var tmp3219 = new inputAddressValue_args();
          if(__isset.c)
          {
            tmp3219.C = this.C;
          }
          tmp3219.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3219.Address = this.Address;
          }
          tmp3219.__isset.address = this.__isset.address;
          return tmp3219;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3220 = new TStruct("inputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3220, cancellationToken);
            var tmp3221 = new TField();
            if(__isset.c)
            {
              tmp3221.Name = "c";
              tmp3221.Type = TType.I64;
              tmp3221.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3221, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3221.Name = "address";
              tmp3221.Type = TType.I32;
              tmp3221.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3221, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3222 = new StringBuilder("inputAddressValue_args(");
          int tmp3223 = 0;
          if(__isset.c)
          {
            if(0 < tmp3223++) { tmp3222.Append(", "); }
            tmp3222.Append("C: ");
            C.ToString(tmp3222);
          }
          if(__isset.address)
          {
            if(0 < tmp3223++) { tmp3222.Append(", "); }
            tmp3222.Append("Address: ");
            Address.ToString(tmp3222);
          }
          tmp3222.Append(')');
          return tmp3222.ToString();
        }
      }


      public partial class inputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressValue_result()
        {
        }

        public inputAddressValue_result DeepCopy()
        {
          var tmp3224 = new inputAddressValue_result();
          if(__isset.success)
          {
            tmp3224.Success = this.Success;
          }
          tmp3224.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3224.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3224.__isset.e = this.__isset.e;
          return tmp3224;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3225 = new TStruct("inputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3225, cancellationToken);
            var tmp3226 = new TField();

            if(this.__isset.success)
            {
              tmp3226.Name = "Success";
              tmp3226.Type = TType.Bool;
              tmp3226.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3226, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3226.Name = "E";
                tmp3226.Type = TType.Struct;
                tmp3226.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3226, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3227 = new StringBuilder("inputAddressValue_result(");
          int tmp3228 = 0;
          if(__isset.success)
          {
            if(0 < tmp3228++) { tmp3227.Append(", "); }
            tmp3227.Append("Success: ");
            Success.ToString(tmp3227);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3228++) { tmp3227.Append(", "); }
            tmp3227.Append("E: ");
            E.ToString(tmp3227);
          }
          tmp3227.Append(')');
          return tmp3227.ToString();
        }
      }


      public partial class outputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public outputAddressValue_args()
        {
        }

        public outputAddressValue_args DeepCopy()
        {
          var tmp3229 = new outputAddressValue_args();
          if(__isset.c)
          {
            tmp3229.C = this.C;
          }
          tmp3229.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3229.Address = this.Address;
          }
          tmp3229.__isset.address = this.__isset.address;
          return tmp3229;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3230 = new TStruct("outputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3230, cancellationToken);
            var tmp3231 = new TField();
            if(__isset.c)
            {
              tmp3231.Name = "c";
              tmp3231.Type = TType.I64;
              tmp3231.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3231, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3231.Name = "address";
              tmp3231.Type = TType.I32;
              tmp3231.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3231, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3232 = new StringBuilder("outputAddressValue_args(");
          int tmp3233 = 0;
          if(__isset.c)
          {
            if(0 < tmp3233++) { tmp3232.Append(", "); }
            tmp3232.Append("C: ");
            C.ToString(tmp3232);
          }
          if(__isset.address)
          {
            if(0 < tmp3233++) { tmp3232.Append(", "); }
            tmp3232.Append("Address: ");
            Address.ToString(tmp3232);
          }
          tmp3232.Append(')');
          return tmp3232.ToString();
        }
      }


      public partial class outputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressValue_result()
        {
        }

        public outputAddressValue_result DeepCopy()
        {
          var tmp3234 = new outputAddressValue_result();
          if(__isset.success)
          {
            tmp3234.Success = this.Success;
          }
          tmp3234.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3234.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3234.__isset.e = this.__isset.e;
          return tmp3234;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3235 = new TStruct("outputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3235, cancellationToken);
            var tmp3236 = new TField();

            if(this.__isset.success)
            {
              tmp3236.Name = "Success";
              tmp3236.Type = TType.Bool;
              tmp3236.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3236, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3236.Name = "E";
                tmp3236.Type = TType.Struct;
                tmp3236.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3236, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3237 = new StringBuilder("outputAddressValue_result(");
          int tmp3238 = 0;
          if(__isset.success)
          {
            if(0 < tmp3238++) { tmp3237.Append(", "); }
            tmp3237.Append("Success: ");
            Success.ToString(tmp3237);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3238++) { tmp3237.Append(", "); }
            tmp3237.Append("E: ");
            E.ToString(tmp3237);
          }
          tmp3237.Append(')');
          return tmp3237.ToString();
        }
      }


      public partial class ioAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public ioAddressValue_args()
        {
        }

        public ioAddressValue_args DeepCopy()
        {
          var tmp3239 = new ioAddressValue_args();
          if(__isset.c)
          {
            tmp3239.C = this.C;
          }
          tmp3239.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3239.Address = this.Address;
          }
          tmp3239.__isset.address = this.__isset.address;
          return tmp3239;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3240 = new TStruct("ioAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3240, cancellationToken);
            var tmp3241 = new TField();
            if(__isset.c)
            {
              tmp3241.Name = "c";
              tmp3241.Type = TType.I64;
              tmp3241.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3241, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3241.Name = "address";
              tmp3241.Type = TType.I32;
              tmp3241.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3241, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3242 = new StringBuilder("ioAddressValue_args(");
          int tmp3243 = 0;
          if(__isset.c)
          {
            if(0 < tmp3243++) { tmp3242.Append(", "); }
            tmp3242.Append("C: ");
            C.ToString(tmp3242);
          }
          if(__isset.address)
          {
            if(0 < tmp3243++) { tmp3242.Append(", "); }
            tmp3242.Append("Address: ");
            Address.ToString(tmp3242);
          }
          tmp3242.Append(')');
          return tmp3242.ToString();
        }
      }


      public partial class ioAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public ioAddressValue_result()
        {
        }

        public ioAddressValue_result DeepCopy()
        {
          var tmp3244 = new ioAddressValue_result();
          if(__isset.success)
          {
            tmp3244.Success = this.Success;
          }
          tmp3244.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3244.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3244.__isset.e = this.__isset.e;
          return tmp3244;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3245 = new TStruct("ioAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3245, cancellationToken);
            var tmp3246 = new TField();

            if(this.__isset.success)
            {
              tmp3246.Name = "Success";
              tmp3246.Type = TType.Bool;
              tmp3246.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3246, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3246.Name = "E";
                tmp3246.Type = TType.Struct;
                tmp3246.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3246, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3247 = new StringBuilder("ioAddressValue_result(");
          int tmp3248 = 0;
          if(__isset.success)
          {
            if(0 < tmp3248++) { tmp3247.Append(", "); }
            tmp3247.Append("Success: ");
            Success.ToString(tmp3247);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3248++) { tmp3247.Append(", "); }
            tmp3247.Append("E: ");
            E.ToString(tmp3247);
          }
          tmp3247.Append(')');
          return tmp3247.ToString();
        }
      }


      public partial class setOutputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setOutputAddress_args()
        {
        }

        public setOutputAddress_args DeepCopy()
        {
          var tmp3249 = new setOutputAddress_args();
          if(__isset.c)
          {
            tmp3249.C = this.C;
          }
          tmp3249.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3249.Address = this.Address;
          }
          tmp3249.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3249.Value = this.Value;
          }
          tmp3249.__isset.@value = this.__isset.@value;
          return tmp3249;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3250 = new TStruct("setOutputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3250, cancellationToken);
            var tmp3251 = new TField();
            if(__isset.c)
            {
              tmp3251.Name = "c";
              tmp3251.Type = TType.I64;
              tmp3251.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3251, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3251.Name = "address";
              tmp3251.Type = TType.I32;
              tmp3251.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3251, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3251.Name = "value";
              tmp3251.Type = TType.Bool;
              tmp3251.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3251, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3252 = new StringBuilder("setOutputAddress_args(");
          int tmp3253 = 0;
          if(__isset.c)
          {
            if(0 < tmp3253++) { tmp3252.Append(", "); }
            tmp3252.Append("C: ");
            C.ToString(tmp3252);
          }
          if(__isset.address)
          {
            if(0 < tmp3253++) { tmp3252.Append(", "); }
            tmp3252.Append("Address: ");
            Address.ToString(tmp3252);
          }
          if(__isset.@value)
          {
            if(0 < tmp3253++) { tmp3252.Append(", "); }
            tmp3252.Append("Value: ");
            Value.ToString(tmp3252);
          }
          tmp3252.Append(')');
          return tmp3252.ToString();
        }
      }


      public partial class setNetworkInputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setNetworkInputAddress_args()
        {
        }

        public setNetworkInputAddress_args DeepCopy()
        {
          var tmp3254 = new setNetworkInputAddress_args();
          if(__isset.c)
          {
            tmp3254.C = this.C;
          }
          tmp3254.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3254.Address = this.Address;
          }
          tmp3254.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3254.Value = this.Value;
          }
          tmp3254.__isset.@value = this.__isset.@value;
          return tmp3254;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3255 = new TStruct("setNetworkInputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3255, cancellationToken);
            var tmp3256 = new TField();
            if(__isset.c)
            {
              tmp3256.Name = "c";
              tmp3256.Type = TType.I64;
              tmp3256.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3256, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3256.Name = "address";
              tmp3256.Type = TType.I32;
              tmp3256.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3256, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3256.Name = "value";
              tmp3256.Type = TType.Bool;
              tmp3256.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3256, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNetworkInputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3257 = new StringBuilder("setNetworkInputAddress_args(");
          int tmp3258 = 0;
          if(__isset.c)
          {
            if(0 < tmp3258++) { tmp3257.Append(", "); }
            tmp3257.Append("C: ");
            C.ToString(tmp3257);
          }
          if(__isset.address)
          {
            if(0 < tmp3258++) { tmp3257.Append(", "); }
            tmp3257.Append("Address: ");
            Address.ToString(tmp3257);
          }
          if(__isset.@value)
          {
            if(0 < tmp3258++) { tmp3257.Append(", "); }
            tmp3257.Append("Value: ");
            Value.ToString(tmp3257);
          }
          tmp3257.Append(')');
          return tmp3257.ToString();
        }
      }


      public partial class mRegisterValue_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public mRegisterValue_args()
        {
        }

        public mRegisterValue_args DeepCopy()
        {
          var tmp3259 = new mRegisterValue_args();
          if(__isset.c)
          {
            tmp3259.C = this.C;
          }
          tmp3259.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3259.Index = this.Index;
          }
          tmp3259.__isset.index = this.__isset.index;
          return tmp3259;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3260 = new TStruct("mRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3260, cancellationToken);
            var tmp3261 = new TField();
            if(__isset.c)
            {
              tmp3261.Name = "c";
              tmp3261.Type = TType.I64;
              tmp3261.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3261, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3261.Name = "index";
              tmp3261.Type = TType.I32;
              tmp3261.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3261, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3262 = new StringBuilder("mRegisterValue_args(");
          int tmp3263 = 0;
          if(__isset.c)
          {
            if(0 < tmp3263++) { tmp3262.Append(", "); }
            tmp3262.Append("C: ");
            C.ToString(tmp3262);
          }
          if(__isset.index)
          {
            if(0 < tmp3263++) { tmp3262.Append(", "); }
            tmp3262.Append("Index: ");
            Index.ToString(tmp3262);
          }
          tmp3262.Append(')');
          return tmp3262.ToString();
        }
      }


      public partial class mRegisterValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public mRegisterValue_result()
        {
        }

        public mRegisterValue_result DeepCopy()
        {
          var tmp3264 = new mRegisterValue_result();
          if(__isset.success)
          {
            tmp3264.Success = this.Success;
          }
          tmp3264.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3264.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3264.__isset.e = this.__isset.e;
          return tmp3264;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3265 = new TStruct("mRegisterValue_result");
            await oprot.WriteStructBeginAsync(tmp3265, cancellationToken);
            var tmp3266 = new TField();

            if(this.__isset.success)
            {
              tmp3266.Name = "Success";
              tmp3266.Type = TType.I32;
              tmp3266.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3266, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3266.Name = "E";
                tmp3266.Type = TType.Struct;
                tmp3266.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3266, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3267 = new StringBuilder("mRegisterValue_result(");
          int tmp3268 = 0;
          if(__isset.success)
          {
            if(0 < tmp3268++) { tmp3267.Append(", "); }
            tmp3267.Append("Success: ");
            Success.ToString(tmp3267);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3268++) { tmp3267.Append(", "); }
            tmp3267.Append("E: ");
            E.ToString(tmp3267);
          }
          tmp3267.Append(')');
          return tmp3267.ToString();
        }
      }


      public partial class setMRegisterValue_args : TBase
      {
        private long _c;
        private int _index;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool @value;
        }

        public setMRegisterValue_args()
        {
        }

        public setMRegisterValue_args DeepCopy()
        {
          var tmp3269 = new setMRegisterValue_args();
          if(__isset.c)
          {
            tmp3269.C = this.C;
          }
          tmp3269.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3269.Index = this.Index;
          }
          tmp3269.__isset.index = this.__isset.index;
          if(__isset.@value)
          {
            tmp3269.Value = this.Value;
          }
          tmp3269.__isset.@value = this.__isset.@value;
          return tmp3269;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3270 = new TStruct("setMRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3270, cancellationToken);
            var tmp3271 = new TField();
            if(__isset.c)
            {
              tmp3271.Name = "c";
              tmp3271.Type = TType.I64;
              tmp3271.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3271, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3271.Name = "index";
              tmp3271.Type = TType.I32;
              tmp3271.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3271, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3271.Name = "value";
              tmp3271.Type = TType.I32;
              tmp3271.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3271, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setMRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3272 = new StringBuilder("setMRegisterValue_args(");
          int tmp3273 = 0;
          if(__isset.c)
          {
            if(0 < tmp3273++) { tmp3272.Append(", "); }
            tmp3272.Append("C: ");
            C.ToString(tmp3272);
          }
          if(__isset.index)
          {
            if(0 < tmp3273++) { tmp3272.Append(", "); }
            tmp3272.Append("Index: ");
            Index.ToString(tmp3272);
          }
          if(__isset.@value)
          {
            if(0 < tmp3273++) { tmp3272.Append(", "); }
            tmp3272.Append("Value: ");
            Value.ToString(tmp3272);
          }
          tmp3272.Append(')');
          return tmp3272.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_args : TBase
      {
        private long _c;
        private string _busType;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string BusType
        {
          get
          {
            return _busType;
          }
          set
          {
            __isset.busType = true;
            this._busType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool busType;
        }

        public fieldBusStatusInputGroup_args()
        {
        }

        public fieldBusStatusInputGroup_args DeepCopy()
        {
          var tmp3274 = new fieldBusStatusInputGroup_args();
          if(__isset.c)
          {
            tmp3274.C = this.C;
          }
          tmp3274.__isset.c = this.__isset.c;
          if((BusType != null) && __isset.busType)
          {
            tmp3274.BusType = this.BusType;
          }
          tmp3274.__isset.busType = this.__isset.busType;
          return tmp3274;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    BusType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3275 = new TStruct("fieldBusStatusInputGroup_args");
            await oprot.WriteStructBeginAsync(tmp3275, cancellationToken);
            var tmp3276 = new TField();
            if(__isset.c)
            {
              tmp3276.Name = "c";
              tmp3276.Type = TType.I64;
              tmp3276.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3276, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((BusType != null) && __isset.busType)
            {
              tmp3276.Name = "busType";
              tmp3276.Type = TType.String;
              tmp3276.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3276, cancellationToken);
              await oprot.WriteStringAsync(BusType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.busType == other.__isset.busType) && ((!__isset.busType) || (global::System.Object.Equals(BusType, other.BusType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((BusType != null) && __isset.busType)
            {
              hashcode = (hashcode * 397) + BusType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3277 = new StringBuilder("fieldBusStatusInputGroup_args(");
          int tmp3278 = 0;
          if(__isset.c)
          {
            if(0 < tmp3278++) { tmp3277.Append(", "); }
            tmp3277.Append("C: ");
            C.ToString(tmp3277);
          }
          if((BusType != null) && __isset.busType)
          {
            if(0 < tmp3278++) { tmp3277.Append(", "); }
            tmp3277.Append("BusType: ");
            BusType.ToString(tmp3277);
          }
          tmp3277.Append(')');
          return tmp3277.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public fieldBusStatusInputGroup_result()
        {
        }

        public fieldBusStatusInputGroup_result DeepCopy()
        {
          var tmp3279 = new fieldBusStatusInputGroup_result();
          if(__isset.success)
          {
            tmp3279.Success = this.Success;
          }
          tmp3279.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3279.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3279.__isset.e = this.__isset.e;
          return tmp3279;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3280 = new TStruct("fieldBusStatusInputGroup_result");
            await oprot.WriteStructBeginAsync(tmp3280, cancellationToken);
            var tmp3281 = new TField();

            if(this.__isset.success)
            {
              tmp3281.Name = "Success";
              tmp3281.Type = TType.I32;
              tmp3281.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3281, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3281.Name = "E";
                tmp3281.Type = TType.Struct;
                tmp3281.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3281, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3282 = new StringBuilder("fieldBusStatusInputGroup_result(");
          int tmp3283 = 0;
          if(__isset.success)
          {
            if(0 < tmp3283++) { tmp3282.Append(", "); }
            tmp3282.Append("Success: ");
            Success.ToString(tmp3282);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3283++) { tmp3282.Append(", "); }
            tmp3282.Append("E: ");
            E.ToString(tmp3282);
          }
          tmp3282.Append(')');
          return tmp3282.ToString();
        }
      }


      public partial class controlGroups_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public controlGroups_args()
        {
        }

        public controlGroups_args DeepCopy()
        {
          var tmp3284 = new controlGroups_args();
          if(__isset.c)
          {
            tmp3284.C = this.C;
          }
          tmp3284.__isset.c = this.__isset.c;
          return tmp3284;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3285 = new TStruct("controlGroups_args");
            await oprot.WriteStructBeginAsync(tmp3285, cancellationToken);
            var tmp3286 = new TField();
            if(__isset.c)
            {
              tmp3286.Name = "c";
              tmp3286.Type = TType.I64;
              tmp3286.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3286, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3287 = new StringBuilder("controlGroups_args(");
          int tmp3288 = 0;
          if(__isset.c)
          {
            if(0 < tmp3288++) { tmp3287.Append(", "); }
            tmp3287.Append("C: ");
            C.ToString(tmp3287);
          }
          tmp3287.Append(')');
          return tmp3287.ToString();
        }
      }


      public partial class controlGroups_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControlGroup> _success;

        public List<global::Yaskawa.Ext.API.ControlGroup> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public controlGroups_result()
        {
        }

        public controlGroups_result DeepCopy()
        {
          var tmp3289 = new controlGroups_result();
          if((Success != null) && __isset.success)
          {
            tmp3289.Success = this.Success.DeepCopy();
          }
          tmp3289.__isset.success = this.__isset.success;
          return tmp3289;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3290 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControlGroup>(_list3290.Count);
                      for(int _i3291 = 0; _i3291 < _list3290.Count; ++_i3291)
                      {
                        global::Yaskawa.Ext.API.ControlGroup _elem3292;
                        _elem3292 = new global::Yaskawa.Ext.API.ControlGroup();
                        await _elem3292.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem3292);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3293 = new TStruct("controlGroups_result");
            await oprot.WriteStructBeginAsync(tmp3293, cancellationToken);
            var tmp3294 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3294.Name = "Success";
                tmp3294.Type = TType.List;
                tmp3294.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3294, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControlGroup _iter3295 in Success)
                {
                  await _iter3295.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3296 = new StringBuilder("controlGroups_result(");
          int tmp3297 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3297++) { tmp3296.Append(", "); }
            tmp3296.Append("Success: ");
            Success.ToString(tmp3296);
          }
          tmp3296.Append(')');
          return tmp3296.ToString();
        }
      }


      public partial class currentControlGroup_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentControlGroup_args()
        {
        }

        public currentControlGroup_args DeepCopy()
        {
          var tmp3298 = new currentControlGroup_args();
          if(__isset.c)
          {
            tmp3298.C = this.C;
          }
          tmp3298.__isset.c = this.__isset.c;
          return tmp3298;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3299 = new TStruct("currentControlGroup_args");
            await oprot.WriteStructBeginAsync(tmp3299, cancellationToken);
            var tmp3300 = new TField();
            if(__isset.c)
            {
              tmp3300.Name = "c";
              tmp3300.Type = TType.I64;
              tmp3300.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3300, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3301 = new StringBuilder("currentControlGroup_args(");
          int tmp3302 = 0;
          if(__isset.c)
          {
            if(0 < tmp3302++) { tmp3301.Append(", "); }
            tmp3301.Append("C: ");
            C.ToString(tmp3301);
          }
          tmp3301.Append(')');
          return tmp3301.ToString();
        }
      }


      public partial class currentControlGroup_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentControlGroup_result()
        {
        }

        public currentControlGroup_result DeepCopy()
        {
          var tmp3303 = new currentControlGroup_result();
          if(__isset.success)
          {
            tmp3303.Success = this.Success;
          }
          tmp3303.__isset.success = this.__isset.success;
          return tmp3303;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3304 = new TStruct("currentControlGroup_result");
            await oprot.WriteStructBeginAsync(tmp3304, cancellationToken);
            var tmp3305 = new TField();

            if(this.__isset.success)
            {
              tmp3305.Name = "Success";
              tmp3305.Type = TType.Byte;
              tmp3305.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3305, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3306 = new StringBuilder("currentControlGroup_result(");
          int tmp3307 = 0;
          if(__isset.success)
          {
            if(0 < tmp3307++) { tmp3306.Append(", "); }
            tmp3306.Append("Success: ");
            Success.ToString(tmp3306);
          }
          tmp3306.Append(')');
          return tmp3306.ToString();
        }
      }


      public partial class robotCount_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public robotCount_args()
        {
        }

        public robotCount_args DeepCopy()
        {
          var tmp3308 = new robotCount_args();
          if(__isset.c)
          {
            tmp3308.C = this.C;
          }
          tmp3308.__isset.c = this.__isset.c;
          return tmp3308;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3309 = new TStruct("robotCount_args");
            await oprot.WriteStructBeginAsync(tmp3309, cancellationToken);
            var tmp3310 = new TField();
            if(__isset.c)
            {
              tmp3310.Name = "c";
              tmp3310.Type = TType.I64;
              tmp3310.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3310, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3311 = new StringBuilder("robotCount_args(");
          int tmp3312 = 0;
          if(__isset.c)
          {
            if(0 < tmp3312++) { tmp3311.Append(", "); }
            tmp3311.Append("C: ");
            C.ToString(tmp3311);
          }
          tmp3311.Append(')');
          return tmp3311.ToString();
        }
      }


      public partial class robotCount_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public robotCount_result()
        {
        }

        public robotCount_result DeepCopy()
        {
          var tmp3313 = new robotCount_result();
          if(__isset.success)
          {
            tmp3313.Success = this.Success;
          }
          tmp3313.__isset.success = this.__isset.success;
          return tmp3313;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3314 = new TStruct("robotCount_result");
            await oprot.WriteStructBeginAsync(tmp3314, cancellationToken);
            var tmp3315 = new TField();

            if(this.__isset.success)
            {
              tmp3315.Name = "Success";
              tmp3315.Type = TType.Byte;
              tmp3315.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3315, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3316 = new StringBuilder("robotCount_result(");
          int tmp3317 = 0;
          if(__isset.success)
          {
            if(0 < tmp3317++) { tmp3316.Append(", "); }
            tmp3316.Append("Success: ");
            Success.ToString(tmp3316);
          }
          tmp3316.Append(')');
          return tmp3316.ToString();
        }
      }


      public partial class currentRobot_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentRobot_args()
        {
        }

        public currentRobot_args DeepCopy()
        {
          var tmp3318 = new currentRobot_args();
          if(__isset.c)
          {
            tmp3318.C = this.C;
          }
          tmp3318.__isset.c = this.__isset.c;
          return tmp3318;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3319 = new TStruct("currentRobot_args");
            await oprot.WriteStructBeginAsync(tmp3319, cancellationToken);
            var tmp3320 = new TField();
            if(__isset.c)
            {
              tmp3320.Name = "c";
              tmp3320.Type = TType.I64;
              tmp3320.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3320, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3321 = new StringBuilder("currentRobot_args(");
          int tmp3322 = 0;
          if(__isset.c)
          {
            if(0 < tmp3322++) { tmp3321.Append(", "); }
            tmp3321.Append("C: ");
            C.ToString(tmp3321);
          }
          tmp3321.Append(')');
          return tmp3321.ToString();
        }
      }


      public partial class currentRobot_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentRobot_result()
        {
        }

        public currentRobot_result DeepCopy()
        {
          var tmp3323 = new currentRobot_result();
          if(__isset.success)
          {
            tmp3323.Success = this.Success;
          }
          tmp3323.__isset.success = this.__isset.success;
          return tmp3323;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3324 = new TStruct("currentRobot_result");
            await oprot.WriteStructBeginAsync(tmp3324, cancellationToken);
            var tmp3325 = new TField();

            if(this.__isset.success)
            {
              tmp3325.Name = "Success";
              tmp3325.Type = TType.I32;
              tmp3325.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3325, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3326 = new StringBuilder("currentRobot_result(");
          int tmp3327 = 0;
          if(__isset.success)
          {
            if(0 < tmp3327++) { tmp3326.Append(", "); }
            tmp3326.Append("Success: ");
            Success.ToString(tmp3326);
          }
          tmp3326.Append(')');
          return tmp3326.ToString();
        }
      }


      public partial class variable_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variable_args()
        {
        }

        public variable_args DeepCopy()
        {
          var tmp3328 = new variable_args();
          if(__isset.c)
          {
            tmp3328.C = this.C;
          }
          tmp3328.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3328.Name = this.Name;
          }
          tmp3328.__isset.name = this.__isset.name;
          return tmp3328;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3329 = new TStruct("variable_args");
            await oprot.WriteStructBeginAsync(tmp3329, cancellationToken);
            var tmp3330 = new TField();
            if(__isset.c)
            {
              tmp3330.Name = "c";
              tmp3330.Type = TType.I64;
              tmp3330.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3330, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3330.Name = "name";
              tmp3330.Type = TType.String;
              tmp3330.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3330, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3331 = new StringBuilder("variable_args(");
          int tmp3332 = 0;
          if(__isset.c)
          {
            if(0 < tmp3332++) { tmp3331.Append(", "); }
            tmp3331.Append("C: ");
            C.ToString(tmp3331);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3332++) { tmp3331.Append(", "); }
            tmp3331.Append("Name: ");
            Name.ToString(tmp3331);
          }
          tmp3331.Append(')');
          return tmp3331.ToString();
        }
      }


      public partial class variable_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variable_result()
        {
        }

        public variable_result DeepCopy()
        {
          var tmp3333 = new variable_result();
          if((Success != null) && __isset.success)
          {
            tmp3333.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3333.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3333.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3333.__isset.e = this.__isset.e;
          return tmp3333;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3334 = new TStruct("variable_result");
            await oprot.WriteStructBeginAsync(tmp3334, cancellationToken);
            var tmp3335 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3335.Name = "Success";
                tmp3335.Type = TType.Struct;
                tmp3335.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3335, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3335.Name = "E";
                tmp3335.Type = TType.Struct;
                tmp3335.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3335, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3336 = new StringBuilder("variable_result(");
          int tmp3337 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3337++) { tmp3336.Append(", "); }
            tmp3336.Append("Success: ");
            Success.ToString(tmp3336);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3337++) { tmp3336.Append(", "); }
            tmp3336.Append("E: ");
            E.ToString(tmp3336);
          }
          tmp3336.Append(')');
          return tmp3336.ToString();
        }
      }


      public partial class variableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public variableByAddr_args()
        {
        }

        public variableByAddr_args DeepCopy()
        {
          var tmp3338 = new variableByAddr_args();
          if(__isset.c)
          {
            tmp3338.C = this.C;
          }
          tmp3338.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3338.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3338.__isset.addr = this.__isset.addr;
          return tmp3338;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3339 = new TStruct("variableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3339, cancellationToken);
            var tmp3340 = new TField();
            if(__isset.c)
            {
              tmp3340.Name = "c";
              tmp3340.Type = TType.I64;
              tmp3340.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3340, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3340.Name = "addr";
              tmp3340.Type = TType.Struct;
              tmp3340.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3340, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3341 = new StringBuilder("variableByAddr_args(");
          int tmp3342 = 0;
          if(__isset.c)
          {
            if(0 < tmp3342++) { tmp3341.Append(", "); }
            tmp3341.Append("C: ");
            C.ToString(tmp3341);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3342++) { tmp3341.Append(", "); }
            tmp3341.Append("Addr: ");
            Addr.ToString(tmp3341);
          }
          tmp3341.Append(')');
          return tmp3341.ToString();
        }
      }


      public partial class variableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableByAddr_result()
        {
        }

        public variableByAddr_result DeepCopy()
        {
          var tmp3343 = new variableByAddr_result();
          if((Success != null) && __isset.success)
          {
            tmp3343.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3343.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3343.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3343.__isset.e = this.__isset.e;
          return tmp3343;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3344 = new TStruct("variableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3344, cancellationToken);
            var tmp3345 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3345.Name = "Success";
                tmp3345.Type = TType.Struct;
                tmp3345.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3345, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3345.Name = "E";
                tmp3345.Type = TType.Struct;
                tmp3345.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3345, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3346 = new StringBuilder("variableByAddr_result(");
          int tmp3347 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3347++) { tmp3346.Append(", "); }
            tmp3346.Append("Success: ");
            Success.ToString(tmp3346);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3347++) { tmp3346.Append(", "); }
            tmp3346.Append("E: ");
            E.ToString(tmp3346);
          }
          tmp3346.Append(')');
          return tmp3346.ToString();
        }
      }


      public partial class setVariable_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool @value;
        }

        public setVariable_args()
        {
        }

        public setVariable_args DeepCopy()
        {
          var tmp3348 = new setVariable_args();
          if(__isset.c)
          {
            tmp3348.C = this.C;
          }
          tmp3348.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3348.Name = this.Name;
          }
          tmp3348.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp3348.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3348.__isset.@value = this.__isset.@value;
          return tmp3348;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3349 = new TStruct("setVariable_args");
            await oprot.WriteStructBeginAsync(tmp3349, cancellationToken);
            var tmp3350 = new TField();
            if(__isset.c)
            {
              tmp3350.Name = "c";
              tmp3350.Type = TType.I64;
              tmp3350.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3350, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3350.Name = "name";
              tmp3350.Type = TType.String;
              tmp3350.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3350, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3350.Name = "value";
              tmp3350.Type = TType.Struct;
              tmp3350.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3350, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3351 = new StringBuilder("setVariable_args(");
          int tmp3352 = 0;
          if(__isset.c)
          {
            if(0 < tmp3352++) { tmp3351.Append(", "); }
            tmp3351.Append("C: ");
            C.ToString(tmp3351);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3352++) { tmp3351.Append(", "); }
            tmp3351.Append("Name: ");
            Name.ToString(tmp3351);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3352++) { tmp3351.Append(", "); }
            tmp3351.Append("Value: ");
            Value.ToString(tmp3351);
          }
          tmp3351.Append(')');
          return tmp3351.ToString();
        }
      }


      public partial class setVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariable_result()
        {
        }

        public setVariable_result DeepCopy()
        {
          var tmp3353 = new setVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3353.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3353.__isset.e = this.__isset.e;
          return tmp3353;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3354 = new TStruct("setVariable_result");
            await oprot.WriteStructBeginAsync(tmp3354, cancellationToken);
            var tmp3355 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3355.Name = "E";
                tmp3355.Type = TType.Struct;
                tmp3355.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3355, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3356 = new StringBuilder("setVariable_result(");
          int tmp3357 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3357++) { tmp3356.Append(", "); }
            tmp3356.Append("E: ");
            E.ToString(tmp3356);
          }
          tmp3356.Append(')');
          return tmp3356.ToString();
        }
      }


      public partial class setVariableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool @value;
        }

        public setVariableByAddr_args()
        {
        }

        public setVariableByAddr_args DeepCopy()
        {
          var tmp3358 = new setVariableByAddr_args();
          if(__isset.c)
          {
            tmp3358.C = this.C;
          }
          tmp3358.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3358.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3358.__isset.addr = this.__isset.addr;
          if((Value != null) && __isset.@value)
          {
            tmp3358.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3358.__isset.@value = this.__isset.@value;
          return tmp3358;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3359 = new TStruct("setVariableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3359, cancellationToken);
            var tmp3360 = new TField();
            if(__isset.c)
            {
              tmp3360.Name = "c";
              tmp3360.Type = TType.I64;
              tmp3360.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3360, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3360.Name = "addr";
              tmp3360.Type = TType.Struct;
              tmp3360.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3360, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3360.Name = "value";
              tmp3360.Type = TType.Struct;
              tmp3360.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3360, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3361 = new StringBuilder("setVariableByAddr_args(");
          int tmp3362 = 0;
          if(__isset.c)
          {
            if(0 < tmp3362++) { tmp3361.Append(", "); }
            tmp3361.Append("C: ");
            C.ToString(tmp3361);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3362++) { tmp3361.Append(", "); }
            tmp3361.Append("Addr: ");
            Addr.ToString(tmp3361);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3362++) { tmp3361.Append(", "); }
            tmp3361.Append("Value: ");
            Value.ToString(tmp3361);
          }
          tmp3361.Append(')');
          return tmp3361.ToString();
        }
      }


      public partial class setVariableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableByAddr_result()
        {
        }

        public setVariableByAddr_result DeepCopy()
        {
          var tmp3363 = new setVariableByAddr_result();
          if((E != null) && __isset.e)
          {
            tmp3363.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3363.__isset.e = this.__isset.e;
          return tmp3363;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3364 = new TStruct("setVariableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3364, cancellationToken);
            var tmp3365 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3365.Name = "E";
                tmp3365.Type = TType.Struct;
                tmp3365.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3365, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3366 = new StringBuilder("setVariableByAddr_result(");
          int tmp3367 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3367++) { tmp3366.Append(", "); }
            tmp3366.Append("E: ");
            E.ToString(tmp3366);
          }
          tmp3366.Append(')');
          return tmp3366.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool space;
        }

        public variableAddrByNameAndSpace_args()
        {
        }

        public variableAddrByNameAndSpace_args DeepCopy()
        {
          var tmp3368 = new variableAddrByNameAndSpace_args();
          if(__isset.c)
          {
            tmp3368.C = this.C;
          }
          tmp3368.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3368.Name = this.Name;
          }
          tmp3368.__isset.name = this.__isset.name;
          if(__isset.space)
          {
            tmp3368.Space = this.Space;
          }
          tmp3368.__isset.space = this.__isset.space;
          return tmp3368;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3369 = new TStruct("variableAddrByNameAndSpace_args");
            await oprot.WriteStructBeginAsync(tmp3369, cancellationToken);
            var tmp3370 = new TField();
            if(__isset.c)
            {
              tmp3370.Name = "c";
              tmp3370.Type = TType.I64;
              tmp3370.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3370, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3370.Name = "name";
              tmp3370.Type = TType.String;
              tmp3370.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3370, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp3370.Name = "space";
              tmp3370.Type = TType.I32;
              tmp3370.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3370, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3371 = new StringBuilder("variableAddrByNameAndSpace_args(");
          int tmp3372 = 0;
          if(__isset.c)
          {
            if(0 < tmp3372++) { tmp3371.Append(", "); }
            tmp3371.Append("C: ");
            C.ToString(tmp3371);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3372++) { tmp3371.Append(", "); }
            tmp3371.Append("Name: ");
            Name.ToString(tmp3371);
          }
          if(__isset.space)
          {
            if(0 < tmp3372++) { tmp3371.Append(", "); }
            tmp3371.Append("Space: ");
            Space.ToString(tmp3371);
          }
          tmp3371.Append(')');
          return tmp3371.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByNameAndSpace_result()
        {
        }

        public variableAddrByNameAndSpace_result DeepCopy()
        {
          var tmp3373 = new variableAddrByNameAndSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp3373.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3373.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3373.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3373.__isset.e = this.__isset.e;
          return tmp3373;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3374 = new TStruct("variableAddrByNameAndSpace_result");
            await oprot.WriteStructBeginAsync(tmp3374, cancellationToken);
            var tmp3375 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3375.Name = "Success";
                tmp3375.Type = TType.Struct;
                tmp3375.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3375, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3375.Name = "E";
                tmp3375.Type = TType.Struct;
                tmp3375.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3375, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3376 = new StringBuilder("variableAddrByNameAndSpace_result(");
          int tmp3377 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3377++) { tmp3376.Append(", "); }
            tmp3376.Append("Success: ");
            Success.ToString(tmp3376);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3377++) { tmp3376.Append(", "); }
            tmp3376.Append("E: ");
            E.ToString(tmp3376);
          }
          tmp3376.Append(')');
          return tmp3376.ToString();
        }
      }


      public partial class variableAddrByName_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variableAddrByName_args()
        {
        }

        public variableAddrByName_args DeepCopy()
        {
          var tmp3378 = new variableAddrByName_args();
          if(__isset.c)
          {
            tmp3378.C = this.C;
          }
          tmp3378.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3378.Name = this.Name;
          }
          tmp3378.__isset.name = this.__isset.name;
          return tmp3378;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3379 = new TStruct("variableAddrByName_args");
            await oprot.WriteStructBeginAsync(tmp3379, cancellationToken);
            var tmp3380 = new TField();
            if(__isset.c)
            {
              tmp3380.Name = "c";
              tmp3380.Type = TType.I64;
              tmp3380.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3380, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3380.Name = "name";
              tmp3380.Type = TType.String;
              tmp3380.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3380, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3381 = new StringBuilder("variableAddrByName_args(");
          int tmp3382 = 0;
          if(__isset.c)
          {
            if(0 < tmp3382++) { tmp3381.Append(", "); }
            tmp3381.Append("C: ");
            C.ToString(tmp3381);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3382++) { tmp3381.Append(", "); }
            tmp3381.Append("Name: ");
            Name.ToString(tmp3381);
          }
          tmp3381.Append(')');
          return tmp3381.ToString();
        }
      }


      public partial class variableAddrByName_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByName_result()
        {
        }

        public variableAddrByName_result DeepCopy()
        {
          var tmp3383 = new variableAddrByName_result();
          if((Success != null) && __isset.success)
          {
            tmp3383.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3383.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3383.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3383.__isset.e = this.__isset.e;
          return tmp3383;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3384 = new TStruct("variableAddrByName_result");
            await oprot.WriteStructBeginAsync(tmp3384, cancellationToken);
            var tmp3385 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3385.Name = "Success";
                tmp3385.Type = TType.Struct;
                tmp3385.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3385, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3385.Name = "E";
                tmp3385.Type = TType.Struct;
                tmp3385.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3385, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3386 = new StringBuilder("variableAddrByName_result(");
          int tmp3387 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3387++) { tmp3386.Append(", "); }
            tmp3386.Append("Success: ");
            Success.ToString(tmp3386);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3387++) { tmp3386.Append(", "); }
            tmp3386.Append("E: ");
            E.ToString(tmp3386);
          }
          tmp3386.Append(')');
          return tmp3386.ToString();
        }
      }


      public partial class setVariableName_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool name;
        }

        public setVariableName_args()
        {
        }

        public setVariableName_args DeepCopy()
        {
          var tmp3388 = new setVariableName_args();
          if(__isset.c)
          {
            tmp3388.C = this.C;
          }
          tmp3388.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3388.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3388.__isset.addr = this.__isset.addr;
          if((Name != null) && __isset.name)
          {
            tmp3388.Name = this.Name;
          }
          tmp3388.__isset.name = this.__isset.name;
          return tmp3388;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3389 = new TStruct("setVariableName_args");
            await oprot.WriteStructBeginAsync(tmp3389, cancellationToken);
            var tmp3390 = new TField();
            if(__isset.c)
            {
              tmp3390.Name = "c";
              tmp3390.Type = TType.I64;
              tmp3390.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3390, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3390.Name = "addr";
              tmp3390.Type = TType.Struct;
              tmp3390.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3390, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3390.Name = "name";
              tmp3390.Type = TType.String;
              tmp3390.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3390, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3391 = new StringBuilder("setVariableName_args(");
          int tmp3392 = 0;
          if(__isset.c)
          {
            if(0 < tmp3392++) { tmp3391.Append(", "); }
            tmp3391.Append("C: ");
            C.ToString(tmp3391);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3392++) { tmp3391.Append(", "); }
            tmp3391.Append("Addr: ");
            Addr.ToString(tmp3391);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3392++) { tmp3391.Append(", "); }
            tmp3391.Append("Name: ");
            Name.ToString(tmp3391);
          }
          tmp3391.Append(')');
          return tmp3391.ToString();
        }
      }


      public partial class setVariableName_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableName_result()
        {
        }

        public setVariableName_result DeepCopy()
        {
          var tmp3393 = new setVariableName_result();
          if((E != null) && __isset.e)
          {
            tmp3393.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3393.__isset.e = this.__isset.e;
          return tmp3393;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3394 = new TStruct("setVariableName_result");
            await oprot.WriteStructBeginAsync(tmp3394, cancellationToken);
            var tmp3395 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3395.Name = "E";
                tmp3395.Type = TType.Struct;
                tmp3395.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3395, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3396 = new StringBuilder("setVariableName_result(");
          int tmp3397 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3397++) { tmp3396.Append(", "); }
            tmp3396.Append("E: ");
            E.ToString(tmp3396);
          }
          tmp3396.Append(')');
          return tmp3396.ToString();
        }
      }


      public partial class monitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public monitorVariable_args()
        {
        }

        public monitorVariable_args DeepCopy()
        {
          var tmp3398 = new monitorVariable_args();
          if(__isset.c)
          {
            tmp3398.C = this.C;
          }
          tmp3398.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3398.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3398.__isset.addr = this.__isset.addr;
          return tmp3398;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3399 = new TStruct("monitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3399, cancellationToken);
            var tmp3400 = new TField();
            if(__isset.c)
            {
              tmp3400.Name = "c";
              tmp3400.Type = TType.I64;
              tmp3400.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3400, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3400.Name = "addr";
              tmp3400.Type = TType.Struct;
              tmp3400.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3400, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3401 = new StringBuilder("monitorVariable_args(");
          int tmp3402 = 0;
          if(__isset.c)
          {
            if(0 < tmp3402++) { tmp3401.Append(", "); }
            tmp3401.Append("C: ");
            C.ToString(tmp3401);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3402++) { tmp3401.Append(", "); }
            tmp3401.Append("Addr: ");
            Addr.ToString(tmp3401);
          }
          tmp3401.Append(')');
          return tmp3401.ToString();
        }
      }


      public partial class monitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorVariable_result()
        {
        }

        public monitorVariable_result DeepCopy()
        {
          var tmp3403 = new monitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3403.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3403.__isset.e = this.__isset.e;
          return tmp3403;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3404 = new TStruct("monitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3404, cancellationToken);
            var tmp3405 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3405.Name = "E";
                tmp3405.Type = TType.Struct;
                tmp3405.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3405, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3406 = new StringBuilder("monitorVariable_result(");
          int tmp3407 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3407++) { tmp3406.Append(", "); }
            tmp3406.Append("E: ");
            E.ToString(tmp3406);
          }
          tmp3406.Append(')');
          return tmp3406.ToString();
        }
      }


      public partial class unmonitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public unmonitorVariable_args()
        {
        }

        public unmonitorVariable_args DeepCopy()
        {
          var tmp3408 = new unmonitorVariable_args();
          if(__isset.c)
          {
            tmp3408.C = this.C;
          }
          tmp3408.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3408.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3408.__isset.addr = this.__isset.addr;
          return tmp3408;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3409 = new TStruct("unmonitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3409, cancellationToken);
            var tmp3410 = new TField();
            if(__isset.c)
            {
              tmp3410.Name = "c";
              tmp3410.Type = TType.I64;
              tmp3410.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3410, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3410.Name = "addr";
              tmp3410.Type = TType.Struct;
              tmp3410.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3410, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3411 = new StringBuilder("unmonitorVariable_args(");
          int tmp3412 = 0;
          if(__isset.c)
          {
            if(0 < tmp3412++) { tmp3411.Append(", "); }
            tmp3411.Append("C: ");
            C.ToString(tmp3411);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3412++) { tmp3411.Append(", "); }
            tmp3411.Append("Addr: ");
            Addr.ToString(tmp3411);
          }
          tmp3411.Append(')');
          return tmp3411.ToString();
        }
      }


      public partial class unmonitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unmonitorVariable_result()
        {
        }

        public unmonitorVariable_result DeepCopy()
        {
          var tmp3413 = new unmonitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3413.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3413.__isset.e = this.__isset.e;
          return tmp3413;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3414 = new TStruct("unmonitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3414, cancellationToken);
            var tmp3415 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3415.Name = "E";
                tmp3415.Type = TType.Struct;
                tmp3415.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3415, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3416 = new StringBuilder("unmonitorVariable_result(");
          int tmp3417 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3417++) { tmp3416.Append(", "); }
            tmp3416.Append("E: ");
            E.ToString(tmp3416);
          }
          tmp3416.Append(')');
          return tmp3416.ToString();
        }
      }


      public partial class zone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public zone_args()
        {
        }

        public zone_args DeepCopy()
        {
          var tmp3418 = new zone_args();
          if(__isset.c)
          {
            tmp3418.C = this.C;
          }
          tmp3418.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3418.Index = this.Index;
          }
          tmp3418.__isset.index = this.__isset.index;
          return tmp3418;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3419 = new TStruct("zone_args");
            await oprot.WriteStructBeginAsync(tmp3419, cancellationToken);
            var tmp3420 = new TField();
            if(__isset.c)
            {
              tmp3420.Name = "c";
              tmp3420.Type = TType.I64;
              tmp3420.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3420, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3420.Name = "index";
              tmp3420.Type = TType.I32;
              tmp3420.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3420, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3421 = new StringBuilder("zone_args(");
          int tmp3422 = 0;
          if(__isset.c)
          {
            if(0 < tmp3422++) { tmp3421.Append(", "); }
            tmp3421.Append("C: ");
            C.ToString(tmp3421);
          }
          if(__isset.index)
          {
            if(0 < tmp3422++) { tmp3421.Append(", "); }
            tmp3421.Append("Index: ");
            Index.ToString(tmp3421);
          }
          tmp3421.Append(')');
          return tmp3421.ToString();
        }
      }


      public partial class zone_result : TBase
      {
        private global::Yaskawa.Ext.API.Zone _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Zone Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public zone_result()
        {
        }

        public zone_result DeepCopy()
        {
          var tmp3423 = new zone_result();
          if((Success != null) && __isset.success)
          {
            tmp3423.Success = (global::Yaskawa.Ext.API.Zone)this.Success.DeepCopy();
          }
          tmp3423.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3423.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3423.__isset.e = this.__isset.e;
          return tmp3423;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Zone();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3424 = new TStruct("zone_result");
            await oprot.WriteStructBeginAsync(tmp3424, cancellationToken);
            var tmp3425 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3425.Name = "Success";
                tmp3425.Type = TType.Struct;
                tmp3425.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3425, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3425.Name = "E";
                tmp3425.Type = TType.Struct;
                tmp3425.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3425, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3426 = new StringBuilder("zone_result(");
          int tmp3427 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3427++) { tmp3426.Append(", "); }
            tmp3426.Append("Success: ");
            Success.ToString(tmp3426);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3427++) { tmp3426.Append(", "); }
            tmp3426.Append("E: ");
            E.ToString(tmp3426);
          }
          tmp3426.Append(')');
          return tmp3426.ToString();
        }
      }


      public partial class newZone_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newZone_args()
        {
        }

        public newZone_args DeepCopy()
        {
          var tmp3428 = new newZone_args();
          if(__isset.c)
          {
            tmp3428.C = this.C;
          }
          tmp3428.__isset.c = this.__isset.c;
          return tmp3428;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3429 = new TStruct("newZone_args");
            await oprot.WriteStructBeginAsync(tmp3429, cancellationToken);
            var tmp3430 = new TField();
            if(__isset.c)
            {
              tmp3430.Name = "c";
              tmp3430.Type = TType.I64;
              tmp3430.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3430, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3431 = new StringBuilder("newZone_args(");
          int tmp3432 = 0;
          if(__isset.c)
          {
            if(0 < tmp3432++) { tmp3431.Append(", "); }
            tmp3431.Append("C: ");
            C.ToString(tmp3431);
          }
          tmp3431.Append(')');
          return tmp3431.ToString();
        }
      }


      public partial class newZone_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newZone_result()
        {
        }

        public newZone_result DeepCopy()
        {
          var tmp3433 = new newZone_result();
          if(__isset.success)
          {
            tmp3433.Success = this.Success;
          }
          tmp3433.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3433.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3433.__isset.e = this.__isset.e;
          return tmp3433;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3434 = new TStruct("newZone_result");
            await oprot.WriteStructBeginAsync(tmp3434, cancellationToken);
            var tmp3435 = new TField();

            if(this.__isset.success)
            {
              tmp3435.Name = "Success";
              tmp3435.Type = TType.I32;
              tmp3435.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3435, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3435.Name = "E";
                tmp3435.Type = TType.Struct;
                tmp3435.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3435, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3436 = new StringBuilder("newZone_result(");
          int tmp3437 = 0;
          if(__isset.success)
          {
            if(0 < tmp3437++) { tmp3436.Append(", "); }
            tmp3436.Append("Success: ");
            Success.ToString(tmp3436);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3437++) { tmp3436.Append(", "); }
            tmp3436.Append("E: ");
            E.ToString(tmp3436);
          }
          tmp3436.Append(')');
          return tmp3436.ToString();
        }
      }


      public partial class modifyZone_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.Zone _z;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.Zone Z
        {
          get
          {
            return _z;
          }
          set
          {
            __isset.z = true;
            this._z = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool z;
        }

        public modifyZone_args()
        {
        }

        public modifyZone_args DeepCopy()
        {
          var tmp3438 = new modifyZone_args();
          if(__isset.c)
          {
            tmp3438.C = this.C;
          }
          tmp3438.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3438.Index = this.Index;
          }
          tmp3438.__isset.index = this.__isset.index;
          if((Z != null) && __isset.z)
          {
            tmp3438.Z = (global::Yaskawa.Ext.API.Zone)this.Z.DeepCopy();
          }
          tmp3438.__isset.z = this.__isset.z;
          return tmp3438;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Z = new global::Yaskawa.Ext.API.Zone();
                    await Z.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3439 = new TStruct("modifyZone_args");
            await oprot.WriteStructBeginAsync(tmp3439, cancellationToken);
            var tmp3440 = new TField();
            if(__isset.c)
            {
              tmp3440.Name = "c";
              tmp3440.Type = TType.I64;
              tmp3440.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3440, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3440.Name = "index";
              tmp3440.Type = TType.I32;
              tmp3440.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3440, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Z != null) && __isset.z)
            {
              tmp3440.Name = "z";
              tmp3440.Type = TType.Struct;
              tmp3440.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3440, cancellationToken);
              await Z.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.z == other.__isset.z) && ((!__isset.z) || (global::System.Object.Equals(Z, other.Z))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Z != null) && __isset.z)
            {
              hashcode = (hashcode * 397) + Z.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3441 = new StringBuilder("modifyZone_args(");
          int tmp3442 = 0;
          if(__isset.c)
          {
            if(0 < tmp3442++) { tmp3441.Append(", "); }
            tmp3441.Append("C: ");
            C.ToString(tmp3441);
          }
          if(__isset.index)
          {
            if(0 < tmp3442++) { tmp3441.Append(", "); }
            tmp3441.Append("Index: ");
            Index.ToString(tmp3441);
          }
          if((Z != null) && __isset.z)
          {
            if(0 < tmp3442++) { tmp3441.Append(", "); }
            tmp3441.Append("Z: ");
            Z.ToString(tmp3441);
          }
          tmp3441.Append(')');
          return tmp3441.ToString();
        }
      }


      public partial class modifyZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public modifyZone_result()
        {
        }

        public modifyZone_result DeepCopy()
        {
          var tmp3443 = new modifyZone_result();
          if((E != null) && __isset.e)
          {
            tmp3443.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3443.__isset.e = this.__isset.e;
          return tmp3443;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3444 = new TStruct("modifyZone_result");
            await oprot.WriteStructBeginAsync(tmp3444, cancellationToken);
            var tmp3445 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3445.Name = "E";
                tmp3445.Type = TType.Struct;
                tmp3445.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3445, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3446 = new StringBuilder("modifyZone_result(");
          int tmp3447 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3447++) { tmp3446.Append(", "); }
            tmp3446.Append("E: ");
            E.ToString(tmp3446);
          }
          tmp3446.Append(')');
          return tmp3446.ToString();
        }
      }


      public partial class deleteZone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteZone_args()
        {
        }

        public deleteZone_args DeepCopy()
        {
          var tmp3448 = new deleteZone_args();
          if(__isset.c)
          {
            tmp3448.C = this.C;
          }
          tmp3448.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3448.Index = this.Index;
          }
          tmp3448.__isset.index = this.__isset.index;
          return tmp3448;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3449 = new TStruct("deleteZone_args");
            await oprot.WriteStructBeginAsync(tmp3449, cancellationToken);
            var tmp3450 = new TField();
            if(__isset.c)
            {
              tmp3450.Name = "c";
              tmp3450.Type = TType.I64;
              tmp3450.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3450, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3450.Name = "index";
              tmp3450.Type = TType.I32;
              tmp3450.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3450, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3451 = new StringBuilder("deleteZone_args(");
          int tmp3452 = 0;
          if(__isset.c)
          {
            if(0 < tmp3452++) { tmp3451.Append(", "); }
            tmp3451.Append("C: ");
            C.ToString(tmp3451);
          }
          if(__isset.index)
          {
            if(0 < tmp3452++) { tmp3451.Append(", "); }
            tmp3451.Append("Index: ");
            Index.ToString(tmp3451);
          }
          tmp3451.Append(')');
          return tmp3451.ToString();
        }
      }


      public partial class deleteZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteZone_result()
        {
        }

        public deleteZone_result DeepCopy()
        {
          var tmp3453 = new deleteZone_result();
          if((E != null) && __isset.e)
          {
            tmp3453.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3453.__isset.e = this.__isset.e;
          return tmp3453;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3454 = new TStruct("deleteZone_result");
            await oprot.WriteStructBeginAsync(tmp3454, cancellationToken);
            var tmp3455 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3455.Name = "E";
                tmp3455.Type = TType.Struct;
                tmp3455.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3455, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3456 = new StringBuilder("deleteZone_result(");
          int tmp3457 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3457++) { tmp3456.Append(", "); }
            tmp3456.Append("E: ");
            E.ToString(tmp3456);
          }
          tmp3456.Append(')');
          return tmp3456.ToString();
        }
      }


      public partial class userFrames_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public userFrames_args()
        {
        }

        public userFrames_args DeepCopy()
        {
          var tmp3458 = new userFrames_args();
          if(__isset.c)
          {
            tmp3458.C = this.C;
          }
          tmp3458.__isset.c = this.__isset.c;
          return tmp3458;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3459 = new TStruct("userFrames_args");
            await oprot.WriteStructBeginAsync(tmp3459, cancellationToken);
            var tmp3460 = new TField();
            if(__isset.c)
            {
              tmp3460.Name = "c";
              tmp3460.Type = TType.I64;
              tmp3460.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3460, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3461 = new StringBuilder("userFrames_args(");
          int tmp3462 = 0;
          if(__isset.c)
          {
            if(0 < tmp3462++) { tmp3461.Append(", "); }
            tmp3461.Append("C: ");
            C.ToString(tmp3461);
          }
          tmp3461.Append(')');
          return tmp3461.ToString();
        }
      }


      public partial class userFrames_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrames_result()
        {
        }

        public userFrames_result DeepCopy()
        {
          var tmp3463 = new userFrames_result();
          if((Success != null) && __isset.success)
          {
            tmp3463.Success = this.Success.DeepCopy();
          }
          tmp3463.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3463.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3463.__isset.e = this.__isset.e;
          return tmp3463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map3464 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map3464.Count);
                      for(int _i3465 = 0; _i3465 < _map3464.Count; ++_i3465)
                      {
                        int _key3466;
                        string _val3467;
                        _key3466 = await iprot.ReadI32Async(cancellationToken);
                        _val3467 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key3466] = _val3467;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3468 = new TStruct("userFrames_result");
            await oprot.WriteStructBeginAsync(tmp3468, cancellationToken);
            var tmp3469 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3469.Name = "Success";
                tmp3469.Type = TType.Map;
                tmp3469.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3469, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter3470 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter3470, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter3470], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3469.Name = "E";
                tmp3469.Type = TType.Struct;
                tmp3469.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3469, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3471 = new StringBuilder("userFrames_result(");
          int tmp3472 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3472++) { tmp3471.Append(", "); }
            tmp3471.Append("Success: ");
            Success.ToString(tmp3471);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3472++) { tmp3471.Append(", "); }
            tmp3471.Append("E: ");
            E.ToString(tmp3471);
          }
          tmp3471.Append(')');
          return tmp3471.ToString();
        }
      }


      public partial class userFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public userFrame_args()
        {
        }

        public userFrame_args DeepCopy()
        {
          var tmp3473 = new userFrame_args();
          if(__isset.c)
          {
            tmp3473.C = this.C;
          }
          tmp3473.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3473.Index = this.Index;
          }
          tmp3473.__isset.index = this.__isset.index;
          return tmp3473;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3474 = new TStruct("userFrame_args");
            await oprot.WriteStructBeginAsync(tmp3474, cancellationToken);
            var tmp3475 = new TField();
            if(__isset.c)
            {
              tmp3475.Name = "c";
              tmp3475.Type = TType.I64;
              tmp3475.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3475, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3475.Name = "index";
              tmp3475.Type = TType.I32;
              tmp3475.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3475, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3476 = new StringBuilder("userFrame_args(");
          int tmp3477 = 0;
          if(__isset.c)
          {
            if(0 < tmp3477++) { tmp3476.Append(", "); }
            tmp3476.Append("C: ");
            C.ToString(tmp3476);
          }
          if(__isset.index)
          {
            if(0 < tmp3477++) { tmp3476.Append(", "); }
            tmp3476.Append("Index: ");
            Index.ToString(tmp3476);
          }
          tmp3476.Append(')');
          return tmp3476.ToString();
        }
      }


      public partial class userFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.CoordinateFrame _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.CoordinateFrame Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrame_result()
        {
        }

        public userFrame_result DeepCopy()
        {
          var tmp3478 = new userFrame_result();
          if((Success != null) && __isset.success)
          {
            tmp3478.Success = (global::Yaskawa.Ext.API.CoordinateFrame)this.Success.DeepCopy();
          }
          tmp3478.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3478.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3478.__isset.e = this.__isset.e;
          return tmp3478;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3479 = new TStruct("userFrame_result");
            await oprot.WriteStructBeginAsync(tmp3479, cancellationToken);
            var tmp3480 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3480.Name = "Success";
                tmp3480.Type = TType.Struct;
                tmp3480.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3480, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3480.Name = "E";
                tmp3480.Type = TType.Struct;
                tmp3480.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3480, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3481 = new StringBuilder("userFrame_result(");
          int tmp3482 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3482++) { tmp3481.Append(", "); }
            tmp3481.Append("Success: ");
            Success.ToString(tmp3481);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3482++) { tmp3481.Append(", "); }
            tmp3481.Append("E: ");
            E.ToString(tmp3481);
          }
          tmp3481.Append(')');
          return tmp3481.ToString();
        }
      }


      public partial class newUserFrame_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newUserFrame_args()
        {
        }

        public newUserFrame_args DeepCopy()
        {
          var tmp3483 = new newUserFrame_args();
          if(__isset.c)
          {
            tmp3483.C = this.C;
          }
          tmp3483.__isset.c = this.__isset.c;
          return tmp3483;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3484 = new TStruct("newUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3484, cancellationToken);
            var tmp3485 = new TField();
            if(__isset.c)
            {
              tmp3485.Name = "c";
              tmp3485.Type = TType.I64;
              tmp3485.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3485, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3486 = new StringBuilder("newUserFrame_args(");
          int tmp3487 = 0;
          if(__isset.c)
          {
            if(0 < tmp3487++) { tmp3486.Append(", "); }
            tmp3486.Append("C: ");
            C.ToString(tmp3486);
          }
          tmp3486.Append(')');
          return tmp3486.ToString();
        }
      }


      public partial class newUserFrame_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newUserFrame_result()
        {
        }

        public newUserFrame_result DeepCopy()
        {
          var tmp3488 = new newUserFrame_result();
          if(__isset.success)
          {
            tmp3488.Success = this.Success;
          }
          tmp3488.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3488.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3488.__isset.e = this.__isset.e;
          return tmp3488;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3489 = new TStruct("newUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3489, cancellationToken);
            var tmp3490 = new TField();

            if(this.__isset.success)
            {
              tmp3490.Name = "Success";
              tmp3490.Type = TType.I32;
              tmp3490.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3490, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3490.Name = "E";
                tmp3490.Type = TType.Struct;
                tmp3490.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3490, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3491 = new StringBuilder("newUserFrame_result(");
          int tmp3492 = 0;
          if(__isset.success)
          {
            if(0 < tmp3492++) { tmp3491.Append(", "); }
            tmp3491.Append("Success: ");
            Success.ToString(tmp3491);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3492++) { tmp3491.Append(", "); }
            tmp3491.Append("E: ");
            E.ToString(tmp3491);
          }
          tmp3491.Append(')');
          return tmp3491.ToString();
        }
      }


      public partial class setUserFrame_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.CoordinateFrame _f;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame F
        {
          get
          {
            return _f;
          }
          set
          {
            __isset.f = true;
            this._f = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool f;
        }

        public setUserFrame_args()
        {
        }

        public setUserFrame_args DeepCopy()
        {
          var tmp3493 = new setUserFrame_args();
          if(__isset.c)
          {
            tmp3493.C = this.C;
          }
          tmp3493.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3493.Index = this.Index;
          }
          tmp3493.__isset.index = this.__isset.index;
          if((F != null) && __isset.f)
          {
            tmp3493.F = (global::Yaskawa.Ext.API.CoordinateFrame)this.F.DeepCopy();
          }
          tmp3493.__isset.f = this.__isset.f;
          return tmp3493;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    F = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await F.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3494 = new TStruct("setUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3494, cancellationToken);
            var tmp3495 = new TField();
            if(__isset.c)
            {
              tmp3495.Name = "c";
              tmp3495.Type = TType.I64;
              tmp3495.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3495, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3495.Name = "index";
              tmp3495.Type = TType.I32;
              tmp3495.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3495, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((F != null) && __isset.f)
            {
              tmp3495.Name = "f";
              tmp3495.Type = TType.Struct;
              tmp3495.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3495, cancellationToken);
              await F.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.f == other.__isset.f) && ((!__isset.f) || (global::System.Object.Equals(F, other.F))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((F != null) && __isset.f)
            {
              hashcode = (hashcode * 397) + F.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3496 = new StringBuilder("setUserFrame_args(");
          int tmp3497 = 0;
          if(__isset.c)
          {
            if(0 < tmp3497++) { tmp3496.Append(", "); }
            tmp3496.Append("C: ");
            C.ToString(tmp3496);
          }
          if(__isset.index)
          {
            if(0 < tmp3497++) { tmp3496.Append(", "); }
            tmp3496.Append("Index: ");
            Index.ToString(tmp3496);
          }
          if((F != null) && __isset.f)
          {
            if(0 < tmp3497++) { tmp3496.Append(", "); }
            tmp3496.Append("F: ");
            F.ToString(tmp3496);
          }
          tmp3496.Append(')');
          return tmp3496.ToString();
        }
      }


      public partial class setUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setUserFrame_result()
        {
        }

        public setUserFrame_result DeepCopy()
        {
          var tmp3498 = new setUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3498.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3498.__isset.e = this.__isset.e;
          return tmp3498;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3499 = new TStruct("setUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3499, cancellationToken);
            var tmp3500 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3500.Name = "E";
                tmp3500.Type = TType.Struct;
                tmp3500.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3500, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3501 = new StringBuilder("setUserFrame_result(");
          int tmp3502 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3502++) { tmp3501.Append(", "); }
            tmp3501.Append("E: ");
            E.ToString(tmp3501);
          }
          tmp3501.Append(')');
          return tmp3501.ToString();
        }
      }


      public partial class deleteUserFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteUserFrame_args()
        {
        }

        public deleteUserFrame_args DeepCopy()
        {
          var tmp3503 = new deleteUserFrame_args();
          if(__isset.c)
          {
            tmp3503.C = this.C;
          }
          tmp3503.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3503.Index = this.Index;
          }
          tmp3503.__isset.index = this.__isset.index;
          return tmp3503;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3504 = new TStruct("deleteUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3504, cancellationToken);
            var tmp3505 = new TField();
            if(__isset.c)
            {
              tmp3505.Name = "c";
              tmp3505.Type = TType.I64;
              tmp3505.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3505, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3505.Name = "index";
              tmp3505.Type = TType.I32;
              tmp3505.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3505, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3506 = new StringBuilder("deleteUserFrame_args(");
          int tmp3507 = 0;
          if(__isset.c)
          {
            if(0 < tmp3507++) { tmp3506.Append(", "); }
            tmp3506.Append("C: ");
            C.ToString(tmp3506);
          }
          if(__isset.index)
          {
            if(0 < tmp3507++) { tmp3506.Append(", "); }
            tmp3506.Append("Index: ");
            Index.ToString(tmp3506);
          }
          tmp3506.Append(')');
          return tmp3506.ToString();
        }
      }


      public partial class deleteUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteUserFrame_result()
        {
        }

        public deleteUserFrame_result DeepCopy()
        {
          var tmp3508 = new deleteUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3508.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3508.__isset.e = this.__isset.e;
          return tmp3508;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3509 = new TStruct("deleteUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3509, cancellationToken);
            var tmp3510 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3510.Name = "E";
                tmp3510.Type = TType.Struct;
                tmp3510.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3510, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3511 = new StringBuilder("deleteUserFrame_result(");
          int tmp3512 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3512++) { tmp3511.Append(", "); }
            tmp3511.Append("E: ");
            E.ToString(tmp3511);
          }
          tmp3511.Append(')');
          return tmp3511.ToString();
        }
      }


      public partial class networkInterfaceAddress_args : TBase
      {
        private long _c;
        private string _controllerInterface;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
        }

        public networkInterfaceAddress_args()
        {
        }

        public networkInterfaceAddress_args DeepCopy()
        {
          var tmp3513 = new networkInterfaceAddress_args();
          if(__isset.c)
          {
            tmp3513.C = this.C;
          }
          tmp3513.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3513.ControllerInterface = this.ControllerInterface;
          }
          tmp3513.__isset.controllerInterface = this.__isset.controllerInterface;
          return tmp3513;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3514 = new TStruct("networkInterfaceAddress_args");
            await oprot.WriteStructBeginAsync(tmp3514, cancellationToken);
            var tmp3515 = new TField();
            if(__isset.c)
            {
              tmp3515.Name = "c";
              tmp3515.Type = TType.I64;
              tmp3515.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3515, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3515.Name = "controllerInterface";
              tmp3515.Type = TType.String;
              tmp3515.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3515, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3516 = new StringBuilder("networkInterfaceAddress_args(");
          int tmp3517 = 0;
          if(__isset.c)
          {
            if(0 < tmp3517++) { tmp3516.Append(", "); }
            tmp3516.Append("C: ");
            C.ToString(tmp3516);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3517++) { tmp3516.Append(", "); }
            tmp3516.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3516);
          }
          tmp3516.Append(')');
          return tmp3516.ToString();
        }
      }


      public partial class networkInterfaceAddress_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public networkInterfaceAddress_result()
        {
        }

        public networkInterfaceAddress_result DeepCopy()
        {
          var tmp3518 = new networkInterfaceAddress_result();
          if((Success != null) && __isset.success)
          {
            tmp3518.Success = this.Success;
          }
          tmp3518.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3518.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3518.__isset.e = this.__isset.e;
          return tmp3518;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3519 = new TStruct("networkInterfaceAddress_result");
            await oprot.WriteStructBeginAsync(tmp3519, cancellationToken);
            var tmp3520 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3520.Name = "Success";
                tmp3520.Type = TType.String;
                tmp3520.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3520, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3520.Name = "E";
                tmp3520.Type = TType.Struct;
                tmp3520.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3520, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3521 = new StringBuilder("networkInterfaceAddress_result(");
          int tmp3522 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3522++) { tmp3521.Append(", "); }
            tmp3521.Append("Success: ");
            Success.ToString(tmp3521);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3522++) { tmp3521.Append(", "); }
            tmp3521.Append("E: ");
            E.ToString(tmp3521);
          }
          tmp3521.Append(')');
          return tmp3521.ToString();
        }
      }


      public partial class requestNetworkAccess_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkAccess_args()
        {
        }

        public requestNetworkAccess_args DeepCopy()
        {
          var tmp3523 = new requestNetworkAccess_args();
          if(__isset.c)
          {
            tmp3523.C = this.C;
          }
          tmp3523.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3523.ControllerInterface = this.ControllerInterface;
          }
          tmp3523.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3523.Port = this.Port;
          }
          tmp3523.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3523.Protocol = this.Protocol;
          }
          tmp3523.__isset.protocol = this.__isset.protocol;
          return tmp3523;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3524 = new TStruct("requestNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3524, cancellationToken);
            var tmp3525 = new TField();
            if(__isset.c)
            {
              tmp3525.Name = "c";
              tmp3525.Type = TType.I64;
              tmp3525.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3525, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3525.Name = "controllerInterface";
              tmp3525.Type = TType.String;
              tmp3525.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3525, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3525.Name = "port";
              tmp3525.Type = TType.I32;
              tmp3525.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3525, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3525.Name = "protocol";
              tmp3525.Type = TType.String;
              tmp3525.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3525, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3526 = new StringBuilder("requestNetworkAccess_args(");
          int tmp3527 = 0;
          if(__isset.c)
          {
            if(0 < tmp3527++) { tmp3526.Append(", "); }
            tmp3526.Append("C: ");
            C.ToString(tmp3526);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3527++) { tmp3526.Append(", "); }
            tmp3526.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3526);
          }
          if(__isset.port)
          {
            if(0 < tmp3527++) { tmp3526.Append(", "); }
            tmp3526.Append("Port: ");
            Port.ToString(tmp3526);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3527++) { tmp3526.Append(", "); }
            tmp3526.Append("Protocol: ");
            Protocol.ToString(tmp3526);
          }
          tmp3526.Append(')');
          return tmp3526.ToString();
        }
      }


      public partial class requestNetworkAccess_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkAccess_result()
        {
        }

        public requestNetworkAccess_result DeepCopy()
        {
          var tmp3528 = new requestNetworkAccess_result();
          if(__isset.success)
          {
            tmp3528.Success = this.Success;
          }
          tmp3528.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3528.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3528.__isset.e = this.__isset.e;
          return tmp3528;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3529 = new TStruct("requestNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3529, cancellationToken);
            var tmp3530 = new TField();

            if(this.__isset.success)
            {
              tmp3530.Name = "Success";
              tmp3530.Type = TType.I32;
              tmp3530.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3530, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3530.Name = "E";
                tmp3530.Type = TType.Struct;
                tmp3530.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3530, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3531 = new StringBuilder("requestNetworkAccess_result(");
          int tmp3532 = 0;
          if(__isset.success)
          {
            if(0 < tmp3532++) { tmp3531.Append(", "); }
            tmp3531.Append("Success: ");
            Success.ToString(tmp3531);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3532++) { tmp3531.Append(", "); }
            tmp3531.Append("E: ");
            E.ToString(tmp3531);
          }
          tmp3531.Append(')');
          return tmp3531.ToString();
        }
      }


      public partial class removeNetworkAccess_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkAccess_args()
        {
        }

        public removeNetworkAccess_args DeepCopy()
        {
          var tmp3533 = new removeNetworkAccess_args();
          if(__isset.c)
          {
            tmp3533.C = this.C;
          }
          tmp3533.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3533.AccessHandle = this.AccessHandle;
          }
          tmp3533.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3533;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3534 = new TStruct("removeNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3534, cancellationToken);
            var tmp3535 = new TField();
            if(__isset.c)
            {
              tmp3535.Name = "c";
              tmp3535.Type = TType.I64;
              tmp3535.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3535, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3535.Name = "accessHandle";
              tmp3535.Type = TType.I32;
              tmp3535.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3535, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3536 = new StringBuilder("removeNetworkAccess_args(");
          int tmp3537 = 0;
          if(__isset.c)
          {
            if(0 < tmp3537++) { tmp3536.Append(", "); }
            tmp3536.Append("C: ");
            C.ToString(tmp3536);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3537++) { tmp3536.Append(", "); }
            tmp3536.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3536);
          }
          tmp3536.Append(')');
          return tmp3536.ToString();
        }
      }


      public partial class removeNetworkAccess_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkAccess_result()
        {
        }

        public removeNetworkAccess_result DeepCopy()
        {
          var tmp3538 = new removeNetworkAccess_result();
          if((E != null) && __isset.e)
          {
            tmp3538.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3538.__isset.e = this.__isset.e;
          return tmp3538;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3539 = new TStruct("removeNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3539, cancellationToken);
            var tmp3540 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3540.Name = "E";
                tmp3540.Type = TType.Struct;
                tmp3540.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3540, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3541 = new StringBuilder("removeNetworkAccess_result(");
          int tmp3542 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3542++) { tmp3541.Append(", "); }
            tmp3541.Append("E: ");
            E.ToString(tmp3541);
          }
          tmp3541.Append(')');
          return tmp3541.ToString();
        }
      }


      public partial class requestNetworkService_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkService_args()
        {
        }

        public requestNetworkService_args DeepCopy()
        {
          var tmp3543 = new requestNetworkService_args();
          if(__isset.c)
          {
            tmp3543.C = this.C;
          }
          tmp3543.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3543.ControllerInterface = this.ControllerInterface;
          }
          tmp3543.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3543.Port = this.Port;
          }
          tmp3543.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3543.Protocol = this.Protocol;
          }
          tmp3543.__isset.protocol = this.__isset.protocol;
          return tmp3543;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3544 = new TStruct("requestNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3544, cancellationToken);
            var tmp3545 = new TField();
            if(__isset.c)
            {
              tmp3545.Name = "c";
              tmp3545.Type = TType.I64;
              tmp3545.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3545, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3545.Name = "controllerInterface";
              tmp3545.Type = TType.String;
              tmp3545.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3545, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3545.Name = "port";
              tmp3545.Type = TType.I32;
              tmp3545.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3545, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3545.Name = "protocol";
              tmp3545.Type = TType.String;
              tmp3545.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3545, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3546 = new StringBuilder("requestNetworkService_args(");
          int tmp3547 = 0;
          if(__isset.c)
          {
            if(0 < tmp3547++) { tmp3546.Append(", "); }
            tmp3546.Append("C: ");
            C.ToString(tmp3546);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3547++) { tmp3546.Append(", "); }
            tmp3546.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3546);
          }
          if(__isset.port)
          {
            if(0 < tmp3547++) { tmp3546.Append(", "); }
            tmp3546.Append("Port: ");
            Port.ToString(tmp3546);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3547++) { tmp3546.Append(", "); }
            tmp3546.Append("Protocol: ");
            Protocol.ToString(tmp3546);
          }
          tmp3546.Append(')');
          return tmp3546.ToString();
        }
      }


      public partial class requestNetworkService_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkService_result()
        {
        }

        public requestNetworkService_result DeepCopy()
        {
          var tmp3548 = new requestNetworkService_result();
          if(__isset.success)
          {
            tmp3548.Success = this.Success;
          }
          tmp3548.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3548.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3548.__isset.e = this.__isset.e;
          return tmp3548;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3549 = new TStruct("requestNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3549, cancellationToken);
            var tmp3550 = new TField();

            if(this.__isset.success)
            {
              tmp3550.Name = "Success";
              tmp3550.Type = TType.I32;
              tmp3550.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3550, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3550.Name = "E";
                tmp3550.Type = TType.Struct;
                tmp3550.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3550, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3551 = new StringBuilder("requestNetworkService_result(");
          int tmp3552 = 0;
          if(__isset.success)
          {
            if(0 < tmp3552++) { tmp3551.Append(", "); }
            tmp3551.Append("Success: ");
            Success.ToString(tmp3551);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3552++) { tmp3551.Append(", "); }
            tmp3551.Append("E: ");
            E.ToString(tmp3551);
          }
          tmp3551.Append(')');
          return tmp3551.ToString();
        }
      }


      public partial class removeNetworkService_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkService_args()
        {
        }

        public removeNetworkService_args DeepCopy()
        {
          var tmp3553 = new removeNetworkService_args();
          if(__isset.c)
          {
            tmp3553.C = this.C;
          }
          tmp3553.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3553.AccessHandle = this.AccessHandle;
          }
          tmp3553.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3553;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3554 = new TStruct("removeNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3554, cancellationToken);
            var tmp3555 = new TField();
            if(__isset.c)
            {
              tmp3555.Name = "c";
              tmp3555.Type = TType.I64;
              tmp3555.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3555, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3555.Name = "accessHandle";
              tmp3555.Type = TType.I32;
              tmp3555.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3555, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3556 = new StringBuilder("removeNetworkService_args(");
          int tmp3557 = 0;
          if(__isset.c)
          {
            if(0 < tmp3557++) { tmp3556.Append(", "); }
            tmp3556.Append("C: ");
            C.ToString(tmp3556);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3557++) { tmp3556.Append(", "); }
            tmp3556.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3556);
          }
          tmp3556.Append(')');
          return tmp3556.ToString();
        }
      }


      public partial class removeNetworkService_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkService_result()
        {
        }

        public removeNetworkService_result DeepCopy()
        {
          var tmp3558 = new removeNetworkService_result();
          if((E != null) && __isset.e)
          {
            tmp3558.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3558.__isset.e = this.__isset.e;
          return tmp3558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3559 = new TStruct("removeNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3559, cancellationToken);
            var tmp3560 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3560.Name = "E";
                tmp3560.Type = TType.Struct;
                tmp3560.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3560, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3561 = new StringBuilder("removeNetworkService_result(");
          int tmp3562 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3562++) { tmp3561.Append(", "); }
            tmp3561.Append("E: ");
            E.ToString(tmp3561);
          }
          tmp3561.Append(')');
          return tmp3561.ToString();
        }
      }


      public partial class getGaugeSensorSpec_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public getGaugeSensorSpec_args()
        {
        }

        public getGaugeSensorSpec_args DeepCopy()
        {
          var tmp3563 = new getGaugeSensorSpec_args();
          if(__isset.c)
          {
            tmp3563.C = this.C;
          }
          tmp3563.__isset.c = this.__isset.c;
          return tmp3563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3564 = new TStruct("getGaugeSensorSpec_args");
            await oprot.WriteStructBeginAsync(tmp3564, cancellationToken);
            var tmp3565 = new TField();
            if(__isset.c)
            {
              tmp3565.Name = "c";
              tmp3565.Type = TType.I64;
              tmp3565.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3565, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGaugeSensorSpec_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3566 = new StringBuilder("getGaugeSensorSpec_args(");
          int tmp3567 = 0;
          if(__isset.c)
          {
            if(0 < tmp3567++) { tmp3566.Append(", "); }
            tmp3566.Append("C: ");
            C.ToString(tmp3566);
          }
          tmp3566.Append(')');
          return tmp3566.ToString();
        }
      }


      public partial class getGaugeSensorSpec_result : TBase
      {
        private List<global::Yaskawa.Ext.API.GaugeSensorSpec> _success;

        public List<global::Yaskawa.Ext.API.GaugeSensorSpec> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getGaugeSensorSpec_result()
        {
        }

        public getGaugeSensorSpec_result DeepCopy()
        {
          var tmp3568 = new getGaugeSensorSpec_result();
          if((Success != null) && __isset.success)
          {
            tmp3568.Success = this.Success.DeepCopy();
          }
          tmp3568.__isset.success = this.__isset.success;
          return tmp3568;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3569 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.GaugeSensorSpec>(_list3569.Count);
                      for(int _i3570 = 0; _i3570 < _list3569.Count; ++_i3570)
                      {
                        global::Yaskawa.Ext.API.GaugeSensorSpec _elem3571;
                        _elem3571 = new global::Yaskawa.Ext.API.GaugeSensorSpec();
                        await _elem3571.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem3571);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3572 = new TStruct("getGaugeSensorSpec_result");
            await oprot.WriteStructBeginAsync(tmp3572, cancellationToken);
            var tmp3573 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3573.Name = "Success";
                tmp3573.Type = TType.List;
                tmp3573.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3573, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.GaugeSensorSpec _iter3574 in Success)
                {
                  await _iter3574.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGaugeSensorSpec_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3575 = new StringBuilder("getGaugeSensorSpec_result(");
          int tmp3576 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3576++) { tmp3575.Append(", "); }
            tmp3575.Append("Success: ");
            Success.ToString(tmp3575);
          }
          tmp3575.Append(')');
          return tmp3575.ToString();
        }
      }


      public partial class gaugeSensorCalibration_args : TBase
      {
        private long _c;
        private sbyte _channel;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public sbyte Channel
        {
          get
          {
            return _channel;
          }
          set
          {
            __isset.channel = true;
            this._channel = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool channel;
        }

        public gaugeSensorCalibration_args()
        {
        }

        public gaugeSensorCalibration_args DeepCopy()
        {
          var tmp3577 = new gaugeSensorCalibration_args();
          if(__isset.c)
          {
            tmp3577.C = this.C;
          }
          tmp3577.__isset.c = this.__isset.c;
          if(__isset.channel)
          {
            tmp3577.Channel = this.Channel;
          }
          tmp3577.__isset.channel = this.__isset.channel;
          return tmp3577;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Byte)
                  {
                    Channel = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3578 = new TStruct("gaugeSensorCalibration_args");
            await oprot.WriteStructBeginAsync(tmp3578, cancellationToken);
            var tmp3579 = new TField();
            if(__isset.c)
            {
              tmp3579.Name = "c";
              tmp3579.Type = TType.I64;
              tmp3579.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3579, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.channel)
            {
              tmp3579.Name = "channel";
              tmp3579.Type = TType.Byte;
              tmp3579.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3579, cancellationToken);
              await oprot.WriteByteAsync(Channel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is gaugeSensorCalibration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.channel == other.__isset.channel) && ((!__isset.channel) || (global::System.Object.Equals(Channel, other.Channel))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.channel)
            {
              hashcode = (hashcode * 397) + Channel.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3580 = new StringBuilder("gaugeSensorCalibration_args(");
          int tmp3581 = 0;
          if(__isset.c)
          {
            if(0 < tmp3581++) { tmp3580.Append(", "); }
            tmp3580.Append("C: ");
            C.ToString(tmp3580);
          }
          if(__isset.channel)
          {
            if(0 < tmp3581++) { tmp3580.Append(", "); }
            tmp3580.Append("Channel: ");
            Channel.ToString(tmp3580);
          }
          tmp3580.Append(')');
          return tmp3580.ToString();
        }
      }


      public partial class gaugeSensorCalibration_result : TBase
      {

        public gaugeSensorCalibration_result()
        {
        }

        public gaugeSensorCalibration_result DeepCopy()
        {
          var tmp3582 = new gaugeSensorCalibration_result();
          return tmp3582;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3583 = new TStruct("gaugeSensorCalibration_result");
            await oprot.WriteStructBeginAsync(tmp3583, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is gaugeSensorCalibration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3584 = new StringBuilder("gaugeSensorCalibration_result(");
          tmp3584.Append(')');
          return tmp3584.ToString();
        }
      }

    }

  }
}
