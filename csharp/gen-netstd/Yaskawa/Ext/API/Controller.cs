/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Controller
  {
    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Request specified permissions.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check permisions obtained.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permission"></param>
      global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default);

      /// <summary>
      /// Relinquish permissions (no effect if not held).
      /// </summary>
      /// <param name="c"></param>
      /// <param name="permissions"></param>
      global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default);

      /// <summary>
      /// Connect to the specified Robot Controller (by IP adress or hostname if DNS available)
      /// Typically, the pendant will already be connected to a controller when extensions are started,
      /// so calling connect() is not required.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="hostName"></param>
      global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Disconnect from the connected controller.  This leaves the pendant in the 'disconnected' state.
      /// When disconnected, many functions are unavailable or will return default values.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to the specified events, if not already.
      /// Note: If using a Yaskawa supplied client library with event consumer callback support,
      ///       registering an event consumer callback will automatically subscribe to the appropriate event.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from the specified events.
      /// If called directly, this may causes event consumers for the events not to be called.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Poll the API Service for pending events.
      /// Note: If using a Yaskawa supplied client library, this does not need to be called explicitly.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is connected to a robot controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the hostname or IP address of the robot controller to which the pendant is connected, if any
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The software version string of the robot controller system software.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if the pendant is only monitoring the robot controller to which it is connected.  This
      /// implies that no functions that modify the controller and/or robot state will succeed.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns true if this pendant is the single-point-of-control for the connected Robot Controller.
      /// If not, most functions that modify the controller and/or robot state will fail.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current operation mode of the controller
      /// Automatic (aka Play) - running jobs
      /// Manual (aka Teach) - for editing jobs, teaching points, jogging, setup etc.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Are the servo drives engaged?
      /// On - yes, robot(s) are being actively controlled
      /// Off - no.  Typically brakes are engaged (unless brake-release engaged)
      /// Ready - ready to engage servos.  Typically requires operator to use servo enable switch.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicates if a job us running or stopped.
      /// Run - jobs are running (robot may be moving)
      /// Held - jobs were running but have been held/paused.
      /// Idle - no jobs are running
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// The playback cycle affects how the controller runs a job.
      /// Step - a job is run line-for-line.
      /// Once - a job is run from the beginning to the end.
      /// Continuous - a job is run indefinitely from the beginning to the end.
      /// (API 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Sets the playback cycle mode. (API 3.0 and Later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="cycle"></param>
      global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default);

      /// <summary>
      /// Run the current robot job from the current line.  Requires Servos engaged & Automatic/Play operation and 'jobcontrol' permission.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Pause running job (servoes will remain engaged. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resume running job from paused state. 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop runnng job (will stop motion and disengage servos). 'jobcontrol' permission required.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the current job (e.g. job being run or edited)
      /// Empty if none.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the current job. 'jobcontrol' permission required. Pass line=1 for start of job, line=0 for default/no-change.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="line"></param>
      global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default);

      /// <summary>
      /// Name of the default (aka master) job.  Empty if no default job designated
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// query if job with specified name exists
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Details for the named job (throws if non-existent job)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names (empty if not connected)
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of robot job names matching the name regular expression AND with the given tag
      /// (empty if not connected or no matches)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="nameRegex"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Duplicate an existing job with a new name for the copy
      /// </summary>
      /// <param name="c"></param>
      /// <param name="existingName"></param>
      /// <param name="newName"></param>
      global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default);

      /// <summary>
      /// delete the specified job.  The default job cannot be deleted.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read source code for named job (in the programmingLanguage listed in jobDetails() )
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Replace named job with the source code provided, in given programmingLanguage (e.g. "INFORM").
      /// Will thow if syntax errors in source.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="programmingLanguage"></param>
      /// <param name="sourceCode"></param>
      global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of tools mapping index -> name.
      /// Unset/defaulted tools are omitted (e.g. those with no name, 0 weight etc.)
      /// Indices (map keys) may not be sequential.  Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on a specific tool, by index
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input number of given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return input group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output nunber of given output name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return output group number for group beginning with given input name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return name of specified output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified input
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of specified output
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified input
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all inputs in given input group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring specified output
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring all outputs in given output group
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals (1 group = 8 signals)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all inputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring specified output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring all outputs in specified group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return value of given input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of input groups from specified group number (upto 4 contiguous groups/bytes, from least significant byte)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of given output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return values of output groups from specified group number (upto 4 contiguous groups/bytes)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the specified output number
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the values of the outputs in the specified contigous output groups (upto 4 contiguous groups/bytes)
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="groupNum"></param>
      /// <param name="count"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named input
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given input number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the named output
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the logical IO address of the given output number
      /// </summary>
      /// <param name="c"></param>
      /// <param name="num"></param>
      global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a logical IO address.  Will generate IOValueChanged events
      /// Note that I/O monitoring is limited to a maximum 32 I/O signals
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a logical IO address. (events for address may still be generated if it corresponds to a monitored input or output)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general input by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given general output by logicial IO address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given logicial IO address
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given output by logical IO address
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given network input by logical IO address
      /// Note it is asyncronous so no errors/exceptions are thrown (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="address"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the value of the given M-Register (SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the value of the given M-Register by index
      /// Note it is asynchronous so no errors/exceptions are thrown.(SDK 3.1+)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain input group number (byte) of field bus status input.  e.g. busType 'ethip' yields EtherNet/IP status byte group
      /// </summary>
      /// <param name="c"></param>
      /// <param name="busType"></param>
      global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the list of control groups configured on the controller.
      /// If only one robot is connected to the controller, this will return a single element,
      /// containing the simple control group representing the robot.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active control group.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the number of robots connected to the controller
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the index of the currently active robot.
      /// Note: index is 0-based, but in the UI the first robot is Robot 1.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Variable value by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable value by name
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name and space
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      /// <param name="space"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lookup variable address by name (less efficient)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set name of variable by address
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Start monitoring a variable.  Will generate VariableChanged events.
      /// Note that a maximum of 1 position variable, 4 string variables and 15 variables of each of the remain types can be monitored at the same time.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stop monitoring a variable.
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="addr"></param>
      global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified zone, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new Zone and returns its index.  It will have default values
      /// which can be change via modifyZone()
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Modify Zone information.  Only fields set in Zone will be updated.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="z"></param>
      global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a Zone
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// List of user frames mapping index -> name.
      /// NB: Indices (map keys) may not be sequential. Returned map may be empty.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query information on specified User Frame, by index (not number)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a new User Frame with default values and returns its index.
      /// </summary>
      /// <param name="c"></param>
      global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the specified User Frame to the provided values
      /// Future: Not implemented yet
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      /// <param name="f"></param>
      global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default);

      /// <summary>
      /// Delete a User Frame
      /// </summary>
      /// <param name="c"></param>
      /// <param name="index"></param>
      global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query current controller network interface IP address.
      /// controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3']
      /// (NB: On YRC1000micro, 'LAN' is the external Ethernet port, corresponding to 'LAN2' on the YRC1000)
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default);

      /// <summary>
      /// Request external network access via specified protocol and port originating
      /// from the given controller interface. The controllerInferface may be left blank, in which case
      /// connections will be routed from the controller according to the destination address and
      /// current subnetwork of the external LAN ports).
      /// Access only persists while power is maintained to the controller.
      /// The protocol must be either 'tcp' or 'udp'. controllerInterface must be one of ['LAN1','LAN'/'LAN2' or 'LAN3'].
      /// Returns a handle that can subsequently used to remove the access, or -1 if the access request
      /// failed (may happen in case of network conflicts with other extensions).
      /// Requires 'networking' permision.
      /// </summary>
      /// <param name="c"></param>
      /// <param name="controllerInterface"></param>
      /// <param name="port"></param>
      /// <param name="protocol"></param>
      global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Interface to Robot Controllers
    /// 
    /// In general, a pendant may operate in connected or disconnected states.  When connected to a Robot Controller
    /// it may be monitoring or not have exclusive control (i.e. not be the single-point-of-control).
    /// 
    /// However, typically, once an extension is running, the pendant is connected to the controller and
    /// is the single-point-of-control.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_requestPermissions(c, permissions, cancellationToken);
        return await recv_requestPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1638 = new InternalStructs.requestPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1638.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_requestPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1639 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1639.Type == TMessageType.Exception)
        {
          var tmp1640 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1640;
        }

        var tmp1641 = new InternalStructs.requestPermissions_result();
        await tmp1641.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1641.__isset.success)
        {
          return tmp1641.Success;
        }
        if (tmp1641.__isset.e)
        {
          throw tmp1641.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestPermissions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await send_havePermission(c, permission, cancellationToken);
        return await recv_havePermission(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_havePermission(long c, string permission, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1642 = new InternalStructs.havePermission_args() {
          C = c,
          Permission = permission,
        };
        
        await tmp1642.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_havePermission(CancellationToken cancellationToken = default)
      {
        
        var tmp1643 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1643.Type == TMessageType.Exception)
        {
          var tmp1644 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1644;
        }

        var tmp1645 = new InternalStructs.havePermission_result();
        await tmp1645.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1645.__isset.success)
        {
          return tmp1645.Success;
        }
        if (tmp1645.__isset.e)
        {
          throw tmp1645.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "havePermission failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await send_relinquishPermissions(c, permissions, cancellationToken);
        await recv_relinquishPermissions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_relinquishPermissions(long c, HashSet<string> permissions, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1646 = new InternalStructs.relinquishPermissions_args() {
          C = c,
          Permissions = permissions,
        };
        
        await tmp1646.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_relinquishPermissions(CancellationToken cancellationToken = default)
      {
        
        var tmp1647 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1647.Type == TMessageType.Exception)
        {
          var tmp1648 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1648;
        }

        var tmp1649 = new InternalStructs.relinquishPermissions_result();
        await tmp1649.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await send_connect(c, hostName, cancellationToken);
        await recv_connect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connect(long c, string hostName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1650 = new InternalStructs.connect_args() {
          C = c,
          HostName = hostName,
        };
        
        await tmp1650.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_connect(CancellationToken cancellationToken = default)
      {
        
        var tmp1651 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1651.Type == TMessageType.Exception)
        {
          var tmp1652 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1652;
        }

        var tmp1653 = new InternalStructs.connect_result();
        await tmp1653.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect(long c, CancellationToken cancellationToken = default)
      {
        await send_disconnect(c, cancellationToken);
        await recv_disconnect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_disconnect(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1654 = new InternalStructs.disconnect_args() {
          C = c,
        };
        
        await tmp1654.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_disconnect(CancellationToken cancellationToken = default)
      {
        
        var tmp1655 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1655.Type == TMessageType.Exception)
        {
          var tmp1656 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1656;
        }

        var tmp1657 = new InternalStructs.disconnect_result();
        await tmp1657.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(c, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1658 = new InternalStructs.subscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1658.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1659 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1659.Type == TMessageType.Exception)
        {
          var tmp1660 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1660;
        }

        var tmp1661 = new InternalStructs.subscribeEventTypes_result();
        await tmp1661.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(c, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long c, HashSet<global::Yaskawa.Ext.API.ControllerEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1662 = new InternalStructs.unsubscribeEventTypes_args() {
          C = c,
          Types = types,
        };
        
        await tmp1662.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp1663 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1663.Type == TMessageType.Exception)
        {
          var tmp1664 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1664;
        }

        var tmp1665 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp1665.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> events(long c, CancellationToken cancellationToken = default)
      {
        await send_events(c, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1666 = new InternalStructs.events_args() {
          C = c,
        };
        
        await tmp1666.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControllerEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp1667 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1667.Type == TMessageType.Exception)
        {
          var tmp1668 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1668;
        }

        var tmp1669 = new InternalStructs.events_result();
        await tmp1669.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1669.__isset.success)
        {
          return tmp1669.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> connected(long c, CancellationToken cancellationToken = default)
      {
        await send_connected(c, cancellationToken);
        return await recv_connected(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connected(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1670 = new InternalStructs.connected_args() {
          C = c,
        };
        
        await tmp1670.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_connected(CancellationToken cancellationToken = default)
      {
        
        var tmp1671 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1671.Type == TMessageType.Exception)
        {
          var tmp1672 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1672;
        }

        var tmp1673 = new InternalStructs.connected_result();
        await tmp1673.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1673.__isset.success)
        {
          return tmp1673.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connected failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await send_connectedHostName(c, cancellationToken);
        return await recv_connectedHostName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connectedHostName(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1674 = new InternalStructs.connectedHostName_args() {
          C = c,
        };
        
        await tmp1674.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_connectedHostName(CancellationToken cancellationToken = default)
      {
        
        var tmp1675 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1675.Type == TMessageType.Exception)
        {
          var tmp1676 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1676;
        }

        var tmp1677 = new InternalStructs.connectedHostName_result();
        await tmp1677.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1677.__isset.success)
        {
          return tmp1677.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connectedHostName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await send_softwareVersion(c, cancellationToken);
        return await recv_softwareVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_softwareVersion(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1678 = new InternalStructs.softwareVersion_args() {
          C = c,
        };
        
        await tmp1678.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_softwareVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp1679 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1679.Type == TMessageType.Exception)
        {
          var tmp1680 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1680;
        }

        var tmp1681 = new InternalStructs.softwareVersion_result();
        await tmp1681.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1681.__isset.success)
        {
          return tmp1681.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "softwareVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> monitoring(long c, CancellationToken cancellationToken = default)
      {
        await send_monitoring(c, cancellationToken);
        return await recv_monitoring(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitoring(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1682 = new InternalStructs.monitoring_args() {
          C = c,
        };
        
        await tmp1682.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_monitoring(CancellationToken cancellationToken = default)
      {
        
        var tmp1683 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1683.Type == TMessageType.Exception)
        {
          var tmp1684 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1684;
        }

        var tmp1685 = new InternalStructs.monitoring_result();
        await tmp1685.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1685.__isset.success)
        {
          return tmp1685.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "monitoring failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await send_haveExclusiveControl(c, cancellationToken);
        return await recv_haveExclusiveControl(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_haveExclusiveControl(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1686 = new InternalStructs.haveExclusiveControl_args() {
          C = c,
        };
        
        await tmp1686.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_haveExclusiveControl(CancellationToken cancellationToken = default)
      {
        
        var tmp1687 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1687.Type == TMessageType.Exception)
        {
          var tmp1688 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1688;
        }

        var tmp1689 = new InternalStructs.haveExclusiveControl_result();
        await tmp1689.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1689.__isset.success)
        {
          return tmp1689.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "haveExclusiveControl failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> operationMode(long c, CancellationToken cancellationToken = default)
      {
        await send_operationMode(c, cancellationToken);
        return await recv_operationMode(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_operationMode(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1690 = new InternalStructs.operationMode_args() {
          C = c,
        };
        
        await tmp1690.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.OperationMode> recv_operationMode(CancellationToken cancellationToken = default)
      {
        
        var tmp1691 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1691.Type == TMessageType.Exception)
        {
          var tmp1692 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1692;
        }

        var tmp1693 = new InternalStructs.operationMode_result();
        await tmp1693.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1693.__isset.success)
        {
          return tmp1693.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "operationMode failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> servoState(long c, CancellationToken cancellationToken = default)
      {
        await send_servoState(c, cancellationToken);
        return await recv_servoState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_servoState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1694 = new InternalStructs.servoState_args() {
          C = c,
        };
        
        await tmp1694.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.ServoState> recv_servoState(CancellationToken cancellationToken = default)
      {
        
        var tmp1695 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1695.Type == TMessageType.Exception)
        {
          var tmp1696 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1696;
        }

        var tmp1697 = new InternalStructs.servoState_result();
        await tmp1697.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1697.__isset.success)
        {
          return tmp1697.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> playbackState(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackState(c, cancellationToken);
        return await recv_playbackState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackState(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1698 = new InternalStructs.playbackState_args() {
          C = c,
        };
        
        await tmp1698.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackState> recv_playbackState(CancellationToken cancellationToken = default)
      {
        
        var tmp1699 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1699.Type == TMessageType.Exception)
        {
          var tmp1700 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1700;
        }

        var tmp1701 = new InternalStructs.playbackState_result();
        await tmp1701.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1701.__isset.success)
        {
          return tmp1701.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await send_playbackCycle(c, cancellationToken);
        return await recv_playbackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_playbackCycle(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1702 = new InternalStructs.playbackCycle_args() {
          C = c,
        };
        
        await tmp1702.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.PlaybackCycle> recv_playbackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1703 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1703.Type == TMessageType.Exception)
        {
          var tmp1704 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1704;
        }

        var tmp1705 = new InternalStructs.playbackCycle_result();
        await tmp1705.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1705.__isset.success)
        {
          return tmp1705.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "playbackCycle failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await send_setPlaybackCycle(c, cycle, cancellationToken);
        await recv_setPlaybackCycle(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setPlaybackCycle(long c, global::Yaskawa.Ext.API.PlaybackCycle cycle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1706 = new InternalStructs.setPlaybackCycle_args() {
          C = c,
          Cycle = cycle,
        };
        
        await tmp1706.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setPlaybackCycle(CancellationToken cancellationToken = default)
      {
        
        var tmp1707 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1707.Type == TMessageType.Exception)
        {
          var tmp1708 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1708;
        }

        var tmp1709 = new InternalStructs.setPlaybackCycle_result();
        await tmp1709.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run(long c, CancellationToken cancellationToken = default)
      {
        await send_run(c, cancellationToken);
        await recv_run(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_run(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("run", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1710 = new InternalStructs.run_args() {
          C = c,
        };
        
        await tmp1710.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_run(CancellationToken cancellationToken = default)
      {
        
        var tmp1711 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1711.Type == TMessageType.Exception)
        {
          var tmp1712 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1712;
        }

        var tmp1713 = new InternalStructs.run_result();
        await tmp1713.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause(long c, CancellationToken cancellationToken = default)
      {
        await send_pause(c, cancellationToken);
        await recv_pause(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pause(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1714 = new InternalStructs.pause_args() {
          C = c,
        };
        
        await tmp1714.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_pause(CancellationToken cancellationToken = default)
      {
        
        var tmp1715 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1715.Type == TMessageType.Exception)
        {
          var tmp1716 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1716;
        }

        var tmp1717 = new InternalStructs.pause_result();
        await tmp1717.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume(long c, CancellationToken cancellationToken = default)
      {
        await send_resume(c, cancellationToken);
        await recv_resume(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resume(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1718 = new InternalStructs.resume_args() {
          C = c,
        };
        
        await tmp1718.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_resume(CancellationToken cancellationToken = default)
      {
        
        var tmp1719 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1719.Type == TMessageType.Exception)
        {
          var tmp1720 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1720;
        }

        var tmp1721 = new InternalStructs.resume_result();
        await tmp1721.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop(long c, CancellationToken cancellationToken = default)
      {
        await send_stop(c, cancellationToken);
        await recv_stop(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stop(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1722 = new InternalStructs.stop_args() {
          C = c,
        };
        
        await tmp1722.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_stop(CancellationToken cancellationToken = default)
      {
        
        var tmp1723 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1723.Type == TMessageType.Exception)
        {
          var tmp1724 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1724;
        }

        var tmp1725 = new InternalStructs.stop_result();
        await tmp1725.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> currentJob(long c, CancellationToken cancellationToken = default)
      {
        await send_currentJob(c, cancellationToken);
        return await recv_currentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1726 = new InternalStructs.currentJob_args() {
          C = c,
        };
        
        await tmp1726.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1727 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1727.Type == TMessageType.Exception)
        {
          var tmp1728 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1728;
        }

        var tmp1729 = new InternalStructs.currentJob_result();
        await tmp1729.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1729.__isset.success)
        {
          return tmp1729.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await send_setCurrentJob(c, name, line, cancellationToken);
        await recv_setCurrentJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setCurrentJob(long c, string name, int line, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1730 = new InternalStructs.setCurrentJob_args() {
          C = c,
          Name = name,
          Line = line,
        };
        
        await tmp1730.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setCurrentJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1731 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1731.Type == TMessageType.Exception)
        {
          var tmp1732 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1732;
        }

        var tmp1733 = new InternalStructs.setCurrentJob_result();
        await tmp1733.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1733.__isset.e)
        {
          throw tmp1733.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await send_defaultJob(c, cancellationToken);
        return await recv_defaultJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_defaultJob(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1734 = new InternalStructs.defaultJob_args() {
          C = c,
        };
        
        await tmp1734.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_defaultJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1735 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1735.Type == TMessageType.Exception)
        {
          var tmp1736 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1736;
        }

        var tmp1737 = new InternalStructs.defaultJob_result();
        await tmp1737.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1737.__isset.success)
        {
          return tmp1737.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "defaultJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobExists(c, name, cancellationToken);
        return await recv_jobExists(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobExists(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1738 = new InternalStructs.jobExists_args() {
          C = c,
          Name = name,
        };
        
        await tmp1738.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_jobExists(CancellationToken cancellationToken = default)
      {
        
        var tmp1739 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1739.Type == TMessageType.Exception)
        {
          var tmp1740 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1740;
        }

        var tmp1741 = new InternalStructs.jobExists_result();
        await tmp1741.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1741.__isset.success)
        {
          return tmp1741.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobExists failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobDetails(c, name, cancellationToken);
        return await recv_jobDetails(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobDetails(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1742 = new InternalStructs.jobDetails_args() {
          C = c,
          Name = name,
        };
        
        await tmp1742.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.RobotJobInfo> recv_jobDetails(CancellationToken cancellationToken = default)
      {
        
        var tmp1743 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1743.Type == TMessageType.Exception)
        {
          var tmp1744 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1744;
        }

        var tmp1745 = new InternalStructs.jobDetails_result();
        await tmp1745.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1745.__isset.success)
        {
          return tmp1745.Success;
        }
        if (tmp1745.__isset.e)
        {
          throw tmp1745.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobDetails failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobs(long c, CancellationToken cancellationToken = default)
      {
        await send_jobs(c, cancellationToken);
        return await recv_jobs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobs(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1746 = new InternalStructs.jobs_args() {
          C = c,
        };
        
        await tmp1746.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobs(CancellationToken cancellationToken = default)
      {
        
        var tmp1747 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1747.Type == TMessageType.Exception)
        {
          var tmp1748 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1748;
        }

        var tmp1749 = new InternalStructs.jobs_result();
        await tmp1749.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1749.__isset.success)
        {
          return tmp1749.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await send_jobsMatching(c, nameRegex, tag, cancellationToken);
        return await recv_jobsMatching(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobsMatching(long c, string nameRegex, string tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1750 = new InternalStructs.jobsMatching_args() {
          C = c,
          NameRegex = nameRegex,
          Tag = tag,
        };
        
        await tmp1750.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jobsMatching(CancellationToken cancellationToken = default)
      {
        
        var tmp1751 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1751.Type == TMessageType.Exception)
        {
          var tmp1752 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1752;
        }

        var tmp1753 = new InternalStructs.jobsMatching_result();
        await tmp1753.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1753.__isset.success)
        {
          return tmp1753.Success;
        }
        if (tmp1753.__isset.e)
        {
          throw tmp1753.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobsMatching failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await send_duplicateJob(c, existingName, newName, cancellationToken);
        await recv_duplicateJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_duplicateJob(long c, string existingName, string newName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1754 = new InternalStructs.duplicateJob_args() {
          C = c,
          ExistingName = existingName,
          NewName = newName,
        };
        
        await tmp1754.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_duplicateJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1755 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1755.Type == TMessageType.Exception)
        {
          var tmp1756 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1756;
        }

        var tmp1757 = new InternalStructs.duplicateJob_result();
        await tmp1757.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1757.__isset.e)
        {
          throw tmp1757.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_deleteJob(c, name, cancellationToken);
        await recv_deleteJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteJob(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1758 = new InternalStructs.deleteJob_args() {
          C = c,
          Name = name,
        };
        
        await tmp1758.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1759 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1759.Type == TMessageType.Exception)
        {
          var tmp1760 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1760;
        }

        var tmp1761 = new InternalStructs.deleteJob_result();
        await tmp1761.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1761.__isset.e)
        {
          throw tmp1761.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_jobSource(c, name, cancellationToken);
        return await recv_jobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jobSource(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1762 = new InternalStructs.jobSource_args() {
          C = c,
          Name = name,
        };
        
        await tmp1762.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_jobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1763 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1763.Type == TMessageType.Exception)
        {
          var tmp1764 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1764;
        }

        var tmp1765 = new InternalStructs.jobSource_result();
        await tmp1765.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1765.__isset.success)
        {
          return tmp1765.Success;
        }
        if (tmp1765.__isset.e)
        {
          throw tmp1765.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jobSource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await send_storeJobSource(c, name, programmingLanguage, sourceCode, cancellationToken);
        await recv_storeJobSource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_storeJobSource(long c, string name, string programmingLanguage, string sourceCode, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1766 = new InternalStructs.storeJobSource_args() {
          C = c,
          Name = name,
          ProgrammingLanguage = programmingLanguage,
          SourceCode = sourceCode,
        };
        
        await tmp1766.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_storeJobSource(CancellationToken cancellationToken = default)
      {
        
        var tmp1767 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1767.Type == TMessageType.Exception)
        {
          var tmp1768 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1768;
        }

        var tmp1769 = new InternalStructs.storeJobSource_result();
        await tmp1769.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1769.__isset.e)
        {
          throw tmp1769.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> tools(long c, CancellationToken cancellationToken = default)
      {
        await send_tools(c, cancellationToken);
        return await recv_tools(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tools(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1770 = new InternalStructs.tools_args() {
          C = c,
        };
        
        await tmp1770.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_tools(CancellationToken cancellationToken = default)
      {
        
        var tmp1771 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1771.Type == TMessageType.Exception)
        {
          var tmp1772 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1772;
        }

        var tmp1773 = new InternalStructs.tools_result();
        await tmp1773.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1773.__isset.success)
        {
          return tmp1773.Success;
        }
        if (tmp1773.__isset.e)
        {
          throw tmp1773.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tools failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_tool(c, index, cancellationToken);
        return await recv_tool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_tool(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1774 = new InternalStructs.tool_args() {
          C = c,
          Index = index,
        };
        
        await tmp1774.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Tool> recv_tool(CancellationToken cancellationToken = default)
      {
        
        var tmp1775 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1775.Type == TMessageType.Exception)
        {
          var tmp1776 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1776;
        }

        var tmp1777 = new InternalStructs.tool_result();
        await tmp1777.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1777.__isset.success)
        {
          return tmp1777.Success;
        }
        if (tmp1777.__isset.e)
        {
          throw tmp1777.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputNumber(c, name, cancellationToken);
        return await recv_inputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1778 = new InternalStructs.inputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1778.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1779 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1779.Type == TMessageType.Exception)
        {
          var tmp1780 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1780;
        }

        var tmp1781 = new InternalStructs.inputNumber_result();
        await tmp1781.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1781.__isset.success)
        {
          return tmp1781.Success;
        }
        if (tmp1781.__isset.e)
        {
          throw tmp1781.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputGroupNumber(c, name, cancellationToken);
        return await recv_inputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1782 = new InternalStructs.inputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1782.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1783 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1783.Type == TMessageType.Exception)
        {
          var tmp1784 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1784;
        }

        var tmp1785 = new InternalStructs.inputGroupNumber_result();
        await tmp1785.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1785.__isset.success)
        {
          return tmp1785.Success;
        }
        if (tmp1785.__isset.e)
        {
          throw tmp1785.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputNumber(c, name, cancellationToken);
        return await recv_outputNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1786 = new InternalStructs.outputNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1786.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1787 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1787.Type == TMessageType.Exception)
        {
          var tmp1788 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1788;
        }

        var tmp1789 = new InternalStructs.outputNumber_result();
        await tmp1789.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1789.__isset.success)
        {
          return tmp1789.Success;
        }
        if (tmp1789.__isset.e)
        {
          throw tmp1789.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputGroupNumber(c, name, cancellationToken);
        return await recv_outputGroupNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupNumber(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1790 = new InternalStructs.outputGroupNumber_args() {
          C = c,
          Name = name,
        };
        
        await tmp1790.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1791 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1791.Type == TMessageType.Exception)
        {
          var tmp1792 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1792;
        }

        var tmp1793 = new InternalStructs.outputGroupNumber_result();
        await tmp1793.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1793.__isset.success)
        {
          return tmp1793.Success;
        }
        if (tmp1793.__isset.e)
        {
          throw tmp1793.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputName(c, num, cancellationToken);
        return await recv_inputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1794 = new InternalStructs.inputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp1794.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_inputName(CancellationToken cancellationToken = default)
      {
        
        var tmp1795 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1795.Type == TMessageType.Exception)
        {
          var tmp1796 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1796;
        }

        var tmp1797 = new InternalStructs.inputName_result();
        await tmp1797.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1797.__isset.success)
        {
          return tmp1797.Success;
        }
        if (tmp1797.__isset.e)
        {
          throw tmp1797.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputName(c, num, cancellationToken);
        return await recv_outputName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputName(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1798 = new InternalStructs.outputName_args() {
          C = c,
          Num = num,
        };
        
        await tmp1798.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_outputName(CancellationToken cancellationToken = default)
      {
        
        var tmp1799 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1799.Type == TMessageType.Exception)
        {
          var tmp1800 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1800;
        }

        var tmp1801 = new InternalStructs.outputName_result();
        await tmp1801.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1801.__isset.success)
        {
          return tmp1801.Success;
        }
        if (tmp1801.__isset.e)
        {
          throw tmp1801.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setInputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setInputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setInputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1802 = new InternalStructs.setInputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp1802.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await send_setOutputName(c, num, name, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputName(long c, int num, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputName", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1803 = new InternalStructs.setOutputName_args() {
          C = c,
          Num = num,
          Name = name,
        };
        
        await tmp1803.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorInput(c, num, cancellationToken);
        await recv_monitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1804 = new InternalStructs.monitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1804.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp1805 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1805.Type == TMessageType.Exception)
        {
          var tmp1806 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1806;
        }

        var tmp1807 = new InternalStructs.monitorInput_result();
        await tmp1807.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1807.__isset.e)
        {
          throw tmp1807.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1808 = new InternalStructs.monitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1808.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1809 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1809.Type == TMessageType.Exception)
        {
          var tmp1810 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1810;
        }

        var tmp1811 = new InternalStructs.monitorInputGroups_result();
        await tmp1811.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1811.__isset.e)
        {
          throw tmp1811.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_monitorOutput(c, num, cancellationToken);
        await recv_monitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1812 = new InternalStructs.monitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1812.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp1813 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1813.Type == TMessageType.Exception)
        {
          var tmp1814 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1814;
        }

        var tmp1815 = new InternalStructs.monitorOutput_result();
        await tmp1815.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1815.__isset.e)
        {
          throw tmp1815.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_monitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_monitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1816 = new InternalStructs.monitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1816.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1817 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1817.Type == TMessageType.Exception)
        {
          var tmp1818 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1818;
        }

        var tmp1819 = new InternalStructs.monitorOutputGroups_result();
        await tmp1819.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1819.__isset.e)
        {
          throw tmp1819.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInput(c, num, cancellationToken);
        await recv_unmonitorInput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1820 = new InternalStructs.unmonitorInput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1820.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInput(CancellationToken cancellationToken = default)
      {
        
        var tmp1821 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1821.Type == TMessageType.Exception)
        {
          var tmp1822 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1822;
        }

        var tmp1823 = new InternalStructs.unmonitorInput_result();
        await tmp1823.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorInputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorInputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorInputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1824 = new InternalStructs.unmonitorInputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1824.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorInputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1825 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1825.Type == TMessageType.Exception)
        {
          var tmp1826 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1826;
        }

        var tmp1827 = new InternalStructs.unmonitorInputGroups_result();
        await tmp1827.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutput(c, num, cancellationToken);
        await recv_unmonitorOutput(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutput(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1828 = new InternalStructs.unmonitorOutput_args() {
          C = c,
          Num = num,
        };
        
        await tmp1828.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutput(CancellationToken cancellationToken = default)
      {
        
        var tmp1829 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1829.Type == TMessageType.Exception)
        {
          var tmp1830 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1830;
        }

        var tmp1831 = new InternalStructs.unmonitorOutput_result();
        await tmp1831.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_unmonitorOutputGroups(c, groupNum, count, cancellationToken);
        await recv_unmonitorOutputGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorOutputGroups(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1832 = new InternalStructs.unmonitorOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1832.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorOutputGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1833 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1833.Type == TMessageType.Exception)
        {
          var tmp1834 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1834;
        }

        var tmp1835 = new InternalStructs.unmonitorOutputGroups_result();
        await tmp1835.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputValue(c, num, cancellationToken);
        return await recv_inputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1836 = new InternalStructs.inputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp1836.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1837 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1837.Type == TMessageType.Exception)
        {
          var tmp1838 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1838;
        }

        var tmp1839 = new InternalStructs.inputValue_result();
        await tmp1839.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1839.__isset.success)
        {
          return tmp1839.Success;
        }
        if (tmp1839.__isset.e)
        {
          throw tmp1839.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_inputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_inputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1840 = new InternalStructs.inputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1840.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1841 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1841.Type == TMessageType.Exception)
        {
          var tmp1842 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1842;
        }

        var tmp1843 = new InternalStructs.inputGroupsValue_result();
        await tmp1843.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1843.__isset.success)
        {
          return tmp1843.Success;
        }
        if (tmp1843.__isset.e)
        {
          throw tmp1843.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputValue(c, num, cancellationToken);
        return await recv_outputValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputValue(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1844 = new InternalStructs.outputValue_args() {
          C = c,
          Num = num,
        };
        
        await tmp1844.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1845 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1845.Type == TMessageType.Exception)
        {
          var tmp1846 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1846;
        }

        var tmp1847 = new InternalStructs.outputValue_result();
        await tmp1847.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1847.__isset.success)
        {
          return tmp1847.Success;
        }
        if (tmp1847.__isset.e)
        {
          throw tmp1847.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await send_outputGroupsValue(c, groupNum, count, cancellationToken);
        return await recv_outputGroupsValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputGroupsValue(long c, int groupNum, int count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1848 = new InternalStructs.outputGroupsValue_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
        };
        
        await tmp1848.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputGroupsValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1849 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1849.Type == TMessageType.Exception)
        {
          var tmp1850 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1850;
        }

        var tmp1851 = new InternalStructs.outputGroupsValue_result();
        await tmp1851.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1851.__isset.success)
        {
          return tmp1851.Success;
        }
        if (tmp1851.__isset.e)
        {
          throw tmp1851.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputGroupsValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutput(c, num, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutput(long c, int num, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutput", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1852 = new InternalStructs.setOutput_args() {
          C = c,
          Num = num,
          Value = @value,
        };
        
        await tmp1852.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputGroups(c, groupNum, count, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputGroups(long c, int groupNum, int count, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputGroups", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1853 = new InternalStructs.setOutputGroups_args() {
          C = c,
          GroupNum = groupNum,
          Count = count,
          Value = @value,
        };
        
        await tmp1853.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_inputAddress(c, name, cancellationToken);
        return await recv_inputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1854 = new InternalStructs.inputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp1854.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1855 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1855.Type == TMessageType.Exception)
        {
          var tmp1856 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1856;
        }

        var tmp1857 = new InternalStructs.inputAddress_result();
        await tmp1857.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1857.__isset.success)
        {
          return tmp1857.Success;
        }
        if (tmp1857.__isset.e)
        {
          throw tmp1857.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_inputAddressByNumber(c, num, cancellationToken);
        return await recv_inputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1858 = new InternalStructs.inputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp1858.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_inputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1859 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1859.Type == TMessageType.Exception)
        {
          var tmp1860 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1860;
        }

        var tmp1861 = new InternalStructs.inputAddressByNumber_result();
        await tmp1861.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1861.__isset.success)
        {
          return tmp1861.Success;
        }
        if (tmp1861.__isset.e)
        {
          throw tmp1861.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_outputAddress(c, name, cancellationToken);
        return await recv_outputAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddress(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1862 = new InternalStructs.outputAddress_args() {
          C = c,
          Name = name,
        };
        
        await tmp1862.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1863 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1863.Type == TMessageType.Exception)
        {
          var tmp1864 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1864;
        }

        var tmp1865 = new InternalStructs.outputAddress_result();
        await tmp1865.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1865.__isset.success)
        {
          return tmp1865.Success;
        }
        if (tmp1865.__isset.e)
        {
          throw tmp1865.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await send_outputAddressByNumber(c, num, cancellationToken);
        return await recv_outputAddressByNumber(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressByNumber(long c, int num, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1866 = new InternalStructs.outputAddressByNumber_args() {
          C = c,
          Num = num,
        };
        
        await tmp1866.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_outputAddressByNumber(CancellationToken cancellationToken = default)
      {
        
        var tmp1867 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1867.Type == TMessageType.Exception)
        {
          var tmp1868 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1868;
        }

        var tmp1869 = new InternalStructs.outputAddressByNumber_result();
        await tmp1869.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1869.__isset.success)
        {
          return tmp1869.Success;
        }
        if (tmp1869.__isset.e)
        {
          throw tmp1869.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressByNumber failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_monitorIOAddress(c, address, cancellationToken);
        await recv_monitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1870 = new InternalStructs.monitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp1870.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1871 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1871.Type == TMessageType.Exception)
        {
          var tmp1872 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1872;
        }

        var tmp1873 = new InternalStructs.monitorIOAddress_result();
        await tmp1873.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1873.__isset.e)
        {
          throw tmp1873.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_unmonitorIOAddress(c, address, cancellationToken);
        await recv_unmonitorIOAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorIOAddress(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1874 = new InternalStructs.unmonitorIOAddress_args() {
          C = c,
          Address = address,
        };
        
        await tmp1874.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorIOAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1875 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1875.Type == TMessageType.Exception)
        {
          var tmp1876 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1876;
        }

        var tmp1877 = new InternalStructs.unmonitorIOAddress_result();
        await tmp1877.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_inputAddressValue(c, address, cancellationToken);
        return await recv_inputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1878 = new InternalStructs.inputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1878.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_inputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1879 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1879.Type == TMessageType.Exception)
        {
          var tmp1880 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1880;
        }

        var tmp1881 = new InternalStructs.inputAddressValue_result();
        await tmp1881.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1881.__isset.success)
        {
          return tmp1881.Success;
        }
        if (tmp1881.__isset.e)
        {
          throw tmp1881.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_outputAddressValue(c, address, cancellationToken);
        return await recv_outputAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_outputAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1882 = new InternalStructs.outputAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1882.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_outputAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1883 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1883.Type == TMessageType.Exception)
        {
          var tmp1884 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1884;
        }

        var tmp1885 = new InternalStructs.outputAddressValue_result();
        await tmp1885.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1885.__isset.success)
        {
          return tmp1885.Success;
        }
        if (tmp1885.__isset.e)
        {
          throw tmp1885.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "outputAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await send_ioAddressValue(c, address, cancellationToken);
        return await recv_ioAddressValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ioAddressValue(long c, int address, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1886 = new InternalStructs.ioAddressValue_args() {
          C = c,
          Address = address,
        };
        
        await tmp1886.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ioAddressValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1887 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1887.Type == TMessageType.Exception)
        {
          var tmp1888 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1888;
        }

        var tmp1889 = new InternalStructs.ioAddressValue_result();
        await tmp1889.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1889.__isset.success)
        {
          return tmp1889.Success;
        }
        if (tmp1889.__isset.e)
        {
          throw tmp1889.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ioAddressValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setOutputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setOutputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setOutputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1890 = new InternalStructs.setOutputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp1890.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await send_setNetworkInputAddress(c, address, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setNetworkInputAddress(long c, int address, bool @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setNetworkInputAddress", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1891 = new InternalStructs.setNetworkInputAddress_args() {
          C = c,
          Address = address,
          Value = @value,
        };
        
        await tmp1891.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_mRegisterValue(c, index, cancellationToken);
        return await recv_mRegisterValue(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mRegisterValue(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1892 = new InternalStructs.mRegisterValue_args() {
          C = c,
          Index = index,
        };
        
        await tmp1892.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_mRegisterValue(CancellationToken cancellationToken = default)
      {
        
        var tmp1893 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1893.Type == TMessageType.Exception)
        {
          var tmp1894 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1894;
        }

        var tmp1895 = new InternalStructs.mRegisterValue_result();
        await tmp1895.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1895.__isset.success)
        {
          return tmp1895.Success;
        }
        if (tmp1895.__isset.e)
        {
          throw tmp1895.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mRegisterValue failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await send_setMRegisterValue(c, index, @value, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setMRegisterValue(long c, int index, int @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setMRegisterValue", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp1896 = new InternalStructs.setMRegisterValue_args() {
          C = c,
          Index = index,
          Value = @value,
        };
        
        await tmp1896.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await send_fieldBusStatusInputGroup(c, busType, cancellationToken);
        return await recv_fieldBusStatusInputGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_fieldBusStatusInputGroup(long c, string busType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1897 = new InternalStructs.fieldBusStatusInputGroup_args() {
          C = c,
          BusType = busType,
        };
        
        await tmp1897.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_fieldBusStatusInputGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1898 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1898.Type == TMessageType.Exception)
        {
          var tmp1899 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1899;
        }

        var tmp1900 = new InternalStructs.fieldBusStatusInputGroup_result();
        await tmp1900.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1900.__isset.success)
        {
          return tmp1900.Success;
        }
        if (tmp1900.__isset.e)
        {
          throw tmp1900.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fieldBusStatusInputGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await send_controlGroups(c, cancellationToken);
        return await recv_controlGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controlGroups(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1901 = new InternalStructs.controlGroups_args() {
          C = c,
        };
        
        await tmp1901.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.ControlGroup>> recv_controlGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1902 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1902.Type == TMessageType.Exception)
        {
          var tmp1903 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1903;
        }

        var tmp1904 = new InternalStructs.controlGroups_result();
        await tmp1904.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1904.__isset.success)
        {
          return tmp1904.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controlGroups failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await send_currentControlGroup(c, cancellationToken);
        return await recv_currentControlGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentControlGroup(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1905 = new InternalStructs.currentControlGroup_args() {
          C = c,
        };
        
        await tmp1905.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_currentControlGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1906 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1906.Type == TMessageType.Exception)
        {
          var tmp1907 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1907;
        }

        var tmp1908 = new InternalStructs.currentControlGroup_result();
        await tmp1908.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1908.__isset.success)
        {
          return tmp1908.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentControlGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<sbyte> robotCount(long c, CancellationToken cancellationToken = default)
      {
        await send_robotCount(c, cancellationToken);
        return await recv_robotCount(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_robotCount(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1909 = new InternalStructs.robotCount_args() {
          C = c,
        };
        
        await tmp1909.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<sbyte> recv_robotCount(CancellationToken cancellationToken = default)
      {
        
        var tmp1910 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1910.Type == TMessageType.Exception)
        {
          var tmp1911 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1911;
        }

        var tmp1912 = new InternalStructs.robotCount_result();
        await tmp1912.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1912.__isset.success)
        {
          return tmp1912.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "robotCount failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await send_currentRobot(c, cancellationToken);
        return await recv_currentRobot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentRobot(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1913 = new InternalStructs.currentRobot_args() {
          C = c,
        };
        
        await tmp1913.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_currentRobot(CancellationToken cancellationToken = default)
      {
        
        var tmp1914 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1914.Type == TMessageType.Exception)
        {
          var tmp1915 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1915;
        }

        var tmp1916 = new InternalStructs.currentRobot_result();
        await tmp1916.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1916.__isset.success)
        {
          return tmp1916.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentRobot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variable(c, name, cancellationToken);
        return await recv_variable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variable(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1917 = new InternalStructs.variable_args() {
          C = c,
          Name = name,
        };
        
        await tmp1917.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variable(CancellationToken cancellationToken = default)
      {
        
        var tmp1918 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1918.Type == TMessageType.Exception)
        {
          var tmp1919 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1919;
        }

        var tmp1920 = new InternalStructs.variable_result();
        await tmp1920.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1920.__isset.success)
        {
          return tmp1920.Success;
        }
        if (tmp1920.__isset.e)
        {
          throw tmp1920.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_variableByAddr(c, addr, cancellationToken);
        return await recv_variableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1921 = new InternalStructs.variableByAddr_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1921.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_variableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp1922 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1922.Type == TMessageType.Exception)
        {
          var tmp1923 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1923;
        }

        var tmp1924 = new InternalStructs.variableByAddr_result();
        await tmp1924.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1924.__isset.success)
        {
          return tmp1924.Success;
        }
        if (tmp1924.__isset.e)
        {
          throw tmp1924.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableByAddr failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariable(c, name, @value, cancellationToken);
        await recv_setVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariable(long c, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1925 = new InternalStructs.setVariable_args() {
          C = c,
          Name = name,
          Value = @value,
        };
        
        await tmp1925.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1926 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1926.Type == TMessageType.Exception)
        {
          var tmp1927 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1927;
        }

        var tmp1928 = new InternalStructs.setVariable_result();
        await tmp1928.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1928.__isset.e)
        {
          throw tmp1928.E;
        }
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setVariableByAddr(c, addr, @value, cancellationToken);
        await recv_setVariableByAddr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableByAddr(long c, global::Yaskawa.Ext.API.VariableAddress addr, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1929 = new InternalStructs.setVariableByAddr_args() {
          C = c,
          Addr = addr,
          Value = @value,
        };
        
        await tmp1929.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableByAddr(CancellationToken cancellationToken = default)
      {
        
        var tmp1930 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1930.Type == TMessageType.Exception)
        {
          var tmp1931 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1931;
        }

        var tmp1932 = new InternalStructs.setVariableByAddr_result();
        await tmp1932.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1932.__isset.e)
        {
          throw tmp1932.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByNameAndSpace(c, name, space, cancellationToken);
        return await recv_variableAddrByNameAndSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByNameAndSpace(long c, string name, global::Yaskawa.Ext.API.AddressSpace space, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1933 = new InternalStructs.variableAddrByNameAndSpace_args() {
          C = c,
          Name = name,
          Space = space,
        };
        
        await tmp1933.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByNameAndSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1934 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1934.Type == TMessageType.Exception)
        {
          var tmp1935 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1935;
        }

        var tmp1936 = new InternalStructs.variableAddrByNameAndSpace_result();
        await tmp1936.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1936.__isset.success)
        {
          return tmp1936.Success;
        }
        if (tmp1936.__isset.e)
        {
          throw tmp1936.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByNameAndSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await send_variableAddrByName(c, name, cancellationToken);
        return await recv_variableAddrByName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_variableAddrByName(long c, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1937 = new InternalStructs.variableAddrByName_args() {
          C = c,
          Name = name,
        };
        
        await tmp1937.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.VariableAddress> recv_variableAddrByName(CancellationToken cancellationToken = default)
      {
        
        var tmp1938 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1938.Type == TMessageType.Exception)
        {
          var tmp1939 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1939;
        }

        var tmp1940 = new InternalStructs.variableAddrByName_result();
        await tmp1940.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1940.__isset.success)
        {
          return tmp1940.Success;
        }
        if (tmp1940.__isset.e)
        {
          throw tmp1940.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "variableAddrByName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await send_setVariableName(c, addr, name, cancellationToken);
        await recv_setVariableName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setVariableName(long c, global::Yaskawa.Ext.API.VariableAddress addr, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1941 = new InternalStructs.setVariableName_args() {
          C = c,
          Addr = addr,
          Name = name,
        };
        
        await tmp1941.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setVariableName(CancellationToken cancellationToken = default)
      {
        
        var tmp1942 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1942.Type == TMessageType.Exception)
        {
          var tmp1943 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1943;
        }

        var tmp1944 = new InternalStructs.setVariableName_result();
        await tmp1944.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1944.__isset.e)
        {
          throw tmp1944.E;
        }
      }

      public async global::System.Threading.Tasks.Task monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_monitorVariable(c, addr, cancellationToken);
        await recv_monitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_monitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1945 = new InternalStructs.monitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1945.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_monitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1946 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1946.Type == TMessageType.Exception)
        {
          var tmp1947 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1947;
        }

        var tmp1948 = new InternalStructs.monitorVariable_result();
        await tmp1948.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1948.__isset.e)
        {
          throw tmp1948.E;
        }
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await send_unmonitorVariable(c, addr, cancellationToken);
        await recv_unmonitorVariable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unmonitorVariable(long c, global::Yaskawa.Ext.API.VariableAddress addr, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1949 = new InternalStructs.unmonitorVariable_args() {
          C = c,
          Addr = addr,
        };
        
        await tmp1949.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unmonitorVariable(CancellationToken cancellationToken = default)
      {
        
        var tmp1950 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1950.Type == TMessageType.Exception)
        {
          var tmp1951 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1951;
        }

        var tmp1952 = new InternalStructs.unmonitorVariable_result();
        await tmp1952.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1952.__isset.e)
        {
          throw tmp1952.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_zone(c, index, cancellationToken);
        return await recv_zone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_zone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1953 = new InternalStructs.zone_args() {
          C = c,
          Index = index,
        };
        
        await tmp1953.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Zone> recv_zone(CancellationToken cancellationToken = default)
      {
        
        var tmp1954 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1954.Type == TMessageType.Exception)
        {
          var tmp1955 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1955;
        }

        var tmp1956 = new InternalStructs.zone_result();
        await tmp1956.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1956.__isset.success)
        {
          return tmp1956.Success;
        }
        if (tmp1956.__isset.e)
        {
          throw tmp1956.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "zone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newZone(long c, CancellationToken cancellationToken = default)
      {
        await send_newZone(c, cancellationToken);
        return await recv_newZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newZone(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1957 = new InternalStructs.newZone_args() {
          C = c,
        };
        
        await tmp1957.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1958 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1958.Type == TMessageType.Exception)
        {
          var tmp1959 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1959;
        }

        var tmp1960 = new InternalStructs.newZone_result();
        await tmp1960.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1960.__isset.success)
        {
          return tmp1960.Success;
        }
        if (tmp1960.__isset.e)
        {
          throw tmp1960.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await send_modifyZone(c, index, z, cancellationToken);
        await recv_modifyZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_modifyZone(long c, int index, global::Yaskawa.Ext.API.Zone z, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1961 = new InternalStructs.modifyZone_args() {
          C = c,
          Index = index,
          Z = z,
        };
        
        await tmp1961.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_modifyZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1962 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1962.Type == TMessageType.Exception)
        {
          var tmp1963 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1963;
        }

        var tmp1964 = new InternalStructs.modifyZone_result();
        await tmp1964.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1964.__isset.e)
        {
          throw tmp1964.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteZone(c, index, cancellationToken);
        await recv_deleteZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteZone(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1965 = new InternalStructs.deleteZone_args() {
          C = c,
          Index = index,
        };
        
        await tmp1965.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1966 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1966.Type == TMessageType.Exception)
        {
          var tmp1967 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1967;
        }

        var tmp1968 = new InternalStructs.deleteZone_result();
        await tmp1968.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1968.__isset.e)
        {
          throw tmp1968.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> userFrames(long c, CancellationToken cancellationToken = default)
      {
        await send_userFrames(c, cancellationToken);
        return await recv_userFrames(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrames(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1969 = new InternalStructs.userFrames_args() {
          C = c,
        };
        
        await tmp1969.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<int, string>> recv_userFrames(CancellationToken cancellationToken = default)
      {
        
        var tmp1970 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1970.Type == TMessageType.Exception)
        {
          var tmp1971 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1971;
        }

        var tmp1972 = new InternalStructs.userFrames_result();
        await tmp1972.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1972.__isset.success)
        {
          return tmp1972.Success;
        }
        if (tmp1972.__isset.e)
        {
          throw tmp1972.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrames failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_userFrame(c, index, cancellationToken);
        return await recv_userFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_userFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1973 = new InternalStructs.userFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp1973.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.CoordinateFrame> recv_userFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1974 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1974.Type == TMessageType.Exception)
        {
          var tmp1975 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1975;
        }

        var tmp1976 = new InternalStructs.userFrame_result();
        await tmp1976.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1976.__isset.success)
        {
          return tmp1976.Success;
        }
        if (tmp1976.__isset.e)
        {
          throw tmp1976.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "userFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await send_newUserFrame(c, cancellationToken);
        return await recv_newUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newUserFrame(long c, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1977 = new InternalStructs.newUserFrame_args() {
          C = c,
        };
        
        await tmp1977.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_newUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1978 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1978.Type == TMessageType.Exception)
        {
          var tmp1979 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1979;
        }

        var tmp1980 = new InternalStructs.newUserFrame_result();
        await tmp1980.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1980.__isset.success)
        {
          return tmp1980.Success;
        }
        if (tmp1980.__isset.e)
        {
          throw tmp1980.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newUserFrame failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await send_setUserFrame(c, index, f, cancellationToken);
        await recv_setUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setUserFrame(long c, int index, global::Yaskawa.Ext.API.CoordinateFrame f, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1981 = new InternalStructs.setUserFrame_args() {
          C = c,
          Index = index,
          F = f,
        };
        
        await tmp1981.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1982 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1982.Type == TMessageType.Exception)
        {
          var tmp1983 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1983;
        }

        var tmp1984 = new InternalStructs.setUserFrame_result();
        await tmp1984.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1984.__isset.e)
        {
          throw tmp1984.E;
        }
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await send_deleteUserFrame(c, index, cancellationToken);
        await recv_deleteUserFrame(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteUserFrame(long c, int index, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1985 = new InternalStructs.deleteUserFrame_args() {
          C = c,
          Index = index,
        };
        
        await tmp1985.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteUserFrame(CancellationToken cancellationToken = default)
      {
        
        var tmp1986 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1986.Type == TMessageType.Exception)
        {
          var tmp1987 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1987;
        }

        var tmp1988 = new InternalStructs.deleteUserFrame_result();
        await tmp1988.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1988.__isset.e)
        {
          throw tmp1988.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await send_networkInterfaceAddress(c, controllerInterface, cancellationToken);
        return await recv_networkInterfaceAddress(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_networkInterfaceAddress(long c, string controllerInterface, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1989 = new InternalStructs.networkInterfaceAddress_args() {
          C = c,
          ControllerInterface = controllerInterface,
        };
        
        await tmp1989.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_networkInterfaceAddress(CancellationToken cancellationToken = default)
      {
        
        var tmp1990 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1990.Type == TMessageType.Exception)
        {
          var tmp1991 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1991;
        }

        var tmp1992 = new InternalStructs.networkInterfaceAddress_result();
        await tmp1992.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1992.__isset.success)
        {
          return tmp1992.Success;
        }
        if (tmp1992.__isset.e)
        {
          throw tmp1992.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "networkInterfaceAddress failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkAccess(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkAccess(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1993 = new InternalStructs.requestNetworkAccess_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp1993.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp1994 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1994.Type == TMessageType.Exception)
        {
          var tmp1995 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1995;
        }

        var tmp1996 = new InternalStructs.requestNetworkAccess_result();
        await tmp1996.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1996.__isset.success)
        {
          return tmp1996.Success;
        }
        if (tmp1996.__isset.e)
        {
          throw tmp1996.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkAccess failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkAccess(c, accessHandle, cancellationToken);
        await recv_removeNetworkAccess(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkAccess(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1997 = new InternalStructs.removeNetworkAccess_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp1997.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkAccess(CancellationToken cancellationToken = default)
      {
        
        var tmp1998 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1998.Type == TMessageType.Exception)
        {
          var tmp1999 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1999;
        }

        var tmp2000 = new InternalStructs.removeNetworkAccess_result();
        await tmp2000.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2000.__isset.e)
        {
          throw tmp2000.E;
        }
      }

      public async global::System.Threading.Tasks.Task<int> requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await send_requestNetworkService(c, controllerInterface, port, protocol, cancellationToken);
        return await recv_requestNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_requestNetworkService(long c, string controllerInterface, int port, string protocol, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2001 = new InternalStructs.requestNetworkService_args() {
          C = c,
          ControllerInterface = controllerInterface,
          Port = port,
          Protocol = protocol,
        };
        
        await tmp2001.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_requestNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2002 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2002.Type == TMessageType.Exception)
        {
          var tmp2003 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2003;
        }

        var tmp2004 = new InternalStructs.requestNetworkService_result();
        await tmp2004.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2004.__isset.success)
        {
          return tmp2004.Success;
        }
        if (tmp2004.__isset.e)
        {
          throw tmp2004.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestNetworkService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await send_removeNetworkService(c, accessHandle, cancellationToken);
        await recv_removeNetworkService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeNetworkService(long c, int accessHandle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp2005 = new InternalStructs.removeNetworkService_args() {
          C = c,
          AccessHandle = accessHandle,
        };
        
        await tmp2005.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeNetworkService(CancellationToken cancellationToken = default)
      {
        
        var tmp2006 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp2006.Type == TMessageType.Exception)
        {
          var tmp2007 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2007;
        }

        var tmp2008 = new InternalStructs.removeNetworkService_result();
        await tmp2008.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp2008.__isset.e)
        {
          throw tmp2008.E;
        }
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["requestPermissions"] = requestPermissions_ProcessAsync;
        processMap_["havePermission"] = havePermission_ProcessAsync;
        processMap_["relinquishPermissions"] = relinquishPermissions_ProcessAsync;
        processMap_["connect"] = connect_ProcessAsync;
        processMap_["disconnect"] = disconnect_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["connected"] = connected_ProcessAsync;
        processMap_["connectedHostName"] = connectedHostName_ProcessAsync;
        processMap_["softwareVersion"] = softwareVersion_ProcessAsync;
        processMap_["monitoring"] = monitoring_ProcessAsync;
        processMap_["haveExclusiveControl"] = haveExclusiveControl_ProcessAsync;
        processMap_["operationMode"] = operationMode_ProcessAsync;
        processMap_["servoState"] = servoState_ProcessAsync;
        processMap_["playbackState"] = playbackState_ProcessAsync;
        processMap_["playbackCycle"] = playbackCycle_ProcessAsync;
        processMap_["setPlaybackCycle"] = setPlaybackCycle_ProcessAsync;
        processMap_["run"] = run_ProcessAsync;
        processMap_["pause"] = pause_ProcessAsync;
        processMap_["resume"] = resume_ProcessAsync;
        processMap_["stop"] = stop_ProcessAsync;
        processMap_["currentJob"] = currentJob_ProcessAsync;
        processMap_["setCurrentJob"] = setCurrentJob_ProcessAsync;
        processMap_["defaultJob"] = defaultJob_ProcessAsync;
        processMap_["jobExists"] = jobExists_ProcessAsync;
        processMap_["jobDetails"] = jobDetails_ProcessAsync;
        processMap_["jobs"] = jobs_ProcessAsync;
        processMap_["jobsMatching"] = jobsMatching_ProcessAsync;
        processMap_["duplicateJob"] = duplicateJob_ProcessAsync;
        processMap_["deleteJob"] = deleteJob_ProcessAsync;
        processMap_["jobSource"] = jobSource_ProcessAsync;
        processMap_["storeJobSource"] = storeJobSource_ProcessAsync;
        processMap_["tools"] = tools_ProcessAsync;
        processMap_["tool"] = tool_ProcessAsync;
        processMap_["inputNumber"] = inputNumber_ProcessAsync;
        processMap_["inputGroupNumber"] = inputGroupNumber_ProcessAsync;
        processMap_["outputNumber"] = outputNumber_ProcessAsync;
        processMap_["outputGroupNumber"] = outputGroupNumber_ProcessAsync;
        processMap_["inputName"] = inputName_ProcessAsync;
        processMap_["outputName"] = outputName_ProcessAsync;
        processMap_["setInputName"] = setInputName_ProcessAsync;
        processMap_["setOutputName"] = setOutputName_ProcessAsync;
        processMap_["monitorInput"] = monitorInput_ProcessAsync;
        processMap_["monitorInputGroups"] = monitorInputGroups_ProcessAsync;
        processMap_["monitorOutput"] = monitorOutput_ProcessAsync;
        processMap_["monitorOutputGroups"] = monitorOutputGroups_ProcessAsync;
        processMap_["unmonitorInput"] = unmonitorInput_ProcessAsync;
        processMap_["unmonitorInputGroups"] = unmonitorInputGroups_ProcessAsync;
        processMap_["unmonitorOutput"] = unmonitorOutput_ProcessAsync;
        processMap_["unmonitorOutputGroups"] = unmonitorOutputGroups_ProcessAsync;
        processMap_["inputValue"] = inputValue_ProcessAsync;
        processMap_["inputGroupsValue"] = inputGroupsValue_ProcessAsync;
        processMap_["outputValue"] = outputValue_ProcessAsync;
        processMap_["outputGroupsValue"] = outputGroupsValue_ProcessAsync;
        processMap_["setOutput"] = setOutput_ProcessAsync;
        processMap_["setOutputGroups"] = setOutputGroups_ProcessAsync;
        processMap_["inputAddress"] = inputAddress_ProcessAsync;
        processMap_["inputAddressByNumber"] = inputAddressByNumber_ProcessAsync;
        processMap_["outputAddress"] = outputAddress_ProcessAsync;
        processMap_["outputAddressByNumber"] = outputAddressByNumber_ProcessAsync;
        processMap_["monitorIOAddress"] = monitorIOAddress_ProcessAsync;
        processMap_["unmonitorIOAddress"] = unmonitorIOAddress_ProcessAsync;
        processMap_["inputAddressValue"] = inputAddressValue_ProcessAsync;
        processMap_["outputAddressValue"] = outputAddressValue_ProcessAsync;
        processMap_["ioAddressValue"] = ioAddressValue_ProcessAsync;
        processMap_["setOutputAddress"] = setOutputAddress_ProcessAsync;
        processMap_["setNetworkInputAddress"] = setNetworkInputAddress_ProcessAsync;
        processMap_["mRegisterValue"] = mRegisterValue_ProcessAsync;
        processMap_["setMRegisterValue"] = setMRegisterValue_ProcessAsync;
        processMap_["fieldBusStatusInputGroup"] = fieldBusStatusInputGroup_ProcessAsync;
        processMap_["controlGroups"] = controlGroups_ProcessAsync;
        processMap_["currentControlGroup"] = currentControlGroup_ProcessAsync;
        processMap_["robotCount"] = robotCount_ProcessAsync;
        processMap_["currentRobot"] = currentRobot_ProcessAsync;
        processMap_["variable"] = variable_ProcessAsync;
        processMap_["variableByAddr"] = variableByAddr_ProcessAsync;
        processMap_["setVariable"] = setVariable_ProcessAsync;
        processMap_["setVariableByAddr"] = setVariableByAddr_ProcessAsync;
        processMap_["variableAddrByNameAndSpace"] = variableAddrByNameAndSpace_ProcessAsync;
        processMap_["variableAddrByName"] = variableAddrByName_ProcessAsync;
        processMap_["setVariableName"] = setVariableName_ProcessAsync;
        processMap_["monitorVariable"] = monitorVariable_ProcessAsync;
        processMap_["unmonitorVariable"] = unmonitorVariable_ProcessAsync;
        processMap_["zone"] = zone_ProcessAsync;
        processMap_["newZone"] = newZone_ProcessAsync;
        processMap_["modifyZone"] = modifyZone_ProcessAsync;
        processMap_["deleteZone"] = deleteZone_ProcessAsync;
        processMap_["userFrames"] = userFrames_ProcessAsync;
        processMap_["userFrame"] = userFrame_ProcessAsync;
        processMap_["newUserFrame"] = newUserFrame_ProcessAsync;
        processMap_["setUserFrame"] = setUserFrame_ProcessAsync;
        processMap_["deleteUserFrame"] = deleteUserFrame_ProcessAsync;
        processMap_["networkInterfaceAddress"] = networkInterfaceAddress_ProcessAsync;
        processMap_["requestNetworkAccess"] = requestNetworkAccess_ProcessAsync;
        processMap_["removeNetworkAccess"] = removeNetworkAccess_ProcessAsync;
        processMap_["requestNetworkService"] = requestNetworkService_ProcessAsync;
        processMap_["removeNetworkService"] = removeNetworkService_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task requestPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2009 = new InternalStructs.requestPermissions_args();
        await tmp2009.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2010 = new InternalStructs.requestPermissions_result();
        try
        {
          try
          {
            tmp2010.Success = await _iAsync.requestPermissions(tmp2009.C, tmp2009.Permissions, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2011)
          {
            tmp2010.E = tmp2011;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2010.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2012)
        {
          var tmp2013 = $"Error occurred in {GetType().FullName}: {tmp2012.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2012, tmp2013);
          else
            Console.Error.WriteLine(tmp2013);
          var tmp2014 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2014.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task havePermission_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2015 = new InternalStructs.havePermission_args();
        await tmp2015.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2016 = new InternalStructs.havePermission_result();
        try
        {
          try
          {
            tmp2016.Success = await _iAsync.havePermission(tmp2015.C, tmp2015.Permission, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2017)
          {
            tmp2016.E = tmp2017;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2016.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2018)
        {
          var tmp2019 = $"Error occurred in {GetType().FullName}: {tmp2018.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2018, tmp2019);
          else
            Console.Error.WriteLine(tmp2019);
          var tmp2020 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("havePermission", TMessageType.Exception, seqid), cancellationToken);
          await tmp2020.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task relinquishPermissions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2021 = new InternalStructs.relinquishPermissions_args();
        await tmp2021.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2022 = new InternalStructs.relinquishPermissions_result();
        try
        {
          await _iAsync.relinquishPermissions(tmp2021.C, tmp2021.Permissions, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2022.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2023)
        {
          var tmp2024 = $"Error occurred in {GetType().FullName}: {tmp2023.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2023, tmp2024);
          else
            Console.Error.WriteLine(tmp2024);
          var tmp2025 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("relinquishPermissions", TMessageType.Exception, seqid), cancellationToken);
          await tmp2025.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2026 = new InternalStructs.connect_args();
        await tmp2026.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2027 = new InternalStructs.connect_result();
        try
        {
          await _iAsync.connect(tmp2026.C, tmp2026.HostName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2027.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2028)
        {
          var tmp2029 = $"Error occurred in {GetType().FullName}: {tmp2028.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2028, tmp2029);
          else
            Console.Error.WriteLine(tmp2029);
          var tmp2030 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2030.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task disconnect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2031 = new InternalStructs.disconnect_args();
        await tmp2031.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2032 = new InternalStructs.disconnect_result();
        try
        {
          await _iAsync.disconnect(tmp2031.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2032.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2033)
        {
          var tmp2034 = $"Error occurred in {GetType().FullName}: {tmp2033.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2033, tmp2034);
          else
            Console.Error.WriteLine(tmp2034);
          var tmp2035 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("disconnect", TMessageType.Exception, seqid), cancellationToken);
          await tmp2035.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2036 = new InternalStructs.subscribeEventTypes_args();
        await tmp2036.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2037 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp2036.C, tmp2036.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2037.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2038)
        {
          var tmp2039 = $"Error occurred in {GetType().FullName}: {tmp2038.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2038, tmp2039);
          else
            Console.Error.WriteLine(tmp2039);
          var tmp2040 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2040.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2041 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp2041.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2042 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp2041.C, tmp2041.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2042.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2043)
        {
          var tmp2044 = $"Error occurred in {GetType().FullName}: {tmp2043.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2043, tmp2044);
          else
            Console.Error.WriteLine(tmp2044);
          var tmp2045 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp2045.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2046 = new InternalStructs.events_args();
        await tmp2046.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2047 = new InternalStructs.events_result();
        try
        {
          tmp2047.Success = await _iAsync.events(tmp2046.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2047.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2048)
        {
          var tmp2049 = $"Error occurred in {GetType().FullName}: {tmp2048.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2048, tmp2049);
          else
            Console.Error.WriteLine(tmp2049);
          var tmp2050 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp2050.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connected_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2051 = new InternalStructs.connected_args();
        await tmp2051.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2052 = new InternalStructs.connected_result();
        try
        {
          tmp2052.Success = await _iAsync.connected(tmp2051.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2052.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2053)
        {
          var tmp2054 = $"Error occurred in {GetType().FullName}: {tmp2053.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2053, tmp2054);
          else
            Console.Error.WriteLine(tmp2054);
          var tmp2055 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connected", TMessageType.Exception, seqid), cancellationToken);
          await tmp2055.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task connectedHostName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2056 = new InternalStructs.connectedHostName_args();
        await tmp2056.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2057 = new InternalStructs.connectedHostName_result();
        try
        {
          tmp2057.Success = await _iAsync.connectedHostName(tmp2056.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2057.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2058)
        {
          var tmp2059 = $"Error occurred in {GetType().FullName}: {tmp2058.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2058, tmp2059);
          else
            Console.Error.WriteLine(tmp2059);
          var tmp2060 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connectedHostName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2060.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task softwareVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2061 = new InternalStructs.softwareVersion_args();
        await tmp2061.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2062 = new InternalStructs.softwareVersion_result();
        try
        {
          tmp2062.Success = await _iAsync.softwareVersion(tmp2061.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2062.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2063)
        {
          var tmp2064 = $"Error occurred in {GetType().FullName}: {tmp2063.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2063, tmp2064);
          else
            Console.Error.WriteLine(tmp2064);
          var tmp2065 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("softwareVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp2065.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitoring_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2066 = new InternalStructs.monitoring_args();
        await tmp2066.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2067 = new InternalStructs.monitoring_result();
        try
        {
          tmp2067.Success = await _iAsync.monitoring(tmp2066.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2067.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2068)
        {
          var tmp2069 = $"Error occurred in {GetType().FullName}: {tmp2068.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2068, tmp2069);
          else
            Console.Error.WriteLine(tmp2069);
          var tmp2070 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitoring", TMessageType.Exception, seqid), cancellationToken);
          await tmp2070.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task haveExclusiveControl_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2071 = new InternalStructs.haveExclusiveControl_args();
        await tmp2071.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2072 = new InternalStructs.haveExclusiveControl_result();
        try
        {
          tmp2072.Success = await _iAsync.haveExclusiveControl(tmp2071.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2072.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2073)
        {
          var tmp2074 = $"Error occurred in {GetType().FullName}: {tmp2073.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2073, tmp2074);
          else
            Console.Error.WriteLine(tmp2074);
          var tmp2075 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("haveExclusiveControl", TMessageType.Exception, seqid), cancellationToken);
          await tmp2075.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task operationMode_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2076 = new InternalStructs.operationMode_args();
        await tmp2076.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2077 = new InternalStructs.operationMode_result();
        try
        {
          tmp2077.Success = await _iAsync.operationMode(tmp2076.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2077.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2078)
        {
          var tmp2079 = $"Error occurred in {GetType().FullName}: {tmp2078.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2078, tmp2079);
          else
            Console.Error.WriteLine(tmp2079);
          var tmp2080 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("operationMode", TMessageType.Exception, seqid), cancellationToken);
          await tmp2080.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task servoState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2081 = new InternalStructs.servoState_args();
        await tmp2081.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2082 = new InternalStructs.servoState_result();
        try
        {
          tmp2082.Success = await _iAsync.servoState(tmp2081.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2082.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2083)
        {
          var tmp2084 = $"Error occurred in {GetType().FullName}: {tmp2083.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2083, tmp2084);
          else
            Console.Error.WriteLine(tmp2084);
          var tmp2085 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("servoState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2085.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2086 = new InternalStructs.playbackState_args();
        await tmp2086.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2087 = new InternalStructs.playbackState_result();
        try
        {
          tmp2087.Success = await _iAsync.playbackState(tmp2086.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2087.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2088)
        {
          var tmp2089 = $"Error occurred in {GetType().FullName}: {tmp2088.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2088, tmp2089);
          else
            Console.Error.WriteLine(tmp2089);
          var tmp2090 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackState", TMessageType.Exception, seqid), cancellationToken);
          await tmp2090.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task playbackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2091 = new InternalStructs.playbackCycle_args();
        await tmp2091.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2092 = new InternalStructs.playbackCycle_result();
        try
        {
          tmp2092.Success = await _iAsync.playbackCycle(tmp2091.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2092.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2093)
        {
          var tmp2094 = $"Error occurred in {GetType().FullName}: {tmp2093.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2093, tmp2094);
          else
            Console.Error.WriteLine(tmp2094);
          var tmp2095 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("playbackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2095.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setPlaybackCycle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2096 = new InternalStructs.setPlaybackCycle_args();
        await tmp2096.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2097 = new InternalStructs.setPlaybackCycle_result();
        try
        {
          await _iAsync.setPlaybackCycle(tmp2096.C, tmp2096.Cycle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2097.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2098)
        {
          var tmp2099 = $"Error occurred in {GetType().FullName}: {tmp2098.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2098, tmp2099);
          else
            Console.Error.WriteLine(tmp2099);
          var tmp2100 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setPlaybackCycle", TMessageType.Exception, seqid), cancellationToken);
          await tmp2100.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task run_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2101 = new InternalStructs.run_args();
        await tmp2101.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2102 = new InternalStructs.run_result();
        try
        {
          await _iAsync.run(tmp2101.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2102.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2103)
        {
          var tmp2104 = $"Error occurred in {GetType().FullName}: {tmp2103.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2103, tmp2104);
          else
            Console.Error.WriteLine(tmp2104);
          var tmp2105 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("run", TMessageType.Exception, seqid), cancellationToken);
          await tmp2105.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pause_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2106 = new InternalStructs.pause_args();
        await tmp2106.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2107 = new InternalStructs.pause_result();
        try
        {
          await _iAsync.pause(tmp2106.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2107.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2108)
        {
          var tmp2109 = $"Error occurred in {GetType().FullName}: {tmp2108.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2108, tmp2109);
          else
            Console.Error.WriteLine(tmp2109);
          var tmp2110 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pause", TMessageType.Exception, seqid), cancellationToken);
          await tmp2110.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resume_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2111 = new InternalStructs.resume_args();
        await tmp2111.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2112 = new InternalStructs.resume_result();
        try
        {
          await _iAsync.resume(tmp2111.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2112.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2113)
        {
          var tmp2114 = $"Error occurred in {GetType().FullName}: {tmp2113.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2113, tmp2114);
          else
            Console.Error.WriteLine(tmp2114);
          var tmp2115 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resume", TMessageType.Exception, seqid), cancellationToken);
          await tmp2115.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stop_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2116 = new InternalStructs.stop_args();
        await tmp2116.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2117 = new InternalStructs.stop_result();
        try
        {
          await _iAsync.stop(tmp2116.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2117.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2118)
        {
          var tmp2119 = $"Error occurred in {GetType().FullName}: {tmp2118.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2118, tmp2119);
          else
            Console.Error.WriteLine(tmp2119);
          var tmp2120 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stop", TMessageType.Exception, seqid), cancellationToken);
          await tmp2120.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2121 = new InternalStructs.currentJob_args();
        await tmp2121.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2122 = new InternalStructs.currentJob_result();
        try
        {
          tmp2122.Success = await _iAsync.currentJob(tmp2121.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2122.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2123)
        {
          var tmp2124 = $"Error occurred in {GetType().FullName}: {tmp2123.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2123, tmp2124);
          else
            Console.Error.WriteLine(tmp2124);
          var tmp2125 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2125.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setCurrentJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2126 = new InternalStructs.setCurrentJob_args();
        await tmp2126.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2127 = new InternalStructs.setCurrentJob_result();
        try
        {
          try
          {
            await _iAsync.setCurrentJob(tmp2126.C, tmp2126.Name, tmp2126.Line, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2128)
          {
            tmp2127.E = tmp2128;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2127.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2129)
        {
          var tmp2130 = $"Error occurred in {GetType().FullName}: {tmp2129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2129, tmp2130);
          else
            Console.Error.WriteLine(tmp2130);
          var tmp2131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setCurrentJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task defaultJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2132 = new InternalStructs.defaultJob_args();
        await tmp2132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2133 = new InternalStructs.defaultJob_result();
        try
        {
          tmp2133.Success = await _iAsync.defaultJob(tmp2132.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2134)
        {
          var tmp2135 = $"Error occurred in {GetType().FullName}: {tmp2134.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2134, tmp2135);
          else
            Console.Error.WriteLine(tmp2135);
          var tmp2136 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("defaultJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2136.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobExists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2137 = new InternalStructs.jobExists_args();
        await tmp2137.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2138 = new InternalStructs.jobExists_result();
        try
        {
          tmp2138.Success = await _iAsync.jobExists(tmp2137.C, tmp2137.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2138.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2139)
        {
          var tmp2140 = $"Error occurred in {GetType().FullName}: {tmp2139.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2139, tmp2140);
          else
            Console.Error.WriteLine(tmp2140);
          var tmp2141 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobExists", TMessageType.Exception, seqid), cancellationToken);
          await tmp2141.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobDetails_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2142 = new InternalStructs.jobDetails_args();
        await tmp2142.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2143 = new InternalStructs.jobDetails_result();
        try
        {
          try
          {
            tmp2143.Success = await _iAsync.jobDetails(tmp2142.C, tmp2142.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2144)
          {
            tmp2143.E = tmp2144;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2143.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2145)
        {
          var tmp2146 = $"Error occurred in {GetType().FullName}: {tmp2145.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2145, tmp2146);
          else
            Console.Error.WriteLine(tmp2146);
          var tmp2147 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobDetails", TMessageType.Exception, seqid), cancellationToken);
          await tmp2147.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2148 = new InternalStructs.jobs_args();
        await tmp2148.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2149 = new InternalStructs.jobs_result();
        try
        {
          tmp2149.Success = await _iAsync.jobs(tmp2148.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2149.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2150)
        {
          var tmp2151 = $"Error occurred in {GetType().FullName}: {tmp2150.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2150, tmp2151);
          else
            Console.Error.WriteLine(tmp2151);
          var tmp2152 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobs", TMessageType.Exception, seqid), cancellationToken);
          await tmp2152.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobsMatching_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2153 = new InternalStructs.jobsMatching_args();
        await tmp2153.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2154 = new InternalStructs.jobsMatching_result();
        try
        {
          try
          {
            tmp2154.Success = await _iAsync.jobsMatching(tmp2153.C, tmp2153.NameRegex, tmp2153.Tag, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2155)
          {
            tmp2154.E = tmp2155;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2154.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2156)
        {
          var tmp2157 = $"Error occurred in {GetType().FullName}: {tmp2156.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2156, tmp2157);
          else
            Console.Error.WriteLine(tmp2157);
          var tmp2158 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobsMatching", TMessageType.Exception, seqid), cancellationToken);
          await tmp2158.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task duplicateJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2159 = new InternalStructs.duplicateJob_args();
        await tmp2159.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2160 = new InternalStructs.duplicateJob_result();
        try
        {
          try
          {
            await _iAsync.duplicateJob(tmp2159.C, tmp2159.ExistingName, tmp2159.NewName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2161)
          {
            tmp2160.E = tmp2161;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2160.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2162)
        {
          var tmp2163 = $"Error occurred in {GetType().FullName}: {tmp2162.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2162, tmp2163);
          else
            Console.Error.WriteLine(tmp2163);
          var tmp2164 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("duplicateJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2164.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2165 = new InternalStructs.deleteJob_args();
        await tmp2165.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2166 = new InternalStructs.deleteJob_result();
        try
        {
          try
          {
            await _iAsync.deleteJob(tmp2165.C, tmp2165.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2167)
          {
            tmp2166.E = tmp2167;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2166.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2168)
        {
          var tmp2169 = $"Error occurred in {GetType().FullName}: {tmp2168.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2168, tmp2169);
          else
            Console.Error.WriteLine(tmp2169);
          var tmp2170 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp2170.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2171 = new InternalStructs.jobSource_args();
        await tmp2171.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2172 = new InternalStructs.jobSource_result();
        try
        {
          try
          {
            tmp2172.Success = await _iAsync.jobSource(tmp2171.C, tmp2171.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2173)
          {
            tmp2172.E = tmp2173;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2172.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2174)
        {
          var tmp2175 = $"Error occurred in {GetType().FullName}: {tmp2174.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2174, tmp2175);
          else
            Console.Error.WriteLine(tmp2175);
          var tmp2176 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2176.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task storeJobSource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2177 = new InternalStructs.storeJobSource_args();
        await tmp2177.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2178 = new InternalStructs.storeJobSource_result();
        try
        {
          try
          {
            await _iAsync.storeJobSource(tmp2177.C, tmp2177.Name, tmp2177.ProgrammingLanguage, tmp2177.SourceCode, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2179)
          {
            tmp2178.E = tmp2179;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2178.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2180)
        {
          var tmp2181 = $"Error occurred in {GetType().FullName}: {tmp2180.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2180, tmp2181);
          else
            Console.Error.WriteLine(tmp2181);
          var tmp2182 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("storeJobSource", TMessageType.Exception, seqid), cancellationToken);
          await tmp2182.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tools_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2183 = new InternalStructs.tools_args();
        await tmp2183.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2184 = new InternalStructs.tools_result();
        try
        {
          try
          {
            tmp2184.Success = await _iAsync.tools(tmp2183.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2185)
          {
            tmp2184.E = tmp2185;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2184.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2186)
        {
          var tmp2187 = $"Error occurred in {GetType().FullName}: {tmp2186.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2186, tmp2187);
          else
            Console.Error.WriteLine(tmp2187);
          var tmp2188 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tools", TMessageType.Exception, seqid), cancellationToken);
          await tmp2188.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task tool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2189 = new InternalStructs.tool_args();
        await tmp2189.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2190 = new InternalStructs.tool_result();
        try
        {
          try
          {
            tmp2190.Success = await _iAsync.tool(tmp2189.C, tmp2189.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2191)
          {
            tmp2190.E = tmp2191;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2190.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2192)
        {
          var tmp2193 = $"Error occurred in {GetType().FullName}: {tmp2192.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2192, tmp2193);
          else
            Console.Error.WriteLine(tmp2193);
          var tmp2194 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("tool", TMessageType.Exception, seqid), cancellationToken);
          await tmp2194.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2195 = new InternalStructs.inputNumber_args();
        await tmp2195.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2196 = new InternalStructs.inputNumber_result();
        try
        {
          try
          {
            tmp2196.Success = await _iAsync.inputNumber(tmp2195.C, tmp2195.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2197)
          {
            tmp2196.E = tmp2197;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2196.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2198)
        {
          var tmp2199 = $"Error occurred in {GetType().FullName}: {tmp2198.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2198, tmp2199);
          else
            Console.Error.WriteLine(tmp2199);
          var tmp2200 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2200.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2201 = new InternalStructs.inputGroupNumber_args();
        await tmp2201.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2202 = new InternalStructs.inputGroupNumber_result();
        try
        {
          try
          {
            tmp2202.Success = await _iAsync.inputGroupNumber(tmp2201.C, tmp2201.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2203)
          {
            tmp2202.E = tmp2203;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2202.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2204)
        {
          var tmp2205 = $"Error occurred in {GetType().FullName}: {tmp2204.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2204, tmp2205);
          else
            Console.Error.WriteLine(tmp2205);
          var tmp2206 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2206.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2207 = new InternalStructs.outputNumber_args();
        await tmp2207.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2208 = new InternalStructs.outputNumber_result();
        try
        {
          try
          {
            tmp2208.Success = await _iAsync.outputNumber(tmp2207.C, tmp2207.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2209)
          {
            tmp2208.E = tmp2209;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2208.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2210)
        {
          var tmp2211 = $"Error occurred in {GetType().FullName}: {tmp2210.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2210, tmp2211);
          else
            Console.Error.WriteLine(tmp2211);
          var tmp2212 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2212.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2213 = new InternalStructs.outputGroupNumber_args();
        await tmp2213.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2214 = new InternalStructs.outputGroupNumber_result();
        try
        {
          try
          {
            tmp2214.Success = await _iAsync.outputGroupNumber(tmp2213.C, tmp2213.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2215)
          {
            tmp2214.E = tmp2215;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2214.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2216)
        {
          var tmp2217 = $"Error occurred in {GetType().FullName}: {tmp2216.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2216, tmp2217);
          else
            Console.Error.WriteLine(tmp2217);
          var tmp2218 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2218.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2219 = new InternalStructs.inputName_args();
        await tmp2219.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2220 = new InternalStructs.inputName_result();
        try
        {
          try
          {
            tmp2220.Success = await _iAsync.inputName(tmp2219.C, tmp2219.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2221)
          {
            tmp2220.E = tmp2221;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2220.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2222)
        {
          var tmp2223 = $"Error occurred in {GetType().FullName}: {tmp2222.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2222, tmp2223);
          else
            Console.Error.WriteLine(tmp2223);
          var tmp2224 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2224.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2225 = new InternalStructs.outputName_args();
        await tmp2225.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2226 = new InternalStructs.outputName_result();
        try
        {
          try
          {
            tmp2226.Success = await _iAsync.outputName(tmp2225.C, tmp2225.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2227)
          {
            tmp2226.E = tmp2227;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2226.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2228)
        {
          var tmp2229 = $"Error occurred in {GetType().FullName}: {tmp2228.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2228, tmp2229);
          else
            Console.Error.WriteLine(tmp2229);
          var tmp2230 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2230.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setInputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2231 = new InternalStructs.setInputName_args();
        await tmp2231.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setInputName(tmp2231.C, tmp2231.Num, tmp2231.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2233)
        {
          var tmp2234 = $"Error occurred in {GetType().FullName}: {tmp2233.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2233, tmp2234);
          else
            Console.Error.WriteLine(tmp2234);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2235 = new InternalStructs.setOutputName_args();
        await tmp2235.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputName(tmp2235.C, tmp2235.Num, tmp2235.Name, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2237)
        {
          var tmp2238 = $"Error occurred in {GetType().FullName}: {tmp2237.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2237, tmp2238);
          else
            Console.Error.WriteLine(tmp2238);
        }
      }

      public async global::System.Threading.Tasks.Task monitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2239 = new InternalStructs.monitorInput_args();
        await tmp2239.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2240 = new InternalStructs.monitorInput_result();
        try
        {
          try
          {
            await _iAsync.monitorInput(tmp2239.C, tmp2239.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2241)
          {
            tmp2240.E = tmp2241;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2240.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2242)
        {
          var tmp2243 = $"Error occurred in {GetType().FullName}: {tmp2242.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2242, tmp2243);
          else
            Console.Error.WriteLine(tmp2243);
          var tmp2244 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2244.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2245 = new InternalStructs.monitorInputGroups_args();
        await tmp2245.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2246 = new InternalStructs.monitorInputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorInputGroups(tmp2245.C, tmp2245.GroupNum, tmp2245.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2247)
          {
            tmp2246.E = tmp2247;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2246.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2248)
        {
          var tmp2249 = $"Error occurred in {GetType().FullName}: {tmp2248.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2248, tmp2249);
          else
            Console.Error.WriteLine(tmp2249);
          var tmp2250 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2250.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2251 = new InternalStructs.monitorOutput_args();
        await tmp2251.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2252 = new InternalStructs.monitorOutput_result();
        try
        {
          try
          {
            await _iAsync.monitorOutput(tmp2251.C, tmp2251.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2253)
          {
            tmp2252.E = tmp2253;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2252.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2254)
        {
          var tmp2255 = $"Error occurred in {GetType().FullName}: {tmp2254.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2254, tmp2255);
          else
            Console.Error.WriteLine(tmp2255);
          var tmp2256 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2256.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2257 = new InternalStructs.monitorOutputGroups_args();
        await tmp2257.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2258 = new InternalStructs.monitorOutputGroups_result();
        try
        {
          try
          {
            await _iAsync.monitorOutputGroups(tmp2257.C, tmp2257.GroupNum, tmp2257.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2259)
          {
            tmp2258.E = tmp2259;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2258.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2260)
        {
          var tmp2261 = $"Error occurred in {GetType().FullName}: {tmp2260.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2260, tmp2261);
          else
            Console.Error.WriteLine(tmp2261);
          var tmp2262 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2262.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2263 = new InternalStructs.unmonitorInput_args();
        await tmp2263.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2264 = new InternalStructs.unmonitorInput_result();
        try
        {
          await _iAsync.unmonitorInput(tmp2263.C, tmp2263.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2264.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2265)
        {
          var tmp2266 = $"Error occurred in {GetType().FullName}: {tmp2265.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2265, tmp2266);
          else
            Console.Error.WriteLine(tmp2266);
          var tmp2267 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2267.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorInputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2268 = new InternalStructs.unmonitorInputGroups_args();
        await tmp2268.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2269 = new InternalStructs.unmonitorInputGroups_result();
        try
        {
          await _iAsync.unmonitorInputGroups(tmp2268.C, tmp2268.GroupNum, tmp2268.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2269.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2270)
        {
          var tmp2271 = $"Error occurred in {GetType().FullName}: {tmp2270.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2270, tmp2271);
          else
            Console.Error.WriteLine(tmp2271);
          var tmp2272 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorInputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2272.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2273 = new InternalStructs.unmonitorOutput_args();
        await tmp2273.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2274 = new InternalStructs.unmonitorOutput_result();
        try
        {
          await _iAsync.unmonitorOutput(tmp2273.C, tmp2273.Num, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2274.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2275)
        {
          var tmp2276 = $"Error occurred in {GetType().FullName}: {tmp2275.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2275, tmp2276);
          else
            Console.Error.WriteLine(tmp2276);
          var tmp2277 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp2277.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2278 = new InternalStructs.unmonitorOutputGroups_args();
        await tmp2278.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2279 = new InternalStructs.unmonitorOutputGroups_result();
        try
        {
          await _iAsync.unmonitorOutputGroups(tmp2278.C, tmp2278.GroupNum, tmp2278.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2279.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2280)
        {
          var tmp2281 = $"Error occurred in {GetType().FullName}: {tmp2280.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2280, tmp2281);
          else
            Console.Error.WriteLine(tmp2281);
          var tmp2282 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorOutputGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2282.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2283 = new InternalStructs.inputValue_args();
        await tmp2283.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2284 = new InternalStructs.inputValue_result();
        try
        {
          try
          {
            tmp2284.Success = await _iAsync.inputValue(tmp2283.C, tmp2283.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2285)
          {
            tmp2284.E = tmp2285;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2284.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2286)
        {
          var tmp2287 = $"Error occurred in {GetType().FullName}: {tmp2286.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2286, tmp2287);
          else
            Console.Error.WriteLine(tmp2287);
          var tmp2288 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2288.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2289 = new InternalStructs.inputGroupsValue_args();
        await tmp2289.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2290 = new InternalStructs.inputGroupsValue_result();
        try
        {
          try
          {
            tmp2290.Success = await _iAsync.inputGroupsValue(tmp2289.C, tmp2289.GroupNum, tmp2289.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2291)
          {
            tmp2290.E = tmp2291;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2290.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2292)
        {
          var tmp2293 = $"Error occurred in {GetType().FullName}: {tmp2292.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2292, tmp2293);
          else
            Console.Error.WriteLine(tmp2293);
          var tmp2294 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2294.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2295 = new InternalStructs.outputValue_args();
        await tmp2295.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2296 = new InternalStructs.outputValue_result();
        try
        {
          try
          {
            tmp2296.Success = await _iAsync.outputValue(tmp2295.C, tmp2295.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2297)
          {
            tmp2296.E = tmp2297;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2296.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2298)
        {
          var tmp2299 = $"Error occurred in {GetType().FullName}: {tmp2298.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2298, tmp2299);
          else
            Console.Error.WriteLine(tmp2299);
          var tmp2300 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2300.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputGroupsValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2301 = new InternalStructs.outputGroupsValue_args();
        await tmp2301.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2302 = new InternalStructs.outputGroupsValue_result();
        try
        {
          try
          {
            tmp2302.Success = await _iAsync.outputGroupsValue(tmp2301.C, tmp2301.GroupNum, tmp2301.Count, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2303)
          {
            tmp2302.E = tmp2303;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2302.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2304)
        {
          var tmp2305 = $"Error occurred in {GetType().FullName}: {tmp2304.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2304, tmp2305);
          else
            Console.Error.WriteLine(tmp2305);
          var tmp2306 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputGroupsValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2306.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2307 = new InternalStructs.setOutput_args();
        await tmp2307.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutput(tmp2307.C, tmp2307.Num, tmp2307.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2309)
        {
          var tmp2310 = $"Error occurred in {GetType().FullName}: {tmp2309.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2309, tmp2310);
          else
            Console.Error.WriteLine(tmp2310);
        }
      }

      public async global::System.Threading.Tasks.Task setOutputGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2311 = new InternalStructs.setOutputGroups_args();
        await tmp2311.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputGroups(tmp2311.C, tmp2311.GroupNum, tmp2311.Count, tmp2311.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2313)
        {
          var tmp2314 = $"Error occurred in {GetType().FullName}: {tmp2313.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2313, tmp2314);
          else
            Console.Error.WriteLine(tmp2314);
        }
      }

      public async global::System.Threading.Tasks.Task inputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2315 = new InternalStructs.inputAddress_args();
        await tmp2315.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2316 = new InternalStructs.inputAddress_result();
        try
        {
          try
          {
            tmp2316.Success = await _iAsync.inputAddress(tmp2315.C, tmp2315.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2317)
          {
            tmp2316.E = tmp2317;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2316.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2318)
        {
          var tmp2319 = $"Error occurred in {GetType().FullName}: {tmp2318.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2318, tmp2319);
          else
            Console.Error.WriteLine(tmp2319);
          var tmp2320 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2320.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2321 = new InternalStructs.inputAddressByNumber_args();
        await tmp2321.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2322 = new InternalStructs.inputAddressByNumber_result();
        try
        {
          try
          {
            tmp2322.Success = await _iAsync.inputAddressByNumber(tmp2321.C, tmp2321.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2323)
          {
            tmp2322.E = tmp2323;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2322.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2324)
        {
          var tmp2325 = $"Error occurred in {GetType().FullName}: {tmp2324.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2324, tmp2325);
          else
            Console.Error.WriteLine(tmp2325);
          var tmp2326 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2326.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2327 = new InternalStructs.outputAddress_args();
        await tmp2327.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2328 = new InternalStructs.outputAddress_result();
        try
        {
          try
          {
            tmp2328.Success = await _iAsync.outputAddress(tmp2327.C, tmp2327.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2329)
          {
            tmp2328.E = tmp2329;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2328.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2330)
        {
          var tmp2331 = $"Error occurred in {GetType().FullName}: {tmp2330.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2330, tmp2331);
          else
            Console.Error.WriteLine(tmp2331);
          var tmp2332 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2332.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressByNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2333 = new InternalStructs.outputAddressByNumber_args();
        await tmp2333.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2334 = new InternalStructs.outputAddressByNumber_result();
        try
        {
          try
          {
            tmp2334.Success = await _iAsync.outputAddressByNumber(tmp2333.C, tmp2333.Num, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2335)
          {
            tmp2334.E = tmp2335;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2334.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2336)
        {
          var tmp2337 = $"Error occurred in {GetType().FullName}: {tmp2336.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2336, tmp2337);
          else
            Console.Error.WriteLine(tmp2337);
          var tmp2338 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressByNumber", TMessageType.Exception, seqid), cancellationToken);
          await tmp2338.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2339 = new InternalStructs.monitorIOAddress_args();
        await tmp2339.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2340 = new InternalStructs.monitorIOAddress_result();
        try
        {
          try
          {
            await _iAsync.monitorIOAddress(tmp2339.C, tmp2339.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2341)
          {
            tmp2340.E = tmp2341;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2340.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2342)
        {
          var tmp2343 = $"Error occurred in {GetType().FullName}: {tmp2342.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2342, tmp2343);
          else
            Console.Error.WriteLine(tmp2343);
          var tmp2344 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2344.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorIOAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2345 = new InternalStructs.unmonitorIOAddress_args();
        await tmp2345.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2346 = new InternalStructs.unmonitorIOAddress_result();
        try
        {
          await _iAsync.unmonitorIOAddress(tmp2345.C, tmp2345.Address, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2346.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2347)
        {
          var tmp2348 = $"Error occurred in {GetType().FullName}: {tmp2347.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2347, tmp2348);
          else
            Console.Error.WriteLine(tmp2348);
          var tmp2349 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorIOAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2349.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2350 = new InternalStructs.inputAddressValue_args();
        await tmp2350.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2351 = new InternalStructs.inputAddressValue_result();
        try
        {
          try
          {
            tmp2351.Success = await _iAsync.inputAddressValue(tmp2350.C, tmp2350.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2352)
          {
            tmp2351.E = tmp2352;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2351.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2353)
        {
          var tmp2354 = $"Error occurred in {GetType().FullName}: {tmp2353.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2353, tmp2354);
          else
            Console.Error.WriteLine(tmp2354);
          var tmp2355 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2355.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task outputAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2356 = new InternalStructs.outputAddressValue_args();
        await tmp2356.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2357 = new InternalStructs.outputAddressValue_result();
        try
        {
          try
          {
            tmp2357.Success = await _iAsync.outputAddressValue(tmp2356.C, tmp2356.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2358)
          {
            tmp2357.E = tmp2358;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2357.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2359)
        {
          var tmp2360 = $"Error occurred in {GetType().FullName}: {tmp2359.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2359, tmp2360);
          else
            Console.Error.WriteLine(tmp2360);
          var tmp2361 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("outputAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2361.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ioAddressValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2362 = new InternalStructs.ioAddressValue_args();
        await tmp2362.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2363 = new InternalStructs.ioAddressValue_result();
        try
        {
          try
          {
            tmp2363.Success = await _iAsync.ioAddressValue(tmp2362.C, tmp2362.Address, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2364)
          {
            tmp2363.E = tmp2364;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2363.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2365)
        {
          var tmp2366 = $"Error occurred in {GetType().FullName}: {tmp2365.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2365, tmp2366);
          else
            Console.Error.WriteLine(tmp2366);
          var tmp2367 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ioAddressValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2367.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setOutputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2368 = new InternalStructs.setOutputAddress_args();
        await tmp2368.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setOutputAddress(tmp2368.C, tmp2368.Address, tmp2368.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2370)
        {
          var tmp2371 = $"Error occurred in {GetType().FullName}: {tmp2370.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2370, tmp2371);
          else
            Console.Error.WriteLine(tmp2371);
        }
      }

      public async global::System.Threading.Tasks.Task setNetworkInputAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2372 = new InternalStructs.setNetworkInputAddress_args();
        await tmp2372.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setNetworkInputAddress(tmp2372.C, tmp2372.Address, tmp2372.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2374)
        {
          var tmp2375 = $"Error occurred in {GetType().FullName}: {tmp2374.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2374, tmp2375);
          else
            Console.Error.WriteLine(tmp2375);
        }
      }

      public async global::System.Threading.Tasks.Task mRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2376 = new InternalStructs.mRegisterValue_args();
        await tmp2376.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2377 = new InternalStructs.mRegisterValue_result();
        try
        {
          try
          {
            tmp2377.Success = await _iAsync.mRegisterValue(tmp2376.C, tmp2376.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2378)
          {
            tmp2377.E = tmp2378;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2377.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2379)
        {
          var tmp2380 = $"Error occurred in {GetType().FullName}: {tmp2379.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2379, tmp2380);
          else
            Console.Error.WriteLine(tmp2380);
          var tmp2381 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mRegisterValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp2381.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setMRegisterValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2382 = new InternalStructs.setMRegisterValue_args();
        await tmp2382.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setMRegisterValue(tmp2382.C, tmp2382.Index, tmp2382.Value, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2384)
        {
          var tmp2385 = $"Error occurred in {GetType().FullName}: {tmp2384.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2384, tmp2385);
          else
            Console.Error.WriteLine(tmp2385);
        }
      }

      public async global::System.Threading.Tasks.Task fieldBusStatusInputGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2386 = new InternalStructs.fieldBusStatusInputGroup_args();
        await tmp2386.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2387 = new InternalStructs.fieldBusStatusInputGroup_result();
        try
        {
          try
          {
            tmp2387.Success = await _iAsync.fieldBusStatusInputGroup(tmp2386.C, tmp2386.BusType, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2388)
          {
            tmp2387.E = tmp2388;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2387.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2389)
        {
          var tmp2390 = $"Error occurred in {GetType().FullName}: {tmp2389.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2389, tmp2390);
          else
            Console.Error.WriteLine(tmp2390);
          var tmp2391 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("fieldBusStatusInputGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2391.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controlGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2392 = new InternalStructs.controlGroups_args();
        await tmp2392.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2393 = new InternalStructs.controlGroups_result();
        try
        {
          tmp2393.Success = await _iAsync.controlGroups(tmp2392.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2393.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2394)
        {
          var tmp2395 = $"Error occurred in {GetType().FullName}: {tmp2394.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2394, tmp2395);
          else
            Console.Error.WriteLine(tmp2395);
          var tmp2396 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controlGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp2396.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentControlGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2397 = new InternalStructs.currentControlGroup_args();
        await tmp2397.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2398 = new InternalStructs.currentControlGroup_result();
        try
        {
          tmp2398.Success = await _iAsync.currentControlGroup(tmp2397.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2398.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2399)
        {
          var tmp2400 = $"Error occurred in {GetType().FullName}: {tmp2399.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2399, tmp2400);
          else
            Console.Error.WriteLine(tmp2400);
          var tmp2401 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentControlGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp2401.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task robotCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2402 = new InternalStructs.robotCount_args();
        await tmp2402.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2403 = new InternalStructs.robotCount_result();
        try
        {
          tmp2403.Success = await _iAsync.robotCount(tmp2402.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2403.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2404)
        {
          var tmp2405 = $"Error occurred in {GetType().FullName}: {tmp2404.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2404, tmp2405);
          else
            Console.Error.WriteLine(tmp2405);
          var tmp2406 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("robotCount", TMessageType.Exception, seqid), cancellationToken);
          await tmp2406.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentRobot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2407 = new InternalStructs.currentRobot_args();
        await tmp2407.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2408 = new InternalStructs.currentRobot_result();
        try
        {
          tmp2408.Success = await _iAsync.currentRobot(tmp2407.C, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2408.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2409)
        {
          var tmp2410 = $"Error occurred in {GetType().FullName}: {tmp2409.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2409, tmp2410);
          else
            Console.Error.WriteLine(tmp2410);
          var tmp2411 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentRobot", TMessageType.Exception, seqid), cancellationToken);
          await tmp2411.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2412 = new InternalStructs.variable_args();
        await tmp2412.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2413 = new InternalStructs.variable_result();
        try
        {
          try
          {
            tmp2413.Success = await _iAsync.variable(tmp2412.C, tmp2412.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2414)
          {
            tmp2413.E = tmp2414;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2413.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2415)
        {
          var tmp2416 = $"Error occurred in {GetType().FullName}: {tmp2415.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2415, tmp2416);
          else
            Console.Error.WriteLine(tmp2416);
          var tmp2417 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2417.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2418 = new InternalStructs.variableByAddr_args();
        await tmp2418.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2419 = new InternalStructs.variableByAddr_result();
        try
        {
          try
          {
            tmp2419.Success = await _iAsync.variableByAddr(tmp2418.C, tmp2418.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2420)
          {
            tmp2419.E = tmp2420;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2419.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2421)
        {
          var tmp2422 = $"Error occurred in {GetType().FullName}: {tmp2421.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2421, tmp2422);
          else
            Console.Error.WriteLine(tmp2422);
          var tmp2423 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2423.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2424 = new InternalStructs.setVariable_args();
        await tmp2424.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2425 = new InternalStructs.setVariable_result();
        try
        {
          try
          {
            await _iAsync.setVariable(tmp2424.C, tmp2424.Name, tmp2424.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2426)
          {
            tmp2425.E = tmp2426;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2425.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2427)
        {
          var tmp2428 = $"Error occurred in {GetType().FullName}: {tmp2427.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2427, tmp2428);
          else
            Console.Error.WriteLine(tmp2428);
          var tmp2429 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2429.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableByAddr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2430 = new InternalStructs.setVariableByAddr_args();
        await tmp2430.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2431 = new InternalStructs.setVariableByAddr_result();
        try
        {
          try
          {
            await _iAsync.setVariableByAddr(tmp2430.C, tmp2430.Addr, tmp2430.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2432)
          {
            tmp2431.E = tmp2432;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2431.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2433)
        {
          var tmp2434 = $"Error occurred in {GetType().FullName}: {tmp2433.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2433, tmp2434);
          else
            Console.Error.WriteLine(tmp2434);
          var tmp2435 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableByAddr", TMessageType.Exception, seqid), cancellationToken);
          await tmp2435.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByNameAndSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2436 = new InternalStructs.variableAddrByNameAndSpace_args();
        await tmp2436.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2437 = new InternalStructs.variableAddrByNameAndSpace_result();
        try
        {
          try
          {
            tmp2437.Success = await _iAsync.variableAddrByNameAndSpace(tmp2436.C, tmp2436.Name, tmp2436.Space, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2438)
          {
            tmp2437.E = tmp2438;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2437.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2439)
        {
          var tmp2440 = $"Error occurred in {GetType().FullName}: {tmp2439.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2439, tmp2440);
          else
            Console.Error.WriteLine(tmp2440);
          var tmp2441 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByNameAndSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp2441.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task variableAddrByName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2442 = new InternalStructs.variableAddrByName_args();
        await tmp2442.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2443 = new InternalStructs.variableAddrByName_result();
        try
        {
          try
          {
            tmp2443.Success = await _iAsync.variableAddrByName(tmp2442.C, tmp2442.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2444)
          {
            tmp2443.E = tmp2444;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2443.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2445)
        {
          var tmp2446 = $"Error occurred in {GetType().FullName}: {tmp2445.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2445, tmp2446);
          else
            Console.Error.WriteLine(tmp2446);
          var tmp2447 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("variableAddrByName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2447.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setVariableName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2448 = new InternalStructs.setVariableName_args();
        await tmp2448.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2449 = new InternalStructs.setVariableName_result();
        try
        {
          try
          {
            await _iAsync.setVariableName(tmp2448.C, tmp2448.Addr, tmp2448.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2450)
          {
            tmp2449.E = tmp2450;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2449.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2451)
        {
          var tmp2452 = $"Error occurred in {GetType().FullName}: {tmp2451.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2451, tmp2452);
          else
            Console.Error.WriteLine(tmp2452);
          var tmp2453 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setVariableName", TMessageType.Exception, seqid), cancellationToken);
          await tmp2453.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task monitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2454 = new InternalStructs.monitorVariable_args();
        await tmp2454.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2455 = new InternalStructs.monitorVariable_result();
        try
        {
          try
          {
            await _iAsync.monitorVariable(tmp2454.C, tmp2454.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2456)
          {
            tmp2455.E = tmp2456;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2455.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2457)
        {
          var tmp2458 = $"Error occurred in {GetType().FullName}: {tmp2457.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2457, tmp2458);
          else
            Console.Error.WriteLine(tmp2458);
          var tmp2459 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("monitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2459.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unmonitorVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2460 = new InternalStructs.unmonitorVariable_args();
        await tmp2460.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2461 = new InternalStructs.unmonitorVariable_result();
        try
        {
          try
          {
            await _iAsync.unmonitorVariable(tmp2460.C, tmp2460.Addr, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2462)
          {
            tmp2461.E = tmp2462;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2461.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2463)
        {
          var tmp2464 = $"Error occurred in {GetType().FullName}: {tmp2463.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2463, tmp2464);
          else
            Console.Error.WriteLine(tmp2464);
          var tmp2465 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unmonitorVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp2465.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task zone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2466 = new InternalStructs.zone_args();
        await tmp2466.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2467 = new InternalStructs.zone_result();
        try
        {
          try
          {
            tmp2467.Success = await _iAsync.zone(tmp2466.C, tmp2466.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2468)
          {
            tmp2467.E = tmp2468;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2467.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2469)
        {
          var tmp2470 = $"Error occurred in {GetType().FullName}: {tmp2469.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2469, tmp2470);
          else
            Console.Error.WriteLine(tmp2470);
          var tmp2471 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("zone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2471.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2472 = new InternalStructs.newZone_args();
        await tmp2472.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2473 = new InternalStructs.newZone_result();
        try
        {
          try
          {
            tmp2473.Success = await _iAsync.newZone(tmp2472.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2474)
          {
            tmp2473.E = tmp2474;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2473.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2475)
        {
          var tmp2476 = $"Error occurred in {GetType().FullName}: {tmp2475.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2475, tmp2476);
          else
            Console.Error.WriteLine(tmp2476);
          var tmp2477 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2477.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task modifyZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2478 = new InternalStructs.modifyZone_args();
        await tmp2478.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2479 = new InternalStructs.modifyZone_result();
        try
        {
          try
          {
            await _iAsync.modifyZone(tmp2478.C, tmp2478.Index, tmp2478.Z, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2480)
          {
            tmp2479.E = tmp2480;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2479.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2481)
        {
          var tmp2482 = $"Error occurred in {GetType().FullName}: {tmp2481.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2481, tmp2482);
          else
            Console.Error.WriteLine(tmp2482);
          var tmp2483 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("modifyZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2483.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2484 = new InternalStructs.deleteZone_args();
        await tmp2484.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2485 = new InternalStructs.deleteZone_result();
        try
        {
          try
          {
            await _iAsync.deleteZone(tmp2484.C, tmp2484.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2486)
          {
            tmp2485.E = tmp2486;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2485.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2487)
        {
          var tmp2488 = $"Error occurred in {GetType().FullName}: {tmp2487.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2487, tmp2488);
          else
            Console.Error.WriteLine(tmp2488);
          var tmp2489 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp2489.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2490 = new InternalStructs.userFrames_args();
        await tmp2490.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2491 = new InternalStructs.userFrames_result();
        try
        {
          try
          {
            tmp2491.Success = await _iAsync.userFrames(tmp2490.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2492)
          {
            tmp2491.E = tmp2492;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2491.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2493)
        {
          var tmp2494 = $"Error occurred in {GetType().FullName}: {tmp2493.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2493, tmp2494);
          else
            Console.Error.WriteLine(tmp2494);
          var tmp2495 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrames", TMessageType.Exception, seqid), cancellationToken);
          await tmp2495.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task userFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2496 = new InternalStructs.userFrame_args();
        await tmp2496.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2497 = new InternalStructs.userFrame_result();
        try
        {
          try
          {
            tmp2497.Success = await _iAsync.userFrame(tmp2496.C, tmp2496.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2498)
          {
            tmp2497.E = tmp2498;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2497.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2499)
        {
          var tmp2500 = $"Error occurred in {GetType().FullName}: {tmp2499.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2499, tmp2500);
          else
            Console.Error.WriteLine(tmp2500);
          var tmp2501 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("userFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2501.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task newUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2502 = new InternalStructs.newUserFrame_args();
        await tmp2502.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2503 = new InternalStructs.newUserFrame_result();
        try
        {
          try
          {
            tmp2503.Success = await _iAsync.newUserFrame(tmp2502.C, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2504)
          {
            tmp2503.E = tmp2504;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2503.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2505)
        {
          var tmp2506 = $"Error occurred in {GetType().FullName}: {tmp2505.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2505, tmp2506);
          else
            Console.Error.WriteLine(tmp2506);
          var tmp2507 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2507.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2508 = new InternalStructs.setUserFrame_args();
        await tmp2508.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2509 = new InternalStructs.setUserFrame_result();
        try
        {
          try
          {
            await _iAsync.setUserFrame(tmp2508.C, tmp2508.Index, tmp2508.F, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2510)
          {
            tmp2509.E = tmp2510;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2509.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2511)
        {
          var tmp2512 = $"Error occurred in {GetType().FullName}: {tmp2511.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2511, tmp2512);
          else
            Console.Error.WriteLine(tmp2512);
          var tmp2513 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2513.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteUserFrame_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2514 = new InternalStructs.deleteUserFrame_args();
        await tmp2514.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2515 = new InternalStructs.deleteUserFrame_result();
        try
        {
          try
          {
            await _iAsync.deleteUserFrame(tmp2514.C, tmp2514.Index, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2516)
          {
            tmp2515.E = tmp2516;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2515.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2517)
        {
          var tmp2518 = $"Error occurred in {GetType().FullName}: {tmp2517.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2517, tmp2518);
          else
            Console.Error.WriteLine(tmp2518);
          var tmp2519 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteUserFrame", TMessageType.Exception, seqid), cancellationToken);
          await tmp2519.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task networkInterfaceAddress_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2520 = new InternalStructs.networkInterfaceAddress_args();
        await tmp2520.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2521 = new InternalStructs.networkInterfaceAddress_result();
        try
        {
          try
          {
            tmp2521.Success = await _iAsync.networkInterfaceAddress(tmp2520.C, tmp2520.ControllerInterface, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2522)
          {
            tmp2521.E = tmp2522;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2521.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2523)
        {
          var tmp2524 = $"Error occurred in {GetType().FullName}: {tmp2523.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2523, tmp2524);
          else
            Console.Error.WriteLine(tmp2524);
          var tmp2525 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("networkInterfaceAddress", TMessageType.Exception, seqid), cancellationToken);
          await tmp2525.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2526 = new InternalStructs.requestNetworkAccess_args();
        await tmp2526.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2527 = new InternalStructs.requestNetworkAccess_result();
        try
        {
          try
          {
            tmp2527.Success = await _iAsync.requestNetworkAccess(tmp2526.C, tmp2526.ControllerInterface, tmp2526.Port, tmp2526.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2528)
          {
            tmp2527.E = tmp2528;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2527.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2529)
        {
          var tmp2530 = $"Error occurred in {GetType().FullName}: {tmp2529.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2529, tmp2530);
          else
            Console.Error.WriteLine(tmp2530);
          var tmp2531 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2531.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkAccess_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2532 = new InternalStructs.removeNetworkAccess_args();
        await tmp2532.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2533 = new InternalStructs.removeNetworkAccess_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkAccess(tmp2532.C, tmp2532.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2534)
          {
            tmp2533.E = tmp2534;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2533.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2535)
        {
          var tmp2536 = $"Error occurred in {GetType().FullName}: {tmp2535.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2535, tmp2536);
          else
            Console.Error.WriteLine(tmp2536);
          var tmp2537 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkAccess", TMessageType.Exception, seqid), cancellationToken);
          await tmp2537.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task requestNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2538 = new InternalStructs.requestNetworkService_args();
        await tmp2538.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2539 = new InternalStructs.requestNetworkService_result();
        try
        {
          try
          {
            tmp2539.Success = await _iAsync.requestNetworkService(tmp2538.C, tmp2538.ControllerInterface, tmp2538.Port, tmp2538.Protocol, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2540)
          {
            tmp2539.E = tmp2540;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2539.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2541)
        {
          var tmp2542 = $"Error occurred in {GetType().FullName}: {tmp2541.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2541, tmp2542);
          else
            Console.Error.WriteLine(tmp2542);
          var tmp2543 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("requestNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2543.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeNetworkService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp2544 = new InternalStructs.removeNetworkService_args();
        await tmp2544.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp2545 = new InternalStructs.removeNetworkService_result();
        try
        {
          try
          {
            await _iAsync.removeNetworkService(tmp2544.C, tmp2544.AccessHandle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp2546)
          {
            tmp2545.E = tmp2546;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp2545.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp2547)
        {
          var tmp2548 = $"Error occurred in {GetType().FullName}: {tmp2547.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp2547, tmp2548);
          else
            Console.Error.WriteLine(tmp2548);
          var tmp2549 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeNetworkService", TMessageType.Exception, seqid), cancellationToken);
          await tmp2549.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class requestPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public requestPermissions_args()
        {
        }

        public requestPermissions_args DeepCopy()
        {
          var tmp2550 = new requestPermissions_args();
          if(__isset.c)
          {
            tmp2550.C = this.C;
          }
          tmp2550.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2550.Permissions = this.Permissions.DeepCopy();
          }
          tmp2550.__isset.permissions = this.__isset.permissions;
          return tmp2550;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2551 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2551.Count);
                      for(int _i2552 = 0; _i2552 < _set2551.Count; ++_i2552)
                      {
                        string _elem2553;
                        _elem2553 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2553);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2554 = new TStruct("requestPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2554, cancellationToken);
            var tmp2555 = new TField();
            if(__isset.c)
            {
              tmp2555.Name = "c";
              tmp2555.Type = TType.I64;
              tmp2555.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2555, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2555.Name = "permissions";
              tmp2555.Type = TType.Set;
              tmp2555.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2555, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2556 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2556, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2557 = new StringBuilder("requestPermissions_args(");
          int tmp2558 = 0;
          if(__isset.c)
          {
            if(0 < tmp2558++) { tmp2557.Append(", "); }
            tmp2557.Append("C: ");
            C.ToString(tmp2557);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2558++) { tmp2557.Append(", "); }
            tmp2557.Append("Permissions: ");
            Permissions.ToString(tmp2557);
          }
          tmp2557.Append(')');
          return tmp2557.ToString();
        }
      }


      public partial class requestPermissions_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestPermissions_result()
        {
        }

        public requestPermissions_result DeepCopy()
        {
          var tmp2559 = new requestPermissions_result();
          if(__isset.success)
          {
            tmp2559.Success = this.Success;
          }
          tmp2559.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2559.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2559.__isset.e = this.__isset.e;
          return tmp2559;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2560 = new TStruct("requestPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2560, cancellationToken);
            var tmp2561 = new TField();

            if(this.__isset.success)
            {
              tmp2561.Name = "Success";
              tmp2561.Type = TType.Bool;
              tmp2561.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2561, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2561.Name = "E";
                tmp2561.Type = TType.Struct;
                tmp2561.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2561, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2562 = new StringBuilder("requestPermissions_result(");
          int tmp2563 = 0;
          if(__isset.success)
          {
            if(0 < tmp2563++) { tmp2562.Append(", "); }
            tmp2562.Append("Success: ");
            Success.ToString(tmp2562);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2563++) { tmp2562.Append(", "); }
            tmp2562.Append("E: ");
            E.ToString(tmp2562);
          }
          tmp2562.Append(')');
          return tmp2562.ToString();
        }
      }


      public partial class havePermission_args : TBase
      {
        private long _c;
        private string _permission;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Permission
        {
          get
          {
            return _permission;
          }
          set
          {
            __isset.permission = true;
            this._permission = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permission;
        }

        public havePermission_args()
        {
        }

        public havePermission_args DeepCopy()
        {
          var tmp2564 = new havePermission_args();
          if(__isset.c)
          {
            tmp2564.C = this.C;
          }
          tmp2564.__isset.c = this.__isset.c;
          if((Permission != null) && __isset.permission)
          {
            tmp2564.Permission = this.Permission;
          }
          tmp2564.__isset.permission = this.__isset.permission;
          return tmp2564;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Permission = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2565 = new TStruct("havePermission_args");
            await oprot.WriteStructBeginAsync(tmp2565, cancellationToken);
            var tmp2566 = new TField();
            if(__isset.c)
            {
              tmp2566.Name = "c";
              tmp2566.Type = TType.I64;
              tmp2566.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2566, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permission != null) && __isset.permission)
            {
              tmp2566.Name = "permission";
              tmp2566.Type = TType.String;
              tmp2566.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2566, cancellationToken);
              await oprot.WriteStringAsync(Permission, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permission == other.__isset.permission) && ((!__isset.permission) || (global::System.Object.Equals(Permission, other.Permission))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permission != null) && __isset.permission)
            {
              hashcode = (hashcode * 397) + Permission.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2567 = new StringBuilder("havePermission_args(");
          int tmp2568 = 0;
          if(__isset.c)
          {
            if(0 < tmp2568++) { tmp2567.Append(", "); }
            tmp2567.Append("C: ");
            C.ToString(tmp2567);
          }
          if((Permission != null) && __isset.permission)
          {
            if(0 < tmp2568++) { tmp2567.Append(", "); }
            tmp2567.Append("Permission: ");
            Permission.ToString(tmp2567);
          }
          tmp2567.Append(')');
          return tmp2567.ToString();
        }
      }


      public partial class havePermission_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public havePermission_result()
        {
        }

        public havePermission_result DeepCopy()
        {
          var tmp2569 = new havePermission_result();
          if(__isset.success)
          {
            tmp2569.Success = this.Success;
          }
          tmp2569.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2569.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2569.__isset.e = this.__isset.e;
          return tmp2569;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2570 = new TStruct("havePermission_result");
            await oprot.WriteStructBeginAsync(tmp2570, cancellationToken);
            var tmp2571 = new TField();

            if(this.__isset.success)
            {
              tmp2571.Name = "Success";
              tmp2571.Type = TType.Bool;
              tmp2571.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2571, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2571.Name = "E";
                tmp2571.Type = TType.Struct;
                tmp2571.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2571, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is havePermission_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2572 = new StringBuilder("havePermission_result(");
          int tmp2573 = 0;
          if(__isset.success)
          {
            if(0 < tmp2573++) { tmp2572.Append(", "); }
            tmp2572.Append("Success: ");
            Success.ToString(tmp2572);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2573++) { tmp2572.Append(", "); }
            tmp2572.Append("E: ");
            E.ToString(tmp2572);
          }
          tmp2572.Append(')');
          return tmp2572.ToString();
        }
      }


      public partial class relinquishPermissions_args : TBase
      {
        private long _c;
        private HashSet<string> _permissions;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<string> Permissions
        {
          get
          {
            return _permissions;
          }
          set
          {
            __isset.permissions = true;
            this._permissions = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool permissions;
        }

        public relinquishPermissions_args()
        {
        }

        public relinquishPermissions_args DeepCopy()
        {
          var tmp2574 = new relinquishPermissions_args();
          if(__isset.c)
          {
            tmp2574.C = this.C;
          }
          tmp2574.__isset.c = this.__isset.c;
          if((Permissions != null) && __isset.permissions)
          {
            tmp2574.Permissions = this.Permissions.DeepCopy();
          }
          tmp2574.__isset.permissions = this.__isset.permissions;
          return tmp2574;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2575 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Permissions = new HashSet<string>(_set2575.Count);
                      for(int _i2576 = 0; _i2576 < _set2575.Count; ++_i2576)
                      {
                        string _elem2577;
                        _elem2577 = await iprot.ReadStringAsync(cancellationToken);
                        Permissions.Add(_elem2577);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2578 = new TStruct("relinquishPermissions_args");
            await oprot.WriteStructBeginAsync(tmp2578, cancellationToken);
            var tmp2579 = new TField();
            if(__isset.c)
            {
              tmp2579.Name = "c";
              tmp2579.Type = TType.I64;
              tmp2579.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2579, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Permissions != null) && __isset.permissions)
            {
              tmp2579.Name = "permissions";
              tmp2579.Type = TType.Set;
              tmp2579.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2579, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, Permissions.Count), cancellationToken);
              foreach (string _iter2580 in Permissions)
              {
                await oprot.WriteStringAsync(_iter2580, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.permissions == other.__isset.permissions) && ((!__isset.permissions) || (TCollections.Equals(Permissions, other.Permissions))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Permissions != null) && __isset.permissions)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Permissions);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2581 = new StringBuilder("relinquishPermissions_args(");
          int tmp2582 = 0;
          if(__isset.c)
          {
            if(0 < tmp2582++) { tmp2581.Append(", "); }
            tmp2581.Append("C: ");
            C.ToString(tmp2581);
          }
          if((Permissions != null) && __isset.permissions)
          {
            if(0 < tmp2582++) { tmp2581.Append(", "); }
            tmp2581.Append("Permissions: ");
            Permissions.ToString(tmp2581);
          }
          tmp2581.Append(')');
          return tmp2581.ToString();
        }
      }


      public partial class relinquishPermissions_result : TBase
      {

        public relinquishPermissions_result()
        {
        }

        public relinquishPermissions_result DeepCopy()
        {
          var tmp2583 = new relinquishPermissions_result();
          return tmp2583;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2584 = new TStruct("relinquishPermissions_result");
            await oprot.WriteStructBeginAsync(tmp2584, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is relinquishPermissions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2585 = new StringBuilder("relinquishPermissions_result(");
          tmp2585.Append(')');
          return tmp2585.ToString();
        }
      }


      public partial class connect_args : TBase
      {
        private long _c;
        private string _hostName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string HostName
        {
          get
          {
            return _hostName;
          }
          set
          {
            __isset.hostName = true;
            this._hostName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool hostName;
        }

        public connect_args()
        {
        }

        public connect_args DeepCopy()
        {
          var tmp2587 = new connect_args();
          if(__isset.c)
          {
            tmp2587.C = this.C;
          }
          tmp2587.__isset.c = this.__isset.c;
          if((HostName != null) && __isset.hostName)
          {
            tmp2587.HostName = this.HostName;
          }
          tmp2587.__isset.hostName = this.__isset.hostName;
          return tmp2587;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HostName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2588 = new TStruct("connect_args");
            await oprot.WriteStructBeginAsync(tmp2588, cancellationToken);
            var tmp2589 = new TField();
            if(__isset.c)
            {
              tmp2589.Name = "c";
              tmp2589.Type = TType.I64;
              tmp2589.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2589, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HostName != null) && __isset.hostName)
            {
              tmp2589.Name = "hostName";
              tmp2589.Type = TType.String;
              tmp2589.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2589, cancellationToken);
              await oprot.WriteStringAsync(HostName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.hostName == other.__isset.hostName) && ((!__isset.hostName) || (global::System.Object.Equals(HostName, other.HostName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((HostName != null) && __isset.hostName)
            {
              hashcode = (hashcode * 397) + HostName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2590 = new StringBuilder("connect_args(");
          int tmp2591 = 0;
          if(__isset.c)
          {
            if(0 < tmp2591++) { tmp2590.Append(", "); }
            tmp2590.Append("C: ");
            C.ToString(tmp2590);
          }
          if((HostName != null) && __isset.hostName)
          {
            if(0 < tmp2591++) { tmp2590.Append(", "); }
            tmp2590.Append("HostName: ");
            HostName.ToString(tmp2590);
          }
          tmp2590.Append(')');
          return tmp2590.ToString();
        }
      }


      public partial class connect_result : TBase
      {

        public connect_result()
        {
        }

        public connect_result DeepCopy()
        {
          var tmp2592 = new connect_result();
          return tmp2592;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2593 = new TStruct("connect_result");
            await oprot.WriteStructBeginAsync(tmp2593, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2594 = new StringBuilder("connect_result(");
          tmp2594.Append(')');
          return tmp2594.ToString();
        }
      }


      public partial class disconnect_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public disconnect_args()
        {
        }

        public disconnect_args DeepCopy()
        {
          var tmp2596 = new disconnect_args();
          if(__isset.c)
          {
            tmp2596.C = this.C;
          }
          tmp2596.__isset.c = this.__isset.c;
          return tmp2596;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2597 = new TStruct("disconnect_args");
            await oprot.WriteStructBeginAsync(tmp2597, cancellationToken);
            var tmp2598 = new TField();
            if(__isset.c)
            {
              tmp2598.Name = "c";
              tmp2598.Type = TType.I64;
              tmp2598.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2598, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2599 = new StringBuilder("disconnect_args(");
          int tmp2600 = 0;
          if(__isset.c)
          {
            if(0 < tmp2600++) { tmp2599.Append(", "); }
            tmp2599.Append("C: ");
            C.ToString(tmp2599);
          }
          tmp2599.Append(')');
          return tmp2599.ToString();
        }
      }


      public partial class disconnect_result : TBase
      {

        public disconnect_result()
        {
        }

        public disconnect_result DeepCopy()
        {
          var tmp2601 = new disconnect_result();
          return tmp2601;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2602 = new TStruct("disconnect_result");
            await oprot.WriteStructBeginAsync(tmp2602, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is disconnect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2603 = new StringBuilder("disconnect_result(");
          tmp2603.Append(')');
          return tmp2603.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp2605 = new subscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2605.C = this.C;
          }
          tmp2605.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2605.Types = this.Types.DeepCopy();
          }
          tmp2605.__isset.types = this.__isset.types;
          return tmp2605;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2606 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2606.Count);
                      for(int _i2607 = 0; _i2607 < _set2606.Count; ++_i2607)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2608;
                        _elem2608 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2608);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2609 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2609, cancellationToken);
            var tmp2610 = new TField();
            if(__isset.c)
            {
              tmp2610.Name = "c";
              tmp2610.Type = TType.I64;
              tmp2610.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2610, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2610.Name = "types";
              tmp2610.Type = TType.Set;
              tmp2610.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2610, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2611 in Types)
              {
                await oprot.WriteI32Async((int)_iter2611, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2612 = new StringBuilder("subscribeEventTypes_args(");
          int tmp2613 = 0;
          if(__isset.c)
          {
            if(0 < tmp2613++) { tmp2612.Append(", "); }
            tmp2612.Append("C: ");
            C.ToString(tmp2612);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2613++) { tmp2612.Append(", "); }
            tmp2612.Append("Types: ");
            Types.ToString(tmp2612);
          }
          tmp2612.Append(')');
          return tmp2612.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp2614 = new subscribeEventTypes_result();
          return tmp2614;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2615 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2615, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2616 = new StringBuilder("subscribeEventTypes_result(");
          tmp2616.Append(')');
          return tmp2616.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _c;
        private HashSet<global::Yaskawa.Ext.API.ControllerEventType> _types;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.ControllerEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp2618 = new unsubscribeEventTypes_args();
          if(__isset.c)
          {
            tmp2618.C = this.C;
          }
          tmp2618.__isset.c = this.__isset.c;
          if((Types != null) && __isset.types)
          {
            tmp2618.Types = this.Types.DeepCopy();
          }
          tmp2618.__isset.types = this.__isset.types;
          return tmp2618;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set2619 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.ControllerEventType>(_set2619.Count);
                      for(int _i2620 = 0; _i2620 < _set2619.Count; ++_i2620)
                      {
                        global::Yaskawa.Ext.API.ControllerEventType _elem2621;
                        _elem2621 = (global::Yaskawa.Ext.API.ControllerEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem2621);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2622 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp2622, cancellationToken);
            var tmp2623 = new TField();
            if(__isset.c)
            {
              tmp2623.Name = "c";
              tmp2623.Type = TType.I64;
              tmp2623.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2623, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp2623.Name = "types";
              tmp2623.Type = TType.Set;
              tmp2623.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2623, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.ControllerEventType _iter2624 in Types)
              {
                await oprot.WriteI32Async((int)_iter2624, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2625 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp2626 = 0;
          if(__isset.c)
          {
            if(0 < tmp2626++) { tmp2625.Append(", "); }
            tmp2625.Append("C: ");
            C.ToString(tmp2625);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp2626++) { tmp2625.Append(", "); }
            tmp2625.Append("Types: ");
            Types.ToString(tmp2625);
          }
          tmp2625.Append(')');
          return tmp2625.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp2627 = new unsubscribeEventTypes_result();
          return tmp2627;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2628 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp2628, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2629 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp2629.Append(')');
          return tmp2629.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp2631 = new events_args();
          if(__isset.c)
          {
            tmp2631.C = this.C;
          }
          tmp2631.__isset.c = this.__isset.c;
          return tmp2631;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2632 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp2632, cancellationToken);
            var tmp2633 = new TField();
            if(__isset.c)
            {
              tmp2633.Name = "c";
              tmp2633.Type = TType.I64;
              tmp2633.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2633, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2634 = new StringBuilder("events_args(");
          int tmp2635 = 0;
          if(__isset.c)
          {
            if(0 < tmp2635++) { tmp2634.Append(", "); }
            tmp2634.Append("C: ");
            C.ToString(tmp2634);
          }
          tmp2634.Append(')');
          return tmp2634.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControllerEvent> _success;

        public List<global::Yaskawa.Ext.API.ControllerEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp2636 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp2636.Success = this.Success.DeepCopy();
          }
          tmp2636.__isset.success = this.__isset.success;
          return tmp2636;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2637 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControllerEvent>(_list2637.Count);
                      for(int _i2638 = 0; _i2638 < _list2637.Count; ++_i2638)
                      {
                        global::Yaskawa.Ext.API.ControllerEvent _elem2639;
                        _elem2639 = new global::Yaskawa.Ext.API.ControllerEvent();
                        await _elem2639.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem2639);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2640 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp2640, cancellationToken);
            var tmp2641 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2641.Name = "Success";
                tmp2641.Type = TType.List;
                tmp2641.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2641, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControllerEvent _iter2642 in Success)
                {
                  await _iter2642.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2643 = new StringBuilder("events_result(");
          int tmp2644 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2644++) { tmp2643.Append(", "); }
            tmp2643.Append("Success: ");
            Success.ToString(tmp2643);
          }
          tmp2643.Append(')');
          return tmp2643.ToString();
        }
      }


      public partial class connected_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connected_args()
        {
        }

        public connected_args DeepCopy()
        {
          var tmp2645 = new connected_args();
          if(__isset.c)
          {
            tmp2645.C = this.C;
          }
          tmp2645.__isset.c = this.__isset.c;
          return tmp2645;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2646 = new TStruct("connected_args");
            await oprot.WriteStructBeginAsync(tmp2646, cancellationToken);
            var tmp2647 = new TField();
            if(__isset.c)
            {
              tmp2647.Name = "c";
              tmp2647.Type = TType.I64;
              tmp2647.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2647, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2648 = new StringBuilder("connected_args(");
          int tmp2649 = 0;
          if(__isset.c)
          {
            if(0 < tmp2649++) { tmp2648.Append(", "); }
            tmp2648.Append("C: ");
            C.ToString(tmp2648);
          }
          tmp2648.Append(')');
          return tmp2648.ToString();
        }
      }


      public partial class connected_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connected_result()
        {
        }

        public connected_result DeepCopy()
        {
          var tmp2650 = new connected_result();
          if(__isset.success)
          {
            tmp2650.Success = this.Success;
          }
          tmp2650.__isset.success = this.__isset.success;
          return tmp2650;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2651 = new TStruct("connected_result");
            await oprot.WriteStructBeginAsync(tmp2651, cancellationToken);
            var tmp2652 = new TField();

            if(this.__isset.success)
            {
              tmp2652.Name = "Success";
              tmp2652.Type = TType.Bool;
              tmp2652.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2652, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connected_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2653 = new StringBuilder("connected_result(");
          int tmp2654 = 0;
          if(__isset.success)
          {
            if(0 < tmp2654++) { tmp2653.Append(", "); }
            tmp2653.Append("Success: ");
            Success.ToString(tmp2653);
          }
          tmp2653.Append(')');
          return tmp2653.ToString();
        }
      }


      public partial class connectedHostName_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public connectedHostName_args()
        {
        }

        public connectedHostName_args DeepCopy()
        {
          var tmp2655 = new connectedHostName_args();
          if(__isset.c)
          {
            tmp2655.C = this.C;
          }
          tmp2655.__isset.c = this.__isset.c;
          return tmp2655;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2656 = new TStruct("connectedHostName_args");
            await oprot.WriteStructBeginAsync(tmp2656, cancellationToken);
            var tmp2657 = new TField();
            if(__isset.c)
            {
              tmp2657.Name = "c";
              tmp2657.Type = TType.I64;
              tmp2657.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2657, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2658 = new StringBuilder("connectedHostName_args(");
          int tmp2659 = 0;
          if(__isset.c)
          {
            if(0 < tmp2659++) { tmp2658.Append(", "); }
            tmp2658.Append("C: ");
            C.ToString(tmp2658);
          }
          tmp2658.Append(')');
          return tmp2658.ToString();
        }
      }


      public partial class connectedHostName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connectedHostName_result()
        {
        }

        public connectedHostName_result DeepCopy()
        {
          var tmp2660 = new connectedHostName_result();
          if((Success != null) && __isset.success)
          {
            tmp2660.Success = this.Success;
          }
          tmp2660.__isset.success = this.__isset.success;
          return tmp2660;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2661 = new TStruct("connectedHostName_result");
            await oprot.WriteStructBeginAsync(tmp2661, cancellationToken);
            var tmp2662 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2662.Name = "Success";
                tmp2662.Type = TType.String;
                tmp2662.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2662, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connectedHostName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2663 = new StringBuilder("connectedHostName_result(");
          int tmp2664 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2664++) { tmp2663.Append(", "); }
            tmp2663.Append("Success: ");
            Success.ToString(tmp2663);
          }
          tmp2663.Append(')');
          return tmp2663.ToString();
        }
      }


      public partial class softwareVersion_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public softwareVersion_args()
        {
        }

        public softwareVersion_args DeepCopy()
        {
          var tmp2665 = new softwareVersion_args();
          if(__isset.c)
          {
            tmp2665.C = this.C;
          }
          tmp2665.__isset.c = this.__isset.c;
          return tmp2665;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2666 = new TStruct("softwareVersion_args");
            await oprot.WriteStructBeginAsync(tmp2666, cancellationToken);
            var tmp2667 = new TField();
            if(__isset.c)
            {
              tmp2667.Name = "c";
              tmp2667.Type = TType.I64;
              tmp2667.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2667, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2668 = new StringBuilder("softwareVersion_args(");
          int tmp2669 = 0;
          if(__isset.c)
          {
            if(0 < tmp2669++) { tmp2668.Append(", "); }
            tmp2668.Append("C: ");
            C.ToString(tmp2668);
          }
          tmp2668.Append(')');
          return tmp2668.ToString();
        }
      }


      public partial class softwareVersion_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public softwareVersion_result()
        {
        }

        public softwareVersion_result DeepCopy()
        {
          var tmp2670 = new softwareVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp2670.Success = this.Success;
          }
          tmp2670.__isset.success = this.__isset.success;
          return tmp2670;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2671 = new TStruct("softwareVersion_result");
            await oprot.WriteStructBeginAsync(tmp2671, cancellationToken);
            var tmp2672 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2672.Name = "Success";
                tmp2672.Type = TType.String;
                tmp2672.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2672, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is softwareVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2673 = new StringBuilder("softwareVersion_result(");
          int tmp2674 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2674++) { tmp2673.Append(", "); }
            tmp2673.Append("Success: ");
            Success.ToString(tmp2673);
          }
          tmp2673.Append(')');
          return tmp2673.ToString();
        }
      }


      public partial class monitoring_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public monitoring_args()
        {
        }

        public monitoring_args DeepCopy()
        {
          var tmp2675 = new monitoring_args();
          if(__isset.c)
          {
            tmp2675.C = this.C;
          }
          tmp2675.__isset.c = this.__isset.c;
          return tmp2675;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2676 = new TStruct("monitoring_args");
            await oprot.WriteStructBeginAsync(tmp2676, cancellationToken);
            var tmp2677 = new TField();
            if(__isset.c)
            {
              tmp2677.Name = "c";
              tmp2677.Type = TType.I64;
              tmp2677.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2677, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2678 = new StringBuilder("monitoring_args(");
          int tmp2679 = 0;
          if(__isset.c)
          {
            if(0 < tmp2679++) { tmp2678.Append(", "); }
            tmp2678.Append("C: ");
            C.ToString(tmp2678);
          }
          tmp2678.Append(')');
          return tmp2678.ToString();
        }
      }


      public partial class monitoring_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public monitoring_result()
        {
        }

        public monitoring_result DeepCopy()
        {
          var tmp2680 = new monitoring_result();
          if(__isset.success)
          {
            tmp2680.Success = this.Success;
          }
          tmp2680.__isset.success = this.__isset.success;
          return tmp2680;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2681 = new TStruct("monitoring_result");
            await oprot.WriteStructBeginAsync(tmp2681, cancellationToken);
            var tmp2682 = new TField();

            if(this.__isset.success)
            {
              tmp2682.Name = "Success";
              tmp2682.Type = TType.Bool;
              tmp2682.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2682, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitoring_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2683 = new StringBuilder("monitoring_result(");
          int tmp2684 = 0;
          if(__isset.success)
          {
            if(0 < tmp2684++) { tmp2683.Append(", "); }
            tmp2683.Append("Success: ");
            Success.ToString(tmp2683);
          }
          tmp2683.Append(')');
          return tmp2683.ToString();
        }
      }


      public partial class haveExclusiveControl_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public haveExclusiveControl_args()
        {
        }

        public haveExclusiveControl_args DeepCopy()
        {
          var tmp2685 = new haveExclusiveControl_args();
          if(__isset.c)
          {
            tmp2685.C = this.C;
          }
          tmp2685.__isset.c = this.__isset.c;
          return tmp2685;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2686 = new TStruct("haveExclusiveControl_args");
            await oprot.WriteStructBeginAsync(tmp2686, cancellationToken);
            var tmp2687 = new TField();
            if(__isset.c)
            {
              tmp2687.Name = "c";
              tmp2687.Type = TType.I64;
              tmp2687.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2687, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2688 = new StringBuilder("haveExclusiveControl_args(");
          int tmp2689 = 0;
          if(__isset.c)
          {
            if(0 < tmp2689++) { tmp2688.Append(", "); }
            tmp2688.Append("C: ");
            C.ToString(tmp2688);
          }
          tmp2688.Append(')');
          return tmp2688.ToString();
        }
      }


      public partial class haveExclusiveControl_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public haveExclusiveControl_result()
        {
        }

        public haveExclusiveControl_result DeepCopy()
        {
          var tmp2690 = new haveExclusiveControl_result();
          if(__isset.success)
          {
            tmp2690.Success = this.Success;
          }
          tmp2690.__isset.success = this.__isset.success;
          return tmp2690;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2691 = new TStruct("haveExclusiveControl_result");
            await oprot.WriteStructBeginAsync(tmp2691, cancellationToken);
            var tmp2692 = new TField();

            if(this.__isset.success)
            {
              tmp2692.Name = "Success";
              tmp2692.Type = TType.Bool;
              tmp2692.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2692, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is haveExclusiveControl_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2693 = new StringBuilder("haveExclusiveControl_result(");
          int tmp2694 = 0;
          if(__isset.success)
          {
            if(0 < tmp2694++) { tmp2693.Append(", "); }
            tmp2693.Append("Success: ");
            Success.ToString(tmp2693);
          }
          tmp2693.Append(')');
          return tmp2693.ToString();
        }
      }


      public partial class operationMode_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public operationMode_args()
        {
        }

        public operationMode_args DeepCopy()
        {
          var tmp2695 = new operationMode_args();
          if(__isset.c)
          {
            tmp2695.C = this.C;
          }
          tmp2695.__isset.c = this.__isset.c;
          return tmp2695;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2696 = new TStruct("operationMode_args");
            await oprot.WriteStructBeginAsync(tmp2696, cancellationToken);
            var tmp2697 = new TField();
            if(__isset.c)
            {
              tmp2697.Name = "c";
              tmp2697.Type = TType.I64;
              tmp2697.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2697, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2698 = new StringBuilder("operationMode_args(");
          int tmp2699 = 0;
          if(__isset.c)
          {
            if(0 < tmp2699++) { tmp2698.Append(", "); }
            tmp2698.Append("C: ");
            C.ToString(tmp2698);
          }
          tmp2698.Append(')');
          return tmp2698.ToString();
        }
      }


      public partial class operationMode_result : TBase
      {
        private global::Yaskawa.Ext.API.OperationMode _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OperationMode"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OperationMode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public operationMode_result()
        {
        }

        public operationMode_result DeepCopy()
        {
          var tmp2700 = new operationMode_result();
          if(__isset.success)
          {
            tmp2700.Success = this.Success;
          }
          tmp2700.__isset.success = this.__isset.success;
          return tmp2700;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.OperationMode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2701 = new TStruct("operationMode_result");
            await oprot.WriteStructBeginAsync(tmp2701, cancellationToken);
            var tmp2702 = new TField();

            if(this.__isset.success)
            {
              tmp2702.Name = "Success";
              tmp2702.Type = TType.I32;
              tmp2702.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2702, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is operationMode_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2703 = new StringBuilder("operationMode_result(");
          int tmp2704 = 0;
          if(__isset.success)
          {
            if(0 < tmp2704++) { tmp2703.Append(", "); }
            tmp2703.Append("Success: ");
            Success.ToString(tmp2703);
          }
          tmp2703.Append(')');
          return tmp2703.ToString();
        }
      }


      public partial class servoState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public servoState_args()
        {
        }

        public servoState_args DeepCopy()
        {
          var tmp2705 = new servoState_args();
          if(__isset.c)
          {
            tmp2705.C = this.C;
          }
          tmp2705.__isset.c = this.__isset.c;
          return tmp2705;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2706 = new TStruct("servoState_args");
            await oprot.WriteStructBeginAsync(tmp2706, cancellationToken);
            var tmp2707 = new TField();
            if(__isset.c)
            {
              tmp2707.Name = "c";
              tmp2707.Type = TType.I64;
              tmp2707.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2707, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2708 = new StringBuilder("servoState_args(");
          int tmp2709 = 0;
          if(__isset.c)
          {
            if(0 < tmp2709++) { tmp2708.Append(", "); }
            tmp2708.Append("C: ");
            C.ToString(tmp2708);
          }
          tmp2708.Append(')');
          return tmp2708.ToString();
        }
      }


      public partial class servoState_result : TBase
      {
        private global::Yaskawa.Ext.API.ServoState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.ServoState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.ServoState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public servoState_result()
        {
        }

        public servoState_result DeepCopy()
        {
          var tmp2710 = new servoState_result();
          if(__isset.success)
          {
            tmp2710.Success = this.Success;
          }
          tmp2710.__isset.success = this.__isset.success;
          return tmp2710;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.ServoState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2711 = new TStruct("servoState_result");
            await oprot.WriteStructBeginAsync(tmp2711, cancellationToken);
            var tmp2712 = new TField();

            if(this.__isset.success)
            {
              tmp2712.Name = "Success";
              tmp2712.Type = TType.I32;
              tmp2712.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2712, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is servoState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2713 = new StringBuilder("servoState_result(");
          int tmp2714 = 0;
          if(__isset.success)
          {
            if(0 < tmp2714++) { tmp2713.Append(", "); }
            tmp2713.Append("Success: ");
            Success.ToString(tmp2713);
          }
          tmp2713.Append(')');
          return tmp2713.ToString();
        }
      }


      public partial class playbackState_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackState_args()
        {
        }

        public playbackState_args DeepCopy()
        {
          var tmp2715 = new playbackState_args();
          if(__isset.c)
          {
            tmp2715.C = this.C;
          }
          tmp2715.__isset.c = this.__isset.c;
          return tmp2715;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2716 = new TStruct("playbackState_args");
            await oprot.WriteStructBeginAsync(tmp2716, cancellationToken);
            var tmp2717 = new TField();
            if(__isset.c)
            {
              tmp2717.Name = "c";
              tmp2717.Type = TType.I64;
              tmp2717.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2717, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2718 = new StringBuilder("playbackState_args(");
          int tmp2719 = 0;
          if(__isset.c)
          {
            if(0 < tmp2719++) { tmp2718.Append(", "); }
            tmp2718.Append("C: ");
            C.ToString(tmp2718);
          }
          tmp2718.Append(')');
          return tmp2718.ToString();
        }
      }


      public partial class playbackState_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackState _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackState"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackState_result()
        {
        }

        public playbackState_result DeepCopy()
        {
          var tmp2720 = new playbackState_result();
          if(__isset.success)
          {
            tmp2720.Success = this.Success;
          }
          tmp2720.__isset.success = this.__isset.success;
          return tmp2720;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackState)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2721 = new TStruct("playbackState_result");
            await oprot.WriteStructBeginAsync(tmp2721, cancellationToken);
            var tmp2722 = new TField();

            if(this.__isset.success)
            {
              tmp2722.Name = "Success";
              tmp2722.Type = TType.I32;
              tmp2722.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2722, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2723 = new StringBuilder("playbackState_result(");
          int tmp2724 = 0;
          if(__isset.success)
          {
            if(0 < tmp2724++) { tmp2723.Append(", "); }
            tmp2723.Append("Success: ");
            Success.ToString(tmp2723);
          }
          tmp2723.Append(')');
          return tmp2723.ToString();
        }
      }


      public partial class playbackCycle_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public playbackCycle_args()
        {
        }

        public playbackCycle_args DeepCopy()
        {
          var tmp2725 = new playbackCycle_args();
          if(__isset.c)
          {
            tmp2725.C = this.C;
          }
          tmp2725.__isset.c = this.__isset.c;
          return tmp2725;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2726 = new TStruct("playbackCycle_args");
            await oprot.WriteStructBeginAsync(tmp2726, cancellationToken);
            var tmp2727 = new TField();
            if(__isset.c)
            {
              tmp2727.Name = "c";
              tmp2727.Type = TType.I64;
              tmp2727.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2727, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2728 = new StringBuilder("playbackCycle_args(");
          int tmp2729 = 0;
          if(__isset.c)
          {
            if(0 < tmp2729++) { tmp2728.Append(", "); }
            tmp2728.Append("C: ");
            C.ToString(tmp2728);
          }
          tmp2728.Append(')');
          return tmp2728.ToString();
        }
      }


      public partial class playbackCycle_result : TBase
      {
        private global::Yaskawa.Ext.API.PlaybackCycle _success;

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public playbackCycle_result()
        {
        }

        public playbackCycle_result DeepCopy()
        {
          var tmp2730 = new playbackCycle_result();
          if(__isset.success)
          {
            tmp2730.Success = this.Success;
          }
          tmp2730.__isset.success = this.__isset.success;
          return tmp2730;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2731 = new TStruct("playbackCycle_result");
            await oprot.WriteStructBeginAsync(tmp2731, cancellationToken);
            var tmp2732 = new TField();

            if(this.__isset.success)
            {
              tmp2732.Name = "Success";
              tmp2732.Type = TType.I32;
              tmp2732.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2732, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is playbackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2733 = new StringBuilder("playbackCycle_result(");
          int tmp2734 = 0;
          if(__isset.success)
          {
            if(0 < tmp2734++) { tmp2733.Append(", "); }
            tmp2733.Append("Success: ");
            Success.ToString(tmp2733);
          }
          tmp2733.Append(')');
          return tmp2733.ToString();
        }
      }


      public partial class setPlaybackCycle_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.PlaybackCycle _cycle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.PlaybackCycle"/>
        /// </summary>
        public global::Yaskawa.Ext.API.PlaybackCycle Cycle
        {
          get
          {
            return _cycle;
          }
          set
          {
            __isset.cycle = true;
            this._cycle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool cycle;
        }

        public setPlaybackCycle_args()
        {
        }

        public setPlaybackCycle_args DeepCopy()
        {
          var tmp2735 = new setPlaybackCycle_args();
          if(__isset.c)
          {
            tmp2735.C = this.C;
          }
          tmp2735.__isset.c = this.__isset.c;
          if(__isset.cycle)
          {
            tmp2735.Cycle = this.Cycle;
          }
          tmp2735.__isset.cycle = this.__isset.cycle;
          return tmp2735;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Cycle = (global::Yaskawa.Ext.API.PlaybackCycle)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2736 = new TStruct("setPlaybackCycle_args");
            await oprot.WriteStructBeginAsync(tmp2736, cancellationToken);
            var tmp2737 = new TField();
            if(__isset.c)
            {
              tmp2737.Name = "c";
              tmp2737.Type = TType.I64;
              tmp2737.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2737, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.cycle)
            {
              tmp2737.Name = "cycle";
              tmp2737.Type = TType.I32;
              tmp2737.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2737, cancellationToken);
              await oprot.WriteI32Async((int)Cycle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.cycle == other.__isset.cycle) && ((!__isset.cycle) || (global::System.Object.Equals(Cycle, other.Cycle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.cycle)
            {
              hashcode = (hashcode * 397) + Cycle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2738 = new StringBuilder("setPlaybackCycle_args(");
          int tmp2739 = 0;
          if(__isset.c)
          {
            if(0 < tmp2739++) { tmp2738.Append(", "); }
            tmp2738.Append("C: ");
            C.ToString(tmp2738);
          }
          if(__isset.cycle)
          {
            if(0 < tmp2739++) { tmp2738.Append(", "); }
            tmp2738.Append("Cycle: ");
            Cycle.ToString(tmp2738);
          }
          tmp2738.Append(')');
          return tmp2738.ToString();
        }
      }


      public partial class setPlaybackCycle_result : TBase
      {

        public setPlaybackCycle_result()
        {
        }

        public setPlaybackCycle_result DeepCopy()
        {
          var tmp2740 = new setPlaybackCycle_result();
          return tmp2740;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2741 = new TStruct("setPlaybackCycle_result");
            await oprot.WriteStructBeginAsync(tmp2741, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setPlaybackCycle_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2742 = new StringBuilder("setPlaybackCycle_result(");
          tmp2742.Append(')');
          return tmp2742.ToString();
        }
      }


      public partial class run_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public run_args()
        {
        }

        public run_args DeepCopy()
        {
          var tmp2744 = new run_args();
          if(__isset.c)
          {
            tmp2744.C = this.C;
          }
          tmp2744.__isset.c = this.__isset.c;
          return tmp2744;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2745 = new TStruct("run_args");
            await oprot.WriteStructBeginAsync(tmp2745, cancellationToken);
            var tmp2746 = new TField();
            if(__isset.c)
            {
              tmp2746.Name = "c";
              tmp2746.Type = TType.I64;
              tmp2746.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2746, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2747 = new StringBuilder("run_args(");
          int tmp2748 = 0;
          if(__isset.c)
          {
            if(0 < tmp2748++) { tmp2747.Append(", "); }
            tmp2747.Append("C: ");
            C.ToString(tmp2747);
          }
          tmp2747.Append(')');
          return tmp2747.ToString();
        }
      }


      public partial class run_result : TBase
      {

        public run_result()
        {
        }

        public run_result DeepCopy()
        {
          var tmp2749 = new run_result();
          return tmp2749;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2750 = new TStruct("run_result");
            await oprot.WriteStructBeginAsync(tmp2750, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is run_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2751 = new StringBuilder("run_result(");
          tmp2751.Append(')');
          return tmp2751.ToString();
        }
      }


      public partial class pause_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public pause_args()
        {
        }

        public pause_args DeepCopy()
        {
          var tmp2753 = new pause_args();
          if(__isset.c)
          {
            tmp2753.C = this.C;
          }
          tmp2753.__isset.c = this.__isset.c;
          return tmp2753;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2754 = new TStruct("pause_args");
            await oprot.WriteStructBeginAsync(tmp2754, cancellationToken);
            var tmp2755 = new TField();
            if(__isset.c)
            {
              tmp2755.Name = "c";
              tmp2755.Type = TType.I64;
              tmp2755.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2755, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2756 = new StringBuilder("pause_args(");
          int tmp2757 = 0;
          if(__isset.c)
          {
            if(0 < tmp2757++) { tmp2756.Append(", "); }
            tmp2756.Append("C: ");
            C.ToString(tmp2756);
          }
          tmp2756.Append(')');
          return tmp2756.ToString();
        }
      }


      public partial class pause_result : TBase
      {

        public pause_result()
        {
        }

        public pause_result DeepCopy()
        {
          var tmp2758 = new pause_result();
          return tmp2758;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2759 = new TStruct("pause_result");
            await oprot.WriteStructBeginAsync(tmp2759, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pause_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2760 = new StringBuilder("pause_result(");
          tmp2760.Append(')');
          return tmp2760.ToString();
        }
      }


      public partial class resume_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public resume_args()
        {
        }

        public resume_args DeepCopy()
        {
          var tmp2762 = new resume_args();
          if(__isset.c)
          {
            tmp2762.C = this.C;
          }
          tmp2762.__isset.c = this.__isset.c;
          return tmp2762;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2763 = new TStruct("resume_args");
            await oprot.WriteStructBeginAsync(tmp2763, cancellationToken);
            var tmp2764 = new TField();
            if(__isset.c)
            {
              tmp2764.Name = "c";
              tmp2764.Type = TType.I64;
              tmp2764.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2764, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2765 = new StringBuilder("resume_args(");
          int tmp2766 = 0;
          if(__isset.c)
          {
            if(0 < tmp2766++) { tmp2765.Append(", "); }
            tmp2765.Append("C: ");
            C.ToString(tmp2765);
          }
          tmp2765.Append(')');
          return tmp2765.ToString();
        }
      }


      public partial class resume_result : TBase
      {

        public resume_result()
        {
        }

        public resume_result DeepCopy()
        {
          var tmp2767 = new resume_result();
          return tmp2767;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2768 = new TStruct("resume_result");
            await oprot.WriteStructBeginAsync(tmp2768, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resume_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2769 = new StringBuilder("resume_result(");
          tmp2769.Append(')');
          return tmp2769.ToString();
        }
      }


      public partial class stop_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public stop_args()
        {
        }

        public stop_args DeepCopy()
        {
          var tmp2771 = new stop_args();
          if(__isset.c)
          {
            tmp2771.C = this.C;
          }
          tmp2771.__isset.c = this.__isset.c;
          return tmp2771;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2772 = new TStruct("stop_args");
            await oprot.WriteStructBeginAsync(tmp2772, cancellationToken);
            var tmp2773 = new TField();
            if(__isset.c)
            {
              tmp2773.Name = "c";
              tmp2773.Type = TType.I64;
              tmp2773.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2773, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2774 = new StringBuilder("stop_args(");
          int tmp2775 = 0;
          if(__isset.c)
          {
            if(0 < tmp2775++) { tmp2774.Append(", "); }
            tmp2774.Append("C: ");
            C.ToString(tmp2774);
          }
          tmp2774.Append(')');
          return tmp2774.ToString();
        }
      }


      public partial class stop_result : TBase
      {

        public stop_result()
        {
        }

        public stop_result DeepCopy()
        {
          var tmp2776 = new stop_result();
          return tmp2776;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2777 = new TStruct("stop_result");
            await oprot.WriteStructBeginAsync(tmp2777, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stop_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2778 = new StringBuilder("stop_result(");
          tmp2778.Append(')');
          return tmp2778.ToString();
        }
      }


      public partial class currentJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentJob_args()
        {
        }

        public currentJob_args DeepCopy()
        {
          var tmp2780 = new currentJob_args();
          if(__isset.c)
          {
            tmp2780.C = this.C;
          }
          tmp2780.__isset.c = this.__isset.c;
          return tmp2780;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2781 = new TStruct("currentJob_args");
            await oprot.WriteStructBeginAsync(tmp2781, cancellationToken);
            var tmp2782 = new TField();
            if(__isset.c)
            {
              tmp2782.Name = "c";
              tmp2782.Type = TType.I64;
              tmp2782.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2782, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2783 = new StringBuilder("currentJob_args(");
          int tmp2784 = 0;
          if(__isset.c)
          {
            if(0 < tmp2784++) { tmp2783.Append(", "); }
            tmp2783.Append("C: ");
            C.ToString(tmp2783);
          }
          tmp2783.Append(')');
          return tmp2783.ToString();
        }
      }


      public partial class currentJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentJob_result()
        {
        }

        public currentJob_result DeepCopy()
        {
          var tmp2785 = new currentJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2785.Success = this.Success;
          }
          tmp2785.__isset.success = this.__isset.success;
          return tmp2785;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2786 = new TStruct("currentJob_result");
            await oprot.WriteStructBeginAsync(tmp2786, cancellationToken);
            var tmp2787 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2787.Name = "Success";
                tmp2787.Type = TType.String;
                tmp2787.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2787, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2788 = new StringBuilder("currentJob_result(");
          int tmp2789 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2789++) { tmp2788.Append(", "); }
            tmp2788.Append("Success: ");
            Success.ToString(tmp2788);
          }
          tmp2788.Append(')');
          return tmp2788.ToString();
        }
      }


      public partial class setCurrentJob_args : TBase
      {
        private long _c;
        private string _name;
        private int _line;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public int Line
        {
          get
          {
            return _line;
          }
          set
          {
            __isset.line = true;
            this._line = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool line;
        }

        public setCurrentJob_args()
        {
        }

        public setCurrentJob_args DeepCopy()
        {
          var tmp2790 = new setCurrentJob_args();
          if(__isset.c)
          {
            tmp2790.C = this.C;
          }
          tmp2790.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2790.Name = this.Name;
          }
          tmp2790.__isset.name = this.__isset.name;
          if(__isset.line)
          {
            tmp2790.Line = this.Line;
          }
          tmp2790.__isset.line = this.__isset.line;
          return tmp2790;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Line = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2791 = new TStruct("setCurrentJob_args");
            await oprot.WriteStructBeginAsync(tmp2791, cancellationToken);
            var tmp2792 = new TField();
            if(__isset.c)
            {
              tmp2792.Name = "c";
              tmp2792.Type = TType.I64;
              tmp2792.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2792, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2792.Name = "name";
              tmp2792.Type = TType.String;
              tmp2792.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2792, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.line)
            {
              tmp2792.Name = "line";
              tmp2792.Type = TType.I32;
              tmp2792.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2792, cancellationToken);
              await oprot.WriteI32Async(Line, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.line == other.__isset.line) && ((!__isset.line) || (global::System.Object.Equals(Line, other.Line))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.line)
            {
              hashcode = (hashcode * 397) + Line.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2793 = new StringBuilder("setCurrentJob_args(");
          int tmp2794 = 0;
          if(__isset.c)
          {
            if(0 < tmp2794++) { tmp2793.Append(", "); }
            tmp2793.Append("C: ");
            C.ToString(tmp2793);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2794++) { tmp2793.Append(", "); }
            tmp2793.Append("Name: ");
            Name.ToString(tmp2793);
          }
          if(__isset.line)
          {
            if(0 < tmp2794++) { tmp2793.Append(", "); }
            tmp2793.Append("Line: ");
            Line.ToString(tmp2793);
          }
          tmp2793.Append(')');
          return tmp2793.ToString();
        }
      }


      public partial class setCurrentJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setCurrentJob_result()
        {
        }

        public setCurrentJob_result DeepCopy()
        {
          var tmp2795 = new setCurrentJob_result();
          if((E != null) && __isset.e)
          {
            tmp2795.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2795.__isset.e = this.__isset.e;
          return tmp2795;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2796 = new TStruct("setCurrentJob_result");
            await oprot.WriteStructBeginAsync(tmp2796, cancellationToken);
            var tmp2797 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2797.Name = "E";
                tmp2797.Type = TType.Struct;
                tmp2797.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2797, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setCurrentJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2798 = new StringBuilder("setCurrentJob_result(");
          int tmp2799 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2799++) { tmp2798.Append(", "); }
            tmp2798.Append("E: ");
            E.ToString(tmp2798);
          }
          tmp2798.Append(')');
          return tmp2798.ToString();
        }
      }


      public partial class defaultJob_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public defaultJob_args()
        {
        }

        public defaultJob_args DeepCopy()
        {
          var tmp2800 = new defaultJob_args();
          if(__isset.c)
          {
            tmp2800.C = this.C;
          }
          tmp2800.__isset.c = this.__isset.c;
          return tmp2800;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2801 = new TStruct("defaultJob_args");
            await oprot.WriteStructBeginAsync(tmp2801, cancellationToken);
            var tmp2802 = new TField();
            if(__isset.c)
            {
              tmp2802.Name = "c";
              tmp2802.Type = TType.I64;
              tmp2802.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2802, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2803 = new StringBuilder("defaultJob_args(");
          int tmp2804 = 0;
          if(__isset.c)
          {
            if(0 < tmp2804++) { tmp2803.Append(", "); }
            tmp2803.Append("C: ");
            C.ToString(tmp2803);
          }
          tmp2803.Append(')');
          return tmp2803.ToString();
        }
      }


      public partial class defaultJob_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public defaultJob_result()
        {
        }

        public defaultJob_result DeepCopy()
        {
          var tmp2805 = new defaultJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2805.Success = this.Success;
          }
          tmp2805.__isset.success = this.__isset.success;
          return tmp2805;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2806 = new TStruct("defaultJob_result");
            await oprot.WriteStructBeginAsync(tmp2806, cancellationToken);
            var tmp2807 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2807.Name = "Success";
                tmp2807.Type = TType.String;
                tmp2807.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2807, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is defaultJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2808 = new StringBuilder("defaultJob_result(");
          int tmp2809 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2809++) { tmp2808.Append(", "); }
            tmp2808.Append("Success: ");
            Success.ToString(tmp2808);
          }
          tmp2808.Append(')');
          return tmp2808.ToString();
        }
      }


      public partial class jobExists_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobExists_args()
        {
        }

        public jobExists_args DeepCopy()
        {
          var tmp2810 = new jobExists_args();
          if(__isset.c)
          {
            tmp2810.C = this.C;
          }
          tmp2810.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2810.Name = this.Name;
          }
          tmp2810.__isset.name = this.__isset.name;
          return tmp2810;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2811 = new TStruct("jobExists_args");
            await oprot.WriteStructBeginAsync(tmp2811, cancellationToken);
            var tmp2812 = new TField();
            if(__isset.c)
            {
              tmp2812.Name = "c";
              tmp2812.Type = TType.I64;
              tmp2812.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2812, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2812.Name = "name";
              tmp2812.Type = TType.String;
              tmp2812.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2812, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2813 = new StringBuilder("jobExists_args(");
          int tmp2814 = 0;
          if(__isset.c)
          {
            if(0 < tmp2814++) { tmp2813.Append(", "); }
            tmp2813.Append("C: ");
            C.ToString(tmp2813);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2814++) { tmp2813.Append(", "); }
            tmp2813.Append("Name: ");
            Name.ToString(tmp2813);
          }
          tmp2813.Append(')');
          return tmp2813.ToString();
        }
      }


      public partial class jobExists_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobExists_result()
        {
        }

        public jobExists_result DeepCopy()
        {
          var tmp2815 = new jobExists_result();
          if(__isset.success)
          {
            tmp2815.Success = this.Success;
          }
          tmp2815.__isset.success = this.__isset.success;
          return tmp2815;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2816 = new TStruct("jobExists_result");
            await oprot.WriteStructBeginAsync(tmp2816, cancellationToken);
            var tmp2817 = new TField();

            if(this.__isset.success)
            {
              tmp2817.Name = "Success";
              tmp2817.Type = TType.Bool;
              tmp2817.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2817, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobExists_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2818 = new StringBuilder("jobExists_result(");
          int tmp2819 = 0;
          if(__isset.success)
          {
            if(0 < tmp2819++) { tmp2818.Append(", "); }
            tmp2818.Append("Success: ");
            Success.ToString(tmp2818);
          }
          tmp2818.Append(')');
          return tmp2818.ToString();
        }
      }


      public partial class jobDetails_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobDetails_args()
        {
        }

        public jobDetails_args DeepCopy()
        {
          var tmp2820 = new jobDetails_args();
          if(__isset.c)
          {
            tmp2820.C = this.C;
          }
          tmp2820.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2820.Name = this.Name;
          }
          tmp2820.__isset.name = this.__isset.name;
          return tmp2820;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2821 = new TStruct("jobDetails_args");
            await oprot.WriteStructBeginAsync(tmp2821, cancellationToken);
            var tmp2822 = new TField();
            if(__isset.c)
            {
              tmp2822.Name = "c";
              tmp2822.Type = TType.I64;
              tmp2822.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2822, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2822.Name = "name";
              tmp2822.Type = TType.String;
              tmp2822.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2822, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2823 = new StringBuilder("jobDetails_args(");
          int tmp2824 = 0;
          if(__isset.c)
          {
            if(0 < tmp2824++) { tmp2823.Append(", "); }
            tmp2823.Append("C: ");
            C.ToString(tmp2823);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2824++) { tmp2823.Append(", "); }
            tmp2823.Append("Name: ");
            Name.ToString(tmp2823);
          }
          tmp2823.Append(')');
          return tmp2823.ToString();
        }
      }


      public partial class jobDetails_result : TBase
      {
        private global::Yaskawa.Ext.API.RobotJobInfo _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.RobotJobInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobDetails_result()
        {
        }

        public jobDetails_result DeepCopy()
        {
          var tmp2825 = new jobDetails_result();
          if((Success != null) && __isset.success)
          {
            tmp2825.Success = (global::Yaskawa.Ext.API.RobotJobInfo)this.Success.DeepCopy();
          }
          tmp2825.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2825.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2825.__isset.e = this.__isset.e;
          return tmp2825;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.RobotJobInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2826 = new TStruct("jobDetails_result");
            await oprot.WriteStructBeginAsync(tmp2826, cancellationToken);
            var tmp2827 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2827.Name = "Success";
                tmp2827.Type = TType.Struct;
                tmp2827.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2827, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2827.Name = "E";
                tmp2827.Type = TType.Struct;
                tmp2827.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2827, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobDetails_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2828 = new StringBuilder("jobDetails_result(");
          int tmp2829 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2829++) { tmp2828.Append(", "); }
            tmp2828.Append("Success: ");
            Success.ToString(tmp2828);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2829++) { tmp2828.Append(", "); }
            tmp2828.Append("E: ");
            E.ToString(tmp2828);
          }
          tmp2828.Append(')');
          return tmp2828.ToString();
        }
      }


      public partial class jobs_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public jobs_args()
        {
        }

        public jobs_args DeepCopy()
        {
          var tmp2830 = new jobs_args();
          if(__isset.c)
          {
            tmp2830.C = this.C;
          }
          tmp2830.__isset.c = this.__isset.c;
          return tmp2830;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2831 = new TStruct("jobs_args");
            await oprot.WriteStructBeginAsync(tmp2831, cancellationToken);
            var tmp2832 = new TField();
            if(__isset.c)
            {
              tmp2832.Name = "c";
              tmp2832.Type = TType.I64;
              tmp2832.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2832, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2833 = new StringBuilder("jobs_args(");
          int tmp2834 = 0;
          if(__isset.c)
          {
            if(0 < tmp2834++) { tmp2833.Append(", "); }
            tmp2833.Append("C: ");
            C.ToString(tmp2833);
          }
          tmp2833.Append(')');
          return tmp2833.ToString();
        }
      }


      public partial class jobs_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jobs_result()
        {
        }

        public jobs_result DeepCopy()
        {
          var tmp2835 = new jobs_result();
          if((Success != null) && __isset.success)
          {
            tmp2835.Success = this.Success.DeepCopy();
          }
          tmp2835.__isset.success = this.__isset.success;
          return tmp2835;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2836 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list2836.Count);
                      for(int _i2837 = 0; _i2837 < _list2836.Count; ++_i2837)
                      {
                        string _elem2838;
                        _elem2838 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem2838);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2839 = new TStruct("jobs_result");
            await oprot.WriteStructBeginAsync(tmp2839, cancellationToken);
            var tmp2840 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2840.Name = "Success";
                tmp2840.Type = TType.List;
                tmp2840.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2840, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter2841 in Success)
                {
                  await oprot.WriteStringAsync(_iter2841, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2842 = new StringBuilder("jobs_result(");
          int tmp2843 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2843++) { tmp2842.Append(", "); }
            tmp2842.Append("Success: ");
            Success.ToString(tmp2842);
          }
          tmp2842.Append(')');
          return tmp2842.ToString();
        }
      }


      public partial class jobsMatching_args : TBase
      {
        private long _c;
        private string _nameRegex;
        private string _tag;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string NameRegex
        {
          get
          {
            return _nameRegex;
          }
          set
          {
            __isset.nameRegex = true;
            this._nameRegex = value;
          }
        }

        public string Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool nameRegex;
          public bool tag;
        }

        public jobsMatching_args()
        {
        }

        public jobsMatching_args DeepCopy()
        {
          var tmp2844 = new jobsMatching_args();
          if(__isset.c)
          {
            tmp2844.C = this.C;
          }
          tmp2844.__isset.c = this.__isset.c;
          if((NameRegex != null) && __isset.nameRegex)
          {
            tmp2844.NameRegex = this.NameRegex;
          }
          tmp2844.__isset.nameRegex = this.__isset.nameRegex;
          if((Tag != null) && __isset.tag)
          {
            tmp2844.Tag = this.Tag;
          }
          tmp2844.__isset.tag = this.__isset.tag;
          return tmp2844;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NameRegex = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Tag = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2845 = new TStruct("jobsMatching_args");
            await oprot.WriteStructBeginAsync(tmp2845, cancellationToken);
            var tmp2846 = new TField();
            if(__isset.c)
            {
              tmp2846.Name = "c";
              tmp2846.Type = TType.I64;
              tmp2846.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2846, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              tmp2846.Name = "nameRegex";
              tmp2846.Type = TType.String;
              tmp2846.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2846, cancellationToken);
              await oprot.WriteStringAsync(NameRegex, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp2846.Name = "tag";
              tmp2846.Type = TType.String;
              tmp2846.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2846, cancellationToken);
              await oprot.WriteStringAsync(Tag, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.nameRegex == other.__isset.nameRegex) && ((!__isset.nameRegex) || (global::System.Object.Equals(NameRegex, other.NameRegex))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((NameRegex != null) && __isset.nameRegex)
            {
              hashcode = (hashcode * 397) + NameRegex.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2847 = new StringBuilder("jobsMatching_args(");
          int tmp2848 = 0;
          if(__isset.c)
          {
            if(0 < tmp2848++) { tmp2847.Append(", "); }
            tmp2847.Append("C: ");
            C.ToString(tmp2847);
          }
          if((NameRegex != null) && __isset.nameRegex)
          {
            if(0 < tmp2848++) { tmp2847.Append(", "); }
            tmp2847.Append("NameRegex: ");
            NameRegex.ToString(tmp2847);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp2848++) { tmp2847.Append(", "); }
            tmp2847.Append("Tag: ");
            Tag.ToString(tmp2847);
          }
          tmp2847.Append(')');
          return tmp2847.ToString();
        }
      }


      public partial class jobsMatching_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobsMatching_result()
        {
        }

        public jobsMatching_result DeepCopy()
        {
          var tmp2849 = new jobsMatching_result();
          if((Success != null) && __isset.success)
          {
            tmp2849.Success = this.Success.DeepCopy();
          }
          tmp2849.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2849.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2849.__isset.e = this.__isset.e;
          return tmp2849;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list2850 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list2850.Count);
                      for(int _i2851 = 0; _i2851 < _list2850.Count; ++_i2851)
                      {
                        string _elem2852;
                        _elem2852 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem2852);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2853 = new TStruct("jobsMatching_result");
            await oprot.WriteStructBeginAsync(tmp2853, cancellationToken);
            var tmp2854 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2854.Name = "Success";
                tmp2854.Type = TType.List;
                tmp2854.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2854, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter2855 in Success)
                {
                  await oprot.WriteStringAsync(_iter2855, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2854.Name = "E";
                tmp2854.Type = TType.Struct;
                tmp2854.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2854, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobsMatching_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2856 = new StringBuilder("jobsMatching_result(");
          int tmp2857 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2857++) { tmp2856.Append(", "); }
            tmp2856.Append("Success: ");
            Success.ToString(tmp2856);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2857++) { tmp2856.Append(", "); }
            tmp2856.Append("E: ");
            E.ToString(tmp2856);
          }
          tmp2856.Append(')');
          return tmp2856.ToString();
        }
      }


      public partial class duplicateJob_args : TBase
      {
        private long _c;
        private string _existingName;
        private string _newName;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ExistingName
        {
          get
          {
            return _existingName;
          }
          set
          {
            __isset.existingName = true;
            this._existingName = value;
          }
        }

        public string NewName
        {
          get
          {
            return _newName;
          }
          set
          {
            __isset.newName = true;
            this._newName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool existingName;
          public bool newName;
        }

        public duplicateJob_args()
        {
        }

        public duplicateJob_args DeepCopy()
        {
          var tmp2858 = new duplicateJob_args();
          if(__isset.c)
          {
            tmp2858.C = this.C;
          }
          tmp2858.__isset.c = this.__isset.c;
          if((ExistingName != null) && __isset.existingName)
          {
            tmp2858.ExistingName = this.ExistingName;
          }
          tmp2858.__isset.existingName = this.__isset.existingName;
          if((NewName != null) && __isset.newName)
          {
            tmp2858.NewName = this.NewName;
          }
          tmp2858.__isset.newName = this.__isset.newName;
          return tmp2858;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ExistingName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NewName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2859 = new TStruct("duplicateJob_args");
            await oprot.WriteStructBeginAsync(tmp2859, cancellationToken);
            var tmp2860 = new TField();
            if(__isset.c)
            {
              tmp2860.Name = "c";
              tmp2860.Type = TType.I64;
              tmp2860.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2860, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ExistingName != null) && __isset.existingName)
            {
              tmp2860.Name = "existingName";
              tmp2860.Type = TType.String;
              tmp2860.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2860, cancellationToken);
              await oprot.WriteStringAsync(ExistingName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewName != null) && __isset.newName)
            {
              tmp2860.Name = "newName";
              tmp2860.Type = TType.String;
              tmp2860.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2860, cancellationToken);
              await oprot.WriteStringAsync(NewName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.existingName == other.__isset.existingName) && ((!__isset.existingName) || (global::System.Object.Equals(ExistingName, other.ExistingName))))
            && ((__isset.newName == other.__isset.newName) && ((!__isset.newName) || (global::System.Object.Equals(NewName, other.NewName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ExistingName != null) && __isset.existingName)
            {
              hashcode = (hashcode * 397) + ExistingName.GetHashCode();
            }
            if((NewName != null) && __isset.newName)
            {
              hashcode = (hashcode * 397) + NewName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2861 = new StringBuilder("duplicateJob_args(");
          int tmp2862 = 0;
          if(__isset.c)
          {
            if(0 < tmp2862++) { tmp2861.Append(", "); }
            tmp2861.Append("C: ");
            C.ToString(tmp2861);
          }
          if((ExistingName != null) && __isset.existingName)
          {
            if(0 < tmp2862++) { tmp2861.Append(", "); }
            tmp2861.Append("ExistingName: ");
            ExistingName.ToString(tmp2861);
          }
          if((NewName != null) && __isset.newName)
          {
            if(0 < tmp2862++) { tmp2861.Append(", "); }
            tmp2861.Append("NewName: ");
            NewName.ToString(tmp2861);
          }
          tmp2861.Append(')');
          return tmp2861.ToString();
        }
      }


      public partial class duplicateJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public duplicateJob_result()
        {
        }

        public duplicateJob_result DeepCopy()
        {
          var tmp2863 = new duplicateJob_result();
          if((E != null) && __isset.e)
          {
            tmp2863.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2863.__isset.e = this.__isset.e;
          return tmp2863;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2864 = new TStruct("duplicateJob_result");
            await oprot.WriteStructBeginAsync(tmp2864, cancellationToken);
            var tmp2865 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2865.Name = "E";
                tmp2865.Type = TType.Struct;
                tmp2865.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2865, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is duplicateJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2866 = new StringBuilder("duplicateJob_result(");
          int tmp2867 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2867++) { tmp2866.Append(", "); }
            tmp2866.Append("E: ");
            E.ToString(tmp2866);
          }
          tmp2866.Append(')');
          return tmp2866.ToString();
        }
      }


      public partial class deleteJob_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public deleteJob_args()
        {
        }

        public deleteJob_args DeepCopy()
        {
          var tmp2868 = new deleteJob_args();
          if(__isset.c)
          {
            tmp2868.C = this.C;
          }
          tmp2868.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2868.Name = this.Name;
          }
          tmp2868.__isset.name = this.__isset.name;
          return tmp2868;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2869 = new TStruct("deleteJob_args");
            await oprot.WriteStructBeginAsync(tmp2869, cancellationToken);
            var tmp2870 = new TField();
            if(__isset.c)
            {
              tmp2870.Name = "c";
              tmp2870.Type = TType.I64;
              tmp2870.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2870, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2870.Name = "name";
              tmp2870.Type = TType.String;
              tmp2870.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2870, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2871 = new StringBuilder("deleteJob_args(");
          int tmp2872 = 0;
          if(__isset.c)
          {
            if(0 < tmp2872++) { tmp2871.Append(", "); }
            tmp2871.Append("C: ");
            C.ToString(tmp2871);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2872++) { tmp2871.Append(", "); }
            tmp2871.Append("Name: ");
            Name.ToString(tmp2871);
          }
          tmp2871.Append(')');
          return tmp2871.ToString();
        }
      }


      public partial class deleteJob_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteJob_result()
        {
        }

        public deleteJob_result DeepCopy()
        {
          var tmp2873 = new deleteJob_result();
          if((E != null) && __isset.e)
          {
            tmp2873.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2873.__isset.e = this.__isset.e;
          return tmp2873;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2874 = new TStruct("deleteJob_result");
            await oprot.WriteStructBeginAsync(tmp2874, cancellationToken);
            var tmp2875 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2875.Name = "E";
                tmp2875.Type = TType.Struct;
                tmp2875.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2875, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2876 = new StringBuilder("deleteJob_result(");
          int tmp2877 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2877++) { tmp2876.Append(", "); }
            tmp2876.Append("E: ");
            E.ToString(tmp2876);
          }
          tmp2876.Append(')');
          return tmp2876.ToString();
        }
      }


      public partial class jobSource_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public jobSource_args()
        {
        }

        public jobSource_args DeepCopy()
        {
          var tmp2878 = new jobSource_args();
          if(__isset.c)
          {
            tmp2878.C = this.C;
          }
          tmp2878.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2878.Name = this.Name;
          }
          tmp2878.__isset.name = this.__isset.name;
          return tmp2878;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2879 = new TStruct("jobSource_args");
            await oprot.WriteStructBeginAsync(tmp2879, cancellationToken);
            var tmp2880 = new TField();
            if(__isset.c)
            {
              tmp2880.Name = "c";
              tmp2880.Type = TType.I64;
              tmp2880.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2880, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2880.Name = "name";
              tmp2880.Type = TType.String;
              tmp2880.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2880, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2881 = new StringBuilder("jobSource_args(");
          int tmp2882 = 0;
          if(__isset.c)
          {
            if(0 < tmp2882++) { tmp2881.Append(", "); }
            tmp2881.Append("C: ");
            C.ToString(tmp2881);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2882++) { tmp2881.Append(", "); }
            tmp2881.Append("Name: ");
            Name.ToString(tmp2881);
          }
          tmp2881.Append(')');
          return tmp2881.ToString();
        }
      }


      public partial class jobSource_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public jobSource_result()
        {
        }

        public jobSource_result DeepCopy()
        {
          var tmp2883 = new jobSource_result();
          if((Success != null) && __isset.success)
          {
            tmp2883.Success = this.Success;
          }
          tmp2883.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2883.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2883.__isset.e = this.__isset.e;
          return tmp2883;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2884 = new TStruct("jobSource_result");
            await oprot.WriteStructBeginAsync(tmp2884, cancellationToken);
            var tmp2885 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2885.Name = "Success";
                tmp2885.Type = TType.String;
                tmp2885.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2885, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2885.Name = "E";
                tmp2885.Type = TType.Struct;
                tmp2885.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2885, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2886 = new StringBuilder("jobSource_result(");
          int tmp2887 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2887++) { tmp2886.Append(", "); }
            tmp2886.Append("Success: ");
            Success.ToString(tmp2886);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2887++) { tmp2886.Append(", "); }
            tmp2886.Append("E: ");
            E.ToString(tmp2886);
          }
          tmp2886.Append(')');
          return tmp2886.ToString();
        }
      }


      public partial class storeJobSource_args : TBase
      {
        private long _c;
        private string _name;
        private string _programmingLanguage;
        private string _sourceCode;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string ProgrammingLanguage
        {
          get
          {
            return _programmingLanguage;
          }
          set
          {
            __isset.programmingLanguage = true;
            this._programmingLanguage = value;
          }
        }

        public string SourceCode
        {
          get
          {
            return _sourceCode;
          }
          set
          {
            __isset.sourceCode = true;
            this._sourceCode = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool programmingLanguage;
          public bool sourceCode;
        }

        public storeJobSource_args()
        {
        }

        public storeJobSource_args DeepCopy()
        {
          var tmp2888 = new storeJobSource_args();
          if(__isset.c)
          {
            tmp2888.C = this.C;
          }
          tmp2888.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2888.Name = this.Name;
          }
          tmp2888.__isset.name = this.__isset.name;
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            tmp2888.ProgrammingLanguage = this.ProgrammingLanguage;
          }
          tmp2888.__isset.programmingLanguage = this.__isset.programmingLanguage;
          if((SourceCode != null) && __isset.sourceCode)
          {
            tmp2888.SourceCode = this.SourceCode;
          }
          tmp2888.__isset.sourceCode = this.__isset.sourceCode;
          return tmp2888;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ProgrammingLanguage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SourceCode = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2889 = new TStruct("storeJobSource_args");
            await oprot.WriteStructBeginAsync(tmp2889, cancellationToken);
            var tmp2890 = new TField();
            if(__isset.c)
            {
              tmp2890.Name = "c";
              tmp2890.Type = TType.I64;
              tmp2890.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2890, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2890.Name = "name";
              tmp2890.Type = TType.String;
              tmp2890.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2890, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              tmp2890.Name = "programmingLanguage";
              tmp2890.Type = TType.String;
              tmp2890.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2890, cancellationToken);
              await oprot.WriteStringAsync(ProgrammingLanguage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              tmp2890.Name = "sourceCode";
              tmp2890.Type = TType.String;
              tmp2890.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp2890, cancellationToken);
              await oprot.WriteStringAsync(SourceCode, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.programmingLanguage == other.__isset.programmingLanguage) && ((!__isset.programmingLanguage) || (global::System.Object.Equals(ProgrammingLanguage, other.ProgrammingLanguage))))
            && ((__isset.sourceCode == other.__isset.sourceCode) && ((!__isset.sourceCode) || (global::System.Object.Equals(SourceCode, other.SourceCode))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((ProgrammingLanguage != null) && __isset.programmingLanguage)
            {
              hashcode = (hashcode * 397) + ProgrammingLanguage.GetHashCode();
            }
            if((SourceCode != null) && __isset.sourceCode)
            {
              hashcode = (hashcode * 397) + SourceCode.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2891 = new StringBuilder("storeJobSource_args(");
          int tmp2892 = 0;
          if(__isset.c)
          {
            if(0 < tmp2892++) { tmp2891.Append(", "); }
            tmp2891.Append("C: ");
            C.ToString(tmp2891);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2892++) { tmp2891.Append(", "); }
            tmp2891.Append("Name: ");
            Name.ToString(tmp2891);
          }
          if((ProgrammingLanguage != null) && __isset.programmingLanguage)
          {
            if(0 < tmp2892++) { tmp2891.Append(", "); }
            tmp2891.Append("ProgrammingLanguage: ");
            ProgrammingLanguage.ToString(tmp2891);
          }
          if((SourceCode != null) && __isset.sourceCode)
          {
            if(0 < tmp2892++) { tmp2891.Append(", "); }
            tmp2891.Append("SourceCode: ");
            SourceCode.ToString(tmp2891);
          }
          tmp2891.Append(')');
          return tmp2891.ToString();
        }
      }


      public partial class storeJobSource_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public storeJobSource_result()
        {
        }

        public storeJobSource_result DeepCopy()
        {
          var tmp2893 = new storeJobSource_result();
          if((E != null) && __isset.e)
          {
            tmp2893.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2893.__isset.e = this.__isset.e;
          return tmp2893;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2894 = new TStruct("storeJobSource_result");
            await oprot.WriteStructBeginAsync(tmp2894, cancellationToken);
            var tmp2895 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2895.Name = "E";
                tmp2895.Type = TType.Struct;
                tmp2895.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2895, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is storeJobSource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2896 = new StringBuilder("storeJobSource_result(");
          int tmp2897 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp2897++) { tmp2896.Append(", "); }
            tmp2896.Append("E: ");
            E.ToString(tmp2896);
          }
          tmp2896.Append(')');
          return tmp2896.ToString();
        }
      }


      public partial class tools_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public tools_args()
        {
        }

        public tools_args DeepCopy()
        {
          var tmp2898 = new tools_args();
          if(__isset.c)
          {
            tmp2898.C = this.C;
          }
          tmp2898.__isset.c = this.__isset.c;
          return tmp2898;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2899 = new TStruct("tools_args");
            await oprot.WriteStructBeginAsync(tmp2899, cancellationToken);
            var tmp2900 = new TField();
            if(__isset.c)
            {
              tmp2900.Name = "c";
              tmp2900.Type = TType.I64;
              tmp2900.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2900, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2901 = new StringBuilder("tools_args(");
          int tmp2902 = 0;
          if(__isset.c)
          {
            if(0 < tmp2902++) { tmp2901.Append(", "); }
            tmp2901.Append("C: ");
            C.ToString(tmp2901);
          }
          tmp2901.Append(')');
          return tmp2901.ToString();
        }
      }


      public partial class tools_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tools_result()
        {
        }

        public tools_result DeepCopy()
        {
          var tmp2903 = new tools_result();
          if((Success != null) && __isset.success)
          {
            tmp2903.Success = this.Success.DeepCopy();
          }
          tmp2903.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2903.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2903.__isset.e = this.__isset.e;
          return tmp2903;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map2904 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map2904.Count);
                      for(int _i2905 = 0; _i2905 < _map2904.Count; ++_i2905)
                      {
                        int _key2906;
                        string _val2907;
                        _key2906 = await iprot.ReadI32Async(cancellationToken);
                        _val2907 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key2906] = _val2907;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2908 = new TStruct("tools_result");
            await oprot.WriteStructBeginAsync(tmp2908, cancellationToken);
            var tmp2909 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2909.Name = "Success";
                tmp2909.Type = TType.Map;
                tmp2909.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2909, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter2910 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter2910, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter2910], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2909.Name = "E";
                tmp2909.Type = TType.Struct;
                tmp2909.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2909, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tools_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2911 = new StringBuilder("tools_result(");
          int tmp2912 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2912++) { tmp2911.Append(", "); }
            tmp2911.Append("Success: ");
            Success.ToString(tmp2911);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2912++) { tmp2911.Append(", "); }
            tmp2911.Append("E: ");
            E.ToString(tmp2911);
          }
          tmp2911.Append(')');
          return tmp2911.ToString();
        }
      }


      public partial class tool_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public tool_args()
        {
        }

        public tool_args DeepCopy()
        {
          var tmp2913 = new tool_args();
          if(__isset.c)
          {
            tmp2913.C = this.C;
          }
          tmp2913.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp2913.Index = this.Index;
          }
          tmp2913.__isset.index = this.__isset.index;
          return tmp2913;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2914 = new TStruct("tool_args");
            await oprot.WriteStructBeginAsync(tmp2914, cancellationToken);
            var tmp2915 = new TField();
            if(__isset.c)
            {
              tmp2915.Name = "c";
              tmp2915.Type = TType.I64;
              tmp2915.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2915, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp2915.Name = "index";
              tmp2915.Type = TType.I32;
              tmp2915.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2915, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2916 = new StringBuilder("tool_args(");
          int tmp2917 = 0;
          if(__isset.c)
          {
            if(0 < tmp2917++) { tmp2916.Append(", "); }
            tmp2916.Append("C: ");
            C.ToString(tmp2916);
          }
          if(__isset.index)
          {
            if(0 < tmp2917++) { tmp2916.Append(", "); }
            tmp2916.Append("Index: ");
            Index.ToString(tmp2916);
          }
          tmp2916.Append(')');
          return tmp2916.ToString();
        }
      }


      public partial class tool_result : TBase
      {
        private global::Yaskawa.Ext.API.Tool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Tool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public tool_result()
        {
        }

        public tool_result DeepCopy()
        {
          var tmp2918 = new tool_result();
          if((Success != null) && __isset.success)
          {
            tmp2918.Success = (global::Yaskawa.Ext.API.Tool)this.Success.DeepCopy();
          }
          tmp2918.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2918.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2918.__isset.e = this.__isset.e;
          return tmp2918;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Tool();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2919 = new TStruct("tool_result");
            await oprot.WriteStructBeginAsync(tmp2919, cancellationToken);
            var tmp2920 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2920.Name = "Success";
                tmp2920.Type = TType.Struct;
                tmp2920.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2920, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2920.Name = "E";
                tmp2920.Type = TType.Struct;
                tmp2920.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2920, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is tool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2921 = new StringBuilder("tool_result(");
          int tmp2922 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2922++) { tmp2921.Append(", "); }
            tmp2921.Append("Success: ");
            Success.ToString(tmp2921);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2922++) { tmp2921.Append(", "); }
            tmp2921.Append("E: ");
            E.ToString(tmp2921);
          }
          tmp2921.Append(')');
          return tmp2921.ToString();
        }
      }


      public partial class inputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputNumber_args()
        {
        }

        public inputNumber_args DeepCopy()
        {
          var tmp2923 = new inputNumber_args();
          if(__isset.c)
          {
            tmp2923.C = this.C;
          }
          tmp2923.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2923.Name = this.Name;
          }
          tmp2923.__isset.name = this.__isset.name;
          return tmp2923;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2924 = new TStruct("inputNumber_args");
            await oprot.WriteStructBeginAsync(tmp2924, cancellationToken);
            var tmp2925 = new TField();
            if(__isset.c)
            {
              tmp2925.Name = "c";
              tmp2925.Type = TType.I64;
              tmp2925.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2925, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2925.Name = "name";
              tmp2925.Type = TType.String;
              tmp2925.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2925, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2926 = new StringBuilder("inputNumber_args(");
          int tmp2927 = 0;
          if(__isset.c)
          {
            if(0 < tmp2927++) { tmp2926.Append(", "); }
            tmp2926.Append("C: ");
            C.ToString(tmp2926);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2927++) { tmp2926.Append(", "); }
            tmp2926.Append("Name: ");
            Name.ToString(tmp2926);
          }
          tmp2926.Append(')');
          return tmp2926.ToString();
        }
      }


      public partial class inputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputNumber_result()
        {
        }

        public inputNumber_result DeepCopy()
        {
          var tmp2928 = new inputNumber_result();
          if(__isset.success)
          {
            tmp2928.Success = this.Success;
          }
          tmp2928.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2928.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2928.__isset.e = this.__isset.e;
          return tmp2928;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2929 = new TStruct("inputNumber_result");
            await oprot.WriteStructBeginAsync(tmp2929, cancellationToken);
            var tmp2930 = new TField();

            if(this.__isset.success)
            {
              tmp2930.Name = "Success";
              tmp2930.Type = TType.I32;
              tmp2930.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2930, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2930.Name = "E";
                tmp2930.Type = TType.Struct;
                tmp2930.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2930, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2931 = new StringBuilder("inputNumber_result(");
          int tmp2932 = 0;
          if(__isset.success)
          {
            if(0 < tmp2932++) { tmp2931.Append(", "); }
            tmp2931.Append("Success: ");
            Success.ToString(tmp2931);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2932++) { tmp2931.Append(", "); }
            tmp2931.Append("E: ");
            E.ToString(tmp2931);
          }
          tmp2931.Append(')');
          return tmp2931.ToString();
        }
      }


      public partial class inputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputGroupNumber_args()
        {
        }

        public inputGroupNumber_args DeepCopy()
        {
          var tmp2933 = new inputGroupNumber_args();
          if(__isset.c)
          {
            tmp2933.C = this.C;
          }
          tmp2933.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2933.Name = this.Name;
          }
          tmp2933.__isset.name = this.__isset.name;
          return tmp2933;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2934 = new TStruct("inputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp2934, cancellationToken);
            var tmp2935 = new TField();
            if(__isset.c)
            {
              tmp2935.Name = "c";
              tmp2935.Type = TType.I64;
              tmp2935.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2935, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2935.Name = "name";
              tmp2935.Type = TType.String;
              tmp2935.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2935, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2936 = new StringBuilder("inputGroupNumber_args(");
          int tmp2937 = 0;
          if(__isset.c)
          {
            if(0 < tmp2937++) { tmp2936.Append(", "); }
            tmp2936.Append("C: ");
            C.ToString(tmp2936);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2937++) { tmp2936.Append(", "); }
            tmp2936.Append("Name: ");
            Name.ToString(tmp2936);
          }
          tmp2936.Append(')');
          return tmp2936.ToString();
        }
      }


      public partial class inputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupNumber_result()
        {
        }

        public inputGroupNumber_result DeepCopy()
        {
          var tmp2938 = new inputGroupNumber_result();
          if(__isset.success)
          {
            tmp2938.Success = this.Success;
          }
          tmp2938.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2938.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2938.__isset.e = this.__isset.e;
          return tmp2938;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2939 = new TStruct("inputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp2939, cancellationToken);
            var tmp2940 = new TField();

            if(this.__isset.success)
            {
              tmp2940.Name = "Success";
              tmp2940.Type = TType.I32;
              tmp2940.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2940, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2940.Name = "E";
                tmp2940.Type = TType.Struct;
                tmp2940.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2940, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2941 = new StringBuilder("inputGroupNumber_result(");
          int tmp2942 = 0;
          if(__isset.success)
          {
            if(0 < tmp2942++) { tmp2941.Append(", "); }
            tmp2941.Append("Success: ");
            Success.ToString(tmp2941);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2942++) { tmp2941.Append(", "); }
            tmp2941.Append("E: ");
            E.ToString(tmp2941);
          }
          tmp2941.Append(')');
          return tmp2941.ToString();
        }
      }


      public partial class outputNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputNumber_args()
        {
        }

        public outputNumber_args DeepCopy()
        {
          var tmp2943 = new outputNumber_args();
          if(__isset.c)
          {
            tmp2943.C = this.C;
          }
          tmp2943.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2943.Name = this.Name;
          }
          tmp2943.__isset.name = this.__isset.name;
          return tmp2943;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2944 = new TStruct("outputNumber_args");
            await oprot.WriteStructBeginAsync(tmp2944, cancellationToken);
            var tmp2945 = new TField();
            if(__isset.c)
            {
              tmp2945.Name = "c";
              tmp2945.Type = TType.I64;
              tmp2945.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2945, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2945.Name = "name";
              tmp2945.Type = TType.String;
              tmp2945.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2945, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2946 = new StringBuilder("outputNumber_args(");
          int tmp2947 = 0;
          if(__isset.c)
          {
            if(0 < tmp2947++) { tmp2946.Append(", "); }
            tmp2946.Append("C: ");
            C.ToString(tmp2946);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2947++) { tmp2946.Append(", "); }
            tmp2946.Append("Name: ");
            Name.ToString(tmp2946);
          }
          tmp2946.Append(')');
          return tmp2946.ToString();
        }
      }


      public partial class outputNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputNumber_result()
        {
        }

        public outputNumber_result DeepCopy()
        {
          var tmp2948 = new outputNumber_result();
          if(__isset.success)
          {
            tmp2948.Success = this.Success;
          }
          tmp2948.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2948.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2948.__isset.e = this.__isset.e;
          return tmp2948;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2949 = new TStruct("outputNumber_result");
            await oprot.WriteStructBeginAsync(tmp2949, cancellationToken);
            var tmp2950 = new TField();

            if(this.__isset.success)
            {
              tmp2950.Name = "Success";
              tmp2950.Type = TType.I32;
              tmp2950.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2950, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2950.Name = "E";
                tmp2950.Type = TType.Struct;
                tmp2950.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2950, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2951 = new StringBuilder("outputNumber_result(");
          int tmp2952 = 0;
          if(__isset.success)
          {
            if(0 < tmp2952++) { tmp2951.Append(", "); }
            tmp2951.Append("Success: ");
            Success.ToString(tmp2951);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2952++) { tmp2951.Append(", "); }
            tmp2951.Append("E: ");
            E.ToString(tmp2951);
          }
          tmp2951.Append(')');
          return tmp2951.ToString();
        }
      }


      public partial class outputGroupNumber_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputGroupNumber_args()
        {
        }

        public outputGroupNumber_args DeepCopy()
        {
          var tmp2953 = new outputGroupNumber_args();
          if(__isset.c)
          {
            tmp2953.C = this.C;
          }
          tmp2953.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp2953.Name = this.Name;
          }
          tmp2953.__isset.name = this.__isset.name;
          return tmp2953;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2954 = new TStruct("outputGroupNumber_args");
            await oprot.WriteStructBeginAsync(tmp2954, cancellationToken);
            var tmp2955 = new TField();
            if(__isset.c)
            {
              tmp2955.Name = "c";
              tmp2955.Type = TType.I64;
              tmp2955.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2955, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2955.Name = "name";
              tmp2955.Type = TType.String;
              tmp2955.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2955, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2956 = new StringBuilder("outputGroupNumber_args(");
          int tmp2957 = 0;
          if(__isset.c)
          {
            if(0 < tmp2957++) { tmp2956.Append(", "); }
            tmp2956.Append("C: ");
            C.ToString(tmp2956);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2957++) { tmp2956.Append(", "); }
            tmp2956.Append("Name: ");
            Name.ToString(tmp2956);
          }
          tmp2956.Append(')');
          return tmp2956.ToString();
        }
      }


      public partial class outputGroupNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupNumber_result()
        {
        }

        public outputGroupNumber_result DeepCopy()
        {
          var tmp2958 = new outputGroupNumber_result();
          if(__isset.success)
          {
            tmp2958.Success = this.Success;
          }
          tmp2958.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2958.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2958.__isset.e = this.__isset.e;
          return tmp2958;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2959 = new TStruct("outputGroupNumber_result");
            await oprot.WriteStructBeginAsync(tmp2959, cancellationToken);
            var tmp2960 = new TField();

            if(this.__isset.success)
            {
              tmp2960.Name = "Success";
              tmp2960.Type = TType.I32;
              tmp2960.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp2960, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2960.Name = "E";
                tmp2960.Type = TType.Struct;
                tmp2960.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2960, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2961 = new StringBuilder("outputGroupNumber_result(");
          int tmp2962 = 0;
          if(__isset.success)
          {
            if(0 < tmp2962++) { tmp2961.Append(", "); }
            tmp2961.Append("Success: ");
            Success.ToString(tmp2961);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2962++) { tmp2961.Append(", "); }
            tmp2961.Append("E: ");
            E.ToString(tmp2961);
          }
          tmp2961.Append(')');
          return tmp2961.ToString();
        }
      }


      public partial class inputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputName_args()
        {
        }

        public inputName_args DeepCopy()
        {
          var tmp2963 = new inputName_args();
          if(__isset.c)
          {
            tmp2963.C = this.C;
          }
          tmp2963.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2963.Num = this.Num;
          }
          tmp2963.__isset.num = this.__isset.num;
          return tmp2963;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2964 = new TStruct("inputName_args");
            await oprot.WriteStructBeginAsync(tmp2964, cancellationToken);
            var tmp2965 = new TField();
            if(__isset.c)
            {
              tmp2965.Name = "c";
              tmp2965.Type = TType.I64;
              tmp2965.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2965, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2965.Name = "num";
              tmp2965.Type = TType.I32;
              tmp2965.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2965, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2966 = new StringBuilder("inputName_args(");
          int tmp2967 = 0;
          if(__isset.c)
          {
            if(0 < tmp2967++) { tmp2966.Append(", "); }
            tmp2966.Append("C: ");
            C.ToString(tmp2966);
          }
          if(__isset.num)
          {
            if(0 < tmp2967++) { tmp2966.Append(", "); }
            tmp2966.Append("Num: ");
            Num.ToString(tmp2966);
          }
          tmp2966.Append(')');
          return tmp2966.ToString();
        }
      }


      public partial class inputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputName_result()
        {
        }

        public inputName_result DeepCopy()
        {
          var tmp2968 = new inputName_result();
          if((Success != null) && __isset.success)
          {
            tmp2968.Success = this.Success;
          }
          tmp2968.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2968.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2968.__isset.e = this.__isset.e;
          return tmp2968;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2969 = new TStruct("inputName_result");
            await oprot.WriteStructBeginAsync(tmp2969, cancellationToken);
            var tmp2970 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2970.Name = "Success";
                tmp2970.Type = TType.String;
                tmp2970.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2970, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2970.Name = "E";
                tmp2970.Type = TType.Struct;
                tmp2970.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2970, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2971 = new StringBuilder("inputName_result(");
          int tmp2972 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2972++) { tmp2971.Append(", "); }
            tmp2971.Append("Success: ");
            Success.ToString(tmp2971);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2972++) { tmp2971.Append(", "); }
            tmp2971.Append("E: ");
            E.ToString(tmp2971);
          }
          tmp2971.Append(')');
          return tmp2971.ToString();
        }
      }


      public partial class outputName_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputName_args()
        {
        }

        public outputName_args DeepCopy()
        {
          var tmp2973 = new outputName_args();
          if(__isset.c)
          {
            tmp2973.C = this.C;
          }
          tmp2973.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2973.Num = this.Num;
          }
          tmp2973.__isset.num = this.__isset.num;
          return tmp2973;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2974 = new TStruct("outputName_args");
            await oprot.WriteStructBeginAsync(tmp2974, cancellationToken);
            var tmp2975 = new TField();
            if(__isset.c)
            {
              tmp2975.Name = "c";
              tmp2975.Type = TType.I64;
              tmp2975.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2975, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2975.Name = "num";
              tmp2975.Type = TType.I32;
              tmp2975.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2975, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2976 = new StringBuilder("outputName_args(");
          int tmp2977 = 0;
          if(__isset.c)
          {
            if(0 < tmp2977++) { tmp2976.Append(", "); }
            tmp2976.Append("C: ");
            C.ToString(tmp2976);
          }
          if(__isset.num)
          {
            if(0 < tmp2977++) { tmp2976.Append(", "); }
            tmp2976.Append("Num: ");
            Num.ToString(tmp2976);
          }
          tmp2976.Append(')');
          return tmp2976.ToString();
        }
      }


      public partial class outputName_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputName_result()
        {
        }

        public outputName_result DeepCopy()
        {
          var tmp2978 = new outputName_result();
          if((Success != null) && __isset.success)
          {
            tmp2978.Success = this.Success;
          }
          tmp2978.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp2978.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2978.__isset.e = this.__isset.e;
          return tmp2978;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2979 = new TStruct("outputName_result");
            await oprot.WriteStructBeginAsync(tmp2979, cancellationToken);
            var tmp2980 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2980.Name = "Success";
                tmp2980.Type = TType.String;
                tmp2980.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2980, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp2980.Name = "E";
                tmp2980.Type = TType.Struct;
                tmp2980.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2980, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2981 = new StringBuilder("outputName_result(");
          int tmp2982 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2982++) { tmp2981.Append(", "); }
            tmp2981.Append("Success: ");
            Success.ToString(tmp2981);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp2982++) { tmp2981.Append(", "); }
            tmp2981.Append("E: ");
            E.ToString(tmp2981);
          }
          tmp2981.Append(')');
          return tmp2981.ToString();
        }
      }


      public partial class setInputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setInputName_args()
        {
        }

        public setInputName_args DeepCopy()
        {
          var tmp2983 = new setInputName_args();
          if(__isset.c)
          {
            tmp2983.C = this.C;
          }
          tmp2983.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2983.Num = this.Num;
          }
          tmp2983.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp2983.Name = this.Name;
          }
          tmp2983.__isset.name = this.__isset.name;
          return tmp2983;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2984 = new TStruct("setInputName_args");
            await oprot.WriteStructBeginAsync(tmp2984, cancellationToken);
            var tmp2985 = new TField();
            if(__isset.c)
            {
              tmp2985.Name = "c";
              tmp2985.Type = TType.I64;
              tmp2985.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2985, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2985.Name = "num";
              tmp2985.Type = TType.I32;
              tmp2985.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2985, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2985.Name = "name";
              tmp2985.Type = TType.String;
              tmp2985.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2985, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setInputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2986 = new StringBuilder("setInputName_args(");
          int tmp2987 = 0;
          if(__isset.c)
          {
            if(0 < tmp2987++) { tmp2986.Append(", "); }
            tmp2986.Append("C: ");
            C.ToString(tmp2986);
          }
          if(__isset.num)
          {
            if(0 < tmp2987++) { tmp2986.Append(", "); }
            tmp2986.Append("Num: ");
            Num.ToString(tmp2986);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2987++) { tmp2986.Append(", "); }
            tmp2986.Append("Name: ");
            Name.ToString(tmp2986);
          }
          tmp2986.Append(')');
          return tmp2986.ToString();
        }
      }


      public partial class setOutputName_args : TBase
      {
        private long _c;
        private int _num;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool name;
        }

        public setOutputName_args()
        {
        }

        public setOutputName_args DeepCopy()
        {
          var tmp2988 = new setOutputName_args();
          if(__isset.c)
          {
            tmp2988.C = this.C;
          }
          tmp2988.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2988.Num = this.Num;
          }
          tmp2988.__isset.num = this.__isset.num;
          if((Name != null) && __isset.name)
          {
            tmp2988.Name = this.Name;
          }
          tmp2988.__isset.name = this.__isset.name;
          return tmp2988;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2989 = new TStruct("setOutputName_args");
            await oprot.WriteStructBeginAsync(tmp2989, cancellationToken);
            var tmp2990 = new TField();
            if(__isset.c)
            {
              tmp2990.Name = "c";
              tmp2990.Type = TType.I64;
              tmp2990.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2990, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2990.Name = "num";
              tmp2990.Type = TType.I32;
              tmp2990.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2990, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp2990.Name = "name";
              tmp2990.Type = TType.String;
              tmp2990.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp2990, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2991 = new StringBuilder("setOutputName_args(");
          int tmp2992 = 0;
          if(__isset.c)
          {
            if(0 < tmp2992++) { tmp2991.Append(", "); }
            tmp2991.Append("C: ");
            C.ToString(tmp2991);
          }
          if(__isset.num)
          {
            if(0 < tmp2992++) { tmp2991.Append(", "); }
            tmp2991.Append("Num: ");
            Num.ToString(tmp2991);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp2992++) { tmp2991.Append(", "); }
            tmp2991.Append("Name: ");
            Name.ToString(tmp2991);
          }
          tmp2991.Append(')');
          return tmp2991.ToString();
        }
      }


      public partial class monitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorInput_args()
        {
        }

        public monitorInput_args DeepCopy()
        {
          var tmp2993 = new monitorInput_args();
          if(__isset.c)
          {
            tmp2993.C = this.C;
          }
          tmp2993.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp2993.Num = this.Num;
          }
          tmp2993.__isset.num = this.__isset.num;
          return tmp2993;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2994 = new TStruct("monitorInput_args");
            await oprot.WriteStructBeginAsync(tmp2994, cancellationToken);
            var tmp2995 = new TField();
            if(__isset.c)
            {
              tmp2995.Name = "c";
              tmp2995.Type = TType.I64;
              tmp2995.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2995, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp2995.Name = "num";
              tmp2995.Type = TType.I32;
              tmp2995.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2995, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2996 = new StringBuilder("monitorInput_args(");
          int tmp2997 = 0;
          if(__isset.c)
          {
            if(0 < tmp2997++) { tmp2996.Append(", "); }
            tmp2996.Append("C: ");
            C.ToString(tmp2996);
          }
          if(__isset.num)
          {
            if(0 < tmp2997++) { tmp2996.Append(", "); }
            tmp2996.Append("Num: ");
            Num.ToString(tmp2996);
          }
          tmp2996.Append(')');
          return tmp2996.ToString();
        }
      }


      public partial class monitorInput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInput_result()
        {
        }

        public monitorInput_result DeepCopy()
        {
          var tmp2998 = new monitorInput_result();
          if((E != null) && __isset.e)
          {
            tmp2998.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp2998.__isset.e = this.__isset.e;
          return tmp2998;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2999 = new TStruct("monitorInput_result");
            await oprot.WriteStructBeginAsync(tmp2999, cancellationToken);
            var tmp3000 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3000.Name = "E";
                tmp3000.Type = TType.Struct;
                tmp3000.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3000, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3001 = new StringBuilder("monitorInput_result(");
          int tmp3002 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3002++) { tmp3001.Append(", "); }
            tmp3001.Append("E: ");
            E.ToString(tmp3001);
          }
          tmp3001.Append(')');
          return tmp3001.ToString();
        }
      }


      public partial class monitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorInputGroups_args()
        {
        }

        public monitorInputGroups_args DeepCopy()
        {
          var tmp3003 = new monitorInputGroups_args();
          if(__isset.c)
          {
            tmp3003.C = this.C;
          }
          tmp3003.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3003.GroupNum = this.GroupNum;
          }
          tmp3003.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3003.Count = this.Count;
          }
          tmp3003.__isset.count = this.__isset.count;
          return tmp3003;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3004 = new TStruct("monitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3004, cancellationToken);
            var tmp3005 = new TField();
            if(__isset.c)
            {
              tmp3005.Name = "c";
              tmp3005.Type = TType.I64;
              tmp3005.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3005, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3005.Name = "groupNum";
              tmp3005.Type = TType.I32;
              tmp3005.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3005, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3005.Name = "count";
              tmp3005.Type = TType.I32;
              tmp3005.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3005, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3006 = new StringBuilder("monitorInputGroups_args(");
          int tmp3007 = 0;
          if(__isset.c)
          {
            if(0 < tmp3007++) { tmp3006.Append(", "); }
            tmp3006.Append("C: ");
            C.ToString(tmp3006);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3007++) { tmp3006.Append(", "); }
            tmp3006.Append("GroupNum: ");
            GroupNum.ToString(tmp3006);
          }
          if(__isset.count)
          {
            if(0 < tmp3007++) { tmp3006.Append(", "); }
            tmp3006.Append("Count: ");
            Count.ToString(tmp3006);
          }
          tmp3006.Append(')');
          return tmp3006.ToString();
        }
      }


      public partial class monitorInputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorInputGroups_result()
        {
        }

        public monitorInputGroups_result DeepCopy()
        {
          var tmp3008 = new monitorInputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3008.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3008.__isset.e = this.__isset.e;
          return tmp3008;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3009 = new TStruct("monitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3009, cancellationToken);
            var tmp3010 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3010.Name = "E";
                tmp3010.Type = TType.Struct;
                tmp3010.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3010, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3011 = new StringBuilder("monitorInputGroups_result(");
          int tmp3012 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3012++) { tmp3011.Append(", "); }
            tmp3011.Append("E: ");
            E.ToString(tmp3011);
          }
          tmp3011.Append(')');
          return tmp3011.ToString();
        }
      }


      public partial class monitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public monitorOutput_args()
        {
        }

        public monitorOutput_args DeepCopy()
        {
          var tmp3013 = new monitorOutput_args();
          if(__isset.c)
          {
            tmp3013.C = this.C;
          }
          tmp3013.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3013.Num = this.Num;
          }
          tmp3013.__isset.num = this.__isset.num;
          return tmp3013;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3014 = new TStruct("monitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3014, cancellationToken);
            var tmp3015 = new TField();
            if(__isset.c)
            {
              tmp3015.Name = "c";
              tmp3015.Type = TType.I64;
              tmp3015.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3015, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3015.Name = "num";
              tmp3015.Type = TType.I32;
              tmp3015.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3015, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3016 = new StringBuilder("monitorOutput_args(");
          int tmp3017 = 0;
          if(__isset.c)
          {
            if(0 < tmp3017++) { tmp3016.Append(", "); }
            tmp3016.Append("C: ");
            C.ToString(tmp3016);
          }
          if(__isset.num)
          {
            if(0 < tmp3017++) { tmp3016.Append(", "); }
            tmp3016.Append("Num: ");
            Num.ToString(tmp3016);
          }
          tmp3016.Append(')');
          return tmp3016.ToString();
        }
      }


      public partial class monitorOutput_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutput_result()
        {
        }

        public monitorOutput_result DeepCopy()
        {
          var tmp3018 = new monitorOutput_result();
          if((E != null) && __isset.e)
          {
            tmp3018.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3018.__isset.e = this.__isset.e;
          return tmp3018;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3019 = new TStruct("monitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3019, cancellationToken);
            var tmp3020 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3020.Name = "E";
                tmp3020.Type = TType.Struct;
                tmp3020.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3020, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3021 = new StringBuilder("monitorOutput_result(");
          int tmp3022 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3022++) { tmp3021.Append(", "); }
            tmp3021.Append("E: ");
            E.ToString(tmp3021);
          }
          tmp3021.Append(')');
          return tmp3021.ToString();
        }
      }


      public partial class monitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public monitorOutputGroups_args()
        {
        }

        public monitorOutputGroups_args DeepCopy()
        {
          var tmp3023 = new monitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3023.C = this.C;
          }
          tmp3023.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3023.GroupNum = this.GroupNum;
          }
          tmp3023.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3023.Count = this.Count;
          }
          tmp3023.__isset.count = this.__isset.count;
          return tmp3023;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3024 = new TStruct("monitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3024, cancellationToken);
            var tmp3025 = new TField();
            if(__isset.c)
            {
              tmp3025.Name = "c";
              tmp3025.Type = TType.I64;
              tmp3025.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3025, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3025.Name = "groupNum";
              tmp3025.Type = TType.I32;
              tmp3025.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3025, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3025.Name = "count";
              tmp3025.Type = TType.I32;
              tmp3025.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3025, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3026 = new StringBuilder("monitorOutputGroups_args(");
          int tmp3027 = 0;
          if(__isset.c)
          {
            if(0 < tmp3027++) { tmp3026.Append(", "); }
            tmp3026.Append("C: ");
            C.ToString(tmp3026);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3027++) { tmp3026.Append(", "); }
            tmp3026.Append("GroupNum: ");
            GroupNum.ToString(tmp3026);
          }
          if(__isset.count)
          {
            if(0 < tmp3027++) { tmp3026.Append(", "); }
            tmp3026.Append("Count: ");
            Count.ToString(tmp3026);
          }
          tmp3026.Append(')');
          return tmp3026.ToString();
        }
      }


      public partial class monitorOutputGroups_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorOutputGroups_result()
        {
        }

        public monitorOutputGroups_result DeepCopy()
        {
          var tmp3028 = new monitorOutputGroups_result();
          if((E != null) && __isset.e)
          {
            tmp3028.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3028.__isset.e = this.__isset.e;
          return tmp3028;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3029 = new TStruct("monitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3029, cancellationToken);
            var tmp3030 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3030.Name = "E";
                tmp3030.Type = TType.Struct;
                tmp3030.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3030, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3031 = new StringBuilder("monitorOutputGroups_result(");
          int tmp3032 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3032++) { tmp3031.Append(", "); }
            tmp3031.Append("E: ");
            E.ToString(tmp3031);
          }
          tmp3031.Append(')');
          return tmp3031.ToString();
        }
      }


      public partial class unmonitorInput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorInput_args()
        {
        }

        public unmonitorInput_args DeepCopy()
        {
          var tmp3033 = new unmonitorInput_args();
          if(__isset.c)
          {
            tmp3033.C = this.C;
          }
          tmp3033.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3033.Num = this.Num;
          }
          tmp3033.__isset.num = this.__isset.num;
          return tmp3033;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3034 = new TStruct("unmonitorInput_args");
            await oprot.WriteStructBeginAsync(tmp3034, cancellationToken);
            var tmp3035 = new TField();
            if(__isset.c)
            {
              tmp3035.Name = "c";
              tmp3035.Type = TType.I64;
              tmp3035.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3035, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3035.Name = "num";
              tmp3035.Type = TType.I32;
              tmp3035.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3035, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3036 = new StringBuilder("unmonitorInput_args(");
          int tmp3037 = 0;
          if(__isset.c)
          {
            if(0 < tmp3037++) { tmp3036.Append(", "); }
            tmp3036.Append("C: ");
            C.ToString(tmp3036);
          }
          if(__isset.num)
          {
            if(0 < tmp3037++) { tmp3036.Append(", "); }
            tmp3036.Append("Num: ");
            Num.ToString(tmp3036);
          }
          tmp3036.Append(')');
          return tmp3036.ToString();
        }
      }


      public partial class unmonitorInput_result : TBase
      {

        public unmonitorInput_result()
        {
        }

        public unmonitorInput_result DeepCopy()
        {
          var tmp3038 = new unmonitorInput_result();
          return tmp3038;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3039 = new TStruct("unmonitorInput_result");
            await oprot.WriteStructBeginAsync(tmp3039, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3040 = new StringBuilder("unmonitorInput_result(");
          tmp3040.Append(')');
          return tmp3040.ToString();
        }
      }


      public partial class unmonitorInputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorInputGroups_args()
        {
        }

        public unmonitorInputGroups_args DeepCopy()
        {
          var tmp3042 = new unmonitorInputGroups_args();
          if(__isset.c)
          {
            tmp3042.C = this.C;
          }
          tmp3042.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3042.GroupNum = this.GroupNum;
          }
          tmp3042.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3042.Count = this.Count;
          }
          tmp3042.__isset.count = this.__isset.count;
          return tmp3042;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3043 = new TStruct("unmonitorInputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3043, cancellationToken);
            var tmp3044 = new TField();
            if(__isset.c)
            {
              tmp3044.Name = "c";
              tmp3044.Type = TType.I64;
              tmp3044.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3044, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3044.Name = "groupNum";
              tmp3044.Type = TType.I32;
              tmp3044.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3044, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3044.Name = "count";
              tmp3044.Type = TType.I32;
              tmp3044.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3044, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3045 = new StringBuilder("unmonitorInputGroups_args(");
          int tmp3046 = 0;
          if(__isset.c)
          {
            if(0 < tmp3046++) { tmp3045.Append(", "); }
            tmp3045.Append("C: ");
            C.ToString(tmp3045);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3046++) { tmp3045.Append(", "); }
            tmp3045.Append("GroupNum: ");
            GroupNum.ToString(tmp3045);
          }
          if(__isset.count)
          {
            if(0 < tmp3046++) { tmp3045.Append(", "); }
            tmp3045.Append("Count: ");
            Count.ToString(tmp3045);
          }
          tmp3045.Append(')');
          return tmp3045.ToString();
        }
      }


      public partial class unmonitorInputGroups_result : TBase
      {

        public unmonitorInputGroups_result()
        {
        }

        public unmonitorInputGroups_result DeepCopy()
        {
          var tmp3047 = new unmonitorInputGroups_result();
          return tmp3047;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3048 = new TStruct("unmonitorInputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3048, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorInputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3049 = new StringBuilder("unmonitorInputGroups_result(");
          tmp3049.Append(')');
          return tmp3049.ToString();
        }
      }


      public partial class unmonitorOutput_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public unmonitorOutput_args()
        {
        }

        public unmonitorOutput_args DeepCopy()
        {
          var tmp3051 = new unmonitorOutput_args();
          if(__isset.c)
          {
            tmp3051.C = this.C;
          }
          tmp3051.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3051.Num = this.Num;
          }
          tmp3051.__isset.num = this.__isset.num;
          return tmp3051;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3052 = new TStruct("unmonitorOutput_args");
            await oprot.WriteStructBeginAsync(tmp3052, cancellationToken);
            var tmp3053 = new TField();
            if(__isset.c)
            {
              tmp3053.Name = "c";
              tmp3053.Type = TType.I64;
              tmp3053.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3053, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3053.Name = "num";
              tmp3053.Type = TType.I32;
              tmp3053.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3053, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3054 = new StringBuilder("unmonitorOutput_args(");
          int tmp3055 = 0;
          if(__isset.c)
          {
            if(0 < tmp3055++) { tmp3054.Append(", "); }
            tmp3054.Append("C: ");
            C.ToString(tmp3054);
          }
          if(__isset.num)
          {
            if(0 < tmp3055++) { tmp3054.Append(", "); }
            tmp3054.Append("Num: ");
            Num.ToString(tmp3054);
          }
          tmp3054.Append(')');
          return tmp3054.ToString();
        }
      }


      public partial class unmonitorOutput_result : TBase
      {

        public unmonitorOutput_result()
        {
        }

        public unmonitorOutput_result DeepCopy()
        {
          var tmp3056 = new unmonitorOutput_result();
          return tmp3056;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3057 = new TStruct("unmonitorOutput_result");
            await oprot.WriteStructBeginAsync(tmp3057, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutput_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3058 = new StringBuilder("unmonitorOutput_result(");
          tmp3058.Append(')');
          return tmp3058.ToString();
        }
      }


      public partial class unmonitorOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public unmonitorOutputGroups_args()
        {
        }

        public unmonitorOutputGroups_args DeepCopy()
        {
          var tmp3060 = new unmonitorOutputGroups_args();
          if(__isset.c)
          {
            tmp3060.C = this.C;
          }
          tmp3060.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3060.GroupNum = this.GroupNum;
          }
          tmp3060.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3060.Count = this.Count;
          }
          tmp3060.__isset.count = this.__isset.count;
          return tmp3060;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3061 = new TStruct("unmonitorOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3061, cancellationToken);
            var tmp3062 = new TField();
            if(__isset.c)
            {
              tmp3062.Name = "c";
              tmp3062.Type = TType.I64;
              tmp3062.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3062, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3062.Name = "groupNum";
              tmp3062.Type = TType.I32;
              tmp3062.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3062, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3062.Name = "count";
              tmp3062.Type = TType.I32;
              tmp3062.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3062, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3063 = new StringBuilder("unmonitorOutputGroups_args(");
          int tmp3064 = 0;
          if(__isset.c)
          {
            if(0 < tmp3064++) { tmp3063.Append(", "); }
            tmp3063.Append("C: ");
            C.ToString(tmp3063);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3064++) { tmp3063.Append(", "); }
            tmp3063.Append("GroupNum: ");
            GroupNum.ToString(tmp3063);
          }
          if(__isset.count)
          {
            if(0 < tmp3064++) { tmp3063.Append(", "); }
            tmp3063.Append("Count: ");
            Count.ToString(tmp3063);
          }
          tmp3063.Append(')');
          return tmp3063.ToString();
        }
      }


      public partial class unmonitorOutputGroups_result : TBase
      {

        public unmonitorOutputGroups_result()
        {
        }

        public unmonitorOutputGroups_result DeepCopy()
        {
          var tmp3065 = new unmonitorOutputGroups_result();
          return tmp3065;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3066 = new TStruct("unmonitorOutputGroups_result");
            await oprot.WriteStructBeginAsync(tmp3066, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorOutputGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3067 = new StringBuilder("unmonitorOutputGroups_result(");
          tmp3067.Append(')');
          return tmp3067.ToString();
        }
      }


      public partial class inputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputValue_args()
        {
        }

        public inputValue_args DeepCopy()
        {
          var tmp3069 = new inputValue_args();
          if(__isset.c)
          {
            tmp3069.C = this.C;
          }
          tmp3069.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3069.Num = this.Num;
          }
          tmp3069.__isset.num = this.__isset.num;
          return tmp3069;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3070 = new TStruct("inputValue_args");
            await oprot.WriteStructBeginAsync(tmp3070, cancellationToken);
            var tmp3071 = new TField();
            if(__isset.c)
            {
              tmp3071.Name = "c";
              tmp3071.Type = TType.I64;
              tmp3071.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3071, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3071.Name = "num";
              tmp3071.Type = TType.I32;
              tmp3071.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3071, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3072 = new StringBuilder("inputValue_args(");
          int tmp3073 = 0;
          if(__isset.c)
          {
            if(0 < tmp3073++) { tmp3072.Append(", "); }
            tmp3072.Append("C: ");
            C.ToString(tmp3072);
          }
          if(__isset.num)
          {
            if(0 < tmp3073++) { tmp3072.Append(", "); }
            tmp3072.Append("Num: ");
            Num.ToString(tmp3072);
          }
          tmp3072.Append(')');
          return tmp3072.ToString();
        }
      }


      public partial class inputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputValue_result()
        {
        }

        public inputValue_result DeepCopy()
        {
          var tmp3074 = new inputValue_result();
          if(__isset.success)
          {
            tmp3074.Success = this.Success;
          }
          tmp3074.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3074.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3074.__isset.e = this.__isset.e;
          return tmp3074;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3075 = new TStruct("inputValue_result");
            await oprot.WriteStructBeginAsync(tmp3075, cancellationToken);
            var tmp3076 = new TField();

            if(this.__isset.success)
            {
              tmp3076.Name = "Success";
              tmp3076.Type = TType.Bool;
              tmp3076.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3076, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3076.Name = "E";
                tmp3076.Type = TType.Struct;
                tmp3076.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3076, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3077 = new StringBuilder("inputValue_result(");
          int tmp3078 = 0;
          if(__isset.success)
          {
            if(0 < tmp3078++) { tmp3077.Append(", "); }
            tmp3077.Append("Success: ");
            Success.ToString(tmp3077);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3078++) { tmp3077.Append(", "); }
            tmp3077.Append("E: ");
            E.ToString(tmp3077);
          }
          tmp3077.Append(')');
          return tmp3077.ToString();
        }
      }


      public partial class inputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public inputGroupsValue_args()
        {
        }

        public inputGroupsValue_args DeepCopy()
        {
          var tmp3079 = new inputGroupsValue_args();
          if(__isset.c)
          {
            tmp3079.C = this.C;
          }
          tmp3079.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3079.GroupNum = this.GroupNum;
          }
          tmp3079.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3079.Count = this.Count;
          }
          tmp3079.__isset.count = this.__isset.count;
          return tmp3079;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3080 = new TStruct("inputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3080, cancellationToken);
            var tmp3081 = new TField();
            if(__isset.c)
            {
              tmp3081.Name = "c";
              tmp3081.Type = TType.I64;
              tmp3081.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3081, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3081.Name = "groupNum";
              tmp3081.Type = TType.I32;
              tmp3081.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3081, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3081.Name = "count";
              tmp3081.Type = TType.I32;
              tmp3081.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3081, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3082 = new StringBuilder("inputGroupsValue_args(");
          int tmp3083 = 0;
          if(__isset.c)
          {
            if(0 < tmp3083++) { tmp3082.Append(", "); }
            tmp3082.Append("C: ");
            C.ToString(tmp3082);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3083++) { tmp3082.Append(", "); }
            tmp3082.Append("GroupNum: ");
            GroupNum.ToString(tmp3082);
          }
          if(__isset.count)
          {
            if(0 < tmp3083++) { tmp3082.Append(", "); }
            tmp3082.Append("Count: ");
            Count.ToString(tmp3082);
          }
          tmp3082.Append(')');
          return tmp3082.ToString();
        }
      }


      public partial class inputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputGroupsValue_result()
        {
        }

        public inputGroupsValue_result DeepCopy()
        {
          var tmp3084 = new inputGroupsValue_result();
          if(__isset.success)
          {
            tmp3084.Success = this.Success;
          }
          tmp3084.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3084.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3084.__isset.e = this.__isset.e;
          return tmp3084;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3085 = new TStruct("inputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3085, cancellationToken);
            var tmp3086 = new TField();

            if(this.__isset.success)
            {
              tmp3086.Name = "Success";
              tmp3086.Type = TType.I32;
              tmp3086.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3086, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3086.Name = "E";
                tmp3086.Type = TType.Struct;
                tmp3086.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3086, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3087 = new StringBuilder("inputGroupsValue_result(");
          int tmp3088 = 0;
          if(__isset.success)
          {
            if(0 < tmp3088++) { tmp3087.Append(", "); }
            tmp3087.Append("Success: ");
            Success.ToString(tmp3087);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3088++) { tmp3087.Append(", "); }
            tmp3087.Append("E: ");
            E.ToString(tmp3087);
          }
          tmp3087.Append(')');
          return tmp3087.ToString();
        }
      }


      public partial class outputValue_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputValue_args()
        {
        }

        public outputValue_args DeepCopy()
        {
          var tmp3089 = new outputValue_args();
          if(__isset.c)
          {
            tmp3089.C = this.C;
          }
          tmp3089.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3089.Num = this.Num;
          }
          tmp3089.__isset.num = this.__isset.num;
          return tmp3089;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3090 = new TStruct("outputValue_args");
            await oprot.WriteStructBeginAsync(tmp3090, cancellationToken);
            var tmp3091 = new TField();
            if(__isset.c)
            {
              tmp3091.Name = "c";
              tmp3091.Type = TType.I64;
              tmp3091.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3091, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3091.Name = "num";
              tmp3091.Type = TType.I32;
              tmp3091.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3091, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3092 = new StringBuilder("outputValue_args(");
          int tmp3093 = 0;
          if(__isset.c)
          {
            if(0 < tmp3093++) { tmp3092.Append(", "); }
            tmp3092.Append("C: ");
            C.ToString(tmp3092);
          }
          if(__isset.num)
          {
            if(0 < tmp3093++) { tmp3092.Append(", "); }
            tmp3092.Append("Num: ");
            Num.ToString(tmp3092);
          }
          tmp3092.Append(')');
          return tmp3092.ToString();
        }
      }


      public partial class outputValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputValue_result()
        {
        }

        public outputValue_result DeepCopy()
        {
          var tmp3094 = new outputValue_result();
          if(__isset.success)
          {
            tmp3094.Success = this.Success;
          }
          tmp3094.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3094.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3094.__isset.e = this.__isset.e;
          return tmp3094;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3095 = new TStruct("outputValue_result");
            await oprot.WriteStructBeginAsync(tmp3095, cancellationToken);
            var tmp3096 = new TField();

            if(this.__isset.success)
            {
              tmp3096.Name = "Success";
              tmp3096.Type = TType.Bool;
              tmp3096.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3096, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3096.Name = "E";
                tmp3096.Type = TType.Struct;
                tmp3096.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3096, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3097 = new StringBuilder("outputValue_result(");
          int tmp3098 = 0;
          if(__isset.success)
          {
            if(0 < tmp3098++) { tmp3097.Append(", "); }
            tmp3097.Append("Success: ");
            Success.ToString(tmp3097);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3098++) { tmp3097.Append(", "); }
            tmp3097.Append("E: ");
            E.ToString(tmp3097);
          }
          tmp3097.Append(')');
          return tmp3097.ToString();
        }
      }


      public partial class outputGroupsValue_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
        }

        public outputGroupsValue_args()
        {
        }

        public outputGroupsValue_args DeepCopy()
        {
          var tmp3099 = new outputGroupsValue_args();
          if(__isset.c)
          {
            tmp3099.C = this.C;
          }
          tmp3099.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3099.GroupNum = this.GroupNum;
          }
          tmp3099.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3099.Count = this.Count;
          }
          tmp3099.__isset.count = this.__isset.count;
          return tmp3099;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3100 = new TStruct("outputGroupsValue_args");
            await oprot.WriteStructBeginAsync(tmp3100, cancellationToken);
            var tmp3101 = new TField();
            if(__isset.c)
            {
              tmp3101.Name = "c";
              tmp3101.Type = TType.I64;
              tmp3101.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3101, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3101.Name = "groupNum";
              tmp3101.Type = TType.I32;
              tmp3101.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3101, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3101.Name = "count";
              tmp3101.Type = TType.I32;
              tmp3101.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3101, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3102 = new StringBuilder("outputGroupsValue_args(");
          int tmp3103 = 0;
          if(__isset.c)
          {
            if(0 < tmp3103++) { tmp3102.Append(", "); }
            tmp3102.Append("C: ");
            C.ToString(tmp3102);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3103++) { tmp3102.Append(", "); }
            tmp3102.Append("GroupNum: ");
            GroupNum.ToString(tmp3102);
          }
          if(__isset.count)
          {
            if(0 < tmp3103++) { tmp3102.Append(", "); }
            tmp3102.Append("Count: ");
            Count.ToString(tmp3102);
          }
          tmp3102.Append(')');
          return tmp3102.ToString();
        }
      }


      public partial class outputGroupsValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputGroupsValue_result()
        {
        }

        public outputGroupsValue_result DeepCopy()
        {
          var tmp3104 = new outputGroupsValue_result();
          if(__isset.success)
          {
            tmp3104.Success = this.Success;
          }
          tmp3104.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3104.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3104.__isset.e = this.__isset.e;
          return tmp3104;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3105 = new TStruct("outputGroupsValue_result");
            await oprot.WriteStructBeginAsync(tmp3105, cancellationToken);
            var tmp3106 = new TField();

            if(this.__isset.success)
            {
              tmp3106.Name = "Success";
              tmp3106.Type = TType.I32;
              tmp3106.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3106, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3106.Name = "E";
                tmp3106.Type = TType.Struct;
                tmp3106.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3106, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputGroupsValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3107 = new StringBuilder("outputGroupsValue_result(");
          int tmp3108 = 0;
          if(__isset.success)
          {
            if(0 < tmp3108++) { tmp3107.Append(", "); }
            tmp3107.Append("Success: ");
            Success.ToString(tmp3107);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3108++) { tmp3107.Append(", "); }
            tmp3107.Append("E: ");
            E.ToString(tmp3107);
          }
          tmp3107.Append(')');
          return tmp3107.ToString();
        }
      }


      public partial class setOutput_args : TBase
      {
        private long _c;
        private int _num;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
          public bool @value;
        }

        public setOutput_args()
        {
        }

        public setOutput_args DeepCopy()
        {
          var tmp3109 = new setOutput_args();
          if(__isset.c)
          {
            tmp3109.C = this.C;
          }
          tmp3109.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3109.Num = this.Num;
          }
          tmp3109.__isset.num = this.__isset.num;
          if(__isset.@value)
          {
            tmp3109.Value = this.Value;
          }
          tmp3109.__isset.@value = this.__isset.@value;
          return tmp3109;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3110 = new TStruct("setOutput_args");
            await oprot.WriteStructBeginAsync(tmp3110, cancellationToken);
            var tmp3111 = new TField();
            if(__isset.c)
            {
              tmp3111.Name = "c";
              tmp3111.Type = TType.I64;
              tmp3111.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3111, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3111.Name = "num";
              tmp3111.Type = TType.I32;
              tmp3111.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3111, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3111.Name = "value";
              tmp3111.Type = TType.Bool;
              tmp3111.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3111, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutput_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3112 = new StringBuilder("setOutput_args(");
          int tmp3113 = 0;
          if(__isset.c)
          {
            if(0 < tmp3113++) { tmp3112.Append(", "); }
            tmp3112.Append("C: ");
            C.ToString(tmp3112);
          }
          if(__isset.num)
          {
            if(0 < tmp3113++) { tmp3112.Append(", "); }
            tmp3112.Append("Num: ");
            Num.ToString(tmp3112);
          }
          if(__isset.@value)
          {
            if(0 < tmp3113++) { tmp3112.Append(", "); }
            tmp3112.Append("Value: ");
            Value.ToString(tmp3112);
          }
          tmp3112.Append(')');
          return tmp3112.ToString();
        }
      }


      public partial class setOutputGroups_args : TBase
      {
        private long _c;
        private int _groupNum;
        private int _count;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int GroupNum
        {
          get
          {
            return _groupNum;
          }
          set
          {
            __isset.groupNum = true;
            this._groupNum = value;
          }
        }

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.count = true;
            this._count = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool groupNum;
          public bool count;
          public bool @value;
        }

        public setOutputGroups_args()
        {
        }

        public setOutputGroups_args DeepCopy()
        {
          var tmp3114 = new setOutputGroups_args();
          if(__isset.c)
          {
            tmp3114.C = this.C;
          }
          tmp3114.__isset.c = this.__isset.c;
          if(__isset.groupNum)
          {
            tmp3114.GroupNum = this.GroupNum;
          }
          tmp3114.__isset.groupNum = this.__isset.groupNum;
          if(__isset.count)
          {
            tmp3114.Count = this.Count;
          }
          tmp3114.__isset.count = this.__isset.count;
          if(__isset.@value)
          {
            tmp3114.Value = this.Value;
          }
          tmp3114.__isset.@value = this.__isset.@value;
          return tmp3114;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    GroupNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3115 = new TStruct("setOutputGroups_args");
            await oprot.WriteStructBeginAsync(tmp3115, cancellationToken);
            var tmp3116 = new TField();
            if(__isset.c)
            {
              tmp3116.Name = "c";
              tmp3116.Type = TType.I64;
              tmp3116.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3116, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.groupNum)
            {
              tmp3116.Name = "groupNum";
              tmp3116.Type = TType.I32;
              tmp3116.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3116, cancellationToken);
              await oprot.WriteI32Async(GroupNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.count)
            {
              tmp3116.Name = "count";
              tmp3116.Type = TType.I32;
              tmp3116.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3116, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3116.Name = "value";
              tmp3116.Type = TType.I32;
              tmp3116.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3116, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.groupNum == other.__isset.groupNum) && ((!__isset.groupNum) || (global::System.Object.Equals(GroupNum, other.GroupNum))))
            && ((__isset.count == other.__isset.count) && ((!__isset.count) || (global::System.Object.Equals(Count, other.Count))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.groupNum)
            {
              hashcode = (hashcode * 397) + GroupNum.GetHashCode();
            }
            if(__isset.count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3117 = new StringBuilder("setOutputGroups_args(");
          int tmp3118 = 0;
          if(__isset.c)
          {
            if(0 < tmp3118++) { tmp3117.Append(", "); }
            tmp3117.Append("C: ");
            C.ToString(tmp3117);
          }
          if(__isset.groupNum)
          {
            if(0 < tmp3118++) { tmp3117.Append(", "); }
            tmp3117.Append("GroupNum: ");
            GroupNum.ToString(tmp3117);
          }
          if(__isset.count)
          {
            if(0 < tmp3118++) { tmp3117.Append(", "); }
            tmp3117.Append("Count: ");
            Count.ToString(tmp3117);
          }
          if(__isset.@value)
          {
            if(0 < tmp3118++) { tmp3117.Append(", "); }
            tmp3117.Append("Value: ");
            Value.ToString(tmp3117);
          }
          tmp3117.Append(')');
          return tmp3117.ToString();
        }
      }


      public partial class inputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public inputAddress_args()
        {
        }

        public inputAddress_args DeepCopy()
        {
          var tmp3119 = new inputAddress_args();
          if(__isset.c)
          {
            tmp3119.C = this.C;
          }
          tmp3119.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3119.Name = this.Name;
          }
          tmp3119.__isset.name = this.__isset.name;
          return tmp3119;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3120 = new TStruct("inputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3120, cancellationToken);
            var tmp3121 = new TField();
            if(__isset.c)
            {
              tmp3121.Name = "c";
              tmp3121.Type = TType.I64;
              tmp3121.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3121, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3121.Name = "name";
              tmp3121.Type = TType.String;
              tmp3121.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3121, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3122 = new StringBuilder("inputAddress_args(");
          int tmp3123 = 0;
          if(__isset.c)
          {
            if(0 < tmp3123++) { tmp3122.Append(", "); }
            tmp3122.Append("C: ");
            C.ToString(tmp3122);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3123++) { tmp3122.Append(", "); }
            tmp3122.Append("Name: ");
            Name.ToString(tmp3122);
          }
          tmp3122.Append(')');
          return tmp3122.ToString();
        }
      }


      public partial class inputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddress_result()
        {
        }

        public inputAddress_result DeepCopy()
        {
          var tmp3124 = new inputAddress_result();
          if(__isset.success)
          {
            tmp3124.Success = this.Success;
          }
          tmp3124.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3124.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3124.__isset.e = this.__isset.e;
          return tmp3124;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3125 = new TStruct("inputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3125, cancellationToken);
            var tmp3126 = new TField();

            if(this.__isset.success)
            {
              tmp3126.Name = "Success";
              tmp3126.Type = TType.I32;
              tmp3126.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3126, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3126.Name = "E";
                tmp3126.Type = TType.Struct;
                tmp3126.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3126, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3127 = new StringBuilder("inputAddress_result(");
          int tmp3128 = 0;
          if(__isset.success)
          {
            if(0 < tmp3128++) { tmp3127.Append(", "); }
            tmp3127.Append("Success: ");
            Success.ToString(tmp3127);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3128++) { tmp3127.Append(", "); }
            tmp3127.Append("E: ");
            E.ToString(tmp3127);
          }
          tmp3127.Append(')');
          return tmp3127.ToString();
        }
      }


      public partial class inputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public inputAddressByNumber_args()
        {
        }

        public inputAddressByNumber_args DeepCopy()
        {
          var tmp3129 = new inputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3129.C = this.C;
          }
          tmp3129.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3129.Num = this.Num;
          }
          tmp3129.__isset.num = this.__isset.num;
          return tmp3129;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3130 = new TStruct("inputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3130, cancellationToken);
            var tmp3131 = new TField();
            if(__isset.c)
            {
              tmp3131.Name = "c";
              tmp3131.Type = TType.I64;
              tmp3131.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3131, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3131.Name = "num";
              tmp3131.Type = TType.I32;
              tmp3131.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3131, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3132 = new StringBuilder("inputAddressByNumber_args(");
          int tmp3133 = 0;
          if(__isset.c)
          {
            if(0 < tmp3133++) { tmp3132.Append(", "); }
            tmp3132.Append("C: ");
            C.ToString(tmp3132);
          }
          if(__isset.num)
          {
            if(0 < tmp3133++) { tmp3132.Append(", "); }
            tmp3132.Append("Num: ");
            Num.ToString(tmp3132);
          }
          tmp3132.Append(')');
          return tmp3132.ToString();
        }
      }


      public partial class inputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressByNumber_result()
        {
        }

        public inputAddressByNumber_result DeepCopy()
        {
          var tmp3134 = new inputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3134.Success = this.Success;
          }
          tmp3134.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3134.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3134.__isset.e = this.__isset.e;
          return tmp3134;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3135 = new TStruct("inputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3135, cancellationToken);
            var tmp3136 = new TField();

            if(this.__isset.success)
            {
              tmp3136.Name = "Success";
              tmp3136.Type = TType.I32;
              tmp3136.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3136, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3136.Name = "E";
                tmp3136.Type = TType.Struct;
                tmp3136.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3136, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3137 = new StringBuilder("inputAddressByNumber_result(");
          int tmp3138 = 0;
          if(__isset.success)
          {
            if(0 < tmp3138++) { tmp3137.Append(", "); }
            tmp3137.Append("Success: ");
            Success.ToString(tmp3137);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3138++) { tmp3137.Append(", "); }
            tmp3137.Append("E: ");
            E.ToString(tmp3137);
          }
          tmp3137.Append(')');
          return tmp3137.ToString();
        }
      }


      public partial class outputAddress_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public outputAddress_args()
        {
        }

        public outputAddress_args DeepCopy()
        {
          var tmp3139 = new outputAddress_args();
          if(__isset.c)
          {
            tmp3139.C = this.C;
          }
          tmp3139.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3139.Name = this.Name;
          }
          tmp3139.__isset.name = this.__isset.name;
          return tmp3139;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3140 = new TStruct("outputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3140, cancellationToken);
            var tmp3141 = new TField();
            if(__isset.c)
            {
              tmp3141.Name = "c";
              tmp3141.Type = TType.I64;
              tmp3141.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3141, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3141.Name = "name";
              tmp3141.Type = TType.String;
              tmp3141.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3141, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3142 = new StringBuilder("outputAddress_args(");
          int tmp3143 = 0;
          if(__isset.c)
          {
            if(0 < tmp3143++) { tmp3142.Append(", "); }
            tmp3142.Append("C: ");
            C.ToString(tmp3142);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3143++) { tmp3142.Append(", "); }
            tmp3142.Append("Name: ");
            Name.ToString(tmp3142);
          }
          tmp3142.Append(')');
          return tmp3142.ToString();
        }
      }


      public partial class outputAddress_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddress_result()
        {
        }

        public outputAddress_result DeepCopy()
        {
          var tmp3144 = new outputAddress_result();
          if(__isset.success)
          {
            tmp3144.Success = this.Success;
          }
          tmp3144.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3144.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3144.__isset.e = this.__isset.e;
          return tmp3144;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3145 = new TStruct("outputAddress_result");
            await oprot.WriteStructBeginAsync(tmp3145, cancellationToken);
            var tmp3146 = new TField();

            if(this.__isset.success)
            {
              tmp3146.Name = "Success";
              tmp3146.Type = TType.I32;
              tmp3146.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3146, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3146.Name = "E";
                tmp3146.Type = TType.Struct;
                tmp3146.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3146, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3147 = new StringBuilder("outputAddress_result(");
          int tmp3148 = 0;
          if(__isset.success)
          {
            if(0 < tmp3148++) { tmp3147.Append(", "); }
            tmp3147.Append("Success: ");
            Success.ToString(tmp3147);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3148++) { tmp3147.Append(", "); }
            tmp3147.Append("E: ");
            E.ToString(tmp3147);
          }
          tmp3147.Append(')');
          return tmp3147.ToString();
        }
      }


      public partial class outputAddressByNumber_args : TBase
      {
        private long _c;
        private int _num;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Num
        {
          get
          {
            return _num;
          }
          set
          {
            __isset.num = true;
            this._num = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool num;
        }

        public outputAddressByNumber_args()
        {
        }

        public outputAddressByNumber_args DeepCopy()
        {
          var tmp3149 = new outputAddressByNumber_args();
          if(__isset.c)
          {
            tmp3149.C = this.C;
          }
          tmp3149.__isset.c = this.__isset.c;
          if(__isset.num)
          {
            tmp3149.Num = this.Num;
          }
          tmp3149.__isset.num = this.__isset.num;
          return tmp3149;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3150 = new TStruct("outputAddressByNumber_args");
            await oprot.WriteStructBeginAsync(tmp3150, cancellationToken);
            var tmp3151 = new TField();
            if(__isset.c)
            {
              tmp3151.Name = "c";
              tmp3151.Type = TType.I64;
              tmp3151.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3151, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num)
            {
              tmp3151.Name = "num";
              tmp3151.Type = TType.I32;
              tmp3151.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3151, cancellationToken);
              await oprot.WriteI32Async(Num, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.num == other.__isset.num) && ((!__isset.num) || (global::System.Object.Equals(Num, other.Num))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.num)
            {
              hashcode = (hashcode * 397) + Num.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3152 = new StringBuilder("outputAddressByNumber_args(");
          int tmp3153 = 0;
          if(__isset.c)
          {
            if(0 < tmp3153++) { tmp3152.Append(", "); }
            tmp3152.Append("C: ");
            C.ToString(tmp3152);
          }
          if(__isset.num)
          {
            if(0 < tmp3153++) { tmp3152.Append(", "); }
            tmp3152.Append("Num: ");
            Num.ToString(tmp3152);
          }
          tmp3152.Append(')');
          return tmp3152.ToString();
        }
      }


      public partial class outputAddressByNumber_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressByNumber_result()
        {
        }

        public outputAddressByNumber_result DeepCopy()
        {
          var tmp3154 = new outputAddressByNumber_result();
          if(__isset.success)
          {
            tmp3154.Success = this.Success;
          }
          tmp3154.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3154.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3154.__isset.e = this.__isset.e;
          return tmp3154;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3155 = new TStruct("outputAddressByNumber_result");
            await oprot.WriteStructBeginAsync(tmp3155, cancellationToken);
            var tmp3156 = new TField();

            if(this.__isset.success)
            {
              tmp3156.Name = "Success";
              tmp3156.Type = TType.I32;
              tmp3156.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3156, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3156.Name = "E";
                tmp3156.Type = TType.Struct;
                tmp3156.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3156, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressByNumber_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3157 = new StringBuilder("outputAddressByNumber_result(");
          int tmp3158 = 0;
          if(__isset.success)
          {
            if(0 < tmp3158++) { tmp3157.Append(", "); }
            tmp3157.Append("Success: ");
            Success.ToString(tmp3157);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3158++) { tmp3157.Append(", "); }
            tmp3157.Append("E: ");
            E.ToString(tmp3157);
          }
          tmp3157.Append(')');
          return tmp3157.ToString();
        }
      }


      public partial class monitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public monitorIOAddress_args()
        {
        }

        public monitorIOAddress_args DeepCopy()
        {
          var tmp3159 = new monitorIOAddress_args();
          if(__isset.c)
          {
            tmp3159.C = this.C;
          }
          tmp3159.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3159.Address = this.Address;
          }
          tmp3159.__isset.address = this.__isset.address;
          return tmp3159;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3160 = new TStruct("monitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3160, cancellationToken);
            var tmp3161 = new TField();
            if(__isset.c)
            {
              tmp3161.Name = "c";
              tmp3161.Type = TType.I64;
              tmp3161.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3161, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3161.Name = "address";
              tmp3161.Type = TType.I32;
              tmp3161.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3161, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3162 = new StringBuilder("monitorIOAddress_args(");
          int tmp3163 = 0;
          if(__isset.c)
          {
            if(0 < tmp3163++) { tmp3162.Append(", "); }
            tmp3162.Append("C: ");
            C.ToString(tmp3162);
          }
          if(__isset.address)
          {
            if(0 < tmp3163++) { tmp3162.Append(", "); }
            tmp3162.Append("Address: ");
            Address.ToString(tmp3162);
          }
          tmp3162.Append(')');
          return tmp3162.ToString();
        }
      }


      public partial class monitorIOAddress_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorIOAddress_result()
        {
        }

        public monitorIOAddress_result DeepCopy()
        {
          var tmp3164 = new monitorIOAddress_result();
          if((E != null) && __isset.e)
          {
            tmp3164.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3164.__isset.e = this.__isset.e;
          return tmp3164;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3165 = new TStruct("monitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3165, cancellationToken);
            var tmp3166 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3166.Name = "E";
                tmp3166.Type = TType.Struct;
                tmp3166.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3166, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3167 = new StringBuilder("monitorIOAddress_result(");
          int tmp3168 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3168++) { tmp3167.Append(", "); }
            tmp3167.Append("E: ");
            E.ToString(tmp3167);
          }
          tmp3167.Append(')');
          return tmp3167.ToString();
        }
      }


      public partial class unmonitorIOAddress_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public unmonitorIOAddress_args()
        {
        }

        public unmonitorIOAddress_args DeepCopy()
        {
          var tmp3169 = new unmonitorIOAddress_args();
          if(__isset.c)
          {
            tmp3169.C = this.C;
          }
          tmp3169.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3169.Address = this.Address;
          }
          tmp3169.__isset.address = this.__isset.address;
          return tmp3169;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3170 = new TStruct("unmonitorIOAddress_args");
            await oprot.WriteStructBeginAsync(tmp3170, cancellationToken);
            var tmp3171 = new TField();
            if(__isset.c)
            {
              tmp3171.Name = "c";
              tmp3171.Type = TType.I64;
              tmp3171.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3171, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3171.Name = "address";
              tmp3171.Type = TType.I32;
              tmp3171.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3171, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3172 = new StringBuilder("unmonitorIOAddress_args(");
          int tmp3173 = 0;
          if(__isset.c)
          {
            if(0 < tmp3173++) { tmp3172.Append(", "); }
            tmp3172.Append("C: ");
            C.ToString(tmp3172);
          }
          if(__isset.address)
          {
            if(0 < tmp3173++) { tmp3172.Append(", "); }
            tmp3172.Append("Address: ");
            Address.ToString(tmp3172);
          }
          tmp3172.Append(')');
          return tmp3172.ToString();
        }
      }


      public partial class unmonitorIOAddress_result : TBase
      {

        public unmonitorIOAddress_result()
        {
        }

        public unmonitorIOAddress_result DeepCopy()
        {
          var tmp3174 = new unmonitorIOAddress_result();
          return tmp3174;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3175 = new TStruct("unmonitorIOAddress_result");
            await oprot.WriteStructBeginAsync(tmp3175, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorIOAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3176 = new StringBuilder("unmonitorIOAddress_result(");
          tmp3176.Append(')');
          return tmp3176.ToString();
        }
      }


      public partial class inputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public inputAddressValue_args()
        {
        }

        public inputAddressValue_args DeepCopy()
        {
          var tmp3178 = new inputAddressValue_args();
          if(__isset.c)
          {
            tmp3178.C = this.C;
          }
          tmp3178.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3178.Address = this.Address;
          }
          tmp3178.__isset.address = this.__isset.address;
          return tmp3178;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3179 = new TStruct("inputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3179, cancellationToken);
            var tmp3180 = new TField();
            if(__isset.c)
            {
              tmp3180.Name = "c";
              tmp3180.Type = TType.I64;
              tmp3180.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3180, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3180.Name = "address";
              tmp3180.Type = TType.I32;
              tmp3180.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3180, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3181 = new StringBuilder("inputAddressValue_args(");
          int tmp3182 = 0;
          if(__isset.c)
          {
            if(0 < tmp3182++) { tmp3181.Append(", "); }
            tmp3181.Append("C: ");
            C.ToString(tmp3181);
          }
          if(__isset.address)
          {
            if(0 < tmp3182++) { tmp3181.Append(", "); }
            tmp3181.Append("Address: ");
            Address.ToString(tmp3181);
          }
          tmp3181.Append(')');
          return tmp3181.ToString();
        }
      }


      public partial class inputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public inputAddressValue_result()
        {
        }

        public inputAddressValue_result DeepCopy()
        {
          var tmp3183 = new inputAddressValue_result();
          if(__isset.success)
          {
            tmp3183.Success = this.Success;
          }
          tmp3183.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3183.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3183.__isset.e = this.__isset.e;
          return tmp3183;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3184 = new TStruct("inputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3184, cancellationToken);
            var tmp3185 = new TField();

            if(this.__isset.success)
            {
              tmp3185.Name = "Success";
              tmp3185.Type = TType.Bool;
              tmp3185.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3185, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3185.Name = "E";
                tmp3185.Type = TType.Struct;
                tmp3185.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3185, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3186 = new StringBuilder("inputAddressValue_result(");
          int tmp3187 = 0;
          if(__isset.success)
          {
            if(0 < tmp3187++) { tmp3186.Append(", "); }
            tmp3186.Append("Success: ");
            Success.ToString(tmp3186);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3187++) { tmp3186.Append(", "); }
            tmp3186.Append("E: ");
            E.ToString(tmp3186);
          }
          tmp3186.Append(')');
          return tmp3186.ToString();
        }
      }


      public partial class outputAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public outputAddressValue_args()
        {
        }

        public outputAddressValue_args DeepCopy()
        {
          var tmp3188 = new outputAddressValue_args();
          if(__isset.c)
          {
            tmp3188.C = this.C;
          }
          tmp3188.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3188.Address = this.Address;
          }
          tmp3188.__isset.address = this.__isset.address;
          return tmp3188;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3189 = new TStruct("outputAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3189, cancellationToken);
            var tmp3190 = new TField();
            if(__isset.c)
            {
              tmp3190.Name = "c";
              tmp3190.Type = TType.I64;
              tmp3190.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3190, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3190.Name = "address";
              tmp3190.Type = TType.I32;
              tmp3190.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3190, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3191 = new StringBuilder("outputAddressValue_args(");
          int tmp3192 = 0;
          if(__isset.c)
          {
            if(0 < tmp3192++) { tmp3191.Append(", "); }
            tmp3191.Append("C: ");
            C.ToString(tmp3191);
          }
          if(__isset.address)
          {
            if(0 < tmp3192++) { tmp3191.Append(", "); }
            tmp3191.Append("Address: ");
            Address.ToString(tmp3191);
          }
          tmp3191.Append(')');
          return tmp3191.ToString();
        }
      }


      public partial class outputAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public outputAddressValue_result()
        {
        }

        public outputAddressValue_result DeepCopy()
        {
          var tmp3193 = new outputAddressValue_result();
          if(__isset.success)
          {
            tmp3193.Success = this.Success;
          }
          tmp3193.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3193.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3193.__isset.e = this.__isset.e;
          return tmp3193;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3194 = new TStruct("outputAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3194, cancellationToken);
            var tmp3195 = new TField();

            if(this.__isset.success)
            {
              tmp3195.Name = "Success";
              tmp3195.Type = TType.Bool;
              tmp3195.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3195, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3195.Name = "E";
                tmp3195.Type = TType.Struct;
                tmp3195.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3195, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is outputAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3196 = new StringBuilder("outputAddressValue_result(");
          int tmp3197 = 0;
          if(__isset.success)
          {
            if(0 < tmp3197++) { tmp3196.Append(", "); }
            tmp3196.Append("Success: ");
            Success.ToString(tmp3196);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3197++) { tmp3196.Append(", "); }
            tmp3196.Append("E: ");
            E.ToString(tmp3196);
          }
          tmp3196.Append(')');
          return tmp3196.ToString();
        }
      }


      public partial class ioAddressValue_args : TBase
      {
        private long _c;
        private int _address;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
        }

        public ioAddressValue_args()
        {
        }

        public ioAddressValue_args DeepCopy()
        {
          var tmp3198 = new ioAddressValue_args();
          if(__isset.c)
          {
            tmp3198.C = this.C;
          }
          tmp3198.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3198.Address = this.Address;
          }
          tmp3198.__isset.address = this.__isset.address;
          return tmp3198;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3199 = new TStruct("ioAddressValue_args");
            await oprot.WriteStructBeginAsync(tmp3199, cancellationToken);
            var tmp3200 = new TField();
            if(__isset.c)
            {
              tmp3200.Name = "c";
              tmp3200.Type = TType.I64;
              tmp3200.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3200, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3200.Name = "address";
              tmp3200.Type = TType.I32;
              tmp3200.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3200, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3201 = new StringBuilder("ioAddressValue_args(");
          int tmp3202 = 0;
          if(__isset.c)
          {
            if(0 < tmp3202++) { tmp3201.Append(", "); }
            tmp3201.Append("C: ");
            C.ToString(tmp3201);
          }
          if(__isset.address)
          {
            if(0 < tmp3202++) { tmp3201.Append(", "); }
            tmp3201.Append("Address: ");
            Address.ToString(tmp3201);
          }
          tmp3201.Append(')');
          return tmp3201.ToString();
        }
      }


      public partial class ioAddressValue_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public ioAddressValue_result()
        {
        }

        public ioAddressValue_result DeepCopy()
        {
          var tmp3203 = new ioAddressValue_result();
          if(__isset.success)
          {
            tmp3203.Success = this.Success;
          }
          tmp3203.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3203.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3203.__isset.e = this.__isset.e;
          return tmp3203;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3204 = new TStruct("ioAddressValue_result");
            await oprot.WriteStructBeginAsync(tmp3204, cancellationToken);
            var tmp3205 = new TField();

            if(this.__isset.success)
            {
              tmp3205.Name = "Success";
              tmp3205.Type = TType.Bool;
              tmp3205.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3205, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3205.Name = "E";
                tmp3205.Type = TType.Struct;
                tmp3205.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3205, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ioAddressValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3206 = new StringBuilder("ioAddressValue_result(");
          int tmp3207 = 0;
          if(__isset.success)
          {
            if(0 < tmp3207++) { tmp3206.Append(", "); }
            tmp3206.Append("Success: ");
            Success.ToString(tmp3206);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3207++) { tmp3206.Append(", "); }
            tmp3206.Append("E: ");
            E.ToString(tmp3206);
          }
          tmp3206.Append(')');
          return tmp3206.ToString();
        }
      }


      public partial class setOutputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setOutputAddress_args()
        {
        }

        public setOutputAddress_args DeepCopy()
        {
          var tmp3208 = new setOutputAddress_args();
          if(__isset.c)
          {
            tmp3208.C = this.C;
          }
          tmp3208.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3208.Address = this.Address;
          }
          tmp3208.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3208.Value = this.Value;
          }
          tmp3208.__isset.@value = this.__isset.@value;
          return tmp3208;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3209 = new TStruct("setOutputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3209, cancellationToken);
            var tmp3210 = new TField();
            if(__isset.c)
            {
              tmp3210.Name = "c";
              tmp3210.Type = TType.I64;
              tmp3210.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3210, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3210.Name = "address";
              tmp3210.Type = TType.I32;
              tmp3210.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3210, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3210.Name = "value";
              tmp3210.Type = TType.Bool;
              tmp3210.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3210, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setOutputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3211 = new StringBuilder("setOutputAddress_args(");
          int tmp3212 = 0;
          if(__isset.c)
          {
            if(0 < tmp3212++) { tmp3211.Append(", "); }
            tmp3211.Append("C: ");
            C.ToString(tmp3211);
          }
          if(__isset.address)
          {
            if(0 < tmp3212++) { tmp3211.Append(", "); }
            tmp3211.Append("Address: ");
            Address.ToString(tmp3211);
          }
          if(__isset.@value)
          {
            if(0 < tmp3212++) { tmp3211.Append(", "); }
            tmp3211.Append("Value: ");
            Value.ToString(tmp3211);
          }
          tmp3211.Append(')');
          return tmp3211.ToString();
        }
      }


      public partial class setNetworkInputAddress_args : TBase
      {
        private long _c;
        private int _address;
        private bool _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Address
        {
          get
          {
            return _address;
          }
          set
          {
            __isset.address = true;
            this._address = value;
          }
        }

        public bool Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool address;
          public bool @value;
        }

        public setNetworkInputAddress_args()
        {
        }

        public setNetworkInputAddress_args DeepCopy()
        {
          var tmp3213 = new setNetworkInputAddress_args();
          if(__isset.c)
          {
            tmp3213.C = this.C;
          }
          tmp3213.__isset.c = this.__isset.c;
          if(__isset.address)
          {
            tmp3213.Address = this.Address;
          }
          tmp3213.__isset.address = this.__isset.address;
          if(__isset.@value)
          {
            tmp3213.Value = this.Value;
          }
          tmp3213.__isset.@value = this.__isset.@value;
          return tmp3213;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Address = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Value = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3214 = new TStruct("setNetworkInputAddress_args");
            await oprot.WriteStructBeginAsync(tmp3214, cancellationToken);
            var tmp3215 = new TField();
            if(__isset.c)
            {
              tmp3215.Name = "c";
              tmp3215.Type = TType.I64;
              tmp3215.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3215, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.address)
            {
              tmp3215.Name = "address";
              tmp3215.Type = TType.I32;
              tmp3215.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3215, cancellationToken);
              await oprot.WriteI32Async(Address, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3215.Name = "value";
              tmp3215.Type = TType.Bool;
              tmp3215.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3215, cancellationToken);
              await oprot.WriteBoolAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNetworkInputAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.address)
            {
              hashcode = (hashcode * 397) + Address.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3216 = new StringBuilder("setNetworkInputAddress_args(");
          int tmp3217 = 0;
          if(__isset.c)
          {
            if(0 < tmp3217++) { tmp3216.Append(", "); }
            tmp3216.Append("C: ");
            C.ToString(tmp3216);
          }
          if(__isset.address)
          {
            if(0 < tmp3217++) { tmp3216.Append(", "); }
            tmp3216.Append("Address: ");
            Address.ToString(tmp3216);
          }
          if(__isset.@value)
          {
            if(0 < tmp3217++) { tmp3216.Append(", "); }
            tmp3216.Append("Value: ");
            Value.ToString(tmp3216);
          }
          tmp3216.Append(')');
          return tmp3216.ToString();
        }
      }


      public partial class mRegisterValue_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public mRegisterValue_args()
        {
        }

        public mRegisterValue_args DeepCopy()
        {
          var tmp3218 = new mRegisterValue_args();
          if(__isset.c)
          {
            tmp3218.C = this.C;
          }
          tmp3218.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3218.Index = this.Index;
          }
          tmp3218.__isset.index = this.__isset.index;
          return tmp3218;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3219 = new TStruct("mRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3219, cancellationToken);
            var tmp3220 = new TField();
            if(__isset.c)
            {
              tmp3220.Name = "c";
              tmp3220.Type = TType.I64;
              tmp3220.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3220, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3220.Name = "index";
              tmp3220.Type = TType.I32;
              tmp3220.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3220, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3221 = new StringBuilder("mRegisterValue_args(");
          int tmp3222 = 0;
          if(__isset.c)
          {
            if(0 < tmp3222++) { tmp3221.Append(", "); }
            tmp3221.Append("C: ");
            C.ToString(tmp3221);
          }
          if(__isset.index)
          {
            if(0 < tmp3222++) { tmp3221.Append(", "); }
            tmp3221.Append("Index: ");
            Index.ToString(tmp3221);
          }
          tmp3221.Append(')');
          return tmp3221.ToString();
        }
      }


      public partial class mRegisterValue_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public mRegisterValue_result()
        {
        }

        public mRegisterValue_result DeepCopy()
        {
          var tmp3223 = new mRegisterValue_result();
          if(__isset.success)
          {
            tmp3223.Success = this.Success;
          }
          tmp3223.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3223.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3223.__isset.e = this.__isset.e;
          return tmp3223;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3224 = new TStruct("mRegisterValue_result");
            await oprot.WriteStructBeginAsync(tmp3224, cancellationToken);
            var tmp3225 = new TField();

            if(this.__isset.success)
            {
              tmp3225.Name = "Success";
              tmp3225.Type = TType.I32;
              tmp3225.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3225, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3225.Name = "E";
                tmp3225.Type = TType.Struct;
                tmp3225.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3225, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mRegisterValue_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3226 = new StringBuilder("mRegisterValue_result(");
          int tmp3227 = 0;
          if(__isset.success)
          {
            if(0 < tmp3227++) { tmp3226.Append(", "); }
            tmp3226.Append("Success: ");
            Success.ToString(tmp3226);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3227++) { tmp3226.Append(", "); }
            tmp3226.Append("E: ");
            E.ToString(tmp3226);
          }
          tmp3226.Append(')');
          return tmp3226.ToString();
        }
      }


      public partial class setMRegisterValue_args : TBase
      {
        private long _c;
        private int _index;
        private int _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public int Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool @value;
        }

        public setMRegisterValue_args()
        {
        }

        public setMRegisterValue_args DeepCopy()
        {
          var tmp3228 = new setMRegisterValue_args();
          if(__isset.c)
          {
            tmp3228.C = this.C;
          }
          tmp3228.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3228.Index = this.Index;
          }
          tmp3228.__isset.index = this.__isset.index;
          if(__isset.@value)
          {
            tmp3228.Value = this.Value;
          }
          tmp3228.__isset.@value = this.__isset.@value;
          return tmp3228;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Value = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3229 = new TStruct("setMRegisterValue_args");
            await oprot.WriteStructBeginAsync(tmp3229, cancellationToken);
            var tmp3230 = new TField();
            if(__isset.c)
            {
              tmp3230.Name = "c";
              tmp3230.Type = TType.I64;
              tmp3230.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3230, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3230.Name = "index";
              tmp3230.Type = TType.I32;
              tmp3230.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3230, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@value)
            {
              tmp3230.Name = "value";
              tmp3230.Type = TType.I32;
              tmp3230.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3230, cancellationToken);
              await oprot.WriteI32Async(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setMRegisterValue_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if(__isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3231 = new StringBuilder("setMRegisterValue_args(");
          int tmp3232 = 0;
          if(__isset.c)
          {
            if(0 < tmp3232++) { tmp3231.Append(", "); }
            tmp3231.Append("C: ");
            C.ToString(tmp3231);
          }
          if(__isset.index)
          {
            if(0 < tmp3232++) { tmp3231.Append(", "); }
            tmp3231.Append("Index: ");
            Index.ToString(tmp3231);
          }
          if(__isset.@value)
          {
            if(0 < tmp3232++) { tmp3231.Append(", "); }
            tmp3231.Append("Value: ");
            Value.ToString(tmp3231);
          }
          tmp3231.Append(')');
          return tmp3231.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_args : TBase
      {
        private long _c;
        private string _busType;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string BusType
        {
          get
          {
            return _busType;
          }
          set
          {
            __isset.busType = true;
            this._busType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool busType;
        }

        public fieldBusStatusInputGroup_args()
        {
        }

        public fieldBusStatusInputGroup_args DeepCopy()
        {
          var tmp3233 = new fieldBusStatusInputGroup_args();
          if(__isset.c)
          {
            tmp3233.C = this.C;
          }
          tmp3233.__isset.c = this.__isset.c;
          if((BusType != null) && __isset.busType)
          {
            tmp3233.BusType = this.BusType;
          }
          tmp3233.__isset.busType = this.__isset.busType;
          return tmp3233;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    BusType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3234 = new TStruct("fieldBusStatusInputGroup_args");
            await oprot.WriteStructBeginAsync(tmp3234, cancellationToken);
            var tmp3235 = new TField();
            if(__isset.c)
            {
              tmp3235.Name = "c";
              tmp3235.Type = TType.I64;
              tmp3235.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3235, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((BusType != null) && __isset.busType)
            {
              tmp3235.Name = "busType";
              tmp3235.Type = TType.String;
              tmp3235.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3235, cancellationToken);
              await oprot.WriteStringAsync(BusType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.busType == other.__isset.busType) && ((!__isset.busType) || (global::System.Object.Equals(BusType, other.BusType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((BusType != null) && __isset.busType)
            {
              hashcode = (hashcode * 397) + BusType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3236 = new StringBuilder("fieldBusStatusInputGroup_args(");
          int tmp3237 = 0;
          if(__isset.c)
          {
            if(0 < tmp3237++) { tmp3236.Append(", "); }
            tmp3236.Append("C: ");
            C.ToString(tmp3236);
          }
          if((BusType != null) && __isset.busType)
          {
            if(0 < tmp3237++) { tmp3236.Append(", "); }
            tmp3236.Append("BusType: ");
            BusType.ToString(tmp3236);
          }
          tmp3236.Append(')');
          return tmp3236.ToString();
        }
      }


      public partial class fieldBusStatusInputGroup_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public fieldBusStatusInputGroup_result()
        {
        }

        public fieldBusStatusInputGroup_result DeepCopy()
        {
          var tmp3238 = new fieldBusStatusInputGroup_result();
          if(__isset.success)
          {
            tmp3238.Success = this.Success;
          }
          tmp3238.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3238.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3238.__isset.e = this.__isset.e;
          return tmp3238;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3239 = new TStruct("fieldBusStatusInputGroup_result");
            await oprot.WriteStructBeginAsync(tmp3239, cancellationToken);
            var tmp3240 = new TField();

            if(this.__isset.success)
            {
              tmp3240.Name = "Success";
              tmp3240.Type = TType.I32;
              tmp3240.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3240, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3240.Name = "E";
                tmp3240.Type = TType.Struct;
                tmp3240.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3240, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fieldBusStatusInputGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3241 = new StringBuilder("fieldBusStatusInputGroup_result(");
          int tmp3242 = 0;
          if(__isset.success)
          {
            if(0 < tmp3242++) { tmp3241.Append(", "); }
            tmp3241.Append("Success: ");
            Success.ToString(tmp3241);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3242++) { tmp3241.Append(", "); }
            tmp3241.Append("E: ");
            E.ToString(tmp3241);
          }
          tmp3241.Append(')');
          return tmp3241.ToString();
        }
      }


      public partial class controlGroups_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public controlGroups_args()
        {
        }

        public controlGroups_args DeepCopy()
        {
          var tmp3243 = new controlGroups_args();
          if(__isset.c)
          {
            tmp3243.C = this.C;
          }
          tmp3243.__isset.c = this.__isset.c;
          return tmp3243;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3244 = new TStruct("controlGroups_args");
            await oprot.WriteStructBeginAsync(tmp3244, cancellationToken);
            var tmp3245 = new TField();
            if(__isset.c)
            {
              tmp3245.Name = "c";
              tmp3245.Type = TType.I64;
              tmp3245.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3245, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3246 = new StringBuilder("controlGroups_args(");
          int tmp3247 = 0;
          if(__isset.c)
          {
            if(0 < tmp3247++) { tmp3246.Append(", "); }
            tmp3246.Append("C: ");
            C.ToString(tmp3246);
          }
          tmp3246.Append(')');
          return tmp3246.ToString();
        }
      }


      public partial class controlGroups_result : TBase
      {
        private List<global::Yaskawa.Ext.API.ControlGroup> _success;

        public List<global::Yaskawa.Ext.API.ControlGroup> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public controlGroups_result()
        {
        }

        public controlGroups_result DeepCopy()
        {
          var tmp3248 = new controlGroups_result();
          if((Success != null) && __isset.success)
          {
            tmp3248.Success = this.Success.DeepCopy();
          }
          tmp3248.__isset.success = this.__isset.success;
          return tmp3248;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3249 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.ControlGroup>(_list3249.Count);
                      for(int _i3250 = 0; _i3250 < _list3249.Count; ++_i3250)
                      {
                        global::Yaskawa.Ext.API.ControlGroup _elem3251;
                        _elem3251 = new global::Yaskawa.Ext.API.ControlGroup();
                        await _elem3251.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem3251);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3252 = new TStruct("controlGroups_result");
            await oprot.WriteStructBeginAsync(tmp3252, cancellationToken);
            var tmp3253 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3253.Name = "Success";
                tmp3253.Type = TType.List;
                tmp3253.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3253, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.ControlGroup _iter3254 in Success)
                {
                  await _iter3254.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controlGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3255 = new StringBuilder("controlGroups_result(");
          int tmp3256 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3256++) { tmp3255.Append(", "); }
            tmp3255.Append("Success: ");
            Success.ToString(tmp3255);
          }
          tmp3255.Append(')');
          return tmp3255.ToString();
        }
      }


      public partial class currentControlGroup_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentControlGroup_args()
        {
        }

        public currentControlGroup_args DeepCopy()
        {
          var tmp3257 = new currentControlGroup_args();
          if(__isset.c)
          {
            tmp3257.C = this.C;
          }
          tmp3257.__isset.c = this.__isset.c;
          return tmp3257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3258 = new TStruct("currentControlGroup_args");
            await oprot.WriteStructBeginAsync(tmp3258, cancellationToken);
            var tmp3259 = new TField();
            if(__isset.c)
            {
              tmp3259.Name = "c";
              tmp3259.Type = TType.I64;
              tmp3259.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3259, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3260 = new StringBuilder("currentControlGroup_args(");
          int tmp3261 = 0;
          if(__isset.c)
          {
            if(0 < tmp3261++) { tmp3260.Append(", "); }
            tmp3260.Append("C: ");
            C.ToString(tmp3260);
          }
          tmp3260.Append(')');
          return tmp3260.ToString();
        }
      }


      public partial class currentControlGroup_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentControlGroup_result()
        {
        }

        public currentControlGroup_result DeepCopy()
        {
          var tmp3262 = new currentControlGroup_result();
          if(__isset.success)
          {
            tmp3262.Success = this.Success;
          }
          tmp3262.__isset.success = this.__isset.success;
          return tmp3262;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3263 = new TStruct("currentControlGroup_result");
            await oprot.WriteStructBeginAsync(tmp3263, cancellationToken);
            var tmp3264 = new TField();

            if(this.__isset.success)
            {
              tmp3264.Name = "Success";
              tmp3264.Type = TType.Byte;
              tmp3264.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3264, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentControlGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3265 = new StringBuilder("currentControlGroup_result(");
          int tmp3266 = 0;
          if(__isset.success)
          {
            if(0 < tmp3266++) { tmp3265.Append(", "); }
            tmp3265.Append("Success: ");
            Success.ToString(tmp3265);
          }
          tmp3265.Append(')');
          return tmp3265.ToString();
        }
      }


      public partial class robotCount_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public robotCount_args()
        {
        }

        public robotCount_args DeepCopy()
        {
          var tmp3267 = new robotCount_args();
          if(__isset.c)
          {
            tmp3267.C = this.C;
          }
          tmp3267.__isset.c = this.__isset.c;
          return tmp3267;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3268 = new TStruct("robotCount_args");
            await oprot.WriteStructBeginAsync(tmp3268, cancellationToken);
            var tmp3269 = new TField();
            if(__isset.c)
            {
              tmp3269.Name = "c";
              tmp3269.Type = TType.I64;
              tmp3269.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3269, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3270 = new StringBuilder("robotCount_args(");
          int tmp3271 = 0;
          if(__isset.c)
          {
            if(0 < tmp3271++) { tmp3270.Append(", "); }
            tmp3270.Append("C: ");
            C.ToString(tmp3270);
          }
          tmp3270.Append(')');
          return tmp3270.ToString();
        }
      }


      public partial class robotCount_result : TBase
      {
        private sbyte _success;

        public sbyte Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public robotCount_result()
        {
        }

        public robotCount_result DeepCopy()
        {
          var tmp3272 = new robotCount_result();
          if(__isset.success)
          {
            tmp3272.Success = this.Success;
          }
          tmp3272.__isset.success = this.__isset.success;
          return tmp3272;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Byte)
                  {
                    Success = await iprot.ReadByteAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3273 = new TStruct("robotCount_result");
            await oprot.WriteStructBeginAsync(tmp3273, cancellationToken);
            var tmp3274 = new TField();

            if(this.__isset.success)
            {
              tmp3274.Name = "Success";
              tmp3274.Type = TType.Byte;
              tmp3274.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3274, cancellationToken);
              await oprot.WriteByteAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is robotCount_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3275 = new StringBuilder("robotCount_result(");
          int tmp3276 = 0;
          if(__isset.success)
          {
            if(0 < tmp3276++) { tmp3275.Append(", "); }
            tmp3275.Append("Success: ");
            Success.ToString(tmp3275);
          }
          tmp3275.Append(')');
          return tmp3275.ToString();
        }
      }


      public partial class currentRobot_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public currentRobot_args()
        {
        }

        public currentRobot_args DeepCopy()
        {
          var tmp3277 = new currentRobot_args();
          if(__isset.c)
          {
            tmp3277.C = this.C;
          }
          tmp3277.__isset.c = this.__isset.c;
          return tmp3277;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3278 = new TStruct("currentRobot_args");
            await oprot.WriteStructBeginAsync(tmp3278, cancellationToken);
            var tmp3279 = new TField();
            if(__isset.c)
            {
              tmp3279.Name = "c";
              tmp3279.Type = TType.I64;
              tmp3279.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3279, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3280 = new StringBuilder("currentRobot_args(");
          int tmp3281 = 0;
          if(__isset.c)
          {
            if(0 < tmp3281++) { tmp3280.Append(", "); }
            tmp3280.Append("C: ");
            C.ToString(tmp3280);
          }
          tmp3280.Append(')');
          return tmp3280.ToString();
        }
      }


      public partial class currentRobot_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentRobot_result()
        {
        }

        public currentRobot_result DeepCopy()
        {
          var tmp3282 = new currentRobot_result();
          if(__isset.success)
          {
            tmp3282.Success = this.Success;
          }
          tmp3282.__isset.success = this.__isset.success;
          return tmp3282;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3283 = new TStruct("currentRobot_result");
            await oprot.WriteStructBeginAsync(tmp3283, cancellationToken);
            var tmp3284 = new TField();

            if(this.__isset.success)
            {
              tmp3284.Name = "Success";
              tmp3284.Type = TType.I32;
              tmp3284.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3284, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentRobot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3285 = new StringBuilder("currentRobot_result(");
          int tmp3286 = 0;
          if(__isset.success)
          {
            if(0 < tmp3286++) { tmp3285.Append(", "); }
            tmp3285.Append("Success: ");
            Success.ToString(tmp3285);
          }
          tmp3285.Append(')');
          return tmp3285.ToString();
        }
      }


      public partial class variable_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variable_args()
        {
        }

        public variable_args DeepCopy()
        {
          var tmp3287 = new variable_args();
          if(__isset.c)
          {
            tmp3287.C = this.C;
          }
          tmp3287.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3287.Name = this.Name;
          }
          tmp3287.__isset.name = this.__isset.name;
          return tmp3287;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3288 = new TStruct("variable_args");
            await oprot.WriteStructBeginAsync(tmp3288, cancellationToken);
            var tmp3289 = new TField();
            if(__isset.c)
            {
              tmp3289.Name = "c";
              tmp3289.Type = TType.I64;
              tmp3289.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3289, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3289.Name = "name";
              tmp3289.Type = TType.String;
              tmp3289.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3289, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3290 = new StringBuilder("variable_args(");
          int tmp3291 = 0;
          if(__isset.c)
          {
            if(0 < tmp3291++) { tmp3290.Append(", "); }
            tmp3290.Append("C: ");
            C.ToString(tmp3290);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3291++) { tmp3290.Append(", "); }
            tmp3290.Append("Name: ");
            Name.ToString(tmp3290);
          }
          tmp3290.Append(')');
          return tmp3290.ToString();
        }
      }


      public partial class variable_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variable_result()
        {
        }

        public variable_result DeepCopy()
        {
          var tmp3292 = new variable_result();
          if((Success != null) && __isset.success)
          {
            tmp3292.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3292.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3292.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3292.__isset.e = this.__isset.e;
          return tmp3292;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3293 = new TStruct("variable_result");
            await oprot.WriteStructBeginAsync(tmp3293, cancellationToken);
            var tmp3294 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3294.Name = "Success";
                tmp3294.Type = TType.Struct;
                tmp3294.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3294, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3294.Name = "E";
                tmp3294.Type = TType.Struct;
                tmp3294.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3294, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3295 = new StringBuilder("variable_result(");
          int tmp3296 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3296++) { tmp3295.Append(", "); }
            tmp3295.Append("Success: ");
            Success.ToString(tmp3295);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3296++) { tmp3295.Append(", "); }
            tmp3295.Append("E: ");
            E.ToString(tmp3295);
          }
          tmp3295.Append(')');
          return tmp3295.ToString();
        }
      }


      public partial class variableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public variableByAddr_args()
        {
        }

        public variableByAddr_args DeepCopy()
        {
          var tmp3297 = new variableByAddr_args();
          if(__isset.c)
          {
            tmp3297.C = this.C;
          }
          tmp3297.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3297.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3297.__isset.addr = this.__isset.addr;
          return tmp3297;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3298 = new TStruct("variableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3298, cancellationToken);
            var tmp3299 = new TField();
            if(__isset.c)
            {
              tmp3299.Name = "c";
              tmp3299.Type = TType.I64;
              tmp3299.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3299, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3299.Name = "addr";
              tmp3299.Type = TType.Struct;
              tmp3299.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3299, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3300 = new StringBuilder("variableByAddr_args(");
          int tmp3301 = 0;
          if(__isset.c)
          {
            if(0 < tmp3301++) { tmp3300.Append(", "); }
            tmp3300.Append("C: ");
            C.ToString(tmp3300);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3301++) { tmp3300.Append(", "); }
            tmp3300.Append("Addr: ");
            Addr.ToString(tmp3300);
          }
          tmp3300.Append(')');
          return tmp3300.ToString();
        }
      }


      public partial class variableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableByAddr_result()
        {
        }

        public variableByAddr_result DeepCopy()
        {
          var tmp3302 = new variableByAddr_result();
          if((Success != null) && __isset.success)
          {
            tmp3302.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp3302.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3302.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3302.__isset.e = this.__isset.e;
          return tmp3302;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3303 = new TStruct("variableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3303, cancellationToken);
            var tmp3304 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3304.Name = "Success";
                tmp3304.Type = TType.Struct;
                tmp3304.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3304, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3304.Name = "E";
                tmp3304.Type = TType.Struct;
                tmp3304.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3304, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3305 = new StringBuilder("variableByAddr_result(");
          int tmp3306 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3306++) { tmp3305.Append(", "); }
            tmp3305.Append("Success: ");
            Success.ToString(tmp3305);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3306++) { tmp3305.Append(", "); }
            tmp3305.Append("E: ");
            E.ToString(tmp3305);
          }
          tmp3305.Append(')');
          return tmp3305.ToString();
        }
      }


      public partial class setVariable_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool @value;
        }

        public setVariable_args()
        {
        }

        public setVariable_args DeepCopy()
        {
          var tmp3307 = new setVariable_args();
          if(__isset.c)
          {
            tmp3307.C = this.C;
          }
          tmp3307.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3307.Name = this.Name;
          }
          tmp3307.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp3307.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3307.__isset.@value = this.__isset.@value;
          return tmp3307;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3308 = new TStruct("setVariable_args");
            await oprot.WriteStructBeginAsync(tmp3308, cancellationToken);
            var tmp3309 = new TField();
            if(__isset.c)
            {
              tmp3309.Name = "c";
              tmp3309.Type = TType.I64;
              tmp3309.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3309, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3309.Name = "name";
              tmp3309.Type = TType.String;
              tmp3309.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3309, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3309.Name = "value";
              tmp3309.Type = TType.Struct;
              tmp3309.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3309, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3310 = new StringBuilder("setVariable_args(");
          int tmp3311 = 0;
          if(__isset.c)
          {
            if(0 < tmp3311++) { tmp3310.Append(", "); }
            tmp3310.Append("C: ");
            C.ToString(tmp3310);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3311++) { tmp3310.Append(", "); }
            tmp3310.Append("Name: ");
            Name.ToString(tmp3310);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3311++) { tmp3310.Append(", "); }
            tmp3310.Append("Value: ");
            Value.ToString(tmp3310);
          }
          tmp3310.Append(')');
          return tmp3310.ToString();
        }
      }


      public partial class setVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariable_result()
        {
        }

        public setVariable_result DeepCopy()
        {
          var tmp3312 = new setVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3312.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3312.__isset.e = this.__isset.e;
          return tmp3312;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3313 = new TStruct("setVariable_result");
            await oprot.WriteStructBeginAsync(tmp3313, cancellationToken);
            var tmp3314 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3314.Name = "E";
                tmp3314.Type = TType.Struct;
                tmp3314.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3314, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3315 = new StringBuilder("setVariable_result(");
          int tmp3316 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3316++) { tmp3315.Append(", "); }
            tmp3315.Append("E: ");
            E.ToString(tmp3315);
          }
          tmp3315.Append(')');
          return tmp3315.ToString();
        }
      }


      public partial class setVariableByAddr_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private global::Yaskawa.Ext.API.Any _value;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool @value;
        }

        public setVariableByAddr_args()
        {
        }

        public setVariableByAddr_args DeepCopy()
        {
          var tmp3317 = new setVariableByAddr_args();
          if(__isset.c)
          {
            tmp3317.C = this.C;
          }
          tmp3317.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3317.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3317.__isset.addr = this.__isset.addr;
          if((Value != null) && __isset.@value)
          {
            tmp3317.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp3317.__isset.@value = this.__isset.@value;
          return tmp3317;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3318 = new TStruct("setVariableByAddr_args");
            await oprot.WriteStructBeginAsync(tmp3318, cancellationToken);
            var tmp3319 = new TField();
            if(__isset.c)
            {
              tmp3319.Name = "c";
              tmp3319.Type = TType.I64;
              tmp3319.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3319, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3319.Name = "addr";
              tmp3319.Type = TType.Struct;
              tmp3319.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3319, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp3319.Name = "value";
              tmp3319.Type = TType.Struct;
              tmp3319.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3319, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3320 = new StringBuilder("setVariableByAddr_args(");
          int tmp3321 = 0;
          if(__isset.c)
          {
            if(0 < tmp3321++) { tmp3320.Append(", "); }
            tmp3320.Append("C: ");
            C.ToString(tmp3320);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3321++) { tmp3320.Append(", "); }
            tmp3320.Append("Addr: ");
            Addr.ToString(tmp3320);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp3321++) { tmp3320.Append(", "); }
            tmp3320.Append("Value: ");
            Value.ToString(tmp3320);
          }
          tmp3320.Append(')');
          return tmp3320.ToString();
        }
      }


      public partial class setVariableByAddr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableByAddr_result()
        {
        }

        public setVariableByAddr_result DeepCopy()
        {
          var tmp3322 = new setVariableByAddr_result();
          if((E != null) && __isset.e)
          {
            tmp3322.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3322.__isset.e = this.__isset.e;
          return tmp3322;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3323 = new TStruct("setVariableByAddr_result");
            await oprot.WriteStructBeginAsync(tmp3323, cancellationToken);
            var tmp3324 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3324.Name = "E";
                tmp3324.Type = TType.Struct;
                tmp3324.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3324, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableByAddr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3325 = new StringBuilder("setVariableByAddr_result(");
          int tmp3326 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3326++) { tmp3325.Append(", "); }
            tmp3325.Append("E: ");
            E.ToString(tmp3325);
          }
          tmp3325.Append(')');
          return tmp3325.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_args : TBase
      {
        private long _c;
        private string _name;
        private global::Yaskawa.Ext.API.AddressSpace _space;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.AddressSpace"/>
        /// </summary>
        public global::Yaskawa.Ext.API.AddressSpace Space
        {
          get
          {
            return _space;
          }
          set
          {
            __isset.space = true;
            this._space = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
          public bool space;
        }

        public variableAddrByNameAndSpace_args()
        {
        }

        public variableAddrByNameAndSpace_args DeepCopy()
        {
          var tmp3327 = new variableAddrByNameAndSpace_args();
          if(__isset.c)
          {
            tmp3327.C = this.C;
          }
          tmp3327.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3327.Name = this.Name;
          }
          tmp3327.__isset.name = this.__isset.name;
          if(__isset.space)
          {
            tmp3327.Space = this.Space;
          }
          tmp3327.__isset.space = this.__isset.space;
          return tmp3327;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Space = (global::Yaskawa.Ext.API.AddressSpace)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3328 = new TStruct("variableAddrByNameAndSpace_args");
            await oprot.WriteStructBeginAsync(tmp3328, cancellationToken);
            var tmp3329 = new TField();
            if(__isset.c)
            {
              tmp3329.Name = "c";
              tmp3329.Type = TType.I64;
              tmp3329.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3329, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3329.Name = "name";
              tmp3329.Type = TType.String;
              tmp3329.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3329, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.space)
            {
              tmp3329.Name = "space";
              tmp3329.Type = TType.I32;
              tmp3329.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3329, cancellationToken);
              await oprot.WriteI32Async((int)Space, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.space == other.__isset.space) && ((!__isset.space) || (global::System.Object.Equals(Space, other.Space))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.space)
            {
              hashcode = (hashcode * 397) + Space.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3330 = new StringBuilder("variableAddrByNameAndSpace_args(");
          int tmp3331 = 0;
          if(__isset.c)
          {
            if(0 < tmp3331++) { tmp3330.Append(", "); }
            tmp3330.Append("C: ");
            C.ToString(tmp3330);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3331++) { tmp3330.Append(", "); }
            tmp3330.Append("Name: ");
            Name.ToString(tmp3330);
          }
          if(__isset.space)
          {
            if(0 < tmp3331++) { tmp3330.Append(", "); }
            tmp3330.Append("Space: ");
            Space.ToString(tmp3330);
          }
          tmp3330.Append(')');
          return tmp3330.ToString();
        }
      }


      public partial class variableAddrByNameAndSpace_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByNameAndSpace_result()
        {
        }

        public variableAddrByNameAndSpace_result DeepCopy()
        {
          var tmp3332 = new variableAddrByNameAndSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp3332.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3332.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3332.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3332.__isset.e = this.__isset.e;
          return tmp3332;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3333 = new TStruct("variableAddrByNameAndSpace_result");
            await oprot.WriteStructBeginAsync(tmp3333, cancellationToken);
            var tmp3334 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3334.Name = "Success";
                tmp3334.Type = TType.Struct;
                tmp3334.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3334, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3334.Name = "E";
                tmp3334.Type = TType.Struct;
                tmp3334.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3334, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByNameAndSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3335 = new StringBuilder("variableAddrByNameAndSpace_result(");
          int tmp3336 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3336++) { tmp3335.Append(", "); }
            tmp3335.Append("Success: ");
            Success.ToString(tmp3335);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3336++) { tmp3335.Append(", "); }
            tmp3335.Append("E: ");
            E.ToString(tmp3335);
          }
          tmp3335.Append(')');
          return tmp3335.ToString();
        }
      }


      public partial class variableAddrByName_args : TBase
      {
        private long _c;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool name;
        }

        public variableAddrByName_args()
        {
        }

        public variableAddrByName_args DeepCopy()
        {
          var tmp3337 = new variableAddrByName_args();
          if(__isset.c)
          {
            tmp3337.C = this.C;
          }
          tmp3337.__isset.c = this.__isset.c;
          if((Name != null) && __isset.name)
          {
            tmp3337.Name = this.Name;
          }
          tmp3337.__isset.name = this.__isset.name;
          return tmp3337;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3338 = new TStruct("variableAddrByName_args");
            await oprot.WriteStructBeginAsync(tmp3338, cancellationToken);
            var tmp3339 = new TField();
            if(__isset.c)
            {
              tmp3339.Name = "c";
              tmp3339.Type = TType.I64;
              tmp3339.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3339, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3339.Name = "name";
              tmp3339.Type = TType.String;
              tmp3339.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3339, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3340 = new StringBuilder("variableAddrByName_args(");
          int tmp3341 = 0;
          if(__isset.c)
          {
            if(0 < tmp3341++) { tmp3340.Append(", "); }
            tmp3340.Append("C: ");
            C.ToString(tmp3340);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3341++) { tmp3340.Append(", "); }
            tmp3340.Append("Name: ");
            Name.ToString(tmp3340);
          }
          tmp3340.Append(')');
          return tmp3340.ToString();
        }
      }


      public partial class variableAddrByName_result : TBase
      {
        private global::Yaskawa.Ext.API.VariableAddress _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.VariableAddress Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public variableAddrByName_result()
        {
        }

        public variableAddrByName_result DeepCopy()
        {
          var tmp3342 = new variableAddrByName_result();
          if((Success != null) && __isset.success)
          {
            tmp3342.Success = (global::Yaskawa.Ext.API.VariableAddress)this.Success.DeepCopy();
          }
          tmp3342.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3342.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3342.__isset.e = this.__isset.e;
          return tmp3342;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.VariableAddress();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3343 = new TStruct("variableAddrByName_result");
            await oprot.WriteStructBeginAsync(tmp3343, cancellationToken);
            var tmp3344 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3344.Name = "Success";
                tmp3344.Type = TType.Struct;
                tmp3344.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3344, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3344.Name = "E";
                tmp3344.Type = TType.Struct;
                tmp3344.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3344, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is variableAddrByName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3345 = new StringBuilder("variableAddrByName_result(");
          int tmp3346 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3346++) { tmp3345.Append(", "); }
            tmp3345.Append("Success: ");
            Success.ToString(tmp3345);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3346++) { tmp3345.Append(", "); }
            tmp3345.Append("E: ");
            E.ToString(tmp3345);
          }
          tmp3345.Append(')');
          return tmp3345.ToString();
        }
      }


      public partial class setVariableName_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;
        private string _name;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
          public bool name;
        }

        public setVariableName_args()
        {
        }

        public setVariableName_args DeepCopy()
        {
          var tmp3347 = new setVariableName_args();
          if(__isset.c)
          {
            tmp3347.C = this.C;
          }
          tmp3347.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3347.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3347.__isset.addr = this.__isset.addr;
          if((Name != null) && __isset.name)
          {
            tmp3347.Name = this.Name;
          }
          tmp3347.__isset.name = this.__isset.name;
          return tmp3347;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3348 = new TStruct("setVariableName_args");
            await oprot.WriteStructBeginAsync(tmp3348, cancellationToken);
            var tmp3349 = new TField();
            if(__isset.c)
            {
              tmp3349.Name = "c";
              tmp3349.Type = TType.I64;
              tmp3349.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3349, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3349.Name = "addr";
              tmp3349.Type = TType.Struct;
              tmp3349.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3349, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp3349.Name = "name";
              tmp3349.Type = TType.String;
              tmp3349.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3349, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3350 = new StringBuilder("setVariableName_args(");
          int tmp3351 = 0;
          if(__isset.c)
          {
            if(0 < tmp3351++) { tmp3350.Append(", "); }
            tmp3350.Append("C: ");
            C.ToString(tmp3350);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3351++) { tmp3350.Append(", "); }
            tmp3350.Append("Addr: ");
            Addr.ToString(tmp3350);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp3351++) { tmp3350.Append(", "); }
            tmp3350.Append("Name: ");
            Name.ToString(tmp3350);
          }
          tmp3350.Append(')');
          return tmp3350.ToString();
        }
      }


      public partial class setVariableName_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setVariableName_result()
        {
        }

        public setVariableName_result DeepCopy()
        {
          var tmp3352 = new setVariableName_result();
          if((E != null) && __isset.e)
          {
            tmp3352.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3352.__isset.e = this.__isset.e;
          return tmp3352;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3353 = new TStruct("setVariableName_result");
            await oprot.WriteStructBeginAsync(tmp3353, cancellationToken);
            var tmp3354 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3354.Name = "E";
                tmp3354.Type = TType.Struct;
                tmp3354.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3354, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setVariableName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3355 = new StringBuilder("setVariableName_result(");
          int tmp3356 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3356++) { tmp3355.Append(", "); }
            tmp3355.Append("E: ");
            E.ToString(tmp3355);
          }
          tmp3355.Append(')');
          return tmp3355.ToString();
        }
      }


      public partial class monitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public monitorVariable_args()
        {
        }

        public monitorVariable_args DeepCopy()
        {
          var tmp3357 = new monitorVariable_args();
          if(__isset.c)
          {
            tmp3357.C = this.C;
          }
          tmp3357.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3357.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3357.__isset.addr = this.__isset.addr;
          return tmp3357;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3358 = new TStruct("monitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3358, cancellationToken);
            var tmp3359 = new TField();
            if(__isset.c)
            {
              tmp3359.Name = "c";
              tmp3359.Type = TType.I64;
              tmp3359.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3359, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3359.Name = "addr";
              tmp3359.Type = TType.Struct;
              tmp3359.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3359, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3360 = new StringBuilder("monitorVariable_args(");
          int tmp3361 = 0;
          if(__isset.c)
          {
            if(0 < tmp3361++) { tmp3360.Append(", "); }
            tmp3360.Append("C: ");
            C.ToString(tmp3360);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3361++) { tmp3360.Append(", "); }
            tmp3360.Append("Addr: ");
            Addr.ToString(tmp3360);
          }
          tmp3360.Append(')');
          return tmp3360.ToString();
        }
      }


      public partial class monitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public monitorVariable_result()
        {
        }

        public monitorVariable_result DeepCopy()
        {
          var tmp3362 = new monitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3362.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3362.__isset.e = this.__isset.e;
          return tmp3362;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3363 = new TStruct("monitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3363, cancellationToken);
            var tmp3364 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3364.Name = "E";
                tmp3364.Type = TType.Struct;
                tmp3364.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3364, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is monitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3365 = new StringBuilder("monitorVariable_result(");
          int tmp3366 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3366++) { tmp3365.Append(", "); }
            tmp3365.Append("E: ");
            E.ToString(tmp3365);
          }
          tmp3365.Append(')');
          return tmp3365.ToString();
        }
      }


      public partial class unmonitorVariable_args : TBase
      {
        private long _c;
        private global::Yaskawa.Ext.API.VariableAddress _addr;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public global::Yaskawa.Ext.API.VariableAddress Addr
        {
          get
          {
            return _addr;
          }
          set
          {
            __isset.addr = true;
            this._addr = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool addr;
        }

        public unmonitorVariable_args()
        {
        }

        public unmonitorVariable_args DeepCopy()
        {
          var tmp3367 = new unmonitorVariable_args();
          if(__isset.c)
          {
            tmp3367.C = this.C;
          }
          tmp3367.__isset.c = this.__isset.c;
          if((Addr != null) && __isset.addr)
          {
            tmp3367.Addr = (global::Yaskawa.Ext.API.VariableAddress)this.Addr.DeepCopy();
          }
          tmp3367.__isset.addr = this.__isset.addr;
          return tmp3367;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Addr = new global::Yaskawa.Ext.API.VariableAddress();
                    await Addr.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3368 = new TStruct("unmonitorVariable_args");
            await oprot.WriteStructBeginAsync(tmp3368, cancellationToken);
            var tmp3369 = new TField();
            if(__isset.c)
            {
              tmp3369.Name = "c";
              tmp3369.Type = TType.I64;
              tmp3369.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3369, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Addr != null) && __isset.addr)
            {
              tmp3369.Name = "addr";
              tmp3369.Type = TType.Struct;
              tmp3369.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3369, cancellationToken);
              await Addr.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.addr == other.__isset.addr) && ((!__isset.addr) || (global::System.Object.Equals(Addr, other.Addr))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((Addr != null) && __isset.addr)
            {
              hashcode = (hashcode * 397) + Addr.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3370 = new StringBuilder("unmonitorVariable_args(");
          int tmp3371 = 0;
          if(__isset.c)
          {
            if(0 < tmp3371++) { tmp3370.Append(", "); }
            tmp3370.Append("C: ");
            C.ToString(tmp3370);
          }
          if((Addr != null) && __isset.addr)
          {
            if(0 < tmp3371++) { tmp3370.Append(", "); }
            tmp3370.Append("Addr: ");
            Addr.ToString(tmp3370);
          }
          tmp3370.Append(')');
          return tmp3370.ToString();
        }
      }


      public partial class unmonitorVariable_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unmonitorVariable_result()
        {
        }

        public unmonitorVariable_result DeepCopy()
        {
          var tmp3372 = new unmonitorVariable_result();
          if((E != null) && __isset.e)
          {
            tmp3372.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3372.__isset.e = this.__isset.e;
          return tmp3372;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3373 = new TStruct("unmonitorVariable_result");
            await oprot.WriteStructBeginAsync(tmp3373, cancellationToken);
            var tmp3374 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3374.Name = "E";
                tmp3374.Type = TType.Struct;
                tmp3374.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3374, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unmonitorVariable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3375 = new StringBuilder("unmonitorVariable_result(");
          int tmp3376 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3376++) { tmp3375.Append(", "); }
            tmp3375.Append("E: ");
            E.ToString(tmp3375);
          }
          tmp3375.Append(')');
          return tmp3375.ToString();
        }
      }


      public partial class zone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public zone_args()
        {
        }

        public zone_args DeepCopy()
        {
          var tmp3377 = new zone_args();
          if(__isset.c)
          {
            tmp3377.C = this.C;
          }
          tmp3377.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3377.Index = this.Index;
          }
          tmp3377.__isset.index = this.__isset.index;
          return tmp3377;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3378 = new TStruct("zone_args");
            await oprot.WriteStructBeginAsync(tmp3378, cancellationToken);
            var tmp3379 = new TField();
            if(__isset.c)
            {
              tmp3379.Name = "c";
              tmp3379.Type = TType.I64;
              tmp3379.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3379, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3379.Name = "index";
              tmp3379.Type = TType.I32;
              tmp3379.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3379, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3380 = new StringBuilder("zone_args(");
          int tmp3381 = 0;
          if(__isset.c)
          {
            if(0 < tmp3381++) { tmp3380.Append(", "); }
            tmp3380.Append("C: ");
            C.ToString(tmp3380);
          }
          if(__isset.index)
          {
            if(0 < tmp3381++) { tmp3380.Append(", "); }
            tmp3380.Append("Index: ");
            Index.ToString(tmp3380);
          }
          tmp3380.Append(')');
          return tmp3380.ToString();
        }
      }


      public partial class zone_result : TBase
      {
        private global::Yaskawa.Ext.API.Zone _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Zone Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public zone_result()
        {
        }

        public zone_result DeepCopy()
        {
          var tmp3382 = new zone_result();
          if((Success != null) && __isset.success)
          {
            tmp3382.Success = (global::Yaskawa.Ext.API.Zone)this.Success.DeepCopy();
          }
          tmp3382.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3382.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3382.__isset.e = this.__isset.e;
          return tmp3382;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Zone();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3383 = new TStruct("zone_result");
            await oprot.WriteStructBeginAsync(tmp3383, cancellationToken);
            var tmp3384 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3384.Name = "Success";
                tmp3384.Type = TType.Struct;
                tmp3384.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3384, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3384.Name = "E";
                tmp3384.Type = TType.Struct;
                tmp3384.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3384, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3385 = new StringBuilder("zone_result(");
          int tmp3386 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3386++) { tmp3385.Append(", "); }
            tmp3385.Append("Success: ");
            Success.ToString(tmp3385);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3386++) { tmp3385.Append(", "); }
            tmp3385.Append("E: ");
            E.ToString(tmp3385);
          }
          tmp3385.Append(')');
          return tmp3385.ToString();
        }
      }


      public partial class newZone_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newZone_args()
        {
        }

        public newZone_args DeepCopy()
        {
          var tmp3387 = new newZone_args();
          if(__isset.c)
          {
            tmp3387.C = this.C;
          }
          tmp3387.__isset.c = this.__isset.c;
          return tmp3387;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3388 = new TStruct("newZone_args");
            await oprot.WriteStructBeginAsync(tmp3388, cancellationToken);
            var tmp3389 = new TField();
            if(__isset.c)
            {
              tmp3389.Name = "c";
              tmp3389.Type = TType.I64;
              tmp3389.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3389, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3390 = new StringBuilder("newZone_args(");
          int tmp3391 = 0;
          if(__isset.c)
          {
            if(0 < tmp3391++) { tmp3390.Append(", "); }
            tmp3390.Append("C: ");
            C.ToString(tmp3390);
          }
          tmp3390.Append(')');
          return tmp3390.ToString();
        }
      }


      public partial class newZone_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newZone_result()
        {
        }

        public newZone_result DeepCopy()
        {
          var tmp3392 = new newZone_result();
          if(__isset.success)
          {
            tmp3392.Success = this.Success;
          }
          tmp3392.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3392.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3392.__isset.e = this.__isset.e;
          return tmp3392;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3393 = new TStruct("newZone_result");
            await oprot.WriteStructBeginAsync(tmp3393, cancellationToken);
            var tmp3394 = new TField();

            if(this.__isset.success)
            {
              tmp3394.Name = "Success";
              tmp3394.Type = TType.I32;
              tmp3394.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3394, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3394.Name = "E";
                tmp3394.Type = TType.Struct;
                tmp3394.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3394, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3395 = new StringBuilder("newZone_result(");
          int tmp3396 = 0;
          if(__isset.success)
          {
            if(0 < tmp3396++) { tmp3395.Append(", "); }
            tmp3395.Append("Success: ");
            Success.ToString(tmp3395);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3396++) { tmp3395.Append(", "); }
            tmp3395.Append("E: ");
            E.ToString(tmp3395);
          }
          tmp3395.Append(')');
          return tmp3395.ToString();
        }
      }


      public partial class modifyZone_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.Zone _z;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.Zone Z
        {
          get
          {
            return _z;
          }
          set
          {
            __isset.z = true;
            this._z = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool z;
        }

        public modifyZone_args()
        {
        }

        public modifyZone_args DeepCopy()
        {
          var tmp3397 = new modifyZone_args();
          if(__isset.c)
          {
            tmp3397.C = this.C;
          }
          tmp3397.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3397.Index = this.Index;
          }
          tmp3397.__isset.index = this.__isset.index;
          if((Z != null) && __isset.z)
          {
            tmp3397.Z = (global::Yaskawa.Ext.API.Zone)this.Z.DeepCopy();
          }
          tmp3397.__isset.z = this.__isset.z;
          return tmp3397;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Z = new global::Yaskawa.Ext.API.Zone();
                    await Z.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3398 = new TStruct("modifyZone_args");
            await oprot.WriteStructBeginAsync(tmp3398, cancellationToken);
            var tmp3399 = new TField();
            if(__isset.c)
            {
              tmp3399.Name = "c";
              tmp3399.Type = TType.I64;
              tmp3399.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3399, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3399.Name = "index";
              tmp3399.Type = TType.I32;
              tmp3399.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3399, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Z != null) && __isset.z)
            {
              tmp3399.Name = "z";
              tmp3399.Type = TType.Struct;
              tmp3399.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3399, cancellationToken);
              await Z.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.z == other.__isset.z) && ((!__isset.z) || (global::System.Object.Equals(Z, other.Z))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((Z != null) && __isset.z)
            {
              hashcode = (hashcode * 397) + Z.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3400 = new StringBuilder("modifyZone_args(");
          int tmp3401 = 0;
          if(__isset.c)
          {
            if(0 < tmp3401++) { tmp3400.Append(", "); }
            tmp3400.Append("C: ");
            C.ToString(tmp3400);
          }
          if(__isset.index)
          {
            if(0 < tmp3401++) { tmp3400.Append(", "); }
            tmp3400.Append("Index: ");
            Index.ToString(tmp3400);
          }
          if((Z != null) && __isset.z)
          {
            if(0 < tmp3401++) { tmp3400.Append(", "); }
            tmp3400.Append("Z: ");
            Z.ToString(tmp3400);
          }
          tmp3400.Append(')');
          return tmp3400.ToString();
        }
      }


      public partial class modifyZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public modifyZone_result()
        {
        }

        public modifyZone_result DeepCopy()
        {
          var tmp3402 = new modifyZone_result();
          if((E != null) && __isset.e)
          {
            tmp3402.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3402.__isset.e = this.__isset.e;
          return tmp3402;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3403 = new TStruct("modifyZone_result");
            await oprot.WriteStructBeginAsync(tmp3403, cancellationToken);
            var tmp3404 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3404.Name = "E";
                tmp3404.Type = TType.Struct;
                tmp3404.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3404, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is modifyZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3405 = new StringBuilder("modifyZone_result(");
          int tmp3406 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3406++) { tmp3405.Append(", "); }
            tmp3405.Append("E: ");
            E.ToString(tmp3405);
          }
          tmp3405.Append(')');
          return tmp3405.ToString();
        }
      }


      public partial class deleteZone_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteZone_args()
        {
        }

        public deleteZone_args DeepCopy()
        {
          var tmp3407 = new deleteZone_args();
          if(__isset.c)
          {
            tmp3407.C = this.C;
          }
          tmp3407.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3407.Index = this.Index;
          }
          tmp3407.__isset.index = this.__isset.index;
          return tmp3407;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3408 = new TStruct("deleteZone_args");
            await oprot.WriteStructBeginAsync(tmp3408, cancellationToken);
            var tmp3409 = new TField();
            if(__isset.c)
            {
              tmp3409.Name = "c";
              tmp3409.Type = TType.I64;
              tmp3409.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3409, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3409.Name = "index";
              tmp3409.Type = TType.I32;
              tmp3409.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3409, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3410 = new StringBuilder("deleteZone_args(");
          int tmp3411 = 0;
          if(__isset.c)
          {
            if(0 < tmp3411++) { tmp3410.Append(", "); }
            tmp3410.Append("C: ");
            C.ToString(tmp3410);
          }
          if(__isset.index)
          {
            if(0 < tmp3411++) { tmp3410.Append(", "); }
            tmp3410.Append("Index: ");
            Index.ToString(tmp3410);
          }
          tmp3410.Append(')');
          return tmp3410.ToString();
        }
      }


      public partial class deleteZone_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteZone_result()
        {
        }

        public deleteZone_result DeepCopy()
        {
          var tmp3412 = new deleteZone_result();
          if((E != null) && __isset.e)
          {
            tmp3412.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3412.__isset.e = this.__isset.e;
          return tmp3412;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3413 = new TStruct("deleteZone_result");
            await oprot.WriteStructBeginAsync(tmp3413, cancellationToken);
            var tmp3414 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3414.Name = "E";
                tmp3414.Type = TType.Struct;
                tmp3414.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3414, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3415 = new StringBuilder("deleteZone_result(");
          int tmp3416 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3416++) { tmp3415.Append(", "); }
            tmp3415.Append("E: ");
            E.ToString(tmp3415);
          }
          tmp3415.Append(')');
          return tmp3415.ToString();
        }
      }


      public partial class userFrames_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public userFrames_args()
        {
        }

        public userFrames_args DeepCopy()
        {
          var tmp3417 = new userFrames_args();
          if(__isset.c)
          {
            tmp3417.C = this.C;
          }
          tmp3417.__isset.c = this.__isset.c;
          return tmp3417;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3418 = new TStruct("userFrames_args");
            await oprot.WriteStructBeginAsync(tmp3418, cancellationToken);
            var tmp3419 = new TField();
            if(__isset.c)
            {
              tmp3419.Name = "c";
              tmp3419.Type = TType.I64;
              tmp3419.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3419, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3420 = new StringBuilder("userFrames_args(");
          int tmp3421 = 0;
          if(__isset.c)
          {
            if(0 < tmp3421++) { tmp3420.Append(", "); }
            tmp3420.Append("C: ");
            C.ToString(tmp3420);
          }
          tmp3420.Append(')');
          return tmp3420.ToString();
        }
      }


      public partial class userFrames_result : TBase
      {
        private Dictionary<int, string> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<int, string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrames_result()
        {
        }

        public userFrames_result DeepCopy()
        {
          var tmp3422 = new userFrames_result();
          if((Success != null) && __isset.success)
          {
            tmp3422.Success = this.Success.DeepCopy();
          }
          tmp3422.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3422.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3422.__isset.e = this.__isset.e;
          return tmp3422;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map3423 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<int, string>(_map3423.Count);
                      for(int _i3424 = 0; _i3424 < _map3423.Count; ++_i3424)
                      {
                        int _key3425;
                        string _val3426;
                        _key3425 = await iprot.ReadI32Async(cancellationToken);
                        _val3426 = await iprot.ReadStringAsync(cancellationToken);
                        Success[_key3425] = _val3426;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3427 = new TStruct("userFrames_result");
            await oprot.WriteStructBeginAsync(tmp3427, cancellationToken);
            var tmp3428 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3428.Name = "Success";
                tmp3428.Type = TType.Map;
                tmp3428.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3428, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Success.Count), cancellationToken);
                foreach (int _iter3429 in Success.Keys)
                {
                  await oprot.WriteI32Async(_iter3429, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter3429], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3428.Name = "E";
                tmp3428.Type = TType.Struct;
                tmp3428.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3428, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrames_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3430 = new StringBuilder("userFrames_result(");
          int tmp3431 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3431++) { tmp3430.Append(", "); }
            tmp3430.Append("Success: ");
            Success.ToString(tmp3430);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3431++) { tmp3430.Append(", "); }
            tmp3430.Append("E: ");
            E.ToString(tmp3430);
          }
          tmp3430.Append(')');
          return tmp3430.ToString();
        }
      }


      public partial class userFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public userFrame_args()
        {
        }

        public userFrame_args DeepCopy()
        {
          var tmp3432 = new userFrame_args();
          if(__isset.c)
          {
            tmp3432.C = this.C;
          }
          tmp3432.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3432.Index = this.Index;
          }
          tmp3432.__isset.index = this.__isset.index;
          return tmp3432;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3433 = new TStruct("userFrame_args");
            await oprot.WriteStructBeginAsync(tmp3433, cancellationToken);
            var tmp3434 = new TField();
            if(__isset.c)
            {
              tmp3434.Name = "c";
              tmp3434.Type = TType.I64;
              tmp3434.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3434, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3434.Name = "index";
              tmp3434.Type = TType.I32;
              tmp3434.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3434, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3435 = new StringBuilder("userFrame_args(");
          int tmp3436 = 0;
          if(__isset.c)
          {
            if(0 < tmp3436++) { tmp3435.Append(", "); }
            tmp3435.Append("C: ");
            C.ToString(tmp3435);
          }
          if(__isset.index)
          {
            if(0 < tmp3436++) { tmp3435.Append(", "); }
            tmp3435.Append("Index: ");
            Index.ToString(tmp3435);
          }
          tmp3435.Append(')');
          return tmp3435.ToString();
        }
      }


      public partial class userFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.CoordinateFrame _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.CoordinateFrame Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public userFrame_result()
        {
        }

        public userFrame_result DeepCopy()
        {
          var tmp3437 = new userFrame_result();
          if((Success != null) && __isset.success)
          {
            tmp3437.Success = (global::Yaskawa.Ext.API.CoordinateFrame)this.Success.DeepCopy();
          }
          tmp3437.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3437.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3437.__isset.e = this.__isset.e;
          return tmp3437;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3438 = new TStruct("userFrame_result");
            await oprot.WriteStructBeginAsync(tmp3438, cancellationToken);
            var tmp3439 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3439.Name = "Success";
                tmp3439.Type = TType.Struct;
                tmp3439.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3439, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3439.Name = "E";
                tmp3439.Type = TType.Struct;
                tmp3439.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3439, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is userFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3440 = new StringBuilder("userFrame_result(");
          int tmp3441 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3441++) { tmp3440.Append(", "); }
            tmp3440.Append("Success: ");
            Success.ToString(tmp3440);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3441++) { tmp3440.Append(", "); }
            tmp3440.Append("E: ");
            E.ToString(tmp3440);
          }
          tmp3440.Append(')');
          return tmp3440.ToString();
        }
      }


      public partial class newUserFrame_args : TBase
      {
        private long _c;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
        }

        public newUserFrame_args()
        {
        }

        public newUserFrame_args DeepCopy()
        {
          var tmp3442 = new newUserFrame_args();
          if(__isset.c)
          {
            tmp3442.C = this.C;
          }
          tmp3442.__isset.c = this.__isset.c;
          return tmp3442;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3443 = new TStruct("newUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3443, cancellationToken);
            var tmp3444 = new TField();
            if(__isset.c)
            {
              tmp3444.Name = "c";
              tmp3444.Type = TType.I64;
              tmp3444.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3444, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3445 = new StringBuilder("newUserFrame_args(");
          int tmp3446 = 0;
          if(__isset.c)
          {
            if(0 < tmp3446++) { tmp3445.Append(", "); }
            tmp3445.Append("C: ");
            C.ToString(tmp3445);
          }
          tmp3445.Append(')');
          return tmp3445.ToString();
        }
      }


      public partial class newUserFrame_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public newUserFrame_result()
        {
        }

        public newUserFrame_result DeepCopy()
        {
          var tmp3447 = new newUserFrame_result();
          if(__isset.success)
          {
            tmp3447.Success = this.Success;
          }
          tmp3447.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3447.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3447.__isset.e = this.__isset.e;
          return tmp3447;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3448 = new TStruct("newUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3448, cancellationToken);
            var tmp3449 = new TField();

            if(this.__isset.success)
            {
              tmp3449.Name = "Success";
              tmp3449.Type = TType.I32;
              tmp3449.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3449, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3449.Name = "E";
                tmp3449.Type = TType.Struct;
                tmp3449.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3449, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3450 = new StringBuilder("newUserFrame_result(");
          int tmp3451 = 0;
          if(__isset.success)
          {
            if(0 < tmp3451++) { tmp3450.Append(", "); }
            tmp3450.Append("Success: ");
            Success.ToString(tmp3450);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3451++) { tmp3450.Append(", "); }
            tmp3450.Append("E: ");
            E.ToString(tmp3450);
          }
          tmp3450.Append(')');
          return tmp3450.ToString();
        }
      }


      public partial class setUserFrame_args : TBase
      {
        private long _c;
        private int _index;
        private global::Yaskawa.Ext.API.CoordinateFrame _f;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame F
        {
          get
          {
            return _f;
          }
          set
          {
            __isset.f = true;
            this._f = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
          public bool f;
        }

        public setUserFrame_args()
        {
        }

        public setUserFrame_args DeepCopy()
        {
          var tmp3452 = new setUserFrame_args();
          if(__isset.c)
          {
            tmp3452.C = this.C;
          }
          tmp3452.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3452.Index = this.Index;
          }
          tmp3452.__isset.index = this.__isset.index;
          if((F != null) && __isset.f)
          {
            tmp3452.F = (global::Yaskawa.Ext.API.CoordinateFrame)this.F.DeepCopy();
          }
          tmp3452.__isset.f = this.__isset.f;
          return tmp3452;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    F = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await F.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3453 = new TStruct("setUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3453, cancellationToken);
            var tmp3454 = new TField();
            if(__isset.c)
            {
              tmp3454.Name = "c";
              tmp3454.Type = TType.I64;
              tmp3454.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3454, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3454.Name = "index";
              tmp3454.Type = TType.I32;
              tmp3454.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3454, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((F != null) && __isset.f)
            {
              tmp3454.Name = "f";
              tmp3454.Type = TType.Struct;
              tmp3454.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3454, cancellationToken);
              await F.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
            && ((__isset.f == other.__isset.f) && ((!__isset.f) || (global::System.Object.Equals(F, other.F))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
            if((F != null) && __isset.f)
            {
              hashcode = (hashcode * 397) + F.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3455 = new StringBuilder("setUserFrame_args(");
          int tmp3456 = 0;
          if(__isset.c)
          {
            if(0 < tmp3456++) { tmp3455.Append(", "); }
            tmp3455.Append("C: ");
            C.ToString(tmp3455);
          }
          if(__isset.index)
          {
            if(0 < tmp3456++) { tmp3455.Append(", "); }
            tmp3455.Append("Index: ");
            Index.ToString(tmp3455);
          }
          if((F != null) && __isset.f)
          {
            if(0 < tmp3456++) { tmp3455.Append(", "); }
            tmp3455.Append("F: ");
            F.ToString(tmp3455);
          }
          tmp3455.Append(')');
          return tmp3455.ToString();
        }
      }


      public partial class setUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setUserFrame_result()
        {
        }

        public setUserFrame_result DeepCopy()
        {
          var tmp3457 = new setUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3457.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3457.__isset.e = this.__isset.e;
          return tmp3457;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3458 = new TStruct("setUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3458, cancellationToken);
            var tmp3459 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3459.Name = "E";
                tmp3459.Type = TType.Struct;
                tmp3459.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3459, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3460 = new StringBuilder("setUserFrame_result(");
          int tmp3461 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3461++) { tmp3460.Append(", "); }
            tmp3460.Append("E: ");
            E.ToString(tmp3460);
          }
          tmp3460.Append(')');
          return tmp3460.ToString();
        }
      }


      public partial class deleteUserFrame_args : TBase
      {
        private long _c;
        private int _index;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int Index
        {
          get
          {
            return _index;
          }
          set
          {
            __isset.index = true;
            this._index = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool index;
        }

        public deleteUserFrame_args()
        {
        }

        public deleteUserFrame_args DeepCopy()
        {
          var tmp3462 = new deleteUserFrame_args();
          if(__isset.c)
          {
            tmp3462.C = this.C;
          }
          tmp3462.__isset.c = this.__isset.c;
          if(__isset.index)
          {
            tmp3462.Index = this.Index;
          }
          tmp3462.__isset.index = this.__isset.index;
          return tmp3462;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Index = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3463 = new TStruct("deleteUserFrame_args");
            await oprot.WriteStructBeginAsync(tmp3463, cancellationToken);
            var tmp3464 = new TField();
            if(__isset.c)
            {
              tmp3464.Name = "c";
              tmp3464.Type = TType.I64;
              tmp3464.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3464, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.index)
            {
              tmp3464.Name = "index";
              tmp3464.Type = TType.I32;
              tmp3464.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3464, cancellationToken);
              await oprot.WriteI32Async(Index, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.index)
            {
              hashcode = (hashcode * 397) + Index.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3465 = new StringBuilder("deleteUserFrame_args(");
          int tmp3466 = 0;
          if(__isset.c)
          {
            if(0 < tmp3466++) { tmp3465.Append(", "); }
            tmp3465.Append("C: ");
            C.ToString(tmp3465);
          }
          if(__isset.index)
          {
            if(0 < tmp3466++) { tmp3465.Append(", "); }
            tmp3465.Append("Index: ");
            Index.ToString(tmp3465);
          }
          tmp3465.Append(')');
          return tmp3465.ToString();
        }
      }


      public partial class deleteUserFrame_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public deleteUserFrame_result()
        {
        }

        public deleteUserFrame_result DeepCopy()
        {
          var tmp3467 = new deleteUserFrame_result();
          if((E != null) && __isset.e)
          {
            tmp3467.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3467.__isset.e = this.__isset.e;
          return tmp3467;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3468 = new TStruct("deleteUserFrame_result");
            await oprot.WriteStructBeginAsync(tmp3468, cancellationToken);
            var tmp3469 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3469.Name = "E";
                tmp3469.Type = TType.Struct;
                tmp3469.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3469, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteUserFrame_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3470 = new StringBuilder("deleteUserFrame_result(");
          int tmp3471 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3471++) { tmp3470.Append(", "); }
            tmp3470.Append("E: ");
            E.ToString(tmp3470);
          }
          tmp3470.Append(')');
          return tmp3470.ToString();
        }
      }


      public partial class networkInterfaceAddress_args : TBase
      {
        private long _c;
        private string _controllerInterface;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
        }

        public networkInterfaceAddress_args()
        {
        }

        public networkInterfaceAddress_args DeepCopy()
        {
          var tmp3472 = new networkInterfaceAddress_args();
          if(__isset.c)
          {
            tmp3472.C = this.C;
          }
          tmp3472.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3472.ControllerInterface = this.ControllerInterface;
          }
          tmp3472.__isset.controllerInterface = this.__isset.controllerInterface;
          return tmp3472;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3473 = new TStruct("networkInterfaceAddress_args");
            await oprot.WriteStructBeginAsync(tmp3473, cancellationToken);
            var tmp3474 = new TField();
            if(__isset.c)
            {
              tmp3474.Name = "c";
              tmp3474.Type = TType.I64;
              tmp3474.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3474, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3474.Name = "controllerInterface";
              tmp3474.Type = TType.String;
              tmp3474.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3474, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3475 = new StringBuilder("networkInterfaceAddress_args(");
          int tmp3476 = 0;
          if(__isset.c)
          {
            if(0 < tmp3476++) { tmp3475.Append(", "); }
            tmp3475.Append("C: ");
            C.ToString(tmp3475);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3476++) { tmp3475.Append(", "); }
            tmp3475.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3475);
          }
          tmp3475.Append(')');
          return tmp3475.ToString();
        }
      }


      public partial class networkInterfaceAddress_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public networkInterfaceAddress_result()
        {
        }

        public networkInterfaceAddress_result DeepCopy()
        {
          var tmp3477 = new networkInterfaceAddress_result();
          if((Success != null) && __isset.success)
          {
            tmp3477.Success = this.Success;
          }
          tmp3477.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3477.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3477.__isset.e = this.__isset.e;
          return tmp3477;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3478 = new TStruct("networkInterfaceAddress_result");
            await oprot.WriteStructBeginAsync(tmp3478, cancellationToken);
            var tmp3479 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3479.Name = "Success";
                tmp3479.Type = TType.String;
                tmp3479.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3479, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3479.Name = "E";
                tmp3479.Type = TType.Struct;
                tmp3479.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3479, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is networkInterfaceAddress_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3480 = new StringBuilder("networkInterfaceAddress_result(");
          int tmp3481 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3481++) { tmp3480.Append(", "); }
            tmp3480.Append("Success: ");
            Success.ToString(tmp3480);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3481++) { tmp3480.Append(", "); }
            tmp3480.Append("E: ");
            E.ToString(tmp3480);
          }
          tmp3480.Append(')');
          return tmp3480.ToString();
        }
      }


      public partial class requestNetworkAccess_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkAccess_args()
        {
        }

        public requestNetworkAccess_args DeepCopy()
        {
          var tmp3482 = new requestNetworkAccess_args();
          if(__isset.c)
          {
            tmp3482.C = this.C;
          }
          tmp3482.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3482.ControllerInterface = this.ControllerInterface;
          }
          tmp3482.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3482.Port = this.Port;
          }
          tmp3482.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3482.Protocol = this.Protocol;
          }
          tmp3482.__isset.protocol = this.__isset.protocol;
          return tmp3482;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3483 = new TStruct("requestNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3483, cancellationToken);
            var tmp3484 = new TField();
            if(__isset.c)
            {
              tmp3484.Name = "c";
              tmp3484.Type = TType.I64;
              tmp3484.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3484, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3484.Name = "controllerInterface";
              tmp3484.Type = TType.String;
              tmp3484.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3484, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3484.Name = "port";
              tmp3484.Type = TType.I32;
              tmp3484.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3484, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3484.Name = "protocol";
              tmp3484.Type = TType.String;
              tmp3484.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3484, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3485 = new StringBuilder("requestNetworkAccess_args(");
          int tmp3486 = 0;
          if(__isset.c)
          {
            if(0 < tmp3486++) { tmp3485.Append(", "); }
            tmp3485.Append("C: ");
            C.ToString(tmp3485);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3486++) { tmp3485.Append(", "); }
            tmp3485.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3485);
          }
          if(__isset.port)
          {
            if(0 < tmp3486++) { tmp3485.Append(", "); }
            tmp3485.Append("Port: ");
            Port.ToString(tmp3485);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3486++) { tmp3485.Append(", "); }
            tmp3485.Append("Protocol: ");
            Protocol.ToString(tmp3485);
          }
          tmp3485.Append(')');
          return tmp3485.ToString();
        }
      }


      public partial class requestNetworkAccess_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkAccess_result()
        {
        }

        public requestNetworkAccess_result DeepCopy()
        {
          var tmp3487 = new requestNetworkAccess_result();
          if(__isset.success)
          {
            tmp3487.Success = this.Success;
          }
          tmp3487.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3487.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3487.__isset.e = this.__isset.e;
          return tmp3487;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3488 = new TStruct("requestNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3488, cancellationToken);
            var tmp3489 = new TField();

            if(this.__isset.success)
            {
              tmp3489.Name = "Success";
              tmp3489.Type = TType.I32;
              tmp3489.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3489, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3489.Name = "E";
                tmp3489.Type = TType.Struct;
                tmp3489.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3489, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3490 = new StringBuilder("requestNetworkAccess_result(");
          int tmp3491 = 0;
          if(__isset.success)
          {
            if(0 < tmp3491++) { tmp3490.Append(", "); }
            tmp3490.Append("Success: ");
            Success.ToString(tmp3490);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3491++) { tmp3490.Append(", "); }
            tmp3490.Append("E: ");
            E.ToString(tmp3490);
          }
          tmp3490.Append(')');
          return tmp3490.ToString();
        }
      }


      public partial class removeNetworkAccess_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkAccess_args()
        {
        }

        public removeNetworkAccess_args DeepCopy()
        {
          var tmp3492 = new removeNetworkAccess_args();
          if(__isset.c)
          {
            tmp3492.C = this.C;
          }
          tmp3492.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3492.AccessHandle = this.AccessHandle;
          }
          tmp3492.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3492;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3493 = new TStruct("removeNetworkAccess_args");
            await oprot.WriteStructBeginAsync(tmp3493, cancellationToken);
            var tmp3494 = new TField();
            if(__isset.c)
            {
              tmp3494.Name = "c";
              tmp3494.Type = TType.I64;
              tmp3494.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3494, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3494.Name = "accessHandle";
              tmp3494.Type = TType.I32;
              tmp3494.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3494, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3495 = new StringBuilder("removeNetworkAccess_args(");
          int tmp3496 = 0;
          if(__isset.c)
          {
            if(0 < tmp3496++) { tmp3495.Append(", "); }
            tmp3495.Append("C: ");
            C.ToString(tmp3495);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3496++) { tmp3495.Append(", "); }
            tmp3495.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3495);
          }
          tmp3495.Append(')');
          return tmp3495.ToString();
        }
      }


      public partial class removeNetworkAccess_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkAccess_result()
        {
        }

        public removeNetworkAccess_result DeepCopy()
        {
          var tmp3497 = new removeNetworkAccess_result();
          if((E != null) && __isset.e)
          {
            tmp3497.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3497.__isset.e = this.__isset.e;
          return tmp3497;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3498 = new TStruct("removeNetworkAccess_result");
            await oprot.WriteStructBeginAsync(tmp3498, cancellationToken);
            var tmp3499 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3499.Name = "E";
                tmp3499.Type = TType.Struct;
                tmp3499.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3499, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkAccess_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3500 = new StringBuilder("removeNetworkAccess_result(");
          int tmp3501 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3501++) { tmp3500.Append(", "); }
            tmp3500.Append("E: ");
            E.ToString(tmp3500);
          }
          tmp3500.Append(')');
          return tmp3500.ToString();
        }
      }


      public partial class requestNetworkService_args : TBase
      {
        private long _c;
        private string _controllerInterface;
        private int _port;
        private string _protocol;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public string ControllerInterface
        {
          get
          {
            return _controllerInterface;
          }
          set
          {
            __isset.controllerInterface = true;
            this._controllerInterface = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.port = true;
            this._port = value;
          }
        }

        public string Protocol
        {
          get
          {
            return _protocol;
          }
          set
          {
            __isset.protocol = true;
            this._protocol = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool controllerInterface;
          public bool port;
          public bool protocol;
        }

        public requestNetworkService_args()
        {
        }

        public requestNetworkService_args DeepCopy()
        {
          var tmp3502 = new requestNetworkService_args();
          if(__isset.c)
          {
            tmp3502.C = this.C;
          }
          tmp3502.__isset.c = this.__isset.c;
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            tmp3502.ControllerInterface = this.ControllerInterface;
          }
          tmp3502.__isset.controllerInterface = this.__isset.controllerInterface;
          if(__isset.port)
          {
            tmp3502.Port = this.Port;
          }
          tmp3502.__isset.port = this.__isset.port;
          if((Protocol != null) && __isset.protocol)
          {
            tmp3502.Protocol = this.Protocol;
          }
          tmp3502.__isset.protocol = this.__isset.protocol;
          return tmp3502;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ControllerInterface = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Protocol = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3503 = new TStruct("requestNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3503, cancellationToken);
            var tmp3504 = new TField();
            if(__isset.c)
            {
              tmp3504.Name = "c";
              tmp3504.Type = TType.I64;
              tmp3504.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3504, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              tmp3504.Name = "controllerInterface";
              tmp3504.Type = TType.String;
              tmp3504.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3504, cancellationToken);
              await oprot.WriteStringAsync(ControllerInterface, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.port)
            {
              tmp3504.Name = "port";
              tmp3504.Type = TType.I32;
              tmp3504.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3504, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Protocol != null) && __isset.protocol)
            {
              tmp3504.Name = "protocol";
              tmp3504.Type = TType.String;
              tmp3504.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp3504, cancellationToken);
              await oprot.WriteStringAsync(Protocol, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.controllerInterface == other.__isset.controllerInterface) && ((!__isset.controllerInterface) || (global::System.Object.Equals(ControllerInterface, other.ControllerInterface))))
            && ((__isset.port == other.__isset.port) && ((!__isset.port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.protocol == other.__isset.protocol) && ((!__isset.protocol) || (global::System.Object.Equals(Protocol, other.Protocol))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if((ControllerInterface != null) && __isset.controllerInterface)
            {
              hashcode = (hashcode * 397) + ControllerInterface.GetHashCode();
            }
            if(__isset.port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Protocol != null) && __isset.protocol)
            {
              hashcode = (hashcode * 397) + Protocol.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3505 = new StringBuilder("requestNetworkService_args(");
          int tmp3506 = 0;
          if(__isset.c)
          {
            if(0 < tmp3506++) { tmp3505.Append(", "); }
            tmp3505.Append("C: ");
            C.ToString(tmp3505);
          }
          if((ControllerInterface != null) && __isset.controllerInterface)
          {
            if(0 < tmp3506++) { tmp3505.Append(", "); }
            tmp3505.Append("ControllerInterface: ");
            ControllerInterface.ToString(tmp3505);
          }
          if(__isset.port)
          {
            if(0 < tmp3506++) { tmp3505.Append(", "); }
            tmp3505.Append("Port: ");
            Port.ToString(tmp3505);
          }
          if((Protocol != null) && __isset.protocol)
          {
            if(0 < tmp3506++) { tmp3505.Append(", "); }
            tmp3505.Append("Protocol: ");
            Protocol.ToString(tmp3505);
          }
          tmp3505.Append(')');
          return tmp3505.ToString();
        }
      }


      public partial class requestNetworkService_result : TBase
      {
        private int _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public requestNetworkService_result()
        {
        }

        public requestNetworkService_result DeepCopy()
        {
          var tmp3507 = new requestNetworkService_result();
          if(__isset.success)
          {
            tmp3507.Success = this.Success;
          }
          tmp3507.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp3507.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3507.__isset.e = this.__isset.e;
          return tmp3507;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3508 = new TStruct("requestNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3508, cancellationToken);
            var tmp3509 = new TField();

            if(this.__isset.success)
            {
              tmp3509.Name = "Success";
              tmp3509.Type = TType.I32;
              tmp3509.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3509, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3509.Name = "E";
                tmp3509.Type = TType.Struct;
                tmp3509.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3509, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is requestNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3510 = new StringBuilder("requestNetworkService_result(");
          int tmp3511 = 0;
          if(__isset.success)
          {
            if(0 < tmp3511++) { tmp3510.Append(", "); }
            tmp3510.Append("Success: ");
            Success.ToString(tmp3510);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp3511++) { tmp3510.Append(", "); }
            tmp3510.Append("E: ");
            E.ToString(tmp3510);
          }
          tmp3510.Append(')');
          return tmp3510.ToString();
        }
      }


      public partial class removeNetworkService_args : TBase
      {
        private long _c;
        private int _accessHandle;

        public long C
        {
          get
          {
            return _c;
          }
          set
          {
            __isset.c = true;
            this._c = value;
          }
        }

        public int AccessHandle
        {
          get
          {
            return _accessHandle;
          }
          set
          {
            __isset.accessHandle = true;
            this._accessHandle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool c;
          public bool accessHandle;
        }

        public removeNetworkService_args()
        {
        }

        public removeNetworkService_args DeepCopy()
        {
          var tmp3512 = new removeNetworkService_args();
          if(__isset.c)
          {
            tmp3512.C = this.C;
          }
          tmp3512.__isset.c = this.__isset.c;
          if(__isset.accessHandle)
          {
            tmp3512.AccessHandle = this.AccessHandle;
          }
          tmp3512.__isset.accessHandle = this.__isset.accessHandle;
          return tmp3512;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    C = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AccessHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3513 = new TStruct("removeNetworkService_args");
            await oprot.WriteStructBeginAsync(tmp3513, cancellationToken);
            var tmp3514 = new TField();
            if(__isset.c)
            {
              tmp3514.Name = "c";
              tmp3514.Type = TType.I64;
              tmp3514.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3514, cancellationToken);
              await oprot.WriteI64Async(C, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.accessHandle)
            {
              tmp3514.Name = "accessHandle";
              tmp3514.Type = TType.I32;
              tmp3514.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3514, cancellationToken);
              await oprot.WriteI32Async(AccessHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.c == other.__isset.c) && ((!__isset.c) || (global::System.Object.Equals(C, other.C))))
            && ((__isset.accessHandle == other.__isset.accessHandle) && ((!__isset.accessHandle) || (global::System.Object.Equals(AccessHandle, other.AccessHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.c)
            {
              hashcode = (hashcode * 397) + C.GetHashCode();
            }
            if(__isset.accessHandle)
            {
              hashcode = (hashcode * 397) + AccessHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3515 = new StringBuilder("removeNetworkService_args(");
          int tmp3516 = 0;
          if(__isset.c)
          {
            if(0 < tmp3516++) { tmp3515.Append(", "); }
            tmp3515.Append("C: ");
            C.ToString(tmp3515);
          }
          if(__isset.accessHandle)
          {
            if(0 < tmp3516++) { tmp3515.Append(", "); }
            tmp3515.Append("AccessHandle: ");
            AccessHandle.ToString(tmp3515);
          }
          tmp3515.Append(')');
          return tmp3515.ToString();
        }
      }


      public partial class removeNetworkService_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeNetworkService_result()
        {
        }

        public removeNetworkService_result DeepCopy()
        {
          var tmp3517 = new removeNetworkService_result();
          if((E != null) && __isset.e)
          {
            tmp3517.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp3517.__isset.e = this.__isset.e;
          return tmp3517;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3518 = new TStruct("removeNetworkService_result");
            await oprot.WriteStructBeginAsync(tmp3518, cancellationToken);
            var tmp3519 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp3519.Name = "E";
                tmp3519.Type = TType.Struct;
                tmp3519.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp3519, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeNetworkService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3520 = new StringBuilder("removeNetworkService_result(");
          int tmp3521 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp3521++) { tmp3520.Append(", "); }
            tmp3520.Append("E: ");
            E.ToString(tmp3520);
          }
          tmp3520.Append(')');
          return tmp3520.ToString();
        }
      }

    }

  }
}
