/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// Represents a coordinate frame
  /// Used as a reference frame for position coordinates
  /// 
  /// If rep is Implicit then it represents one of the predefined
  /// frames defined by the physical configuration of the cell, robot and/or tool.
  /// If predefined is:
  /// * Joint - the frame is in the axis space of the robot joints (hence dimension is dof of the robot)
  /// * World - the fixed Cartesian frame of the cell (often coincident with Base)
  /// * Base - the base mount of the robot - requires robot set
  /// * Robot - the robot itself (e.g. origin at first axis) - requires robot set
  ///           (unless mounted on a moveable base, fixed offet, possibly 0, from base)
  /// * ToolPlate - toolplate of the end-effector (as when no tool mounted)
  /// * ToolTip - 'business end' of the tool.  Depends on which tool is mounted/active
  ///             and requires tool be set
  /// * User - User defined frames configured in the controller - requires userFrame set.
  ///          User frames also have an associated tool in the YRC Controller, hence requires
  ///          tool to be set.  pointplane may be set if user frame is defined
  ///          via origin point and points in plane
  /// 
  /// If rep is Transform then transform Matrix must be valid
  /// If rep is OffsetOrient, vecorient must be valid
  /// </summary>
  public partial class CoordinateFrame : TBase
  {
    private global::Yaskawa.Ext.API.CoordFrameRepresentation _rep;
    private global::Yaskawa.Ext.API.PredefinedCoordFrameType _predefined;
    private string _name;
    private int _robot;
    private int _tool;
    private global::Yaskawa.Ext.API.Matrix _transform;
    private global::Yaskawa.Ext.API.VectorOrient _vecorient;
    private int _userFrame;
    private global::Yaskawa.Ext.API.PointPlane _pointplane;

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.CoordFrameRepresentation"/>
    /// </summary>
    public global::Yaskawa.Ext.API.CoordFrameRepresentation Rep
    {
      get
      {
        return _rep;
      }
      set
      {
        __isset.rep = true;
        this._rep = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.PredefinedCoordFrameType"/>
    /// </summary>
    public global::Yaskawa.Ext.API.PredefinedCoordFrameType Predefined
    {
      get
      {
        return _predefined;
      }
      set
      {
        __isset.predefined = true;
        this._predefined = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Robot
    {
      get
      {
        return _robot;
      }
      set
      {
        __isset.robot = true;
        this._robot = value;
      }
    }

    public int Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public global::Yaskawa.Ext.API.Matrix Transform
    {
      get
      {
        return _transform;
      }
      set
      {
        __isset.transform = true;
        this._transform = value;
      }
    }

    public global::Yaskawa.Ext.API.VectorOrient Vecorient
    {
      get
      {
        return _vecorient;
      }
      set
      {
        __isset.vecorient = true;
        this._vecorient = value;
      }
    }

    public int UserFrame
    {
      get
      {
        return _userFrame;
      }
      set
      {
        __isset.userFrame = true;
        this._userFrame = value;
      }
    }

    public global::Yaskawa.Ext.API.PointPlane Pointplane
    {
      get
      {
        return _pointplane;
      }
      set
      {
        __isset.pointplane = true;
        this._pointplane = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool rep;
      public bool predefined;
      public bool name;
      public bool robot;
      public bool tool;
      public bool transform;
      public bool vecorient;
      public bool userFrame;
      public bool pointplane;
    }

    public CoordinateFrame()
    {
      this._rep = global::Yaskawa.Ext.API.CoordFrameRepresentation.Implicit;
      this.__isset.rep = true;
    }

    public CoordinateFrame DeepCopy()
    {
      var tmp62 = new CoordinateFrame();
      if(__isset.rep)
      {
        tmp62.Rep = this.Rep;
      }
      tmp62.__isset.rep = this.__isset.rep;
      if(__isset.predefined)
      {
        tmp62.Predefined = this.Predefined;
      }
      tmp62.__isset.predefined = this.__isset.predefined;
      if((Name != null) && __isset.name)
      {
        tmp62.Name = this.Name;
      }
      tmp62.__isset.name = this.__isset.name;
      if(__isset.robot)
      {
        tmp62.Robot = this.Robot;
      }
      tmp62.__isset.robot = this.__isset.robot;
      if(__isset.tool)
      {
        tmp62.Tool = this.Tool;
      }
      tmp62.__isset.tool = this.__isset.tool;
      if((Transform != null) && __isset.transform)
      {
        tmp62.Transform = (global::Yaskawa.Ext.API.Matrix)this.Transform.DeepCopy();
      }
      tmp62.__isset.transform = this.__isset.transform;
      if((Vecorient != null) && __isset.vecorient)
      {
        tmp62.Vecorient = (global::Yaskawa.Ext.API.VectorOrient)this.Vecorient.DeepCopy();
      }
      tmp62.__isset.vecorient = this.__isset.vecorient;
      if(__isset.userFrame)
      {
        tmp62.UserFrame = this.UserFrame;
      }
      tmp62.__isset.userFrame = this.__isset.userFrame;
      if((Pointplane != null) && __isset.pointplane)
      {
        tmp62.Pointplane = (global::Yaskawa.Ext.API.PointPlane)this.Pointplane.DeepCopy();
      }
      tmp62.__isset.pointplane = this.__isset.pointplane;
      return tmp62;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Rep = (global::Yaskawa.Ext.API.CoordFrameRepresentation)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Predefined = (global::Yaskawa.Ext.API.PredefinedCoordFrameType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Robot = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Tool = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Transform = new global::Yaskawa.Ext.API.Matrix();
                await Transform.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Vecorient = new global::Yaskawa.Ext.API.VectorOrient();
                await Vecorient.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                UserFrame = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Struct)
              {
                Pointplane = new global::Yaskawa.Ext.API.PointPlane();
                await Pointplane.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp63 = new TStruct("CoordinateFrame");
        await oprot.WriteStructBeginAsync(tmp63, cancellationToken);
        var tmp64 = new TField();
        if(__isset.rep)
        {
          tmp64.Name = "rep";
          tmp64.Type = TType.I32;
          tmp64.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteI32Async((int)Rep, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.predefined)
        {
          tmp64.Name = "predefined";
          tmp64.Type = TType.I32;
          tmp64.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteI32Async((int)Predefined, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp64.Name = "name";
          tmp64.Type = TType.String;
          tmp64.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.robot)
        {
          tmp64.Name = "robot";
          tmp64.Type = TType.I32;
          tmp64.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteI32Async(Robot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.tool)
        {
          tmp64.Name = "tool";
          tmp64.Type = TType.I32;
          tmp64.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteI32Async(Tool, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Transform != null) && __isset.transform)
        {
          tmp64.Name = "transform";
          tmp64.Type = TType.Struct;
          tmp64.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await Transform.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Vecorient != null) && __isset.vecorient)
        {
          tmp64.Name = "vecorient";
          tmp64.Type = TType.Struct;
          tmp64.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await Vecorient.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userFrame)
        {
          tmp64.Name = "userFrame";
          tmp64.Type = TType.I32;
          tmp64.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteI32Async(UserFrame, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Pointplane != null) && __isset.pointplane)
        {
          tmp64.Name = "pointplane";
          tmp64.Type = TType.Struct;
          tmp64.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await Pointplane.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CoordinateFrame other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.rep == other.__isset.rep) && ((!__isset.rep) || (global::System.Object.Equals(Rep, other.Rep))))
        && ((__isset.predefined == other.__isset.predefined) && ((!__isset.predefined) || (global::System.Object.Equals(Predefined, other.Predefined))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.robot == other.__isset.robot) && ((!__isset.robot) || (global::System.Object.Equals(Robot, other.Robot))))
        && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))))
        && ((__isset.transform == other.__isset.transform) && ((!__isset.transform) || (global::System.Object.Equals(Transform, other.Transform))))
        && ((__isset.vecorient == other.__isset.vecorient) && ((!__isset.vecorient) || (global::System.Object.Equals(Vecorient, other.Vecorient))))
        && ((__isset.userFrame == other.__isset.userFrame) && ((!__isset.userFrame) || (global::System.Object.Equals(UserFrame, other.UserFrame))))
        && ((__isset.pointplane == other.__isset.pointplane) && ((!__isset.pointplane) || (global::System.Object.Equals(Pointplane, other.Pointplane))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.rep)
        {
          hashcode = (hashcode * 397) + Rep.GetHashCode();
        }
        if(__isset.predefined)
        {
          hashcode = (hashcode * 397) + Predefined.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if(__isset.robot)
        {
          hashcode = (hashcode * 397) + Robot.GetHashCode();
        }
        if(__isset.tool)
        {
          hashcode = (hashcode * 397) + Tool.GetHashCode();
        }
        if((Transform != null) && __isset.transform)
        {
          hashcode = (hashcode * 397) + Transform.GetHashCode();
        }
        if((Vecorient != null) && __isset.vecorient)
        {
          hashcode = (hashcode * 397) + Vecorient.GetHashCode();
        }
        if(__isset.userFrame)
        {
          hashcode = (hashcode * 397) + UserFrame.GetHashCode();
        }
        if((Pointplane != null) && __isset.pointplane)
        {
          hashcode = (hashcode * 397) + Pointplane.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp65 = new StringBuilder("CoordinateFrame(");
      int tmp66 = 0;
      if(__isset.rep)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Rep: ");
        Rep.ToString(tmp65);
      }
      if(__isset.predefined)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Predefined: ");
        Predefined.ToString(tmp65);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Name: ");
        Name.ToString(tmp65);
      }
      if(__isset.robot)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Robot: ");
        Robot.ToString(tmp65);
      }
      if(__isset.tool)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Tool: ");
        Tool.ToString(tmp65);
      }
      if((Transform != null) && __isset.transform)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Transform: ");
        Transform.ToString(tmp65);
      }
      if((Vecorient != null) && __isset.vecorient)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Vecorient: ");
        Vecorient.ToString(tmp65);
      }
      if(__isset.userFrame)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("UserFrame: ");
        UserFrame.ToString(tmp65);
      }
      if((Pointplane != null) && __isset.pointplane)
      {
        if(0 < tmp66++) { tmp65.Append(", "); }
        tmp65.Append("Pointplane: ");
        Pointplane.ToString(tmp65);
      }
      tmp65.Append(')');
      return tmp65.ToString();
    }
  }

}
