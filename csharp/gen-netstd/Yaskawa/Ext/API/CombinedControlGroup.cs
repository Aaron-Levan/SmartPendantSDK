/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// Set of simple control groups combined into a new
  /// control group, optionally designating a master
  /// </summary>
  public partial class CombinedControlGroup : TBase
  {
    private List<global::Yaskawa.Ext.API.SimpleControlGroup> _groups;
    private global::Yaskawa.Ext.API.SimpleControlGroup _master;

    public List<global::Yaskawa.Ext.API.SimpleControlGroup> Groups
    {
      get
      {
        return _groups;
      }
      set
      {
        __isset.groups = true;
        this._groups = value;
      }
    }

    public global::Yaskawa.Ext.API.SimpleControlGroup Master
    {
      get
      {
        return _master;
      }
      set
      {
        __isset.master = true;
        this._master = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool groups;
      public bool master;
    }

    public CombinedControlGroup()
    {
    }

    public CombinedControlGroup DeepCopy()
    {
      var tmp179 = new CombinedControlGroup();
      if((Groups != null) && __isset.groups)
      {
        tmp179.Groups = this.Groups.DeepCopy();
      }
      tmp179.__isset.groups = this.__isset.groups;
      if((Master != null) && __isset.master)
      {
        tmp179.Master = (global::Yaskawa.Ext.API.SimpleControlGroup)this.Master.DeepCopy();
      }
      tmp179.__isset.master = this.__isset.master;
      return tmp179;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list180 = await iprot.ReadListBeginAsync(cancellationToken);
                  Groups = new List<global::Yaskawa.Ext.API.SimpleControlGroup>(_list180.Count);
                  for(int _i181 = 0; _i181 < _list180.Count; ++_i181)
                  {
                    global::Yaskawa.Ext.API.SimpleControlGroup _elem182;
                    _elem182 = new global::Yaskawa.Ext.API.SimpleControlGroup();
                    await _elem182.ReadAsync(iprot, cancellationToken);
                    Groups.Add(_elem182);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Master = new global::Yaskawa.Ext.API.SimpleControlGroup();
                await Master.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp183 = new TStruct("CombinedControlGroup");
        await oprot.WriteStructBeginAsync(tmp183, cancellationToken);
        var tmp184 = new TField();
        if((Groups != null) && __isset.groups)
        {
          tmp184.Name = "groups";
          tmp184.Type = TType.List;
          tmp184.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Groups.Count), cancellationToken);
          foreach (global::Yaskawa.Ext.API.SimpleControlGroup _iter185 in Groups)
          {
            await _iter185.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Master != null) && __isset.master)
        {
          tmp184.Name = "master";
          tmp184.Type = TType.Struct;
          tmp184.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await Master.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CombinedControlGroup other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.groups == other.__isset.groups) && ((!__isset.groups) || (TCollections.Equals(Groups, other.Groups))))
        && ((__isset.master == other.__isset.master) && ((!__isset.master) || (global::System.Object.Equals(Master, other.Master))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Groups != null) && __isset.groups)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Groups);
        }
        if((Master != null) && __isset.master)
        {
          hashcode = (hashcode * 397) + Master.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp186 = new StringBuilder("CombinedControlGroup(");
      int tmp187 = 0;
      if((Groups != null) && __isset.groups)
      {
        if(0 < tmp187++) { tmp186.Append(", "); }
        tmp186.Append("Groups: ");
        Groups.ToString(tmp186);
      }
      if((Master != null) && __isset.master)
      {
        if(0 < tmp187++) { tmp186.Append(", "); }
        tmp186.Append("Master: ");
        Master.ToString(tmp186);
      }
      tmp186.Append(')');
      return tmp186.ToString();
    }
  }

}
