/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// Zone - a region in space
  /// * In joint space, defined by minimum and maximum joint angles
  /// * In Cartesian space, a lower/min and upper/max corner defining a rectangular prism (a box)
  ///   (only Base, Robot and User-Frames are supported for Cartesian zones)
  /// 
  /// Action determines if an I/O status signal changes in response to zone entry/exit,
  /// or if an Alarm is issued upon entry.
  /// 
  /// Note: index is 0-based, interface Zone Numbers are 1-based
  /// </summary>
  public partial class Zone : TBase
  {
    private short _number;
    private string _name;
    private bool _enabled;
    private global::Yaskawa.Ext.API.ZoneAction _action;
    private global::Yaskawa.Ext.API.Position _minPos;
    private global::Yaskawa.Ext.API.Position _maxPos;

    public short Number
    {
      get
      {
        return _number;
      }
      set
      {
        __isset.number = true;
        this._number = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.ZoneAction"/>
    /// </summary>
    public global::Yaskawa.Ext.API.ZoneAction Action
    {
      get
      {
        return _action;
      }
      set
      {
        __isset.action = true;
        this._action = value;
      }
    }

    public global::Yaskawa.Ext.API.Position MinPos
    {
      get
      {
        return _minPos;
      }
      set
      {
        __isset.minPos = true;
        this._minPos = value;
      }
    }

    public global::Yaskawa.Ext.API.Position MaxPos
    {
      get
      {
        return _maxPos;
      }
      set
      {
        __isset.maxPos = true;
        this._maxPos = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool number;
      public bool name;
      public bool enabled;
      public bool action;
      public bool minPos;
      public bool maxPos;
    }

    public Zone()
    {
    }

    public Zone DeepCopy()
    {
      var tmp224 = new Zone();
      if(__isset.number)
      {
        tmp224.Number = this.Number;
      }
      tmp224.__isset.number = this.__isset.number;
      if((Name != null) && __isset.name)
      {
        tmp224.Name = this.Name;
      }
      tmp224.__isset.name = this.__isset.name;
      if(__isset.enabled)
      {
        tmp224.Enabled = this.Enabled;
      }
      tmp224.__isset.enabled = this.__isset.enabled;
      if(__isset.action)
      {
        tmp224.Action = this.Action;
      }
      tmp224.__isset.action = this.__isset.action;
      if((MinPos != null) && __isset.minPos)
      {
        tmp224.MinPos = (global::Yaskawa.Ext.API.Position)this.MinPos.DeepCopy();
      }
      tmp224.__isset.minPos = this.__isset.minPos;
      if((MaxPos != null) && __isset.maxPos)
      {
        tmp224.MaxPos = (global::Yaskawa.Ext.API.Position)this.MaxPos.DeepCopy();
      }
      tmp224.__isset.maxPos = this.__isset.maxPos;
      return tmp224;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                Number = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Enabled = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Action = (global::Yaskawa.Ext.API.ZoneAction)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                MinPos = new global::Yaskawa.Ext.API.Position();
                await MinPos.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                MaxPos = new global::Yaskawa.Ext.API.Position();
                await MaxPos.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp225 = new TStruct("Zone");
        await oprot.WriteStructBeginAsync(tmp225, cancellationToken);
        var tmp226 = new TField();
        if(__isset.number)
        {
          tmp226.Name = "number";
          tmp226.Type = TType.I16;
          tmp226.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteI16Async(Number, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp226.Name = "name";
          tmp226.Type = TType.String;
          tmp226.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enabled)
        {
          tmp226.Name = "enabled";
          tmp226.Type = TType.Bool;
          tmp226.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteBoolAsync(Enabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.action)
        {
          tmp226.Name = "action";
          tmp226.Type = TType.I32;
          tmp226.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteI32Async((int)Action, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MinPos != null) && __isset.minPos)
        {
          tmp226.Name = "minPos";
          tmp226.Type = TType.Struct;
          tmp226.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await MinPos.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MaxPos != null) && __isset.maxPos)
        {
          tmp226.Name = "maxPos";
          tmp226.Type = TType.Struct;
          tmp226.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await MaxPos.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Zone other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.number == other.__isset.number) && ((!__isset.number) || (global::System.Object.Equals(Number, other.Number))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.enabled == other.__isset.enabled) && ((!__isset.enabled) || (global::System.Object.Equals(Enabled, other.Enabled))))
        && ((__isset.action == other.__isset.action) && ((!__isset.action) || (global::System.Object.Equals(Action, other.Action))))
        && ((__isset.minPos == other.__isset.minPos) && ((!__isset.minPos) || (global::System.Object.Equals(MinPos, other.MinPos))))
        && ((__isset.maxPos == other.__isset.maxPos) && ((!__isset.maxPos) || (global::System.Object.Equals(MaxPos, other.MaxPos))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.number)
        {
          hashcode = (hashcode * 397) + Number.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if(__isset.enabled)
        {
          hashcode = (hashcode * 397) + Enabled.GetHashCode();
        }
        if(__isset.action)
        {
          hashcode = (hashcode * 397) + Action.GetHashCode();
        }
        if((MinPos != null) && __isset.minPos)
        {
          hashcode = (hashcode * 397) + MinPos.GetHashCode();
        }
        if((MaxPos != null) && __isset.maxPos)
        {
          hashcode = (hashcode * 397) + MaxPos.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp227 = new StringBuilder("Zone(");
      int tmp228 = 0;
      if(__isset.number)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("Number: ");
        Number.ToString(tmp227);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("Name: ");
        Name.ToString(tmp227);
      }
      if(__isset.enabled)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("Enabled: ");
        Enabled.ToString(tmp227);
      }
      if(__isset.action)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("Action: ");
        Action.ToString(tmp227);
      }
      if((MinPos != null) && __isset.minPos)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("MinPos: ");
        MinPos.ToString(tmp227);
      }
      if((MaxPos != null) && __isset.maxPos)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("MaxPos: ");
        MaxPos.ToString(tmp227);
      }
      tmp227.Append(')');
      return tmp227.ToString();
    }
  }

}
