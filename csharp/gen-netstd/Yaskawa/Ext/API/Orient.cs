/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// If rep is Quaternion or EulerRPY then v contains the elements,
  /// otherwise if rep is Matrix m contains the 3x3 transform
  /// </summary>
  public partial class Orient : TBase
  {
    private global::Yaskawa.Ext.API.OrientationRepresentation _rep;
    private List<double> _v;
    private global::Yaskawa.Ext.API.Matrix _m;

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.OrientationRepresentation"/>
    /// </summary>
    public global::Yaskawa.Ext.API.OrientationRepresentation Rep
    {
      get
      {
        return _rep;
      }
      set
      {
        __isset.rep = true;
        this._rep = value;
      }
    }

    public List<double> V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public global::Yaskawa.Ext.API.Matrix M
    {
      get
      {
        return _m;
      }
      set
      {
        __isset.m = true;
        this._m = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool rep;
      public bool v;
      public bool m;
    }

    public Orient()
    {
      this._rep = global::Yaskawa.Ext.API.OrientationRepresentation.EulerRPY;
      this.__isset.rep = true;
    }

    public Orient DeepCopy()
    {
      var tmp22 = new Orient();
      if(__isset.rep)
      {
        tmp22.Rep = this.Rep;
      }
      tmp22.__isset.rep = this.__isset.rep;
      if((V != null) && __isset.v)
      {
        tmp22.V = this.V.DeepCopy();
      }
      tmp22.__isset.v = this.__isset.v;
      if((M != null) && __isset.m)
      {
        tmp22.M = (global::Yaskawa.Ext.API.Matrix)this.M.DeepCopy();
      }
      tmp22.__isset.m = this.__isset.m;
      return tmp22;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Rep = (global::Yaskawa.Ext.API.OrientationRepresentation)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list23 = await iprot.ReadListBeginAsync(cancellationToken);
                  V = new List<double>(_list23.Count);
                  for(int _i24 = 0; _i24 < _list23.Count; ++_i24)
                  {
                    double _elem25;
                    _elem25 = await iprot.ReadDoubleAsync(cancellationToken);
                    V.Add(_elem25);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                M = new global::Yaskawa.Ext.API.Matrix();
                await M.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp26 = new TStruct("Orient");
        await oprot.WriteStructBeginAsync(tmp26, cancellationToken);
        var tmp27 = new TField();
        if(__isset.rep)
        {
          tmp27.Name = "rep";
          tmp27.Type = TType.I32;
          tmp27.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteI32Async((int)Rep, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((V != null) && __isset.v)
        {
          tmp27.Name = "v";
          tmp27.Type = TType.List;
          tmp27.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, V.Count), cancellationToken);
          foreach (double _iter28 in V)
          {
            await oprot.WriteDoubleAsync(_iter28, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((M != null) && __isset.m)
        {
          tmp27.Name = "m";
          tmp27.Type = TType.Struct;
          tmp27.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await M.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Orient other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.rep == other.__isset.rep) && ((!__isset.rep) || (global::System.Object.Equals(Rep, other.Rep))))
        && ((__isset.v == other.__isset.v) && ((!__isset.v) || (global::System.Object.Equals(V, other.V))))
        && ((__isset.m == other.__isset.m) && ((!__isset.m) || (global::System.Object.Equals(M, other.M))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.rep)
        {
          hashcode = (hashcode * 397) + Rep.GetHashCode();
        }
        if((V != null) && __isset.v)
        {
          hashcode = (hashcode * 397) + V.GetHashCode();
        }
        if((M != null) && __isset.m)
        {
          hashcode = (hashcode * 397) + M.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp29 = new StringBuilder("Orient(");
      int tmp30 = 0;
      if(__isset.rep)
      {
        if(0 < tmp30++) { tmp29.Append(", "); }
        tmp29.Append("Rep: ");
        Rep.ToString(tmp29);
      }
      if((V != null) && __isset.v)
      {
        if(0 < tmp30++) { tmp29.Append(", "); }
        tmp29.Append("V: ");
        V.ToString(tmp29);
      }
      if((M != null) && __isset.m)
      {
        if(0 < tmp30++) { tmp29.Append(", "); }
        tmp29.Append("M: ");
        M.ToString(tmp29);
      }
      tmp29.Append(')');
      return tmp29.ToString();
    }
  }

}
