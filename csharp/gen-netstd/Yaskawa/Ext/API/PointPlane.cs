/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// Position and Orientaiton in 3D defined by
  /// an origin point and two points that define a plane
  /// </summary>
  public partial class PointPlane : TBase
  {
    private List<double> _origin;
    private List<double> _xx;
    private List<double> _xy;

    public List<double> Origin
    {
      get
      {
        return _origin;
      }
      set
      {
        __isset.origin = true;
        this._origin = value;
      }
    }

    public List<double> Xx
    {
      get
      {
        return _xx;
      }
      set
      {
        __isset.xx = true;
        this._xx = value;
      }
    }

    public List<double> Xy
    {
      get
      {
        return _xy;
      }
      set
      {
        __isset.xy = true;
        this._xy = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool origin;
      public bool xx;
      public bool xy;
    }

    public PointPlane()
    {
    }

    public PointPlane DeepCopy()
    {
      var tmp40 = new PointPlane();
      if((Origin != null) && __isset.origin)
      {
        tmp40.Origin = this.Origin.DeepCopy();
      }
      tmp40.__isset.origin = this.__isset.origin;
      if((Xx != null) && __isset.xx)
      {
        tmp40.Xx = this.Xx.DeepCopy();
      }
      tmp40.__isset.xx = this.__isset.xx;
      if((Xy != null) && __isset.xy)
      {
        tmp40.Xy = this.Xy.DeepCopy();
      }
      tmp40.__isset.xy = this.__isset.xy;
      return tmp40;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list41 = await iprot.ReadListBeginAsync(cancellationToken);
                  Origin = new List<double>(_list41.Count);
                  for(int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    double _elem43;
                    _elem43 = await iprot.ReadDoubleAsync(cancellationToken);
                    Origin.Add(_elem43);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list44 = await iprot.ReadListBeginAsync(cancellationToken);
                  Xx = new List<double>(_list44.Count);
                  for(int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    double _elem46;
                    _elem46 = await iprot.ReadDoubleAsync(cancellationToken);
                    Xx.Add(_elem46);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list47 = await iprot.ReadListBeginAsync(cancellationToken);
                  Xy = new List<double>(_list47.Count);
                  for(int _i48 = 0; _i48 < _list47.Count; ++_i48)
                  {
                    double _elem49;
                    _elem49 = await iprot.ReadDoubleAsync(cancellationToken);
                    Xy.Add(_elem49);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp50 = new TStruct("PointPlane");
        await oprot.WriteStructBeginAsync(tmp50, cancellationToken);
        var tmp51 = new TField();
        if((Origin != null) && __isset.origin)
        {
          tmp51.Name = "origin";
          tmp51.Type = TType.List;
          tmp51.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp51, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, Origin.Count), cancellationToken);
          foreach (double _iter52 in Origin)
          {
            await oprot.WriteDoubleAsync(_iter52, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Xx != null) && __isset.xx)
        {
          tmp51.Name = "xx";
          tmp51.Type = TType.List;
          tmp51.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp51, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, Xx.Count), cancellationToken);
          foreach (double _iter53 in Xx)
          {
            await oprot.WriteDoubleAsync(_iter53, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Xy != null) && __isset.xy)
        {
          tmp51.Name = "xy";
          tmp51.Type = TType.List;
          tmp51.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp51, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, Xy.Count), cancellationToken);
          foreach (double _iter54 in Xy)
          {
            await oprot.WriteDoubleAsync(_iter54, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PointPlane other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.origin == other.__isset.origin) && ((!__isset.origin) || (global::System.Object.Equals(Origin, other.Origin))))
        && ((__isset.xx == other.__isset.xx) && ((!__isset.xx) || (global::System.Object.Equals(Xx, other.Xx))))
        && ((__isset.xy == other.__isset.xy) && ((!__isset.xy) || (global::System.Object.Equals(Xy, other.Xy))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Origin != null) && __isset.origin)
        {
          hashcode = (hashcode * 397) + Origin.GetHashCode();
        }
        if((Xx != null) && __isset.xx)
        {
          hashcode = (hashcode * 397) + Xx.GetHashCode();
        }
        if((Xy != null) && __isset.xy)
        {
          hashcode = (hashcode * 397) + Xy.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp55 = new StringBuilder("PointPlane(");
      int tmp56 = 0;
      if((Origin != null) && __isset.origin)
      {
        if(0 < tmp56++) { tmp55.Append(", "); }
        tmp55.Append("Origin: ");
        Origin.ToString(tmp55);
      }
      if((Xx != null) && __isset.xx)
      {
        if(0 < tmp56++) { tmp55.Append(", "); }
        tmp55.Append("Xx: ");
        Xx.ToString(tmp55);
      }
      if((Xy != null) && __isset.xy)
      {
        if(0 < tmp56++) { tmp55.Append(", "); }
        tmp55.Append("Xy: ");
        Xy.ToString(tmp55);
      }
      tmp55.Append(')');
      return tmp55.ToString();
    }
  }

}
