/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Robot
  {
    /// <summary>
    /// Represents a single robot
    /// 
    /// Often there will only be one robot connected to a given controller
    /// but, for example, the YRC Controller is capable of supporting up-to 8 robots (or 72 axes).
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// The model string of this robot
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Number of degrees-of-freedom / axes
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current position of the robot in joint coordinate frame (i.e. axis angles)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="unit"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default);

      /// <summary>
      /// Coordinates of the ToolTip (TCP) of of the specified tool
      /// in the given coordinate frame (using active tool if none specified)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="frame"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Does this robot support force limiting? (collaborative robot?)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is the robot stopped due to an over-limit event?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is an end-of-arm switch box installed?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Index of the currently active tool
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the currently active tool
      /// </summary>
      /// <param name="r"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get a robot's maximum linear speed
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Represents a single robot
    /// 
    /// Often there will only be one robot connected to a given controller
    /// but, for example, the YRC Controller is capable of supporting up-to 8 robots (or 72 axes).
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default)
      {
        await send_model(r, cancellationToken);
        return await recv_model(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_model(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("model", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3402 = new InternalStructs.model_args() {
          R = r,
        };
        
        await tmp3402.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_model(CancellationToken cancellationToken = default)
      {
        
        var tmp3403 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3403.Type == TMessageType.Exception)
        {
          var tmp3404 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3404;
        }

        var tmp3405 = new InternalStructs.model_result();
        await tmp3405.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3405.__isset.success)
        {
          return tmp3405.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "model failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default)
      {
        await send_dof(r, cancellationToken);
        return await recv_dof(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dof(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3406 = new InternalStructs.dof_args() {
          R = r,
        };
        
        await tmp3406.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_dof(CancellationToken cancellationToken = default)
      {
        
        var tmp3407 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3407.Type == TMessageType.Exception)
        {
          var tmp3408 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3408;
        }

        var tmp3409 = new InternalStructs.dof_result();
        await tmp3409.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3409.__isset.success)
        {
          return tmp3409.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dof failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await send_jointPosition(r, unit, cancellationToken);
        return await recv_jointPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3410 = new InternalStructs.jointPosition_args() {
          R = r,
          Unit = unit,
        };
        
        await tmp3410.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_jointPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3411 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3411.Type == TMessageType.Exception)
        {
          var tmp3412 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3412;
        }

        var tmp3413 = new InternalStructs.jointPosition_result();
        await tmp3413.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3413.__isset.success)
        {
          return tmp3413.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await send_toolTipPosition(r, frame, tool, cancellationToken);
        return await recv_toolTipPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3414 = new InternalStructs.toolTipPosition_args() {
          R = r,
          Frame = frame,
          Tool = tool,
        };
        
        await tmp3414.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_toolTipPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3415 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3415.Type == TMessageType.Exception)
        {
          var tmp3416 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3416;
        }

        var tmp3417 = new InternalStructs.toolTipPosition_result();
        await tmp3417.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3417.__isset.success)
        {
          return tmp3417.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "toolTipPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingAvailable(r, cancellationToken);
        return await recv_forceLimitingAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3418 = new InternalStructs.forceLimitingAvailable_args() {
          R = r,
        };
        
        await tmp3418.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3419 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3419.Type == TMessageType.Exception)
        {
          var tmp3420 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3420;
        }

        var tmp3421 = new InternalStructs.forceLimitingAvailable_result();
        await tmp3421.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3421.__isset.success)
        {
          return tmp3421.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingActive(r, cancellationToken);
        return await recv_forceLimitingActive(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3422 = new InternalStructs.forceLimitingActive_args() {
          R = r,
        };
        
        await tmp3422.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingActive(CancellationToken cancellationToken = default)
      {
        
        var tmp3423 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3423.Type == TMessageType.Exception)
        {
          var tmp3424 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3424;
        }

        var tmp3425 = new InternalStructs.forceLimitingActive_result();
        await tmp3425.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3425.__isset.success)
        {
          return tmp3425.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingActive failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingStopped(r, cancellationToken);
        return await recv_forceLimitingStopped(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3426 = new InternalStructs.forceLimitingStopped_args() {
          R = r,
        };
        
        await tmp3426.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingStopped(CancellationToken cancellationToken = default)
      {
        
        var tmp3427 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3427.Type == TMessageType.Exception)
        {
          var tmp3428 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3428;
        }

        var tmp3429 = new InternalStructs.forceLimitingStopped_result();
        await tmp3429.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3429.__isset.success)
        {
          return tmp3429.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingStopped failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_switchBoxAvailable(r, cancellationToken);
        return await recv_switchBoxAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3430 = new InternalStructs.switchBoxAvailable_args() {
          R = r,
        };
        
        await tmp3430.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_switchBoxAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3431 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3431.Type == TMessageType.Exception)
        {
          var tmp3432 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3432;
        }

        var tmp3433 = new InternalStructs.switchBoxAvailable_result();
        await tmp3433.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3433.__isset.success)
        {
          return tmp3433.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "switchBoxAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default)
      {
        await send_activeTool(r, cancellationToken);
        return await recv_activeTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_activeTool(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3434 = new InternalStructs.activeTool_args() {
          R = r,
        };
        
        await tmp3434.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_activeTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3435 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3435.Type == TMessageType.Exception)
        {
          var tmp3436 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3436;
        }

        var tmp3437 = new InternalStructs.activeTool_result();
        await tmp3437.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3437.__isset.success)
        {
          return tmp3437.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeTool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await send_setActiveTool(r, tool, cancellationToken);
        await recv_setActiveTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3438 = new InternalStructs.setActiveTool_args() {
          R = r,
          Tool = tool,
        };
        
        await tmp3438.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setActiveTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3439 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3439.Type == TMessageType.Exception)
        {
          var tmp3440 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3440;
        }

        var tmp3441 = new InternalStructs.setActiveTool_result();
        await tmp3441.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_workHomePosition(r, cancellationToken);
        return await recv_workHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3442 = new InternalStructs.workHomePosition_args() {
          R = r,
        };
        
        await tmp3442.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_workHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3443 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3443.Type == TMessageType.Exception)
        {
          var tmp3444 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3444;
        }

        var tmp3445 = new InternalStructs.workHomePosition_result();
        await tmp3445.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3445.__isset.success)
        {
          return tmp3445.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "workHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setWorkHomePosition(r, p, cancellationToken);
        await recv_setWorkHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3446 = new InternalStructs.setWorkHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3446.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setWorkHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3447 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3447.Type == TMessageType.Exception)
        {
          var tmp3448 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3448;
        }

        var tmp3449 = new InternalStructs.setWorkHomePosition_result();
        await tmp3449.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_secondHomePosition(r, cancellationToken);
        return await recv_secondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3450 = new InternalStructs.secondHomePosition_args() {
          R = r,
        };
        
        await tmp3450.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_secondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3451 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3451.Type == TMessageType.Exception)
        {
          var tmp3452 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3452;
        }

        var tmp3453 = new InternalStructs.secondHomePosition_result();
        await tmp3453.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3453.__isset.success)
        {
          return tmp3453.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "secondHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setSecondHomePosition(r, p, cancellationToken);
        await recv_setSecondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3454 = new InternalStructs.setSecondHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3454.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setSecondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3455 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3455.Type == TMessageType.Exception)
        {
          var tmp3456 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3456;
        }

        var tmp3457 = new InternalStructs.setSecondHomePosition_result();
        await tmp3457.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await send_maximumLinearSpeed(r, cancellationToken);
        return await recv_maximumLinearSpeed(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3458 = new InternalStructs.maximumLinearSpeed_args() {
          R = r,
        };
        
        await tmp3458.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_maximumLinearSpeed(CancellationToken cancellationToken = default)
      {
        
        var tmp3459 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3459.Type == TMessageType.Exception)
        {
          var tmp3460 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3460;
        }

        var tmp3461 = new InternalStructs.maximumLinearSpeed_result();
        await tmp3461.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3461.__isset.success)
        {
          return tmp3461.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "maximumLinearSpeed failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["model"] = model_ProcessAsync;
        processMap_["dof"] = dof_ProcessAsync;
        processMap_["jointPosition"] = jointPosition_ProcessAsync;
        processMap_["toolTipPosition"] = toolTipPosition_ProcessAsync;
        processMap_["forceLimitingAvailable"] = forceLimitingAvailable_ProcessAsync;
        processMap_["forceLimitingActive"] = forceLimitingActive_ProcessAsync;
        processMap_["forceLimitingStopped"] = forceLimitingStopped_ProcessAsync;
        processMap_["switchBoxAvailable"] = switchBoxAvailable_ProcessAsync;
        processMap_["activeTool"] = activeTool_ProcessAsync;
        processMap_["setActiveTool"] = setActiveTool_ProcessAsync;
        processMap_["workHomePosition"] = workHomePosition_ProcessAsync;
        processMap_["setWorkHomePosition"] = setWorkHomePosition_ProcessAsync;
        processMap_["secondHomePosition"] = secondHomePosition_ProcessAsync;
        processMap_["setSecondHomePosition"] = setSecondHomePosition_ProcessAsync;
        processMap_["maximumLinearSpeed"] = maximumLinearSpeed_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task model_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3462 = new InternalStructs.model_args();
        await tmp3462.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3463 = new InternalStructs.model_result();
        try
        {
          tmp3463.Success = await _iAsync.model(tmp3462.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3463.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3464)
        {
          var tmp3465 = $"Error occurred in {GetType().FullName}: {tmp3464.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3464, tmp3465);
          else
            Console.Error.WriteLine(tmp3465);
          var tmp3466 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Exception, seqid), cancellationToken);
          await tmp3466.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dof_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3467 = new InternalStructs.dof_args();
        await tmp3467.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3468 = new InternalStructs.dof_result();
        try
        {
          tmp3468.Success = await _iAsync.dof(tmp3467.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3468.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3469)
        {
          var tmp3470 = $"Error occurred in {GetType().FullName}: {tmp3469.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3469, tmp3470);
          else
            Console.Error.WriteLine(tmp3470);
          var tmp3471 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Exception, seqid), cancellationToken);
          await tmp3471.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3472 = new InternalStructs.jointPosition_args();
        await tmp3472.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3473 = new InternalStructs.jointPosition_result();
        try
        {
          tmp3473.Success = await _iAsync.jointPosition(tmp3472.R, tmp3472.Unit, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3473.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3474)
        {
          var tmp3475 = $"Error occurred in {GetType().FullName}: {tmp3474.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3474, tmp3475);
          else
            Console.Error.WriteLine(tmp3475);
          var tmp3476 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3476.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task toolTipPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3477 = new InternalStructs.toolTipPosition_args();
        await tmp3477.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3478 = new InternalStructs.toolTipPosition_result();
        try
        {
          tmp3478.Success = await _iAsync.toolTipPosition(tmp3477.R, tmp3477.Frame, tmp3477.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3478.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3479)
        {
          var tmp3480 = $"Error occurred in {GetType().FullName}: {tmp3479.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3479, tmp3480);
          else
            Console.Error.WriteLine(tmp3480);
          var tmp3481 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3481.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3482 = new InternalStructs.forceLimitingAvailable_args();
        await tmp3482.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3483 = new InternalStructs.forceLimitingAvailable_result();
        try
        {
          tmp3483.Success = await _iAsync.forceLimitingAvailable(tmp3482.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3483.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3484)
        {
          var tmp3485 = $"Error occurred in {GetType().FullName}: {tmp3484.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3484, tmp3485);
          else
            Console.Error.WriteLine(tmp3485);
          var tmp3486 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3486.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingActive_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3487 = new InternalStructs.forceLimitingActive_args();
        await tmp3487.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3488 = new InternalStructs.forceLimitingActive_result();
        try
        {
          tmp3488.Success = await _iAsync.forceLimitingActive(tmp3487.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3488.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3489)
        {
          var tmp3490 = $"Error occurred in {GetType().FullName}: {tmp3489.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3489, tmp3490);
          else
            Console.Error.WriteLine(tmp3490);
          var tmp3491 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Exception, seqid), cancellationToken);
          await tmp3491.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingStopped_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3492 = new InternalStructs.forceLimitingStopped_args();
        await tmp3492.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3493 = new InternalStructs.forceLimitingStopped_result();
        try
        {
          tmp3493.Success = await _iAsync.forceLimitingStopped(tmp3492.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3493.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3494)
        {
          var tmp3495 = $"Error occurred in {GetType().FullName}: {tmp3494.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3494, tmp3495);
          else
            Console.Error.WriteLine(tmp3495);
          var tmp3496 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Exception, seqid), cancellationToken);
          await tmp3496.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task switchBoxAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3497 = new InternalStructs.switchBoxAvailable_args();
        await tmp3497.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3498 = new InternalStructs.switchBoxAvailable_result();
        try
        {
          tmp3498.Success = await _iAsync.switchBoxAvailable(tmp3497.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3498.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3499)
        {
          var tmp3500 = $"Error occurred in {GetType().FullName}: {tmp3499.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3499, tmp3500);
          else
            Console.Error.WriteLine(tmp3500);
          var tmp3501 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3501.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task activeTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3502 = new InternalStructs.activeTool_args();
        await tmp3502.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3503 = new InternalStructs.activeTool_result();
        try
        {
          tmp3503.Success = await _iAsync.activeTool(tmp3502.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3503.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3504)
        {
          var tmp3505 = $"Error occurred in {GetType().FullName}: {tmp3504.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3504, tmp3505);
          else
            Console.Error.WriteLine(tmp3505);
          var tmp3506 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp3506.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setActiveTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3507 = new InternalStructs.setActiveTool_args();
        await tmp3507.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3508 = new InternalStructs.setActiveTool_result();
        try
        {
          await _iAsync.setActiveTool(tmp3507.R, tmp3507.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3508.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3509)
        {
          var tmp3510 = $"Error occurred in {GetType().FullName}: {tmp3509.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3509, tmp3510);
          else
            Console.Error.WriteLine(tmp3510);
          var tmp3511 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp3511.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task workHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3512 = new InternalStructs.workHomePosition_args();
        await tmp3512.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3513 = new InternalStructs.workHomePosition_result();
        try
        {
          tmp3513.Success = await _iAsync.workHomePosition(tmp3512.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3513.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3514)
        {
          var tmp3515 = $"Error occurred in {GetType().FullName}: {tmp3514.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3514, tmp3515);
          else
            Console.Error.WriteLine(tmp3515);
          var tmp3516 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3516.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3517 = new InternalStructs.setWorkHomePosition_args();
        await tmp3517.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3518 = new InternalStructs.setWorkHomePosition_result();
        try
        {
          await _iAsync.setWorkHomePosition(tmp3517.R, tmp3517.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3518.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3519)
        {
          var tmp3520 = $"Error occurred in {GetType().FullName}: {tmp3519.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3519, tmp3520);
          else
            Console.Error.WriteLine(tmp3520);
          var tmp3521 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3521.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task secondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3522 = new InternalStructs.secondHomePosition_args();
        await tmp3522.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3523 = new InternalStructs.secondHomePosition_result();
        try
        {
          tmp3523.Success = await _iAsync.secondHomePosition(tmp3522.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3523.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3524)
        {
          var tmp3525 = $"Error occurred in {GetType().FullName}: {tmp3524.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3524, tmp3525);
          else
            Console.Error.WriteLine(tmp3525);
          var tmp3526 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3526.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3527 = new InternalStructs.setSecondHomePosition_args();
        await tmp3527.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3528 = new InternalStructs.setSecondHomePosition_result();
        try
        {
          await _iAsync.setSecondHomePosition(tmp3527.R, tmp3527.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3528.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3529)
        {
          var tmp3530 = $"Error occurred in {GetType().FullName}: {tmp3529.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3529, tmp3530);
          else
            Console.Error.WriteLine(tmp3530);
          var tmp3531 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3531.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task maximumLinearSpeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3532 = new InternalStructs.maximumLinearSpeed_args();
        await tmp3532.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3533 = new InternalStructs.maximumLinearSpeed_result();
        try
        {
          tmp3533.Success = await _iAsync.maximumLinearSpeed(tmp3532.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3533.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3534)
        {
          var tmp3535 = $"Error occurred in {GetType().FullName}: {tmp3534.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3534, tmp3535);
          else
            Console.Error.WriteLine(tmp3535);
          var tmp3536 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Exception, seqid), cancellationToken);
          await tmp3536.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class model_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public model_args()
        {
        }

        public model_args DeepCopy()
        {
          var tmp3537 = new model_args();
          if(__isset.r)
          {
            tmp3537.R = this.R;
          }
          tmp3537.__isset.r = this.__isset.r;
          return tmp3537;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3538 = new TStruct("model_args");
            await oprot.WriteStructBeginAsync(tmp3538, cancellationToken);
            var tmp3539 = new TField();
            if(__isset.r)
            {
              tmp3539.Name = "r";
              tmp3539.Type = TType.I32;
              tmp3539.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3539, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3540 = new StringBuilder("model_args(");
          int tmp3541 = 0;
          if(__isset.r)
          {
            if(0 < tmp3541++) { tmp3540.Append(", "); }
            tmp3540.Append("R: ");
            R.ToString(tmp3540);
          }
          tmp3540.Append(')');
          return tmp3540.ToString();
        }
      }


      public partial class model_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public model_result()
        {
        }

        public model_result DeepCopy()
        {
          var tmp3542 = new model_result();
          if((Success != null) && __isset.success)
          {
            tmp3542.Success = this.Success;
          }
          tmp3542.__isset.success = this.__isset.success;
          return tmp3542;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3543 = new TStruct("model_result");
            await oprot.WriteStructBeginAsync(tmp3543, cancellationToken);
            var tmp3544 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3544.Name = "Success";
                tmp3544.Type = TType.String;
                tmp3544.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3544, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3545 = new StringBuilder("model_result(");
          int tmp3546 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3546++) { tmp3545.Append(", "); }
            tmp3545.Append("Success: ");
            Success.ToString(tmp3545);
          }
          tmp3545.Append(')');
          return tmp3545.ToString();
        }
      }


      public partial class dof_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public dof_args()
        {
        }

        public dof_args DeepCopy()
        {
          var tmp3547 = new dof_args();
          if(__isset.r)
          {
            tmp3547.R = this.R;
          }
          tmp3547.__isset.r = this.__isset.r;
          return tmp3547;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3548 = new TStruct("dof_args");
            await oprot.WriteStructBeginAsync(tmp3548, cancellationToken);
            var tmp3549 = new TField();
            if(__isset.r)
            {
              tmp3549.Name = "r";
              tmp3549.Type = TType.I32;
              tmp3549.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3549, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3550 = new StringBuilder("dof_args(");
          int tmp3551 = 0;
          if(__isset.r)
          {
            if(0 < tmp3551++) { tmp3550.Append(", "); }
            tmp3550.Append("R: ");
            R.ToString(tmp3550);
          }
          tmp3550.Append(')');
          return tmp3550.ToString();
        }
      }


      public partial class dof_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dof_result()
        {
        }

        public dof_result DeepCopy()
        {
          var tmp3552 = new dof_result();
          if(__isset.success)
          {
            tmp3552.Success = this.Success;
          }
          tmp3552.__isset.success = this.__isset.success;
          return tmp3552;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3553 = new TStruct("dof_result");
            await oprot.WriteStructBeginAsync(tmp3553, cancellationToken);
            var tmp3554 = new TField();

            if(this.__isset.success)
            {
              tmp3554.Name = "Success";
              tmp3554.Type = TType.I32;
              tmp3554.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3554, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3555 = new StringBuilder("dof_result(");
          int tmp3556 = 0;
          if(__isset.success)
          {
            if(0 < tmp3556++) { tmp3555.Append(", "); }
            tmp3555.Append("Success: ");
            Success.ToString(tmp3555);
          }
          tmp3555.Append(')');
          return tmp3555.ToString();
        }
      }


      public partial class jointPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.OrientationUnit _unit;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OrientationUnit Unit
        {
          get
          {
            return _unit;
          }
          set
          {
            __isset.unit = true;
            this._unit = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool unit;
        }

        public jointPosition_args()
        {
        }

        public jointPosition_args DeepCopy()
        {
          var tmp3557 = new jointPosition_args();
          if(__isset.r)
          {
            tmp3557.R = this.R;
          }
          tmp3557.__isset.r = this.__isset.r;
          if(__isset.unit)
          {
            tmp3557.Unit = this.Unit;
          }
          tmp3557.__isset.unit = this.__isset.unit;
          return tmp3557;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Unit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3558 = new TStruct("jointPosition_args");
            await oprot.WriteStructBeginAsync(tmp3558, cancellationToken);
            var tmp3559 = new TField();
            if(__isset.r)
            {
              tmp3559.Name = "r";
              tmp3559.Type = TType.I32;
              tmp3559.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3559, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.unit)
            {
              tmp3559.Name = "unit";
              tmp3559.Type = TType.I32;
              tmp3559.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3559, cancellationToken);
              await oprot.WriteI32Async((int)Unit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.unit == other.__isset.unit) && ((!__isset.unit) || (global::System.Object.Equals(Unit, other.Unit))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.unit)
            {
              hashcode = (hashcode * 397) + Unit.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3560 = new StringBuilder("jointPosition_args(");
          int tmp3561 = 0;
          if(__isset.r)
          {
            if(0 < tmp3561++) { tmp3560.Append(", "); }
            tmp3560.Append("R: ");
            R.ToString(tmp3560);
          }
          if(__isset.unit)
          {
            if(0 < tmp3561++) { tmp3560.Append(", "); }
            tmp3560.Append("Unit: ");
            Unit.ToString(tmp3560);
          }
          tmp3560.Append(')');
          return tmp3560.ToString();
        }
      }


      public partial class jointPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointPosition_result()
        {
        }

        public jointPosition_result DeepCopy()
        {
          var tmp3562 = new jointPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3562.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3562.__isset.success = this.__isset.success;
          return tmp3562;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3563 = new TStruct("jointPosition_result");
            await oprot.WriteStructBeginAsync(tmp3563, cancellationToken);
            var tmp3564 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3564.Name = "Success";
                tmp3564.Type = TType.Struct;
                tmp3564.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3564, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3565 = new StringBuilder("jointPosition_result(");
          int tmp3566 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3566++) { tmp3565.Append(", "); }
            tmp3565.Append("Success: ");
            Success.ToString(tmp3565);
          }
          tmp3565.Append(')');
          return tmp3565.ToString();
        }
      }


      public partial class toolTipPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.CoordinateFrame _frame;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame Frame
        {
          get
          {
            return _frame;
          }
          set
          {
            __isset.frame = true;
            this._frame = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool frame;
          public bool tool;
        }

        public toolTipPosition_args()
        {
        }

        public toolTipPosition_args DeepCopy()
        {
          var tmp3567 = new toolTipPosition_args();
          if(__isset.r)
          {
            tmp3567.R = this.R;
          }
          tmp3567.__isset.r = this.__isset.r;
          if((Frame != null) && __isset.frame)
          {
            tmp3567.Frame = (global::Yaskawa.Ext.API.CoordinateFrame)this.Frame.DeepCopy();
          }
          tmp3567.__isset.frame = this.__isset.frame;
          if(__isset.tool)
          {
            tmp3567.Tool = this.Tool;
          }
          tmp3567.__isset.tool = this.__isset.tool;
          return tmp3567;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Frame = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Frame.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3568 = new TStruct("toolTipPosition_args");
            await oprot.WriteStructBeginAsync(tmp3568, cancellationToken);
            var tmp3569 = new TField();
            if(__isset.r)
            {
              tmp3569.Name = "r";
              tmp3569.Type = TType.I32;
              tmp3569.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3569, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Frame != null) && __isset.frame)
            {
              tmp3569.Name = "frame";
              tmp3569.Type = TType.Struct;
              tmp3569.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3569, cancellationToken);
              await Frame.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp3569.Name = "tool";
              tmp3569.Type = TType.I32;
              tmp3569.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3569, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.frame == other.__isset.frame) && ((!__isset.frame) || (global::System.Object.Equals(Frame, other.Frame))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((Frame != null) && __isset.frame)
            {
              hashcode = (hashcode * 397) + Frame.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3570 = new StringBuilder("toolTipPosition_args(");
          int tmp3571 = 0;
          if(__isset.r)
          {
            if(0 < tmp3571++) { tmp3570.Append(", "); }
            tmp3570.Append("R: ");
            R.ToString(tmp3570);
          }
          if((Frame != null) && __isset.frame)
          {
            if(0 < tmp3571++) { tmp3570.Append(", "); }
            tmp3570.Append("Frame: ");
            Frame.ToString(tmp3570);
          }
          if(__isset.tool)
          {
            if(0 < tmp3571++) { tmp3570.Append(", "); }
            tmp3570.Append("Tool: ");
            Tool.ToString(tmp3570);
          }
          tmp3570.Append(')');
          return tmp3570.ToString();
        }
      }


      public partial class toolTipPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public toolTipPosition_result()
        {
        }

        public toolTipPosition_result DeepCopy()
        {
          var tmp3572 = new toolTipPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3572.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3572.__isset.success = this.__isset.success;
          return tmp3572;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3573 = new TStruct("toolTipPosition_result");
            await oprot.WriteStructBeginAsync(tmp3573, cancellationToken);
            var tmp3574 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3574.Name = "Success";
                tmp3574.Type = TType.Struct;
                tmp3574.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3574, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3575 = new StringBuilder("toolTipPosition_result(");
          int tmp3576 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3576++) { tmp3575.Append(", "); }
            tmp3575.Append("Success: ");
            Success.ToString(tmp3575);
          }
          tmp3575.Append(')');
          return tmp3575.ToString();
        }
      }


      public partial class forceLimitingAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingAvailable_args()
        {
        }

        public forceLimitingAvailable_args DeepCopy()
        {
          var tmp3577 = new forceLimitingAvailable_args();
          if(__isset.r)
          {
            tmp3577.R = this.R;
          }
          tmp3577.__isset.r = this.__isset.r;
          return tmp3577;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3578 = new TStruct("forceLimitingAvailable_args");
            await oprot.WriteStructBeginAsync(tmp3578, cancellationToken);
            var tmp3579 = new TField();
            if(__isset.r)
            {
              tmp3579.Name = "r";
              tmp3579.Type = TType.I32;
              tmp3579.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3579, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3580 = new StringBuilder("forceLimitingAvailable_args(");
          int tmp3581 = 0;
          if(__isset.r)
          {
            if(0 < tmp3581++) { tmp3580.Append(", "); }
            tmp3580.Append("R: ");
            R.ToString(tmp3580);
          }
          tmp3580.Append(')');
          return tmp3580.ToString();
        }
      }


      public partial class forceLimitingAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingAvailable_result()
        {
        }

        public forceLimitingAvailable_result DeepCopy()
        {
          var tmp3582 = new forceLimitingAvailable_result();
          if(__isset.success)
          {
            tmp3582.Success = this.Success;
          }
          tmp3582.__isset.success = this.__isset.success;
          return tmp3582;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3583 = new TStruct("forceLimitingAvailable_result");
            await oprot.WriteStructBeginAsync(tmp3583, cancellationToken);
            var tmp3584 = new TField();

            if(this.__isset.success)
            {
              tmp3584.Name = "Success";
              tmp3584.Type = TType.Bool;
              tmp3584.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3584, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3585 = new StringBuilder("forceLimitingAvailable_result(");
          int tmp3586 = 0;
          if(__isset.success)
          {
            if(0 < tmp3586++) { tmp3585.Append(", "); }
            tmp3585.Append("Success: ");
            Success.ToString(tmp3585);
          }
          tmp3585.Append(')');
          return tmp3585.ToString();
        }
      }


      public partial class forceLimitingActive_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingActive_args()
        {
        }

        public forceLimitingActive_args DeepCopy()
        {
          var tmp3587 = new forceLimitingActive_args();
          if(__isset.r)
          {
            tmp3587.R = this.R;
          }
          tmp3587.__isset.r = this.__isset.r;
          return tmp3587;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3588 = new TStruct("forceLimitingActive_args");
            await oprot.WriteStructBeginAsync(tmp3588, cancellationToken);
            var tmp3589 = new TField();
            if(__isset.r)
            {
              tmp3589.Name = "r";
              tmp3589.Type = TType.I32;
              tmp3589.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3589, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3590 = new StringBuilder("forceLimitingActive_args(");
          int tmp3591 = 0;
          if(__isset.r)
          {
            if(0 < tmp3591++) { tmp3590.Append(", "); }
            tmp3590.Append("R: ");
            R.ToString(tmp3590);
          }
          tmp3590.Append(')');
          return tmp3590.ToString();
        }
      }


      public partial class forceLimitingActive_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingActive_result()
        {
        }

        public forceLimitingActive_result DeepCopy()
        {
          var tmp3592 = new forceLimitingActive_result();
          if(__isset.success)
          {
            tmp3592.Success = this.Success;
          }
          tmp3592.__isset.success = this.__isset.success;
          return tmp3592;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3593 = new TStruct("forceLimitingActive_result");
            await oprot.WriteStructBeginAsync(tmp3593, cancellationToken);
            var tmp3594 = new TField();

            if(this.__isset.success)
            {
              tmp3594.Name = "Success";
              tmp3594.Type = TType.Bool;
              tmp3594.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3594, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3595 = new StringBuilder("forceLimitingActive_result(");
          int tmp3596 = 0;
          if(__isset.success)
          {
            if(0 < tmp3596++) { tmp3595.Append(", "); }
            tmp3595.Append("Success: ");
            Success.ToString(tmp3595);
          }
          tmp3595.Append(')');
          return tmp3595.ToString();
        }
      }


      public partial class forceLimitingStopped_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingStopped_args()
        {
        }

        public forceLimitingStopped_args DeepCopy()
        {
          var tmp3597 = new forceLimitingStopped_args();
          if(__isset.r)
          {
            tmp3597.R = this.R;
          }
          tmp3597.__isset.r = this.__isset.r;
          return tmp3597;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3598 = new TStruct("forceLimitingStopped_args");
            await oprot.WriteStructBeginAsync(tmp3598, cancellationToken);
            var tmp3599 = new TField();
            if(__isset.r)
            {
              tmp3599.Name = "r";
              tmp3599.Type = TType.I32;
              tmp3599.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3599, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3600 = new StringBuilder("forceLimitingStopped_args(");
          int tmp3601 = 0;
          if(__isset.r)
          {
            if(0 < tmp3601++) { tmp3600.Append(", "); }
            tmp3600.Append("R: ");
            R.ToString(tmp3600);
          }
          tmp3600.Append(')');
          return tmp3600.ToString();
        }
      }


      public partial class forceLimitingStopped_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingStopped_result()
        {
        }

        public forceLimitingStopped_result DeepCopy()
        {
          var tmp3602 = new forceLimitingStopped_result();
          if(__isset.success)
          {
            tmp3602.Success = this.Success;
          }
          tmp3602.__isset.success = this.__isset.success;
          return tmp3602;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3603 = new TStruct("forceLimitingStopped_result");
            await oprot.WriteStructBeginAsync(tmp3603, cancellationToken);
            var tmp3604 = new TField();

            if(this.__isset.success)
            {
              tmp3604.Name = "Success";
              tmp3604.Type = TType.Bool;
              tmp3604.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3604, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3605 = new StringBuilder("forceLimitingStopped_result(");
          int tmp3606 = 0;
          if(__isset.success)
          {
            if(0 < tmp3606++) { tmp3605.Append(", "); }
            tmp3605.Append("Success: ");
            Success.ToString(tmp3605);
          }
          tmp3605.Append(')');
          return tmp3605.ToString();
        }
      }


      public partial class switchBoxAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public switchBoxAvailable_args()
        {
        }

        public switchBoxAvailable_args DeepCopy()
        {
          var tmp3607 = new switchBoxAvailable_args();
          if(__isset.r)
          {
            tmp3607.R = this.R;
          }
          tmp3607.__isset.r = this.__isset.r;
          return tmp3607;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3608 = new TStruct("switchBoxAvailable_args");
            await oprot.WriteStructBeginAsync(tmp3608, cancellationToken);
            var tmp3609 = new TField();
            if(__isset.r)
            {
              tmp3609.Name = "r";
              tmp3609.Type = TType.I32;
              tmp3609.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3609, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3610 = new StringBuilder("switchBoxAvailable_args(");
          int tmp3611 = 0;
          if(__isset.r)
          {
            if(0 < tmp3611++) { tmp3610.Append(", "); }
            tmp3610.Append("R: ");
            R.ToString(tmp3610);
          }
          tmp3610.Append(')');
          return tmp3610.ToString();
        }
      }


      public partial class switchBoxAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public switchBoxAvailable_result()
        {
        }

        public switchBoxAvailable_result DeepCopy()
        {
          var tmp3612 = new switchBoxAvailable_result();
          if(__isset.success)
          {
            tmp3612.Success = this.Success;
          }
          tmp3612.__isset.success = this.__isset.success;
          return tmp3612;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3613 = new TStruct("switchBoxAvailable_result");
            await oprot.WriteStructBeginAsync(tmp3613, cancellationToken);
            var tmp3614 = new TField();

            if(this.__isset.success)
            {
              tmp3614.Name = "Success";
              tmp3614.Type = TType.Bool;
              tmp3614.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3614, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3615 = new StringBuilder("switchBoxAvailable_result(");
          int tmp3616 = 0;
          if(__isset.success)
          {
            if(0 < tmp3616++) { tmp3615.Append(", "); }
            tmp3615.Append("Success: ");
            Success.ToString(tmp3615);
          }
          tmp3615.Append(')');
          return tmp3615.ToString();
        }
      }


      public partial class activeTool_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public activeTool_args()
        {
        }

        public activeTool_args DeepCopy()
        {
          var tmp3617 = new activeTool_args();
          if(__isset.r)
          {
            tmp3617.R = this.R;
          }
          tmp3617.__isset.r = this.__isset.r;
          return tmp3617;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3618 = new TStruct("activeTool_args");
            await oprot.WriteStructBeginAsync(tmp3618, cancellationToken);
            var tmp3619 = new TField();
            if(__isset.r)
            {
              tmp3619.Name = "r";
              tmp3619.Type = TType.I32;
              tmp3619.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3619, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3620 = new StringBuilder("activeTool_args(");
          int tmp3621 = 0;
          if(__isset.r)
          {
            if(0 < tmp3621++) { tmp3620.Append(", "); }
            tmp3620.Append("R: ");
            R.ToString(tmp3620);
          }
          tmp3620.Append(')');
          return tmp3620.ToString();
        }
      }


      public partial class activeTool_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public activeTool_result()
        {
        }

        public activeTool_result DeepCopy()
        {
          var tmp3622 = new activeTool_result();
          if(__isset.success)
          {
            tmp3622.Success = this.Success;
          }
          tmp3622.__isset.success = this.__isset.success;
          return tmp3622;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3623 = new TStruct("activeTool_result");
            await oprot.WriteStructBeginAsync(tmp3623, cancellationToken);
            var tmp3624 = new TField();

            if(this.__isset.success)
            {
              tmp3624.Name = "Success";
              tmp3624.Type = TType.I32;
              tmp3624.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3624, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3625 = new StringBuilder("activeTool_result(");
          int tmp3626 = 0;
          if(__isset.success)
          {
            if(0 < tmp3626++) { tmp3625.Append(", "); }
            tmp3625.Append("Success: ");
            Success.ToString(tmp3625);
          }
          tmp3625.Append(')');
          return tmp3625.ToString();
        }
      }


      public partial class setActiveTool_args : TBase
      {
        private int _r;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool tool;
        }

        public setActiveTool_args()
        {
        }

        public setActiveTool_args DeepCopy()
        {
          var tmp3627 = new setActiveTool_args();
          if(__isset.r)
          {
            tmp3627.R = this.R;
          }
          tmp3627.__isset.r = this.__isset.r;
          if(__isset.tool)
          {
            tmp3627.Tool = this.Tool;
          }
          tmp3627.__isset.tool = this.__isset.tool;
          return tmp3627;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3628 = new TStruct("setActiveTool_args");
            await oprot.WriteStructBeginAsync(tmp3628, cancellationToken);
            var tmp3629 = new TField();
            if(__isset.r)
            {
              tmp3629.Name = "r";
              tmp3629.Type = TType.I32;
              tmp3629.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3629, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp3629.Name = "tool";
              tmp3629.Type = TType.I32;
              tmp3629.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3629, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3630 = new StringBuilder("setActiveTool_args(");
          int tmp3631 = 0;
          if(__isset.r)
          {
            if(0 < tmp3631++) { tmp3630.Append(", "); }
            tmp3630.Append("R: ");
            R.ToString(tmp3630);
          }
          if(__isset.tool)
          {
            if(0 < tmp3631++) { tmp3630.Append(", "); }
            tmp3630.Append("Tool: ");
            Tool.ToString(tmp3630);
          }
          tmp3630.Append(')');
          return tmp3630.ToString();
        }
      }


      public partial class setActiveTool_result : TBase
      {

        public setActiveTool_result()
        {
        }

        public setActiveTool_result DeepCopy()
        {
          var tmp3632 = new setActiveTool_result();
          return tmp3632;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3633 = new TStruct("setActiveTool_result");
            await oprot.WriteStructBeginAsync(tmp3633, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3634 = new StringBuilder("setActiveTool_result(");
          tmp3634.Append(')');
          return tmp3634.ToString();
        }
      }


      public partial class workHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public workHomePosition_args()
        {
        }

        public workHomePosition_args DeepCopy()
        {
          var tmp3636 = new workHomePosition_args();
          if(__isset.r)
          {
            tmp3636.R = this.R;
          }
          tmp3636.__isset.r = this.__isset.r;
          return tmp3636;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3637 = new TStruct("workHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3637, cancellationToken);
            var tmp3638 = new TField();
            if(__isset.r)
            {
              tmp3638.Name = "r";
              tmp3638.Type = TType.I32;
              tmp3638.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3638, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3639 = new StringBuilder("workHomePosition_args(");
          int tmp3640 = 0;
          if(__isset.r)
          {
            if(0 < tmp3640++) { tmp3639.Append(", "); }
            tmp3639.Append("R: ");
            R.ToString(tmp3639);
          }
          tmp3639.Append(')');
          return tmp3639.ToString();
        }
      }


      public partial class workHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public workHomePosition_result()
        {
        }

        public workHomePosition_result DeepCopy()
        {
          var tmp3641 = new workHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3641.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3641.__isset.success = this.__isset.success;
          return tmp3641;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3642 = new TStruct("workHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3642, cancellationToken);
            var tmp3643 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3643.Name = "Success";
                tmp3643.Type = TType.Struct;
                tmp3643.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3643, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3644 = new StringBuilder("workHomePosition_result(");
          int tmp3645 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3645++) { tmp3644.Append(", "); }
            tmp3644.Append("Success: ");
            Success.ToString(tmp3644);
          }
          tmp3644.Append(')');
          return tmp3644.ToString();
        }
      }


      public partial class setWorkHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setWorkHomePosition_args()
        {
        }

        public setWorkHomePosition_args DeepCopy()
        {
          var tmp3646 = new setWorkHomePosition_args();
          if(__isset.r)
          {
            tmp3646.R = this.R;
          }
          tmp3646.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp3646.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp3646.__isset.p = this.__isset.p;
          return tmp3646;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3647 = new TStruct("setWorkHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3647, cancellationToken);
            var tmp3648 = new TField();
            if(__isset.r)
            {
              tmp3648.Name = "r";
              tmp3648.Type = TType.I32;
              tmp3648.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3648, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp3648.Name = "p";
              tmp3648.Type = TType.Struct;
              tmp3648.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3648, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3649 = new StringBuilder("setWorkHomePosition_args(");
          int tmp3650 = 0;
          if(__isset.r)
          {
            if(0 < tmp3650++) { tmp3649.Append(", "); }
            tmp3649.Append("R: ");
            R.ToString(tmp3649);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp3650++) { tmp3649.Append(", "); }
            tmp3649.Append("P: ");
            P.ToString(tmp3649);
          }
          tmp3649.Append(')');
          return tmp3649.ToString();
        }
      }


      public partial class setWorkHomePosition_result : TBase
      {

        public setWorkHomePosition_result()
        {
        }

        public setWorkHomePosition_result DeepCopy()
        {
          var tmp3651 = new setWorkHomePosition_result();
          return tmp3651;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3652 = new TStruct("setWorkHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3652, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3653 = new StringBuilder("setWorkHomePosition_result(");
          tmp3653.Append(')');
          return tmp3653.ToString();
        }
      }


      public partial class secondHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public secondHomePosition_args()
        {
        }

        public secondHomePosition_args DeepCopy()
        {
          var tmp3655 = new secondHomePosition_args();
          if(__isset.r)
          {
            tmp3655.R = this.R;
          }
          tmp3655.__isset.r = this.__isset.r;
          return tmp3655;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3656 = new TStruct("secondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3656, cancellationToken);
            var tmp3657 = new TField();
            if(__isset.r)
            {
              tmp3657.Name = "r";
              tmp3657.Type = TType.I32;
              tmp3657.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3657, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3658 = new StringBuilder("secondHomePosition_args(");
          int tmp3659 = 0;
          if(__isset.r)
          {
            if(0 < tmp3659++) { tmp3658.Append(", "); }
            tmp3658.Append("R: ");
            R.ToString(tmp3658);
          }
          tmp3658.Append(')');
          return tmp3658.ToString();
        }
      }


      public partial class secondHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public secondHomePosition_result()
        {
        }

        public secondHomePosition_result DeepCopy()
        {
          var tmp3660 = new secondHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3660.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3660.__isset.success = this.__isset.success;
          return tmp3660;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3661 = new TStruct("secondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3661, cancellationToken);
            var tmp3662 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3662.Name = "Success";
                tmp3662.Type = TType.Struct;
                tmp3662.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3662, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3663 = new StringBuilder("secondHomePosition_result(");
          int tmp3664 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3664++) { tmp3663.Append(", "); }
            tmp3663.Append("Success: ");
            Success.ToString(tmp3663);
          }
          tmp3663.Append(')');
          return tmp3663.ToString();
        }
      }


      public partial class setSecondHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setSecondHomePosition_args()
        {
        }

        public setSecondHomePosition_args DeepCopy()
        {
          var tmp3665 = new setSecondHomePosition_args();
          if(__isset.r)
          {
            tmp3665.R = this.R;
          }
          tmp3665.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp3665.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp3665.__isset.p = this.__isset.p;
          return tmp3665;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3666 = new TStruct("setSecondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3666, cancellationToken);
            var tmp3667 = new TField();
            if(__isset.r)
            {
              tmp3667.Name = "r";
              tmp3667.Type = TType.I32;
              tmp3667.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3667, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp3667.Name = "p";
              tmp3667.Type = TType.Struct;
              tmp3667.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3667, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3668 = new StringBuilder("setSecondHomePosition_args(");
          int tmp3669 = 0;
          if(__isset.r)
          {
            if(0 < tmp3669++) { tmp3668.Append(", "); }
            tmp3668.Append("R: ");
            R.ToString(tmp3668);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp3669++) { tmp3668.Append(", "); }
            tmp3668.Append("P: ");
            P.ToString(tmp3668);
          }
          tmp3668.Append(')');
          return tmp3668.ToString();
        }
      }


      public partial class setSecondHomePosition_result : TBase
      {

        public setSecondHomePosition_result()
        {
        }

        public setSecondHomePosition_result DeepCopy()
        {
          var tmp3670 = new setSecondHomePosition_result();
          return tmp3670;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3671 = new TStruct("setSecondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3671, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3672 = new StringBuilder("setSecondHomePosition_result(");
          tmp3672.Append(')');
          return tmp3672.ToString();
        }
      }


      public partial class maximumLinearSpeed_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public maximumLinearSpeed_args()
        {
        }

        public maximumLinearSpeed_args DeepCopy()
        {
          var tmp3674 = new maximumLinearSpeed_args();
          if(__isset.r)
          {
            tmp3674.R = this.R;
          }
          tmp3674.__isset.r = this.__isset.r;
          return tmp3674;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3675 = new TStruct("maximumLinearSpeed_args");
            await oprot.WriteStructBeginAsync(tmp3675, cancellationToken);
            var tmp3676 = new TField();
            if(__isset.r)
            {
              tmp3676.Name = "r";
              tmp3676.Type = TType.I32;
              tmp3676.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3676, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3677 = new StringBuilder("maximumLinearSpeed_args(");
          int tmp3678 = 0;
          if(__isset.r)
          {
            if(0 < tmp3678++) { tmp3677.Append(", "); }
            tmp3677.Append("R: ");
            R.ToString(tmp3677);
          }
          tmp3677.Append(')');
          return tmp3677.ToString();
        }
      }


      public partial class maximumLinearSpeed_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public maximumLinearSpeed_result()
        {
        }

        public maximumLinearSpeed_result DeepCopy()
        {
          var tmp3679 = new maximumLinearSpeed_result();
          if(__isset.success)
          {
            tmp3679.Success = this.Success;
          }
          tmp3679.__isset.success = this.__isset.success;
          return tmp3679;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3680 = new TStruct("maximumLinearSpeed_result");
            await oprot.WriteStructBeginAsync(tmp3680, cancellationToken);
            var tmp3681 = new TField();

            if(this.__isset.success)
            {
              tmp3681.Name = "Success";
              tmp3681.Type = TType.Double;
              tmp3681.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3681, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3682 = new StringBuilder("maximumLinearSpeed_result(");
          int tmp3683 = 0;
          if(__isset.success)
          {
            if(0 < tmp3683++) { tmp3682.Append(", "); }
            tmp3682.Append("Success: ");
            Success.ToString(tmp3682);
          }
          tmp3682.Append(')');
          return tmp3682.ToString();
        }
      }

    }

  }
}
