/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Robot
  {
    public interface IAsync
    {
      /// <summary>
      /// The model string of this robot
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Number of degrees-of-freedom / axes
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint labels for each axis of a robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint types of each axis for the specified robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current position of the robot in joint coordinate frame (i.e. axis angles)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="unit"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default);

      /// <summary>
      /// Coordinates of the ToolTip (TCP) of of the specified tool
      /// in the given coordinate frame (using active tool if none specified)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="frame"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Does this robot support force limiting? (collaborative robot?)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is the robot stopped due to an over-limit event?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is an end-of-arm switch box installed?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Index of the currently active tool
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the currently active tool
      /// </summary>
      /// <param name="r"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get a robot's maximum linear speed
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default)
      {
        await send_model(r, cancellationToken);
        return await recv_model(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_model(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("model", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3648 = new InternalStructs.model_args() {
          R = r,
        };
        
        await tmp3648.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_model(CancellationToken cancellationToken = default)
      {
        
        var tmp3649 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3649.Type == TMessageType.Exception)
        {
          var tmp3650 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3650;
        }

        var tmp3651 = new InternalStructs.model_result();
        await tmp3651.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3651.__isset.success)
        {
          return tmp3651.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "model failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default)
      {
        await send_dof(r, cancellationToken);
        return await recv_dof(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dof(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3652 = new InternalStructs.dof_args() {
          R = r,
        };
        
        await tmp3652.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_dof(CancellationToken cancellationToken = default)
      {
        
        var tmp3653 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3653.Type == TMessageType.Exception)
        {
          var tmp3654 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3654;
        }

        var tmp3655 = new InternalStructs.dof_result();
        await tmp3655.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3655.__isset.success)
        {
          return tmp3655.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dof failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await send_jointLabels(r, cancellationToken);
        return await recv_jointLabels(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3656 = new InternalStructs.jointLabels_args() {
          R = r,
        };
        
        await tmp3656.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jointLabels(CancellationToken cancellationToken = default)
      {
        
        var tmp3657 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3657.Type == TMessageType.Exception)
        {
          var tmp3658 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3658;
        }

        var tmp3659 = new InternalStructs.jointLabels_result();
        await tmp3659.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3659.__isset.success)
        {
          return tmp3659.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointLabels failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await send_jointTypes(r, cancellationToken);
        return await recv_jointTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3660 = new InternalStructs.jointTypes_args() {
          R = r,
        };
        
        await tmp3660.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> recv_jointTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp3661 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3661.Type == TMessageType.Exception)
        {
          var tmp3662 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3662;
        }

        var tmp3663 = new InternalStructs.jointTypes_result();
        await tmp3663.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3663.__isset.success)
        {
          return tmp3663.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await send_jointPosition(r, unit, cancellationToken);
        return await recv_jointPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3664 = new InternalStructs.jointPosition_args() {
          R = r,
          Unit = unit,
        };
        
        await tmp3664.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_jointPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3665 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3665.Type == TMessageType.Exception)
        {
          var tmp3666 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3666;
        }

        var tmp3667 = new InternalStructs.jointPosition_result();
        await tmp3667.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3667.__isset.success)
        {
          return tmp3667.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await send_toolTipPosition(r, frame, tool, cancellationToken);
        return await recv_toolTipPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3668 = new InternalStructs.toolTipPosition_args() {
          R = r,
          Frame = frame,
          Tool = tool,
        };
        
        await tmp3668.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_toolTipPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3669 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3669.Type == TMessageType.Exception)
        {
          var tmp3670 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3670;
        }

        var tmp3671 = new InternalStructs.toolTipPosition_result();
        await tmp3671.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3671.__isset.success)
        {
          return tmp3671.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "toolTipPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingAvailable(r, cancellationToken);
        return await recv_forceLimitingAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3672 = new InternalStructs.forceLimitingAvailable_args() {
          R = r,
        };
        
        await tmp3672.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3673 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3673.Type == TMessageType.Exception)
        {
          var tmp3674 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3674;
        }

        var tmp3675 = new InternalStructs.forceLimitingAvailable_result();
        await tmp3675.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3675.__isset.success)
        {
          return tmp3675.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingActive(r, cancellationToken);
        return await recv_forceLimitingActive(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3676 = new InternalStructs.forceLimitingActive_args() {
          R = r,
        };
        
        await tmp3676.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingActive(CancellationToken cancellationToken = default)
      {
        
        var tmp3677 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3677.Type == TMessageType.Exception)
        {
          var tmp3678 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3678;
        }

        var tmp3679 = new InternalStructs.forceLimitingActive_result();
        await tmp3679.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3679.__isset.success)
        {
          return tmp3679.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingActive failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingStopped(r, cancellationToken);
        return await recv_forceLimitingStopped(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3680 = new InternalStructs.forceLimitingStopped_args() {
          R = r,
        };
        
        await tmp3680.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingStopped(CancellationToken cancellationToken = default)
      {
        
        var tmp3681 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3681.Type == TMessageType.Exception)
        {
          var tmp3682 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3682;
        }

        var tmp3683 = new InternalStructs.forceLimitingStopped_result();
        await tmp3683.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3683.__isset.success)
        {
          return tmp3683.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingStopped failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_switchBoxAvailable(r, cancellationToken);
        return await recv_switchBoxAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3684 = new InternalStructs.switchBoxAvailable_args() {
          R = r,
        };
        
        await tmp3684.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_switchBoxAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3685 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3685.Type == TMessageType.Exception)
        {
          var tmp3686 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3686;
        }

        var tmp3687 = new InternalStructs.switchBoxAvailable_result();
        await tmp3687.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3687.__isset.success)
        {
          return tmp3687.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "switchBoxAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default)
      {
        await send_activeTool(r, cancellationToken);
        return await recv_activeTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_activeTool(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3688 = new InternalStructs.activeTool_args() {
          R = r,
        };
        
        await tmp3688.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_activeTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3689 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3689.Type == TMessageType.Exception)
        {
          var tmp3690 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3690;
        }

        var tmp3691 = new InternalStructs.activeTool_result();
        await tmp3691.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3691.__isset.success)
        {
          return tmp3691.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeTool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await send_setActiveTool(r, tool, cancellationToken);
        await recv_setActiveTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3692 = new InternalStructs.setActiveTool_args() {
          R = r,
          Tool = tool,
        };
        
        await tmp3692.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setActiveTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3693 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3693.Type == TMessageType.Exception)
        {
          var tmp3694 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3694;
        }

        var tmp3695 = new InternalStructs.setActiveTool_result();
        await tmp3695.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_workHomePosition(r, cancellationToken);
        return await recv_workHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3696 = new InternalStructs.workHomePosition_args() {
          R = r,
        };
        
        await tmp3696.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_workHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3697 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3697.Type == TMessageType.Exception)
        {
          var tmp3698 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3698;
        }

        var tmp3699 = new InternalStructs.workHomePosition_result();
        await tmp3699.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3699.__isset.success)
        {
          return tmp3699.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "workHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setWorkHomePosition(r, p, cancellationToken);
        await recv_setWorkHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3700 = new InternalStructs.setWorkHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3700.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setWorkHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3701 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3701.Type == TMessageType.Exception)
        {
          var tmp3702 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3702;
        }

        var tmp3703 = new InternalStructs.setWorkHomePosition_result();
        await tmp3703.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_secondHomePosition(r, cancellationToken);
        return await recv_secondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3704 = new InternalStructs.secondHomePosition_args() {
          R = r,
        };
        
        await tmp3704.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_secondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3705 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3705.Type == TMessageType.Exception)
        {
          var tmp3706 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3706;
        }

        var tmp3707 = new InternalStructs.secondHomePosition_result();
        await tmp3707.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3707.__isset.success)
        {
          return tmp3707.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "secondHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setSecondHomePosition(r, p, cancellationToken);
        await recv_setSecondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3708 = new InternalStructs.setSecondHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3708.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setSecondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3709 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3709.Type == TMessageType.Exception)
        {
          var tmp3710 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3710;
        }

        var tmp3711 = new InternalStructs.setSecondHomePosition_result();
        await tmp3711.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await send_maximumLinearSpeed(r, cancellationToken);
        return await recv_maximumLinearSpeed(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3712 = new InternalStructs.maximumLinearSpeed_args() {
          R = r,
        };
        
        await tmp3712.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_maximumLinearSpeed(CancellationToken cancellationToken = default)
      {
        
        var tmp3713 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3713.Type == TMessageType.Exception)
        {
          var tmp3714 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3714;
        }

        var tmp3715 = new InternalStructs.maximumLinearSpeed_result();
        await tmp3715.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3715.__isset.success)
        {
          return tmp3715.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "maximumLinearSpeed failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["model"] = model_ProcessAsync;
        processMap_["dof"] = dof_ProcessAsync;
        processMap_["jointLabels"] = jointLabels_ProcessAsync;
        processMap_["jointTypes"] = jointTypes_ProcessAsync;
        processMap_["jointPosition"] = jointPosition_ProcessAsync;
        processMap_["toolTipPosition"] = toolTipPosition_ProcessAsync;
        processMap_["forceLimitingAvailable"] = forceLimitingAvailable_ProcessAsync;
        processMap_["forceLimitingActive"] = forceLimitingActive_ProcessAsync;
        processMap_["forceLimitingStopped"] = forceLimitingStopped_ProcessAsync;
        processMap_["switchBoxAvailable"] = switchBoxAvailable_ProcessAsync;
        processMap_["activeTool"] = activeTool_ProcessAsync;
        processMap_["setActiveTool"] = setActiveTool_ProcessAsync;
        processMap_["workHomePosition"] = workHomePosition_ProcessAsync;
        processMap_["setWorkHomePosition"] = setWorkHomePosition_ProcessAsync;
        processMap_["secondHomePosition"] = secondHomePosition_ProcessAsync;
        processMap_["setSecondHomePosition"] = setSecondHomePosition_ProcessAsync;
        processMap_["maximumLinearSpeed"] = maximumLinearSpeed_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task model_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3716 = new InternalStructs.model_args();
        await tmp3716.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3717 = new InternalStructs.model_result();
        try
        {
          tmp3717.Success = await _iAsync.model(tmp3716.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3717.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3718)
        {
          var tmp3719 = $"Error occurred in {GetType().FullName}: {tmp3718.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3718, tmp3719);
          else
            Console.Error.WriteLine(tmp3719);
          var tmp3720 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Exception, seqid), cancellationToken);
          await tmp3720.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dof_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3721 = new InternalStructs.dof_args();
        await tmp3721.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3722 = new InternalStructs.dof_result();
        try
        {
          tmp3722.Success = await _iAsync.dof(tmp3721.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3722.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3723)
        {
          var tmp3724 = $"Error occurred in {GetType().FullName}: {tmp3723.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3723, tmp3724);
          else
            Console.Error.WriteLine(tmp3724);
          var tmp3725 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Exception, seqid), cancellationToken);
          await tmp3725.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointLabels_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3726 = new InternalStructs.jointLabels_args();
        await tmp3726.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3727 = new InternalStructs.jointLabels_result();
        try
        {
          tmp3727.Success = await _iAsync.jointLabels(tmp3726.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3727.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3728)
        {
          var tmp3729 = $"Error occurred in {GetType().FullName}: {tmp3728.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3728, tmp3729);
          else
            Console.Error.WriteLine(tmp3729);
          var tmp3730 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Exception, seqid), cancellationToken);
          await tmp3730.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3731 = new InternalStructs.jointTypes_args();
        await tmp3731.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3732 = new InternalStructs.jointTypes_result();
        try
        {
          tmp3732.Success = await _iAsync.jointTypes(tmp3731.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3732.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3733)
        {
          var tmp3734 = $"Error occurred in {GetType().FullName}: {tmp3733.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3733, tmp3734);
          else
            Console.Error.WriteLine(tmp3734);
          var tmp3735 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp3735.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3736 = new InternalStructs.jointPosition_args();
        await tmp3736.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3737 = new InternalStructs.jointPosition_result();
        try
        {
          tmp3737.Success = await _iAsync.jointPosition(tmp3736.R, tmp3736.Unit, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3737.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3738)
        {
          var tmp3739 = $"Error occurred in {GetType().FullName}: {tmp3738.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3738, tmp3739);
          else
            Console.Error.WriteLine(tmp3739);
          var tmp3740 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3740.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task toolTipPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3741 = new InternalStructs.toolTipPosition_args();
        await tmp3741.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3742 = new InternalStructs.toolTipPosition_result();
        try
        {
          tmp3742.Success = await _iAsync.toolTipPosition(tmp3741.R, tmp3741.Frame, tmp3741.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3742.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3743)
        {
          var tmp3744 = $"Error occurred in {GetType().FullName}: {tmp3743.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3743, tmp3744);
          else
            Console.Error.WriteLine(tmp3744);
          var tmp3745 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3745.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3746 = new InternalStructs.forceLimitingAvailable_args();
        await tmp3746.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3747 = new InternalStructs.forceLimitingAvailable_result();
        try
        {
          tmp3747.Success = await _iAsync.forceLimitingAvailable(tmp3746.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3747.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3748)
        {
          var tmp3749 = $"Error occurred in {GetType().FullName}: {tmp3748.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3748, tmp3749);
          else
            Console.Error.WriteLine(tmp3749);
          var tmp3750 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3750.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingActive_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3751 = new InternalStructs.forceLimitingActive_args();
        await tmp3751.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3752 = new InternalStructs.forceLimitingActive_result();
        try
        {
          tmp3752.Success = await _iAsync.forceLimitingActive(tmp3751.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3752.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3753)
        {
          var tmp3754 = $"Error occurred in {GetType().FullName}: {tmp3753.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3753, tmp3754);
          else
            Console.Error.WriteLine(tmp3754);
          var tmp3755 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Exception, seqid), cancellationToken);
          await tmp3755.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingStopped_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3756 = new InternalStructs.forceLimitingStopped_args();
        await tmp3756.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3757 = new InternalStructs.forceLimitingStopped_result();
        try
        {
          tmp3757.Success = await _iAsync.forceLimitingStopped(tmp3756.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3757.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3758)
        {
          var tmp3759 = $"Error occurred in {GetType().FullName}: {tmp3758.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3758, tmp3759);
          else
            Console.Error.WriteLine(tmp3759);
          var tmp3760 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Exception, seqid), cancellationToken);
          await tmp3760.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task switchBoxAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3761 = new InternalStructs.switchBoxAvailable_args();
        await tmp3761.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3762 = new InternalStructs.switchBoxAvailable_result();
        try
        {
          tmp3762.Success = await _iAsync.switchBoxAvailable(tmp3761.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3762.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3763)
        {
          var tmp3764 = $"Error occurred in {GetType().FullName}: {tmp3763.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3763, tmp3764);
          else
            Console.Error.WriteLine(tmp3764);
          var tmp3765 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3765.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task activeTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3766 = new InternalStructs.activeTool_args();
        await tmp3766.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3767 = new InternalStructs.activeTool_result();
        try
        {
          tmp3767.Success = await _iAsync.activeTool(tmp3766.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3767.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3768)
        {
          var tmp3769 = $"Error occurred in {GetType().FullName}: {tmp3768.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3768, tmp3769);
          else
            Console.Error.WriteLine(tmp3769);
          var tmp3770 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp3770.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setActiveTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3771 = new InternalStructs.setActiveTool_args();
        await tmp3771.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3772 = new InternalStructs.setActiveTool_result();
        try
        {
          await _iAsync.setActiveTool(tmp3771.R, tmp3771.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3772.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3773)
        {
          var tmp3774 = $"Error occurred in {GetType().FullName}: {tmp3773.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3773, tmp3774);
          else
            Console.Error.WriteLine(tmp3774);
          var tmp3775 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp3775.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task workHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3776 = new InternalStructs.workHomePosition_args();
        await tmp3776.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3777 = new InternalStructs.workHomePosition_result();
        try
        {
          tmp3777.Success = await _iAsync.workHomePosition(tmp3776.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3777.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3778)
        {
          var tmp3779 = $"Error occurred in {GetType().FullName}: {tmp3778.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3778, tmp3779);
          else
            Console.Error.WriteLine(tmp3779);
          var tmp3780 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3780.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3781 = new InternalStructs.setWorkHomePosition_args();
        await tmp3781.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3782 = new InternalStructs.setWorkHomePosition_result();
        try
        {
          await _iAsync.setWorkHomePosition(tmp3781.R, tmp3781.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3782.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3783)
        {
          var tmp3784 = $"Error occurred in {GetType().FullName}: {tmp3783.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3783, tmp3784);
          else
            Console.Error.WriteLine(tmp3784);
          var tmp3785 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3785.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task secondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3786 = new InternalStructs.secondHomePosition_args();
        await tmp3786.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3787 = new InternalStructs.secondHomePosition_result();
        try
        {
          tmp3787.Success = await _iAsync.secondHomePosition(tmp3786.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3787.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3788)
        {
          var tmp3789 = $"Error occurred in {GetType().FullName}: {tmp3788.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3788, tmp3789);
          else
            Console.Error.WriteLine(tmp3789);
          var tmp3790 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3790.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3791 = new InternalStructs.setSecondHomePosition_args();
        await tmp3791.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3792 = new InternalStructs.setSecondHomePosition_result();
        try
        {
          await _iAsync.setSecondHomePosition(tmp3791.R, tmp3791.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3792.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3793)
        {
          var tmp3794 = $"Error occurred in {GetType().FullName}: {tmp3793.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3793, tmp3794);
          else
            Console.Error.WriteLine(tmp3794);
          var tmp3795 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3795.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task maximumLinearSpeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3796 = new InternalStructs.maximumLinearSpeed_args();
        await tmp3796.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3797 = new InternalStructs.maximumLinearSpeed_result();
        try
        {
          tmp3797.Success = await _iAsync.maximumLinearSpeed(tmp3796.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3797.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3798)
        {
          var tmp3799 = $"Error occurred in {GetType().FullName}: {tmp3798.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3798, tmp3799);
          else
            Console.Error.WriteLine(tmp3799);
          var tmp3800 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Exception, seqid), cancellationToken);
          await tmp3800.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class model_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public model_args()
        {
        }

        public model_args DeepCopy()
        {
          var tmp3801 = new model_args();
          if(__isset.r)
          {
            tmp3801.R = this.R;
          }
          tmp3801.__isset.r = this.__isset.r;
          return tmp3801;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3802 = new TStruct("model_args");
            await oprot.WriteStructBeginAsync(tmp3802, cancellationToken);
            var tmp3803 = new TField();
            if(__isset.r)
            {
              tmp3803.Name = "r";
              tmp3803.Type = TType.I32;
              tmp3803.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3803, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3804 = new StringBuilder("model_args(");
          int tmp3805 = 0;
          if(__isset.r)
          {
            if(0 < tmp3805++) { tmp3804.Append(", "); }
            tmp3804.Append("R: ");
            R.ToString(tmp3804);
          }
          tmp3804.Append(')');
          return tmp3804.ToString();
        }
      }


      public partial class model_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public model_result()
        {
        }

        public model_result DeepCopy()
        {
          var tmp3806 = new model_result();
          if((Success != null) && __isset.success)
          {
            tmp3806.Success = this.Success;
          }
          tmp3806.__isset.success = this.__isset.success;
          return tmp3806;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3807 = new TStruct("model_result");
            await oprot.WriteStructBeginAsync(tmp3807, cancellationToken);
            var tmp3808 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3808.Name = "Success";
                tmp3808.Type = TType.String;
                tmp3808.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3808, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3809 = new StringBuilder("model_result(");
          int tmp3810 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3810++) { tmp3809.Append(", "); }
            tmp3809.Append("Success: ");
            Success.ToString(tmp3809);
          }
          tmp3809.Append(')');
          return tmp3809.ToString();
        }
      }


      public partial class dof_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public dof_args()
        {
        }

        public dof_args DeepCopy()
        {
          var tmp3811 = new dof_args();
          if(__isset.r)
          {
            tmp3811.R = this.R;
          }
          tmp3811.__isset.r = this.__isset.r;
          return tmp3811;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3812 = new TStruct("dof_args");
            await oprot.WriteStructBeginAsync(tmp3812, cancellationToken);
            var tmp3813 = new TField();
            if(__isset.r)
            {
              tmp3813.Name = "r";
              tmp3813.Type = TType.I32;
              tmp3813.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3813, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3814 = new StringBuilder("dof_args(");
          int tmp3815 = 0;
          if(__isset.r)
          {
            if(0 < tmp3815++) { tmp3814.Append(", "); }
            tmp3814.Append("R: ");
            R.ToString(tmp3814);
          }
          tmp3814.Append(')');
          return tmp3814.ToString();
        }
      }


      public partial class dof_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dof_result()
        {
        }

        public dof_result DeepCopy()
        {
          var tmp3816 = new dof_result();
          if(__isset.success)
          {
            tmp3816.Success = this.Success;
          }
          tmp3816.__isset.success = this.__isset.success;
          return tmp3816;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3817 = new TStruct("dof_result");
            await oprot.WriteStructBeginAsync(tmp3817, cancellationToken);
            var tmp3818 = new TField();

            if(this.__isset.success)
            {
              tmp3818.Name = "Success";
              tmp3818.Type = TType.I32;
              tmp3818.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3818, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3819 = new StringBuilder("dof_result(");
          int tmp3820 = 0;
          if(__isset.success)
          {
            if(0 < tmp3820++) { tmp3819.Append(", "); }
            tmp3819.Append("Success: ");
            Success.ToString(tmp3819);
          }
          tmp3819.Append(')');
          return tmp3819.ToString();
        }
      }


      public partial class jointLabels_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointLabels_args()
        {
        }

        public jointLabels_args DeepCopy()
        {
          var tmp3821 = new jointLabels_args();
          if(__isset.r)
          {
            tmp3821.R = this.R;
          }
          tmp3821.__isset.r = this.__isset.r;
          return tmp3821;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3822 = new TStruct("jointLabels_args");
            await oprot.WriteStructBeginAsync(tmp3822, cancellationToken);
            var tmp3823 = new TField();
            if(__isset.r)
            {
              tmp3823.Name = "r";
              tmp3823.Type = TType.I32;
              tmp3823.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3823, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3824 = new StringBuilder("jointLabels_args(");
          int tmp3825 = 0;
          if(__isset.r)
          {
            if(0 < tmp3825++) { tmp3824.Append(", "); }
            tmp3824.Append("R: ");
            R.ToString(tmp3824);
          }
          tmp3824.Append(')');
          return tmp3824.ToString();
        }
      }


      public partial class jointLabels_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointLabels_result()
        {
        }

        public jointLabels_result DeepCopy()
        {
          var tmp3826 = new jointLabels_result();
          if((Success != null) && __isset.success)
          {
            tmp3826.Success = this.Success.DeepCopy();
          }
          tmp3826.__isset.success = this.__isset.success;
          return tmp3826;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3827 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list3827.Count);
                      for(int _i3828 = 0; _i3828 < _list3827.Count; ++_i3828)
                      {
                        string _elem3829;
                        _elem3829 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem3829);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3830 = new TStruct("jointLabels_result");
            await oprot.WriteStructBeginAsync(tmp3830, cancellationToken);
            var tmp3831 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3831.Name = "Success";
                tmp3831.Type = TType.List;
                tmp3831.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3831, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter3832 in Success)
                {
                  await oprot.WriteStringAsync(_iter3832, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3833 = new StringBuilder("jointLabels_result(");
          int tmp3834 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3834++) { tmp3833.Append(", "); }
            tmp3833.Append("Success: ");
            Success.ToString(tmp3833);
          }
          tmp3833.Append(')');
          return tmp3833.ToString();
        }
      }


      public partial class jointTypes_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointTypes_args()
        {
        }

        public jointTypes_args DeepCopy()
        {
          var tmp3835 = new jointTypes_args();
          if(__isset.r)
          {
            tmp3835.R = this.R;
          }
          tmp3835.__isset.r = this.__isset.r;
          return tmp3835;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3836 = new TStruct("jointTypes_args");
            await oprot.WriteStructBeginAsync(tmp3836, cancellationToken);
            var tmp3837 = new TField();
            if(__isset.r)
            {
              tmp3837.Name = "r";
              tmp3837.Type = TType.I32;
              tmp3837.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3837, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3838 = new StringBuilder("jointTypes_args(");
          int tmp3839 = 0;
          if(__isset.r)
          {
            if(0 < tmp3839++) { tmp3838.Append(", "); }
            tmp3838.Append("R: ");
            R.ToString(tmp3838);
          }
          tmp3838.Append(')');
          return tmp3838.ToString();
        }
      }


      public partial class jointTypes_result : TBase
      {
        private List<global::Yaskawa.Ext.API.JointType> _success;

        public List<global::Yaskawa.Ext.API.JointType> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointTypes_result()
        {
        }

        public jointTypes_result DeepCopy()
        {
          var tmp3840 = new jointTypes_result();
          if((Success != null) && __isset.success)
          {
            tmp3840.Success = this.Success.DeepCopy();
          }
          tmp3840.__isset.success = this.__isset.success;
          return tmp3840;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3841 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.JointType>(_list3841.Count);
                      for(int _i3842 = 0; _i3842 < _list3841.Count; ++_i3842)
                      {
                        global::Yaskawa.Ext.API.JointType _elem3843;
                        _elem3843 = (global::Yaskawa.Ext.API.JointType)await iprot.ReadI32Async(cancellationToken);
                        Success.Add(_elem3843);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3844 = new TStruct("jointTypes_result");
            await oprot.WriteStructBeginAsync(tmp3844, cancellationToken);
            var tmp3845 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3845.Name = "Success";
                tmp3845.Type = TType.List;
                tmp3845.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3845, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.I32, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.JointType _iter3846 in Success)
                {
                  await oprot.WriteI32Async((int)_iter3846, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3847 = new StringBuilder("jointTypes_result(");
          int tmp3848 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3848++) { tmp3847.Append(", "); }
            tmp3847.Append("Success: ");
            Success.ToString(tmp3847);
          }
          tmp3847.Append(')');
          return tmp3847.ToString();
        }
      }


      public partial class jointPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.OrientationUnit _unit;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OrientationUnit Unit
        {
          get
          {
            return _unit;
          }
          set
          {
            __isset.unit = true;
            this._unit = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool unit;
        }

        public jointPosition_args()
        {
        }

        public jointPosition_args DeepCopy()
        {
          var tmp3849 = new jointPosition_args();
          if(__isset.r)
          {
            tmp3849.R = this.R;
          }
          tmp3849.__isset.r = this.__isset.r;
          if(__isset.unit)
          {
            tmp3849.Unit = this.Unit;
          }
          tmp3849.__isset.unit = this.__isset.unit;
          return tmp3849;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Unit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3850 = new TStruct("jointPosition_args");
            await oprot.WriteStructBeginAsync(tmp3850, cancellationToken);
            var tmp3851 = new TField();
            if(__isset.r)
            {
              tmp3851.Name = "r";
              tmp3851.Type = TType.I32;
              tmp3851.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3851, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.unit)
            {
              tmp3851.Name = "unit";
              tmp3851.Type = TType.I32;
              tmp3851.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3851, cancellationToken);
              await oprot.WriteI32Async((int)Unit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.unit == other.__isset.unit) && ((!__isset.unit) || (global::System.Object.Equals(Unit, other.Unit))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.unit)
            {
              hashcode = (hashcode * 397) + Unit.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3852 = new StringBuilder("jointPosition_args(");
          int tmp3853 = 0;
          if(__isset.r)
          {
            if(0 < tmp3853++) { tmp3852.Append(", "); }
            tmp3852.Append("R: ");
            R.ToString(tmp3852);
          }
          if(__isset.unit)
          {
            if(0 < tmp3853++) { tmp3852.Append(", "); }
            tmp3852.Append("Unit: ");
            Unit.ToString(tmp3852);
          }
          tmp3852.Append(')');
          return tmp3852.ToString();
        }
      }


      public partial class jointPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointPosition_result()
        {
        }

        public jointPosition_result DeepCopy()
        {
          var tmp3854 = new jointPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3854.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3854.__isset.success = this.__isset.success;
          return tmp3854;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3855 = new TStruct("jointPosition_result");
            await oprot.WriteStructBeginAsync(tmp3855, cancellationToken);
            var tmp3856 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3856.Name = "Success";
                tmp3856.Type = TType.Struct;
                tmp3856.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3856, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3857 = new StringBuilder("jointPosition_result(");
          int tmp3858 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3858++) { tmp3857.Append(", "); }
            tmp3857.Append("Success: ");
            Success.ToString(tmp3857);
          }
          tmp3857.Append(')');
          return tmp3857.ToString();
        }
      }


      public partial class toolTipPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.CoordinateFrame _frame;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame Frame
        {
          get
          {
            return _frame;
          }
          set
          {
            __isset.frame = true;
            this._frame = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool frame;
          public bool tool;
        }

        public toolTipPosition_args()
        {
        }

        public toolTipPosition_args DeepCopy()
        {
          var tmp3859 = new toolTipPosition_args();
          if(__isset.r)
          {
            tmp3859.R = this.R;
          }
          tmp3859.__isset.r = this.__isset.r;
          if((Frame != null) && __isset.frame)
          {
            tmp3859.Frame = (global::Yaskawa.Ext.API.CoordinateFrame)this.Frame.DeepCopy();
          }
          tmp3859.__isset.frame = this.__isset.frame;
          if(__isset.tool)
          {
            tmp3859.Tool = this.Tool;
          }
          tmp3859.__isset.tool = this.__isset.tool;
          return tmp3859;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Frame = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Frame.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3860 = new TStruct("toolTipPosition_args");
            await oprot.WriteStructBeginAsync(tmp3860, cancellationToken);
            var tmp3861 = new TField();
            if(__isset.r)
            {
              tmp3861.Name = "r";
              tmp3861.Type = TType.I32;
              tmp3861.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3861, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Frame != null) && __isset.frame)
            {
              tmp3861.Name = "frame";
              tmp3861.Type = TType.Struct;
              tmp3861.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3861, cancellationToken);
              await Frame.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp3861.Name = "tool";
              tmp3861.Type = TType.I32;
              tmp3861.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3861, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.frame == other.__isset.frame) && ((!__isset.frame) || (global::System.Object.Equals(Frame, other.Frame))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((Frame != null) && __isset.frame)
            {
              hashcode = (hashcode * 397) + Frame.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3862 = new StringBuilder("toolTipPosition_args(");
          int tmp3863 = 0;
          if(__isset.r)
          {
            if(0 < tmp3863++) { tmp3862.Append(", "); }
            tmp3862.Append("R: ");
            R.ToString(tmp3862);
          }
          if((Frame != null) && __isset.frame)
          {
            if(0 < tmp3863++) { tmp3862.Append(", "); }
            tmp3862.Append("Frame: ");
            Frame.ToString(tmp3862);
          }
          if(__isset.tool)
          {
            if(0 < tmp3863++) { tmp3862.Append(", "); }
            tmp3862.Append("Tool: ");
            Tool.ToString(tmp3862);
          }
          tmp3862.Append(')');
          return tmp3862.ToString();
        }
      }


      public partial class toolTipPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public toolTipPosition_result()
        {
        }

        public toolTipPosition_result DeepCopy()
        {
          var tmp3864 = new toolTipPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3864.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3864.__isset.success = this.__isset.success;
          return tmp3864;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3865 = new TStruct("toolTipPosition_result");
            await oprot.WriteStructBeginAsync(tmp3865, cancellationToken);
            var tmp3866 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3866.Name = "Success";
                tmp3866.Type = TType.Struct;
                tmp3866.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3866, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3867 = new StringBuilder("toolTipPosition_result(");
          int tmp3868 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3868++) { tmp3867.Append(", "); }
            tmp3867.Append("Success: ");
            Success.ToString(tmp3867);
          }
          tmp3867.Append(')');
          return tmp3867.ToString();
        }
      }


      public partial class forceLimitingAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingAvailable_args()
        {
        }

        public forceLimitingAvailable_args DeepCopy()
        {
          var tmp3869 = new forceLimitingAvailable_args();
          if(__isset.r)
          {
            tmp3869.R = this.R;
          }
          tmp3869.__isset.r = this.__isset.r;
          return tmp3869;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3870 = new TStruct("forceLimitingAvailable_args");
            await oprot.WriteStructBeginAsync(tmp3870, cancellationToken);
            var tmp3871 = new TField();
            if(__isset.r)
            {
              tmp3871.Name = "r";
              tmp3871.Type = TType.I32;
              tmp3871.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3871, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3872 = new StringBuilder("forceLimitingAvailable_args(");
          int tmp3873 = 0;
          if(__isset.r)
          {
            if(0 < tmp3873++) { tmp3872.Append(", "); }
            tmp3872.Append("R: ");
            R.ToString(tmp3872);
          }
          tmp3872.Append(')');
          return tmp3872.ToString();
        }
      }


      public partial class forceLimitingAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingAvailable_result()
        {
        }

        public forceLimitingAvailable_result DeepCopy()
        {
          var tmp3874 = new forceLimitingAvailable_result();
          if(__isset.success)
          {
            tmp3874.Success = this.Success;
          }
          tmp3874.__isset.success = this.__isset.success;
          return tmp3874;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3875 = new TStruct("forceLimitingAvailable_result");
            await oprot.WriteStructBeginAsync(tmp3875, cancellationToken);
            var tmp3876 = new TField();

            if(this.__isset.success)
            {
              tmp3876.Name = "Success";
              tmp3876.Type = TType.Bool;
              tmp3876.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3876, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3877 = new StringBuilder("forceLimitingAvailable_result(");
          int tmp3878 = 0;
          if(__isset.success)
          {
            if(0 < tmp3878++) { tmp3877.Append(", "); }
            tmp3877.Append("Success: ");
            Success.ToString(tmp3877);
          }
          tmp3877.Append(')');
          return tmp3877.ToString();
        }
      }


      public partial class forceLimitingActive_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingActive_args()
        {
        }

        public forceLimitingActive_args DeepCopy()
        {
          var tmp3879 = new forceLimitingActive_args();
          if(__isset.r)
          {
            tmp3879.R = this.R;
          }
          tmp3879.__isset.r = this.__isset.r;
          return tmp3879;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3880 = new TStruct("forceLimitingActive_args");
            await oprot.WriteStructBeginAsync(tmp3880, cancellationToken);
            var tmp3881 = new TField();
            if(__isset.r)
            {
              tmp3881.Name = "r";
              tmp3881.Type = TType.I32;
              tmp3881.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3881, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3882 = new StringBuilder("forceLimitingActive_args(");
          int tmp3883 = 0;
          if(__isset.r)
          {
            if(0 < tmp3883++) { tmp3882.Append(", "); }
            tmp3882.Append("R: ");
            R.ToString(tmp3882);
          }
          tmp3882.Append(')');
          return tmp3882.ToString();
        }
      }


      public partial class forceLimitingActive_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingActive_result()
        {
        }

        public forceLimitingActive_result DeepCopy()
        {
          var tmp3884 = new forceLimitingActive_result();
          if(__isset.success)
          {
            tmp3884.Success = this.Success;
          }
          tmp3884.__isset.success = this.__isset.success;
          return tmp3884;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3885 = new TStruct("forceLimitingActive_result");
            await oprot.WriteStructBeginAsync(tmp3885, cancellationToken);
            var tmp3886 = new TField();

            if(this.__isset.success)
            {
              tmp3886.Name = "Success";
              tmp3886.Type = TType.Bool;
              tmp3886.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3886, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3887 = new StringBuilder("forceLimitingActive_result(");
          int tmp3888 = 0;
          if(__isset.success)
          {
            if(0 < tmp3888++) { tmp3887.Append(", "); }
            tmp3887.Append("Success: ");
            Success.ToString(tmp3887);
          }
          tmp3887.Append(')');
          return tmp3887.ToString();
        }
      }


      public partial class forceLimitingStopped_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingStopped_args()
        {
        }

        public forceLimitingStopped_args DeepCopy()
        {
          var tmp3889 = new forceLimitingStopped_args();
          if(__isset.r)
          {
            tmp3889.R = this.R;
          }
          tmp3889.__isset.r = this.__isset.r;
          return tmp3889;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3890 = new TStruct("forceLimitingStopped_args");
            await oprot.WriteStructBeginAsync(tmp3890, cancellationToken);
            var tmp3891 = new TField();
            if(__isset.r)
            {
              tmp3891.Name = "r";
              tmp3891.Type = TType.I32;
              tmp3891.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3891, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3892 = new StringBuilder("forceLimitingStopped_args(");
          int tmp3893 = 0;
          if(__isset.r)
          {
            if(0 < tmp3893++) { tmp3892.Append(", "); }
            tmp3892.Append("R: ");
            R.ToString(tmp3892);
          }
          tmp3892.Append(')');
          return tmp3892.ToString();
        }
      }


      public partial class forceLimitingStopped_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingStopped_result()
        {
        }

        public forceLimitingStopped_result DeepCopy()
        {
          var tmp3894 = new forceLimitingStopped_result();
          if(__isset.success)
          {
            tmp3894.Success = this.Success;
          }
          tmp3894.__isset.success = this.__isset.success;
          return tmp3894;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3895 = new TStruct("forceLimitingStopped_result");
            await oprot.WriteStructBeginAsync(tmp3895, cancellationToken);
            var tmp3896 = new TField();

            if(this.__isset.success)
            {
              tmp3896.Name = "Success";
              tmp3896.Type = TType.Bool;
              tmp3896.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3896, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3897 = new StringBuilder("forceLimitingStopped_result(");
          int tmp3898 = 0;
          if(__isset.success)
          {
            if(0 < tmp3898++) { tmp3897.Append(", "); }
            tmp3897.Append("Success: ");
            Success.ToString(tmp3897);
          }
          tmp3897.Append(')');
          return tmp3897.ToString();
        }
      }


      public partial class switchBoxAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public switchBoxAvailable_args()
        {
        }

        public switchBoxAvailable_args DeepCopy()
        {
          var tmp3899 = new switchBoxAvailable_args();
          if(__isset.r)
          {
            tmp3899.R = this.R;
          }
          tmp3899.__isset.r = this.__isset.r;
          return tmp3899;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3900 = new TStruct("switchBoxAvailable_args");
            await oprot.WriteStructBeginAsync(tmp3900, cancellationToken);
            var tmp3901 = new TField();
            if(__isset.r)
            {
              tmp3901.Name = "r";
              tmp3901.Type = TType.I32;
              tmp3901.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3901, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3902 = new StringBuilder("switchBoxAvailable_args(");
          int tmp3903 = 0;
          if(__isset.r)
          {
            if(0 < tmp3903++) { tmp3902.Append(", "); }
            tmp3902.Append("R: ");
            R.ToString(tmp3902);
          }
          tmp3902.Append(')');
          return tmp3902.ToString();
        }
      }


      public partial class switchBoxAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public switchBoxAvailable_result()
        {
        }

        public switchBoxAvailable_result DeepCopy()
        {
          var tmp3904 = new switchBoxAvailable_result();
          if(__isset.success)
          {
            tmp3904.Success = this.Success;
          }
          tmp3904.__isset.success = this.__isset.success;
          return tmp3904;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3905 = new TStruct("switchBoxAvailable_result");
            await oprot.WriteStructBeginAsync(tmp3905, cancellationToken);
            var tmp3906 = new TField();

            if(this.__isset.success)
            {
              tmp3906.Name = "Success";
              tmp3906.Type = TType.Bool;
              tmp3906.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3906, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3907 = new StringBuilder("switchBoxAvailable_result(");
          int tmp3908 = 0;
          if(__isset.success)
          {
            if(0 < tmp3908++) { tmp3907.Append(", "); }
            tmp3907.Append("Success: ");
            Success.ToString(tmp3907);
          }
          tmp3907.Append(')');
          return tmp3907.ToString();
        }
      }


      public partial class activeTool_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public activeTool_args()
        {
        }

        public activeTool_args DeepCopy()
        {
          var tmp3909 = new activeTool_args();
          if(__isset.r)
          {
            tmp3909.R = this.R;
          }
          tmp3909.__isset.r = this.__isset.r;
          return tmp3909;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3910 = new TStruct("activeTool_args");
            await oprot.WriteStructBeginAsync(tmp3910, cancellationToken);
            var tmp3911 = new TField();
            if(__isset.r)
            {
              tmp3911.Name = "r";
              tmp3911.Type = TType.I32;
              tmp3911.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3911, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3912 = new StringBuilder("activeTool_args(");
          int tmp3913 = 0;
          if(__isset.r)
          {
            if(0 < tmp3913++) { tmp3912.Append(", "); }
            tmp3912.Append("R: ");
            R.ToString(tmp3912);
          }
          tmp3912.Append(')');
          return tmp3912.ToString();
        }
      }


      public partial class activeTool_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public activeTool_result()
        {
        }

        public activeTool_result DeepCopy()
        {
          var tmp3914 = new activeTool_result();
          if(__isset.success)
          {
            tmp3914.Success = this.Success;
          }
          tmp3914.__isset.success = this.__isset.success;
          return tmp3914;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3915 = new TStruct("activeTool_result");
            await oprot.WriteStructBeginAsync(tmp3915, cancellationToken);
            var tmp3916 = new TField();

            if(this.__isset.success)
            {
              tmp3916.Name = "Success";
              tmp3916.Type = TType.I32;
              tmp3916.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3916, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3917 = new StringBuilder("activeTool_result(");
          int tmp3918 = 0;
          if(__isset.success)
          {
            if(0 < tmp3918++) { tmp3917.Append(", "); }
            tmp3917.Append("Success: ");
            Success.ToString(tmp3917);
          }
          tmp3917.Append(')');
          return tmp3917.ToString();
        }
      }


      public partial class setActiveTool_args : TBase
      {
        private int _r;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool tool;
        }

        public setActiveTool_args()
        {
        }

        public setActiveTool_args DeepCopy()
        {
          var tmp3919 = new setActiveTool_args();
          if(__isset.r)
          {
            tmp3919.R = this.R;
          }
          tmp3919.__isset.r = this.__isset.r;
          if(__isset.tool)
          {
            tmp3919.Tool = this.Tool;
          }
          tmp3919.__isset.tool = this.__isset.tool;
          return tmp3919;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3920 = new TStruct("setActiveTool_args");
            await oprot.WriteStructBeginAsync(tmp3920, cancellationToken);
            var tmp3921 = new TField();
            if(__isset.r)
            {
              tmp3921.Name = "r";
              tmp3921.Type = TType.I32;
              tmp3921.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3921, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp3921.Name = "tool";
              tmp3921.Type = TType.I32;
              tmp3921.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3921, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3922 = new StringBuilder("setActiveTool_args(");
          int tmp3923 = 0;
          if(__isset.r)
          {
            if(0 < tmp3923++) { tmp3922.Append(", "); }
            tmp3922.Append("R: ");
            R.ToString(tmp3922);
          }
          if(__isset.tool)
          {
            if(0 < tmp3923++) { tmp3922.Append(", "); }
            tmp3922.Append("Tool: ");
            Tool.ToString(tmp3922);
          }
          tmp3922.Append(')');
          return tmp3922.ToString();
        }
      }


      public partial class setActiveTool_result : TBase
      {

        public setActiveTool_result()
        {
        }

        public setActiveTool_result DeepCopy()
        {
          var tmp3924 = new setActiveTool_result();
          return tmp3924;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3925 = new TStruct("setActiveTool_result");
            await oprot.WriteStructBeginAsync(tmp3925, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3926 = new StringBuilder("setActiveTool_result(");
          tmp3926.Append(')');
          return tmp3926.ToString();
        }
      }


      public partial class workHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public workHomePosition_args()
        {
        }

        public workHomePosition_args DeepCopy()
        {
          var tmp3928 = new workHomePosition_args();
          if(__isset.r)
          {
            tmp3928.R = this.R;
          }
          tmp3928.__isset.r = this.__isset.r;
          return tmp3928;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3929 = new TStruct("workHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3929, cancellationToken);
            var tmp3930 = new TField();
            if(__isset.r)
            {
              tmp3930.Name = "r";
              tmp3930.Type = TType.I32;
              tmp3930.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3930, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3931 = new StringBuilder("workHomePosition_args(");
          int tmp3932 = 0;
          if(__isset.r)
          {
            if(0 < tmp3932++) { tmp3931.Append(", "); }
            tmp3931.Append("R: ");
            R.ToString(tmp3931);
          }
          tmp3931.Append(')');
          return tmp3931.ToString();
        }
      }


      public partial class workHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public workHomePosition_result()
        {
        }

        public workHomePosition_result DeepCopy()
        {
          var tmp3933 = new workHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3933.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3933.__isset.success = this.__isset.success;
          return tmp3933;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3934 = new TStruct("workHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3934, cancellationToken);
            var tmp3935 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3935.Name = "Success";
                tmp3935.Type = TType.Struct;
                tmp3935.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3935, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3936 = new StringBuilder("workHomePosition_result(");
          int tmp3937 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3937++) { tmp3936.Append(", "); }
            tmp3936.Append("Success: ");
            Success.ToString(tmp3936);
          }
          tmp3936.Append(')');
          return tmp3936.ToString();
        }
      }


      public partial class setWorkHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setWorkHomePosition_args()
        {
        }

        public setWorkHomePosition_args DeepCopy()
        {
          var tmp3938 = new setWorkHomePosition_args();
          if(__isset.r)
          {
            tmp3938.R = this.R;
          }
          tmp3938.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp3938.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp3938.__isset.p = this.__isset.p;
          return tmp3938;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3939 = new TStruct("setWorkHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3939, cancellationToken);
            var tmp3940 = new TField();
            if(__isset.r)
            {
              tmp3940.Name = "r";
              tmp3940.Type = TType.I32;
              tmp3940.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3940, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp3940.Name = "p";
              tmp3940.Type = TType.Struct;
              tmp3940.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3940, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3941 = new StringBuilder("setWorkHomePosition_args(");
          int tmp3942 = 0;
          if(__isset.r)
          {
            if(0 < tmp3942++) { tmp3941.Append(", "); }
            tmp3941.Append("R: ");
            R.ToString(tmp3941);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp3942++) { tmp3941.Append(", "); }
            tmp3941.Append("P: ");
            P.ToString(tmp3941);
          }
          tmp3941.Append(')');
          return tmp3941.ToString();
        }
      }


      public partial class setWorkHomePosition_result : TBase
      {

        public setWorkHomePosition_result()
        {
        }

        public setWorkHomePosition_result DeepCopy()
        {
          var tmp3943 = new setWorkHomePosition_result();
          return tmp3943;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3944 = new TStruct("setWorkHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3944, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3945 = new StringBuilder("setWorkHomePosition_result(");
          tmp3945.Append(')');
          return tmp3945.ToString();
        }
      }


      public partial class secondHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public secondHomePosition_args()
        {
        }

        public secondHomePosition_args DeepCopy()
        {
          var tmp3947 = new secondHomePosition_args();
          if(__isset.r)
          {
            tmp3947.R = this.R;
          }
          tmp3947.__isset.r = this.__isset.r;
          return tmp3947;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3948 = new TStruct("secondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3948, cancellationToken);
            var tmp3949 = new TField();
            if(__isset.r)
            {
              tmp3949.Name = "r";
              tmp3949.Type = TType.I32;
              tmp3949.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3949, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3950 = new StringBuilder("secondHomePosition_args(");
          int tmp3951 = 0;
          if(__isset.r)
          {
            if(0 < tmp3951++) { tmp3950.Append(", "); }
            tmp3950.Append("R: ");
            R.ToString(tmp3950);
          }
          tmp3950.Append(')');
          return tmp3950.ToString();
        }
      }


      public partial class secondHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public secondHomePosition_result()
        {
        }

        public secondHomePosition_result DeepCopy()
        {
          var tmp3952 = new secondHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3952.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3952.__isset.success = this.__isset.success;
          return tmp3952;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3953 = new TStruct("secondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3953, cancellationToken);
            var tmp3954 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3954.Name = "Success";
                tmp3954.Type = TType.Struct;
                tmp3954.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3954, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3955 = new StringBuilder("secondHomePosition_result(");
          int tmp3956 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3956++) { tmp3955.Append(", "); }
            tmp3955.Append("Success: ");
            Success.ToString(tmp3955);
          }
          tmp3955.Append(')');
          return tmp3955.ToString();
        }
      }


      public partial class setSecondHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setSecondHomePosition_args()
        {
        }

        public setSecondHomePosition_args DeepCopy()
        {
          var tmp3957 = new setSecondHomePosition_args();
          if(__isset.r)
          {
            tmp3957.R = this.R;
          }
          tmp3957.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp3957.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp3957.__isset.p = this.__isset.p;
          return tmp3957;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3958 = new TStruct("setSecondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3958, cancellationToken);
            var tmp3959 = new TField();
            if(__isset.r)
            {
              tmp3959.Name = "r";
              tmp3959.Type = TType.I32;
              tmp3959.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3959, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp3959.Name = "p";
              tmp3959.Type = TType.Struct;
              tmp3959.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3959, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3960 = new StringBuilder("setSecondHomePosition_args(");
          int tmp3961 = 0;
          if(__isset.r)
          {
            if(0 < tmp3961++) { tmp3960.Append(", "); }
            tmp3960.Append("R: ");
            R.ToString(tmp3960);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp3961++) { tmp3960.Append(", "); }
            tmp3960.Append("P: ");
            P.ToString(tmp3960);
          }
          tmp3960.Append(')');
          return tmp3960.ToString();
        }
      }


      public partial class setSecondHomePosition_result : TBase
      {

        public setSecondHomePosition_result()
        {
        }

        public setSecondHomePosition_result DeepCopy()
        {
          var tmp3962 = new setSecondHomePosition_result();
          return tmp3962;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3963 = new TStruct("setSecondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3963, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3964 = new StringBuilder("setSecondHomePosition_result(");
          tmp3964.Append(')');
          return tmp3964.ToString();
        }
      }


      public partial class maximumLinearSpeed_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public maximumLinearSpeed_args()
        {
        }

        public maximumLinearSpeed_args DeepCopy()
        {
          var tmp3966 = new maximumLinearSpeed_args();
          if(__isset.r)
          {
            tmp3966.R = this.R;
          }
          tmp3966.__isset.r = this.__isset.r;
          return tmp3966;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3967 = new TStruct("maximumLinearSpeed_args");
            await oprot.WriteStructBeginAsync(tmp3967, cancellationToken);
            var tmp3968 = new TField();
            if(__isset.r)
            {
              tmp3968.Name = "r";
              tmp3968.Type = TType.I32;
              tmp3968.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3968, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3969 = new StringBuilder("maximumLinearSpeed_args(");
          int tmp3970 = 0;
          if(__isset.r)
          {
            if(0 < tmp3970++) { tmp3969.Append(", "); }
            tmp3969.Append("R: ");
            R.ToString(tmp3969);
          }
          tmp3969.Append(')');
          return tmp3969.ToString();
        }
      }


      public partial class maximumLinearSpeed_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public maximumLinearSpeed_result()
        {
        }

        public maximumLinearSpeed_result DeepCopy()
        {
          var tmp3971 = new maximumLinearSpeed_result();
          if(__isset.success)
          {
            tmp3971.Success = this.Success;
          }
          tmp3971.__isset.success = this.__isset.success;
          return tmp3971;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3972 = new TStruct("maximumLinearSpeed_result");
            await oprot.WriteStructBeginAsync(tmp3972, cancellationToken);
            var tmp3973 = new TField();

            if(this.__isset.success)
            {
              tmp3973.Name = "Success";
              tmp3973.Type = TType.Double;
              tmp3973.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3973, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3974 = new StringBuilder("maximumLinearSpeed_result(");
          int tmp3975 = 0;
          if(__isset.success)
          {
            if(0 < tmp3975++) { tmp3974.Append(", "); }
            tmp3974.Append("Success: ");
            Success.ToString(tmp3974);
          }
          tmp3974.Append(')');
          return tmp3974.ToString();
        }
      }

    }

  }
}
