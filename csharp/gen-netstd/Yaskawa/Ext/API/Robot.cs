/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Robot
  {
    public interface IAsync
    {
      /// <summary>
      /// The model string of this robot
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Number of degrees-of-freedom / axes
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint labels for each axis of a robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the joint types of each axis for the specified robot (API Version 3.1 or Later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Current position of the robot in joint coordinate frame (i.e. axis angles)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="unit"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default);

      /// <summary>
      /// Coordinates of the ToolTip (TCP) of of the specified tool
      /// in the given coordinate frame (using active tool if none specified)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="frame"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Does this robot support force limiting? (collaborative robot?)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is the robot stopped due to an over-limit event?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Is an end-of-arm switch box installed?
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Index of the currently active tool
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the currently active tool
      /// </summary>
      /// <param name="r"></param>
      /// <param name="tool"></param>
      global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current work home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the robots current second home position
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get a robot's maximum linear speed
      /// (API version 3.0 and later)
      /// </summary>
      /// <param name="r"></param>
      global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> model(int r, CancellationToken cancellationToken = default)
      {
        await send_model(r, cancellationToken);
        return await recv_model(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_model(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("model", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3692 = new InternalStructs.model_args() {
          R = r,
        };
        
        await tmp3692.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_model(CancellationToken cancellationToken = default)
      {
        
        var tmp3693 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3693.Type == TMessageType.Exception)
        {
          var tmp3694 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3694;
        }

        var tmp3695 = new InternalStructs.model_result();
        await tmp3695.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3695.__isset.success)
        {
          return tmp3695.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "model failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> dof(int r, CancellationToken cancellationToken = default)
      {
        await send_dof(r, cancellationToken);
        return await recv_dof(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dof(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3696 = new InternalStructs.dof_args() {
          R = r,
        };
        
        await tmp3696.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_dof(CancellationToken cancellationToken = default)
      {
        
        var tmp3697 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3697.Type == TMessageType.Exception)
        {
          var tmp3698 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3698;
        }

        var tmp3699 = new InternalStructs.dof_result();
        await tmp3699.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3699.__isset.success)
        {
          return tmp3699.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dof failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await send_jointLabels(r, cancellationToken);
        return await recv_jointLabels(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointLabels(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3700 = new InternalStructs.jointLabels_args() {
          R = r,
        };
        
        await tmp3700.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_jointLabels(CancellationToken cancellationToken = default)
      {
        
        var tmp3701 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3701.Type == TMessageType.Exception)
        {
          var tmp3702 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3702;
        }

        var tmp3703 = new InternalStructs.jointLabels_result();
        await tmp3703.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3703.__isset.success)
        {
          return tmp3703.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointLabels failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await send_jointTypes(r, cancellationToken);
        return await recv_jointTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointTypes(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3704 = new InternalStructs.jointTypes_args() {
          R = r,
        };
        
        await tmp3704.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.JointType>> recv_jointTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp3705 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3705.Type == TMessageType.Exception)
        {
          var tmp3706 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3706;
        }

        var tmp3707 = new InternalStructs.jointTypes_result();
        await tmp3707.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3707.__isset.success)
        {
          return tmp3707.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await send_jointPosition(r, unit, cancellationToken);
        return await recv_jointPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_jointPosition(int r, global::Yaskawa.Ext.API.OrientationUnit unit, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3708 = new InternalStructs.jointPosition_args() {
          R = r,
          Unit = unit,
        };
        
        await tmp3708.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_jointPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3709 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3709.Type == TMessageType.Exception)
        {
          var tmp3710 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3710;
        }

        var tmp3711 = new InternalStructs.jointPosition_result();
        await tmp3711.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3711.__isset.success)
        {
          return tmp3711.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "jointPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await send_toolTipPosition(r, frame, tool, cancellationToken);
        return await recv_toolTipPosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_toolTipPosition(int r, global::Yaskawa.Ext.API.CoordinateFrame frame, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3712 = new InternalStructs.toolTipPosition_args() {
          R = r,
          Frame = frame,
          Tool = tool,
        };
        
        await tmp3712.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_toolTipPosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3713 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3713.Type == TMessageType.Exception)
        {
          var tmp3714 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3714;
        }

        var tmp3715 = new InternalStructs.toolTipPosition_result();
        await tmp3715.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3715.__isset.success)
        {
          return tmp3715.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "toolTipPosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingAvailable(r, cancellationToken);
        return await recv_forceLimitingAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3716 = new InternalStructs.forceLimitingAvailable_args() {
          R = r,
        };
        
        await tmp3716.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3717 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3717.Type == TMessageType.Exception)
        {
          var tmp3718 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3718;
        }

        var tmp3719 = new InternalStructs.forceLimitingAvailable_result();
        await tmp3719.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3719.__isset.success)
        {
          return tmp3719.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingActive(r, cancellationToken);
        return await recv_forceLimitingActive(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingActive(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3720 = new InternalStructs.forceLimitingActive_args() {
          R = r,
        };
        
        await tmp3720.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingActive(CancellationToken cancellationToken = default)
      {
        
        var tmp3721 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3721.Type == TMessageType.Exception)
        {
          var tmp3722 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3722;
        }

        var tmp3723 = new InternalStructs.forceLimitingActive_result();
        await tmp3723.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3723.__isset.success)
        {
          return tmp3723.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingActive failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await send_forceLimitingStopped(r, cancellationToken);
        return await recv_forceLimitingStopped(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_forceLimitingStopped(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3724 = new InternalStructs.forceLimitingStopped_args() {
          R = r,
        };
        
        await tmp3724.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_forceLimitingStopped(CancellationToken cancellationToken = default)
      {
        
        var tmp3725 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3725.Type == TMessageType.Exception)
        {
          var tmp3726 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3726;
        }

        var tmp3727 = new InternalStructs.forceLimitingStopped_result();
        await tmp3727.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3727.__isset.success)
        {
          return tmp3727.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forceLimitingStopped failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await send_switchBoxAvailable(r, cancellationToken);
        return await recv_switchBoxAvailable(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_switchBoxAvailable(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3728 = new InternalStructs.switchBoxAvailable_args() {
          R = r,
        };
        
        await tmp3728.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_switchBoxAvailable(CancellationToken cancellationToken = default)
      {
        
        var tmp3729 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3729.Type == TMessageType.Exception)
        {
          var tmp3730 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3730;
        }

        var tmp3731 = new InternalStructs.switchBoxAvailable_result();
        await tmp3731.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3731.__isset.success)
        {
          return tmp3731.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "switchBoxAvailable failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> activeTool(int r, CancellationToken cancellationToken = default)
      {
        await send_activeTool(r, cancellationToken);
        return await recv_activeTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_activeTool(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3732 = new InternalStructs.activeTool_args() {
          R = r,
        };
        
        await tmp3732.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_activeTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3733 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3733.Type == TMessageType.Exception)
        {
          var tmp3734 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3734;
        }

        var tmp3735 = new InternalStructs.activeTool_result();
        await tmp3735.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3735.__isset.success)
        {
          return tmp3735.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeTool failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await send_setActiveTool(r, tool, cancellationToken);
        await recv_setActiveTool(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setActiveTool(int r, int tool, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3736 = new InternalStructs.setActiveTool_args() {
          R = r,
          Tool = tool,
        };
        
        await tmp3736.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setActiveTool(CancellationToken cancellationToken = default)
      {
        
        var tmp3737 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3737.Type == TMessageType.Exception)
        {
          var tmp3738 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3738;
        }

        var tmp3739 = new InternalStructs.setActiveTool_result();
        await tmp3739.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_workHomePosition(r, cancellationToken);
        return await recv_workHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_workHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3740 = new InternalStructs.workHomePosition_args() {
          R = r,
        };
        
        await tmp3740.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_workHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3741 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3741.Type == TMessageType.Exception)
        {
          var tmp3742 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3742;
        }

        var tmp3743 = new InternalStructs.workHomePosition_result();
        await tmp3743.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3743.__isset.success)
        {
          return tmp3743.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "workHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setWorkHomePosition(r, p, cancellationToken);
        await recv_setWorkHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setWorkHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3744 = new InternalStructs.setWorkHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3744.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setWorkHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3745 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3745.Type == TMessageType.Exception)
        {
          var tmp3746 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3746;
        }

        var tmp3747 = new InternalStructs.setWorkHomePosition_result();
        await tmp3747.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await send_secondHomePosition(r, cancellationToken);
        return await recv_secondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_secondHomePosition(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3748 = new InternalStructs.secondHomePosition_args() {
          R = r,
        };
        
        await tmp3748.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Position> recv_secondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3749 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3749.Type == TMessageType.Exception)
        {
          var tmp3750 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3750;
        }

        var tmp3751 = new InternalStructs.secondHomePosition_result();
        await tmp3751.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3751.__isset.success)
        {
          return tmp3751.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "secondHomePosition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await send_setSecondHomePosition(r, p, cancellationToken);
        await recv_setSecondHomePosition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setSecondHomePosition(int r, global::Yaskawa.Ext.API.Position p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3752 = new InternalStructs.setSecondHomePosition_args() {
          R = r,
          P = p,
        };
        
        await tmp3752.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setSecondHomePosition(CancellationToken cancellationToken = default)
      {
        
        var tmp3753 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3753.Type == TMessageType.Exception)
        {
          var tmp3754 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3754;
        }

        var tmp3755 = new InternalStructs.setSecondHomePosition_result();
        await tmp3755.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await send_maximumLinearSpeed(r, cancellationToken);
        return await recv_maximumLinearSpeed(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_maximumLinearSpeed(int r, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp3756 = new InternalStructs.maximumLinearSpeed_args() {
          R = r,
        };
        
        await tmp3756.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<double> recv_maximumLinearSpeed(CancellationToken cancellationToken = default)
      {
        
        var tmp3757 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp3757.Type == TMessageType.Exception)
        {
          var tmp3758 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp3758;
        }

        var tmp3759 = new InternalStructs.maximumLinearSpeed_result();
        await tmp3759.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3759.__isset.success)
        {
          return tmp3759.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "maximumLinearSpeed failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["model"] = model_ProcessAsync;
        processMap_["dof"] = dof_ProcessAsync;
        processMap_["jointLabels"] = jointLabels_ProcessAsync;
        processMap_["jointTypes"] = jointTypes_ProcessAsync;
        processMap_["jointPosition"] = jointPosition_ProcessAsync;
        processMap_["toolTipPosition"] = toolTipPosition_ProcessAsync;
        processMap_["forceLimitingAvailable"] = forceLimitingAvailable_ProcessAsync;
        processMap_["forceLimitingActive"] = forceLimitingActive_ProcessAsync;
        processMap_["forceLimitingStopped"] = forceLimitingStopped_ProcessAsync;
        processMap_["switchBoxAvailable"] = switchBoxAvailable_ProcessAsync;
        processMap_["activeTool"] = activeTool_ProcessAsync;
        processMap_["setActiveTool"] = setActiveTool_ProcessAsync;
        processMap_["workHomePosition"] = workHomePosition_ProcessAsync;
        processMap_["setWorkHomePosition"] = setWorkHomePosition_ProcessAsync;
        processMap_["secondHomePosition"] = secondHomePosition_ProcessAsync;
        processMap_["setSecondHomePosition"] = setSecondHomePosition_ProcessAsync;
        processMap_["maximumLinearSpeed"] = maximumLinearSpeed_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task model_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3760 = new InternalStructs.model_args();
        await tmp3760.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3761 = new InternalStructs.model_result();
        try
        {
          tmp3761.Success = await _iAsync.model(tmp3760.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3761.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3762)
        {
          var tmp3763 = $"Error occurred in {GetType().FullName}: {tmp3762.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3762, tmp3763);
          else
            Console.Error.WriteLine(tmp3763);
          var tmp3764 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("model", TMessageType.Exception, seqid), cancellationToken);
          await tmp3764.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dof_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3765 = new InternalStructs.dof_args();
        await tmp3765.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3766 = new InternalStructs.dof_result();
        try
        {
          tmp3766.Success = await _iAsync.dof(tmp3765.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3766.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3767)
        {
          var tmp3768 = $"Error occurred in {GetType().FullName}: {tmp3767.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3767, tmp3768);
          else
            Console.Error.WriteLine(tmp3768);
          var tmp3769 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dof", TMessageType.Exception, seqid), cancellationToken);
          await tmp3769.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointLabels_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3770 = new InternalStructs.jointLabels_args();
        await tmp3770.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3771 = new InternalStructs.jointLabels_result();
        try
        {
          tmp3771.Success = await _iAsync.jointLabels(tmp3770.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3771.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3772)
        {
          var tmp3773 = $"Error occurred in {GetType().FullName}: {tmp3772.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3772, tmp3773);
          else
            Console.Error.WriteLine(tmp3773);
          var tmp3774 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointLabels", TMessageType.Exception, seqid), cancellationToken);
          await tmp3774.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3775 = new InternalStructs.jointTypes_args();
        await tmp3775.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3776 = new InternalStructs.jointTypes_result();
        try
        {
          tmp3776.Success = await _iAsync.jointTypes(tmp3775.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3776.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3777)
        {
          var tmp3778 = $"Error occurred in {GetType().FullName}: {tmp3777.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3777, tmp3778);
          else
            Console.Error.WriteLine(tmp3778);
          var tmp3779 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp3779.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task jointPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3780 = new InternalStructs.jointPosition_args();
        await tmp3780.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3781 = new InternalStructs.jointPosition_result();
        try
        {
          tmp3781.Success = await _iAsync.jointPosition(tmp3780.R, tmp3780.Unit, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3781.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3782)
        {
          var tmp3783 = $"Error occurred in {GetType().FullName}: {tmp3782.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3782, tmp3783);
          else
            Console.Error.WriteLine(tmp3783);
          var tmp3784 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("jointPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3784.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task toolTipPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3785 = new InternalStructs.toolTipPosition_args();
        await tmp3785.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3786 = new InternalStructs.toolTipPosition_result();
        try
        {
          tmp3786.Success = await _iAsync.toolTipPosition(tmp3785.R, tmp3785.Frame, tmp3785.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3786.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3787)
        {
          var tmp3788 = $"Error occurred in {GetType().FullName}: {tmp3787.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3787, tmp3788);
          else
            Console.Error.WriteLine(tmp3788);
          var tmp3789 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("toolTipPosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3789.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3790 = new InternalStructs.forceLimitingAvailable_args();
        await tmp3790.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3791 = new InternalStructs.forceLimitingAvailable_result();
        try
        {
          tmp3791.Success = await _iAsync.forceLimitingAvailable(tmp3790.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3791.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3792)
        {
          var tmp3793 = $"Error occurred in {GetType().FullName}: {tmp3792.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3792, tmp3793);
          else
            Console.Error.WriteLine(tmp3793);
          var tmp3794 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3794.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingActive_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3795 = new InternalStructs.forceLimitingActive_args();
        await tmp3795.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3796 = new InternalStructs.forceLimitingActive_result();
        try
        {
          tmp3796.Success = await _iAsync.forceLimitingActive(tmp3795.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3796.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3797)
        {
          var tmp3798 = $"Error occurred in {GetType().FullName}: {tmp3797.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3797, tmp3798);
          else
            Console.Error.WriteLine(tmp3798);
          var tmp3799 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingActive", TMessageType.Exception, seqid), cancellationToken);
          await tmp3799.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task forceLimitingStopped_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3800 = new InternalStructs.forceLimitingStopped_args();
        await tmp3800.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3801 = new InternalStructs.forceLimitingStopped_result();
        try
        {
          tmp3801.Success = await _iAsync.forceLimitingStopped(tmp3800.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3801.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3802)
        {
          var tmp3803 = $"Error occurred in {GetType().FullName}: {tmp3802.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3802, tmp3803);
          else
            Console.Error.WriteLine(tmp3803);
          var tmp3804 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("forceLimitingStopped", TMessageType.Exception, seqid), cancellationToken);
          await tmp3804.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task switchBoxAvailable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3805 = new InternalStructs.switchBoxAvailable_args();
        await tmp3805.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3806 = new InternalStructs.switchBoxAvailable_result();
        try
        {
          tmp3806.Success = await _iAsync.switchBoxAvailable(tmp3805.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3806.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3807)
        {
          var tmp3808 = $"Error occurred in {GetType().FullName}: {tmp3807.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3807, tmp3808);
          else
            Console.Error.WriteLine(tmp3808);
          var tmp3809 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("switchBoxAvailable", TMessageType.Exception, seqid), cancellationToken);
          await tmp3809.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task activeTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3810 = new InternalStructs.activeTool_args();
        await tmp3810.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3811 = new InternalStructs.activeTool_result();
        try
        {
          tmp3811.Success = await _iAsync.activeTool(tmp3810.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3811.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3812)
        {
          var tmp3813 = $"Error occurred in {GetType().FullName}: {tmp3812.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3812, tmp3813);
          else
            Console.Error.WriteLine(tmp3813);
          var tmp3814 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("activeTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp3814.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setActiveTool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3815 = new InternalStructs.setActiveTool_args();
        await tmp3815.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3816 = new InternalStructs.setActiveTool_result();
        try
        {
          await _iAsync.setActiveTool(tmp3815.R, tmp3815.Tool, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3816.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3817)
        {
          var tmp3818 = $"Error occurred in {GetType().FullName}: {tmp3817.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3817, tmp3818);
          else
            Console.Error.WriteLine(tmp3818);
          var tmp3819 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setActiveTool", TMessageType.Exception, seqid), cancellationToken);
          await tmp3819.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task workHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3820 = new InternalStructs.workHomePosition_args();
        await tmp3820.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3821 = new InternalStructs.workHomePosition_result();
        try
        {
          tmp3821.Success = await _iAsync.workHomePosition(tmp3820.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3821.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3822)
        {
          var tmp3823 = $"Error occurred in {GetType().FullName}: {tmp3822.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3822, tmp3823);
          else
            Console.Error.WriteLine(tmp3823);
          var tmp3824 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("workHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3824.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setWorkHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3825 = new InternalStructs.setWorkHomePosition_args();
        await tmp3825.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3826 = new InternalStructs.setWorkHomePosition_result();
        try
        {
          await _iAsync.setWorkHomePosition(tmp3825.R, tmp3825.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3826.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3827)
        {
          var tmp3828 = $"Error occurred in {GetType().FullName}: {tmp3827.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3827, tmp3828);
          else
            Console.Error.WriteLine(tmp3828);
          var tmp3829 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3829.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task secondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3830 = new InternalStructs.secondHomePosition_args();
        await tmp3830.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3831 = new InternalStructs.secondHomePosition_result();
        try
        {
          tmp3831.Success = await _iAsync.secondHomePosition(tmp3830.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3831.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3832)
        {
          var tmp3833 = $"Error occurred in {GetType().FullName}: {tmp3832.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3832, tmp3833);
          else
            Console.Error.WriteLine(tmp3833);
          var tmp3834 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("secondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3834.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setSecondHomePosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3835 = new InternalStructs.setSecondHomePosition_args();
        await tmp3835.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3836 = new InternalStructs.setSecondHomePosition_result();
        try
        {
          await _iAsync.setSecondHomePosition(tmp3835.R, tmp3835.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3836.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3837)
        {
          var tmp3838 = $"Error occurred in {GetType().FullName}: {tmp3837.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3837, tmp3838);
          else
            Console.Error.WriteLine(tmp3838);
          var tmp3839 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setSecondHomePosition", TMessageType.Exception, seqid), cancellationToken);
          await tmp3839.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task maximumLinearSpeed_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp3840 = new InternalStructs.maximumLinearSpeed_args();
        await tmp3840.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp3841 = new InternalStructs.maximumLinearSpeed_result();
        try
        {
          tmp3841.Success = await _iAsync.maximumLinearSpeed(tmp3840.R, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Reply, seqid), cancellationToken); 
          await tmp3841.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp3842)
        {
          var tmp3843 = $"Error occurred in {GetType().FullName}: {tmp3842.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp3842, tmp3843);
          else
            Console.Error.WriteLine(tmp3843);
          var tmp3844 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("maximumLinearSpeed", TMessageType.Exception, seqid), cancellationToken);
          await tmp3844.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class model_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public model_args()
        {
        }

        public model_args DeepCopy()
        {
          var tmp3845 = new model_args();
          if(__isset.r)
          {
            tmp3845.R = this.R;
          }
          tmp3845.__isset.r = this.__isset.r;
          return tmp3845;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3846 = new TStruct("model_args");
            await oprot.WriteStructBeginAsync(tmp3846, cancellationToken);
            var tmp3847 = new TField();
            if(__isset.r)
            {
              tmp3847.Name = "r";
              tmp3847.Type = TType.I32;
              tmp3847.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3847, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3848 = new StringBuilder("model_args(");
          int tmp3849 = 0;
          if(__isset.r)
          {
            if(0 < tmp3849++) { tmp3848.Append(", "); }
            tmp3848.Append("R: ");
            R.ToString(tmp3848);
          }
          tmp3848.Append(')');
          return tmp3848.ToString();
        }
      }


      public partial class model_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public model_result()
        {
        }

        public model_result DeepCopy()
        {
          var tmp3850 = new model_result();
          if((Success != null) && __isset.success)
          {
            tmp3850.Success = this.Success;
          }
          tmp3850.__isset.success = this.__isset.success;
          return tmp3850;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3851 = new TStruct("model_result");
            await oprot.WriteStructBeginAsync(tmp3851, cancellationToken);
            var tmp3852 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3852.Name = "Success";
                tmp3852.Type = TType.String;
                tmp3852.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3852, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is model_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3853 = new StringBuilder("model_result(");
          int tmp3854 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3854++) { tmp3853.Append(", "); }
            tmp3853.Append("Success: ");
            Success.ToString(tmp3853);
          }
          tmp3853.Append(')');
          return tmp3853.ToString();
        }
      }


      public partial class dof_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public dof_args()
        {
        }

        public dof_args DeepCopy()
        {
          var tmp3855 = new dof_args();
          if(__isset.r)
          {
            tmp3855.R = this.R;
          }
          tmp3855.__isset.r = this.__isset.r;
          return tmp3855;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3856 = new TStruct("dof_args");
            await oprot.WriteStructBeginAsync(tmp3856, cancellationToken);
            var tmp3857 = new TField();
            if(__isset.r)
            {
              tmp3857.Name = "r";
              tmp3857.Type = TType.I32;
              tmp3857.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3857, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3858 = new StringBuilder("dof_args(");
          int tmp3859 = 0;
          if(__isset.r)
          {
            if(0 < tmp3859++) { tmp3858.Append(", "); }
            tmp3858.Append("R: ");
            R.ToString(tmp3858);
          }
          tmp3858.Append(')');
          return tmp3858.ToString();
        }
      }


      public partial class dof_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dof_result()
        {
        }

        public dof_result DeepCopy()
        {
          var tmp3860 = new dof_result();
          if(__isset.success)
          {
            tmp3860.Success = this.Success;
          }
          tmp3860.__isset.success = this.__isset.success;
          return tmp3860;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3861 = new TStruct("dof_result");
            await oprot.WriteStructBeginAsync(tmp3861, cancellationToken);
            var tmp3862 = new TField();

            if(this.__isset.success)
            {
              tmp3862.Name = "Success";
              tmp3862.Type = TType.I32;
              tmp3862.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3862, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dof_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3863 = new StringBuilder("dof_result(");
          int tmp3864 = 0;
          if(__isset.success)
          {
            if(0 < tmp3864++) { tmp3863.Append(", "); }
            tmp3863.Append("Success: ");
            Success.ToString(tmp3863);
          }
          tmp3863.Append(')');
          return tmp3863.ToString();
        }
      }


      public partial class jointLabels_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointLabels_args()
        {
        }

        public jointLabels_args DeepCopy()
        {
          var tmp3865 = new jointLabels_args();
          if(__isset.r)
          {
            tmp3865.R = this.R;
          }
          tmp3865.__isset.r = this.__isset.r;
          return tmp3865;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3866 = new TStruct("jointLabels_args");
            await oprot.WriteStructBeginAsync(tmp3866, cancellationToken);
            var tmp3867 = new TField();
            if(__isset.r)
            {
              tmp3867.Name = "r";
              tmp3867.Type = TType.I32;
              tmp3867.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3867, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3868 = new StringBuilder("jointLabels_args(");
          int tmp3869 = 0;
          if(__isset.r)
          {
            if(0 < tmp3869++) { tmp3868.Append(", "); }
            tmp3868.Append("R: ");
            R.ToString(tmp3868);
          }
          tmp3868.Append(')');
          return tmp3868.ToString();
        }
      }


      public partial class jointLabels_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointLabels_result()
        {
        }

        public jointLabels_result DeepCopy()
        {
          var tmp3870 = new jointLabels_result();
          if((Success != null) && __isset.success)
          {
            tmp3870.Success = this.Success.DeepCopy();
          }
          tmp3870.__isset.success = this.__isset.success;
          return tmp3870;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3871 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list3871.Count);
                      for(int _i3872 = 0; _i3872 < _list3871.Count; ++_i3872)
                      {
                        string _elem3873;
                        _elem3873 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem3873);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3874 = new TStruct("jointLabels_result");
            await oprot.WriteStructBeginAsync(tmp3874, cancellationToken);
            var tmp3875 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3875.Name = "Success";
                tmp3875.Type = TType.List;
                tmp3875.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3875, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter3876 in Success)
                {
                  await oprot.WriteStringAsync(_iter3876, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointLabels_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3877 = new StringBuilder("jointLabels_result(");
          int tmp3878 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3878++) { tmp3877.Append(", "); }
            tmp3877.Append("Success: ");
            Success.ToString(tmp3877);
          }
          tmp3877.Append(')');
          return tmp3877.ToString();
        }
      }


      public partial class jointTypes_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public jointTypes_args()
        {
        }

        public jointTypes_args DeepCopy()
        {
          var tmp3879 = new jointTypes_args();
          if(__isset.r)
          {
            tmp3879.R = this.R;
          }
          tmp3879.__isset.r = this.__isset.r;
          return tmp3879;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3880 = new TStruct("jointTypes_args");
            await oprot.WriteStructBeginAsync(tmp3880, cancellationToken);
            var tmp3881 = new TField();
            if(__isset.r)
            {
              tmp3881.Name = "r";
              tmp3881.Type = TType.I32;
              tmp3881.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3881, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3882 = new StringBuilder("jointTypes_args(");
          int tmp3883 = 0;
          if(__isset.r)
          {
            if(0 < tmp3883++) { tmp3882.Append(", "); }
            tmp3882.Append("R: ");
            R.ToString(tmp3882);
          }
          tmp3882.Append(')');
          return tmp3882.ToString();
        }
      }


      public partial class jointTypes_result : TBase
      {
        private List<global::Yaskawa.Ext.API.JointType> _success;

        public List<global::Yaskawa.Ext.API.JointType> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointTypes_result()
        {
        }

        public jointTypes_result DeepCopy()
        {
          var tmp3884 = new jointTypes_result();
          if((Success != null) && __isset.success)
          {
            tmp3884.Success = this.Success.DeepCopy();
          }
          tmp3884.__isset.success = this.__isset.success;
          return tmp3884;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list3885 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.JointType>(_list3885.Count);
                      for(int _i3886 = 0; _i3886 < _list3885.Count; ++_i3886)
                      {
                        global::Yaskawa.Ext.API.JointType _elem3887;
                        _elem3887 = (global::Yaskawa.Ext.API.JointType)await iprot.ReadI32Async(cancellationToken);
                        Success.Add(_elem3887);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3888 = new TStruct("jointTypes_result");
            await oprot.WriteStructBeginAsync(tmp3888, cancellationToken);
            var tmp3889 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3889.Name = "Success";
                tmp3889.Type = TType.List;
                tmp3889.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3889, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.I32, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.JointType _iter3890 in Success)
                {
                  await oprot.WriteI32Async((int)_iter3890, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3891 = new StringBuilder("jointTypes_result(");
          int tmp3892 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3892++) { tmp3891.Append(", "); }
            tmp3891.Append("Success: ");
            Success.ToString(tmp3891);
          }
          tmp3891.Append(')');
          return tmp3891.ToString();
        }
      }


      public partial class jointPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.OrientationUnit _unit;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
        /// </summary>
        public global::Yaskawa.Ext.API.OrientationUnit Unit
        {
          get
          {
            return _unit;
          }
          set
          {
            __isset.unit = true;
            this._unit = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool unit;
        }

        public jointPosition_args()
        {
        }

        public jointPosition_args DeepCopy()
        {
          var tmp3893 = new jointPosition_args();
          if(__isset.r)
          {
            tmp3893.R = this.R;
          }
          tmp3893.__isset.r = this.__isset.r;
          if(__isset.unit)
          {
            tmp3893.Unit = this.Unit;
          }
          tmp3893.__isset.unit = this.__isset.unit;
          return tmp3893;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Unit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3894 = new TStruct("jointPosition_args");
            await oprot.WriteStructBeginAsync(tmp3894, cancellationToken);
            var tmp3895 = new TField();
            if(__isset.r)
            {
              tmp3895.Name = "r";
              tmp3895.Type = TType.I32;
              tmp3895.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3895, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.unit)
            {
              tmp3895.Name = "unit";
              tmp3895.Type = TType.I32;
              tmp3895.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3895, cancellationToken);
              await oprot.WriteI32Async((int)Unit, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.unit == other.__isset.unit) && ((!__isset.unit) || (global::System.Object.Equals(Unit, other.Unit))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.unit)
            {
              hashcode = (hashcode * 397) + Unit.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3896 = new StringBuilder("jointPosition_args(");
          int tmp3897 = 0;
          if(__isset.r)
          {
            if(0 < tmp3897++) { tmp3896.Append(", "); }
            tmp3896.Append("R: ");
            R.ToString(tmp3896);
          }
          if(__isset.unit)
          {
            if(0 < tmp3897++) { tmp3896.Append(", "); }
            tmp3896.Append("Unit: ");
            Unit.ToString(tmp3896);
          }
          tmp3896.Append(')');
          return tmp3896.ToString();
        }
      }


      public partial class jointPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public jointPosition_result()
        {
        }

        public jointPosition_result DeepCopy()
        {
          var tmp3898 = new jointPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3898.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3898.__isset.success = this.__isset.success;
          return tmp3898;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3899 = new TStruct("jointPosition_result");
            await oprot.WriteStructBeginAsync(tmp3899, cancellationToken);
            var tmp3900 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3900.Name = "Success";
                tmp3900.Type = TType.Struct;
                tmp3900.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3900, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is jointPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3901 = new StringBuilder("jointPosition_result(");
          int tmp3902 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3902++) { tmp3901.Append(", "); }
            tmp3901.Append("Success: ");
            Success.ToString(tmp3901);
          }
          tmp3901.Append(')');
          return tmp3901.ToString();
        }
      }


      public partial class toolTipPosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.CoordinateFrame _frame;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.CoordinateFrame Frame
        {
          get
          {
            return _frame;
          }
          set
          {
            __isset.frame = true;
            this._frame = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool frame;
          public bool tool;
        }

        public toolTipPosition_args()
        {
        }

        public toolTipPosition_args DeepCopy()
        {
          var tmp3903 = new toolTipPosition_args();
          if(__isset.r)
          {
            tmp3903.R = this.R;
          }
          tmp3903.__isset.r = this.__isset.r;
          if((Frame != null) && __isset.frame)
          {
            tmp3903.Frame = (global::Yaskawa.Ext.API.CoordinateFrame)this.Frame.DeepCopy();
          }
          tmp3903.__isset.frame = this.__isset.frame;
          if(__isset.tool)
          {
            tmp3903.Tool = this.Tool;
          }
          tmp3903.__isset.tool = this.__isset.tool;
          return tmp3903;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Frame = new global::Yaskawa.Ext.API.CoordinateFrame();
                    await Frame.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3904 = new TStruct("toolTipPosition_args");
            await oprot.WriteStructBeginAsync(tmp3904, cancellationToken);
            var tmp3905 = new TField();
            if(__isset.r)
            {
              tmp3905.Name = "r";
              tmp3905.Type = TType.I32;
              tmp3905.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3905, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Frame != null) && __isset.frame)
            {
              tmp3905.Name = "frame";
              tmp3905.Type = TType.Struct;
              tmp3905.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3905, cancellationToken);
              await Frame.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp3905.Name = "tool";
              tmp3905.Type = TType.I32;
              tmp3905.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp3905, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.frame == other.__isset.frame) && ((!__isset.frame) || (global::System.Object.Equals(Frame, other.Frame))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((Frame != null) && __isset.frame)
            {
              hashcode = (hashcode * 397) + Frame.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3906 = new StringBuilder("toolTipPosition_args(");
          int tmp3907 = 0;
          if(__isset.r)
          {
            if(0 < tmp3907++) { tmp3906.Append(", "); }
            tmp3906.Append("R: ");
            R.ToString(tmp3906);
          }
          if((Frame != null) && __isset.frame)
          {
            if(0 < tmp3907++) { tmp3906.Append(", "); }
            tmp3906.Append("Frame: ");
            Frame.ToString(tmp3906);
          }
          if(__isset.tool)
          {
            if(0 < tmp3907++) { tmp3906.Append(", "); }
            tmp3906.Append("Tool: ");
            Tool.ToString(tmp3906);
          }
          tmp3906.Append(')');
          return tmp3906.ToString();
        }
      }


      public partial class toolTipPosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public toolTipPosition_result()
        {
        }

        public toolTipPosition_result DeepCopy()
        {
          var tmp3908 = new toolTipPosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3908.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3908.__isset.success = this.__isset.success;
          return tmp3908;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3909 = new TStruct("toolTipPosition_result");
            await oprot.WriteStructBeginAsync(tmp3909, cancellationToken);
            var tmp3910 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3910.Name = "Success";
                tmp3910.Type = TType.Struct;
                tmp3910.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3910, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is toolTipPosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3911 = new StringBuilder("toolTipPosition_result(");
          int tmp3912 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3912++) { tmp3911.Append(", "); }
            tmp3911.Append("Success: ");
            Success.ToString(tmp3911);
          }
          tmp3911.Append(')');
          return tmp3911.ToString();
        }
      }


      public partial class forceLimitingAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingAvailable_args()
        {
        }

        public forceLimitingAvailable_args DeepCopy()
        {
          var tmp3913 = new forceLimitingAvailable_args();
          if(__isset.r)
          {
            tmp3913.R = this.R;
          }
          tmp3913.__isset.r = this.__isset.r;
          return tmp3913;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3914 = new TStruct("forceLimitingAvailable_args");
            await oprot.WriteStructBeginAsync(tmp3914, cancellationToken);
            var tmp3915 = new TField();
            if(__isset.r)
            {
              tmp3915.Name = "r";
              tmp3915.Type = TType.I32;
              tmp3915.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3915, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3916 = new StringBuilder("forceLimitingAvailable_args(");
          int tmp3917 = 0;
          if(__isset.r)
          {
            if(0 < tmp3917++) { tmp3916.Append(", "); }
            tmp3916.Append("R: ");
            R.ToString(tmp3916);
          }
          tmp3916.Append(')');
          return tmp3916.ToString();
        }
      }


      public partial class forceLimitingAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingAvailable_result()
        {
        }

        public forceLimitingAvailable_result DeepCopy()
        {
          var tmp3918 = new forceLimitingAvailable_result();
          if(__isset.success)
          {
            tmp3918.Success = this.Success;
          }
          tmp3918.__isset.success = this.__isset.success;
          return tmp3918;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3919 = new TStruct("forceLimitingAvailable_result");
            await oprot.WriteStructBeginAsync(tmp3919, cancellationToken);
            var tmp3920 = new TField();

            if(this.__isset.success)
            {
              tmp3920.Name = "Success";
              tmp3920.Type = TType.Bool;
              tmp3920.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3920, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3921 = new StringBuilder("forceLimitingAvailable_result(");
          int tmp3922 = 0;
          if(__isset.success)
          {
            if(0 < tmp3922++) { tmp3921.Append(", "); }
            tmp3921.Append("Success: ");
            Success.ToString(tmp3921);
          }
          tmp3921.Append(')');
          return tmp3921.ToString();
        }
      }


      public partial class forceLimitingActive_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingActive_args()
        {
        }

        public forceLimitingActive_args DeepCopy()
        {
          var tmp3923 = new forceLimitingActive_args();
          if(__isset.r)
          {
            tmp3923.R = this.R;
          }
          tmp3923.__isset.r = this.__isset.r;
          return tmp3923;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3924 = new TStruct("forceLimitingActive_args");
            await oprot.WriteStructBeginAsync(tmp3924, cancellationToken);
            var tmp3925 = new TField();
            if(__isset.r)
            {
              tmp3925.Name = "r";
              tmp3925.Type = TType.I32;
              tmp3925.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3925, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3926 = new StringBuilder("forceLimitingActive_args(");
          int tmp3927 = 0;
          if(__isset.r)
          {
            if(0 < tmp3927++) { tmp3926.Append(", "); }
            tmp3926.Append("R: ");
            R.ToString(tmp3926);
          }
          tmp3926.Append(')');
          return tmp3926.ToString();
        }
      }


      public partial class forceLimitingActive_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingActive_result()
        {
        }

        public forceLimitingActive_result DeepCopy()
        {
          var tmp3928 = new forceLimitingActive_result();
          if(__isset.success)
          {
            tmp3928.Success = this.Success;
          }
          tmp3928.__isset.success = this.__isset.success;
          return tmp3928;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3929 = new TStruct("forceLimitingActive_result");
            await oprot.WriteStructBeginAsync(tmp3929, cancellationToken);
            var tmp3930 = new TField();

            if(this.__isset.success)
            {
              tmp3930.Name = "Success";
              tmp3930.Type = TType.Bool;
              tmp3930.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3930, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingActive_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3931 = new StringBuilder("forceLimitingActive_result(");
          int tmp3932 = 0;
          if(__isset.success)
          {
            if(0 < tmp3932++) { tmp3931.Append(", "); }
            tmp3931.Append("Success: ");
            Success.ToString(tmp3931);
          }
          tmp3931.Append(')');
          return tmp3931.ToString();
        }
      }


      public partial class forceLimitingStopped_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public forceLimitingStopped_args()
        {
        }

        public forceLimitingStopped_args DeepCopy()
        {
          var tmp3933 = new forceLimitingStopped_args();
          if(__isset.r)
          {
            tmp3933.R = this.R;
          }
          tmp3933.__isset.r = this.__isset.r;
          return tmp3933;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3934 = new TStruct("forceLimitingStopped_args");
            await oprot.WriteStructBeginAsync(tmp3934, cancellationToken);
            var tmp3935 = new TField();
            if(__isset.r)
            {
              tmp3935.Name = "r";
              tmp3935.Type = TType.I32;
              tmp3935.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3935, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3936 = new StringBuilder("forceLimitingStopped_args(");
          int tmp3937 = 0;
          if(__isset.r)
          {
            if(0 < tmp3937++) { tmp3936.Append(", "); }
            tmp3936.Append("R: ");
            R.ToString(tmp3936);
          }
          tmp3936.Append(')');
          return tmp3936.ToString();
        }
      }


      public partial class forceLimitingStopped_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public forceLimitingStopped_result()
        {
        }

        public forceLimitingStopped_result DeepCopy()
        {
          var tmp3938 = new forceLimitingStopped_result();
          if(__isset.success)
          {
            tmp3938.Success = this.Success;
          }
          tmp3938.__isset.success = this.__isset.success;
          return tmp3938;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3939 = new TStruct("forceLimitingStopped_result");
            await oprot.WriteStructBeginAsync(tmp3939, cancellationToken);
            var tmp3940 = new TField();

            if(this.__isset.success)
            {
              tmp3940.Name = "Success";
              tmp3940.Type = TType.Bool;
              tmp3940.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3940, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is forceLimitingStopped_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3941 = new StringBuilder("forceLimitingStopped_result(");
          int tmp3942 = 0;
          if(__isset.success)
          {
            if(0 < tmp3942++) { tmp3941.Append(", "); }
            tmp3941.Append("Success: ");
            Success.ToString(tmp3941);
          }
          tmp3941.Append(')');
          return tmp3941.ToString();
        }
      }


      public partial class switchBoxAvailable_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public switchBoxAvailable_args()
        {
        }

        public switchBoxAvailable_args DeepCopy()
        {
          var tmp3943 = new switchBoxAvailable_args();
          if(__isset.r)
          {
            tmp3943.R = this.R;
          }
          tmp3943.__isset.r = this.__isset.r;
          return tmp3943;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3944 = new TStruct("switchBoxAvailable_args");
            await oprot.WriteStructBeginAsync(tmp3944, cancellationToken);
            var tmp3945 = new TField();
            if(__isset.r)
            {
              tmp3945.Name = "r";
              tmp3945.Type = TType.I32;
              tmp3945.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3945, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3946 = new StringBuilder("switchBoxAvailable_args(");
          int tmp3947 = 0;
          if(__isset.r)
          {
            if(0 < tmp3947++) { tmp3946.Append(", "); }
            tmp3946.Append("R: ");
            R.ToString(tmp3946);
          }
          tmp3946.Append(')');
          return tmp3946.ToString();
        }
      }


      public partial class switchBoxAvailable_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public switchBoxAvailable_result()
        {
        }

        public switchBoxAvailable_result DeepCopy()
        {
          var tmp3948 = new switchBoxAvailable_result();
          if(__isset.success)
          {
            tmp3948.Success = this.Success;
          }
          tmp3948.__isset.success = this.__isset.success;
          return tmp3948;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3949 = new TStruct("switchBoxAvailable_result");
            await oprot.WriteStructBeginAsync(tmp3949, cancellationToken);
            var tmp3950 = new TField();

            if(this.__isset.success)
            {
              tmp3950.Name = "Success";
              tmp3950.Type = TType.Bool;
              tmp3950.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3950, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is switchBoxAvailable_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3951 = new StringBuilder("switchBoxAvailable_result(");
          int tmp3952 = 0;
          if(__isset.success)
          {
            if(0 < tmp3952++) { tmp3951.Append(", "); }
            tmp3951.Append("Success: ");
            Success.ToString(tmp3951);
          }
          tmp3951.Append(')');
          return tmp3951.ToString();
        }
      }


      public partial class activeTool_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public activeTool_args()
        {
        }

        public activeTool_args DeepCopy()
        {
          var tmp3953 = new activeTool_args();
          if(__isset.r)
          {
            tmp3953.R = this.R;
          }
          tmp3953.__isset.r = this.__isset.r;
          return tmp3953;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3954 = new TStruct("activeTool_args");
            await oprot.WriteStructBeginAsync(tmp3954, cancellationToken);
            var tmp3955 = new TField();
            if(__isset.r)
            {
              tmp3955.Name = "r";
              tmp3955.Type = TType.I32;
              tmp3955.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3955, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3956 = new StringBuilder("activeTool_args(");
          int tmp3957 = 0;
          if(__isset.r)
          {
            if(0 < tmp3957++) { tmp3956.Append(", "); }
            tmp3956.Append("R: ");
            R.ToString(tmp3956);
          }
          tmp3956.Append(')');
          return tmp3956.ToString();
        }
      }


      public partial class activeTool_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public activeTool_result()
        {
        }

        public activeTool_result DeepCopy()
        {
          var tmp3958 = new activeTool_result();
          if(__isset.success)
          {
            tmp3958.Success = this.Success;
          }
          tmp3958.__isset.success = this.__isset.success;
          return tmp3958;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3959 = new TStruct("activeTool_result");
            await oprot.WriteStructBeginAsync(tmp3959, cancellationToken);
            var tmp3960 = new TField();

            if(this.__isset.success)
            {
              tmp3960.Name = "Success";
              tmp3960.Type = TType.I32;
              tmp3960.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp3960, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activeTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3961 = new StringBuilder("activeTool_result(");
          int tmp3962 = 0;
          if(__isset.success)
          {
            if(0 < tmp3962++) { tmp3961.Append(", "); }
            tmp3961.Append("Success: ");
            Success.ToString(tmp3961);
          }
          tmp3961.Append(')');
          return tmp3961.ToString();
        }
      }


      public partial class setActiveTool_args : TBase
      {
        private int _r;
        private int _tool;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public int Tool
        {
          get
          {
            return _tool;
          }
          set
          {
            __isset.tool = true;
            this._tool = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool tool;
        }

        public setActiveTool_args()
        {
        }

        public setActiveTool_args DeepCopy()
        {
          var tmp3963 = new setActiveTool_args();
          if(__isset.r)
          {
            tmp3963.R = this.R;
          }
          tmp3963.__isset.r = this.__isset.r;
          if(__isset.tool)
          {
            tmp3963.Tool = this.Tool;
          }
          tmp3963.__isset.tool = this.__isset.tool;
          return tmp3963;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Tool = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3964 = new TStruct("setActiveTool_args");
            await oprot.WriteStructBeginAsync(tmp3964, cancellationToken);
            var tmp3965 = new TField();
            if(__isset.r)
            {
              tmp3965.Name = "r";
              tmp3965.Type = TType.I32;
              tmp3965.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3965, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tool)
            {
              tmp3965.Name = "tool";
              tmp3965.Type = TType.I32;
              tmp3965.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3965, cancellationToken);
              await oprot.WriteI32Async(Tool, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.tool == other.__isset.tool) && ((!__isset.tool) || (global::System.Object.Equals(Tool, other.Tool))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if(__isset.tool)
            {
              hashcode = (hashcode * 397) + Tool.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3966 = new StringBuilder("setActiveTool_args(");
          int tmp3967 = 0;
          if(__isset.r)
          {
            if(0 < tmp3967++) { tmp3966.Append(", "); }
            tmp3966.Append("R: ");
            R.ToString(tmp3966);
          }
          if(__isset.tool)
          {
            if(0 < tmp3967++) { tmp3966.Append(", "); }
            tmp3966.Append("Tool: ");
            Tool.ToString(tmp3966);
          }
          tmp3966.Append(')');
          return tmp3966.ToString();
        }
      }


      public partial class setActiveTool_result : TBase
      {

        public setActiveTool_result()
        {
        }

        public setActiveTool_result DeepCopy()
        {
          var tmp3968 = new setActiveTool_result();
          return tmp3968;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3969 = new TStruct("setActiveTool_result");
            await oprot.WriteStructBeginAsync(tmp3969, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setActiveTool_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3970 = new StringBuilder("setActiveTool_result(");
          tmp3970.Append(')');
          return tmp3970.ToString();
        }
      }


      public partial class workHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public workHomePosition_args()
        {
        }

        public workHomePosition_args DeepCopy()
        {
          var tmp3972 = new workHomePosition_args();
          if(__isset.r)
          {
            tmp3972.R = this.R;
          }
          tmp3972.__isset.r = this.__isset.r;
          return tmp3972;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3973 = new TStruct("workHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3973, cancellationToken);
            var tmp3974 = new TField();
            if(__isset.r)
            {
              tmp3974.Name = "r";
              tmp3974.Type = TType.I32;
              tmp3974.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3974, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3975 = new StringBuilder("workHomePosition_args(");
          int tmp3976 = 0;
          if(__isset.r)
          {
            if(0 < tmp3976++) { tmp3975.Append(", "); }
            tmp3975.Append("R: ");
            R.ToString(tmp3975);
          }
          tmp3975.Append(')');
          return tmp3975.ToString();
        }
      }


      public partial class workHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public workHomePosition_result()
        {
        }

        public workHomePosition_result DeepCopy()
        {
          var tmp3977 = new workHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3977.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3977.__isset.success = this.__isset.success;
          return tmp3977;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3978 = new TStruct("workHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3978, cancellationToken);
            var tmp3979 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3979.Name = "Success";
                tmp3979.Type = TType.Struct;
                tmp3979.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3979, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is workHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3980 = new StringBuilder("workHomePosition_result(");
          int tmp3981 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3981++) { tmp3980.Append(", "); }
            tmp3980.Append("Success: ");
            Success.ToString(tmp3980);
          }
          tmp3980.Append(')');
          return tmp3980.ToString();
        }
      }


      public partial class setWorkHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setWorkHomePosition_args()
        {
        }

        public setWorkHomePosition_args DeepCopy()
        {
          var tmp3982 = new setWorkHomePosition_args();
          if(__isset.r)
          {
            tmp3982.R = this.R;
          }
          tmp3982.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp3982.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp3982.__isset.p = this.__isset.p;
          return tmp3982;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3983 = new TStruct("setWorkHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3983, cancellationToken);
            var tmp3984 = new TField();
            if(__isset.r)
            {
              tmp3984.Name = "r";
              tmp3984.Type = TType.I32;
              tmp3984.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3984, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp3984.Name = "p";
              tmp3984.Type = TType.Struct;
              tmp3984.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp3984, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3985 = new StringBuilder("setWorkHomePosition_args(");
          int tmp3986 = 0;
          if(__isset.r)
          {
            if(0 < tmp3986++) { tmp3985.Append(", "); }
            tmp3985.Append("R: ");
            R.ToString(tmp3985);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp3986++) { tmp3985.Append(", "); }
            tmp3985.Append("P: ");
            P.ToString(tmp3985);
          }
          tmp3985.Append(')');
          return tmp3985.ToString();
        }
      }


      public partial class setWorkHomePosition_result : TBase
      {

        public setWorkHomePosition_result()
        {
        }

        public setWorkHomePosition_result DeepCopy()
        {
          var tmp3987 = new setWorkHomePosition_result();
          return tmp3987;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3988 = new TStruct("setWorkHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3988, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3989 = new StringBuilder("setWorkHomePosition_result(");
          tmp3989.Append(')');
          return tmp3989.ToString();
        }
      }


      public partial class secondHomePosition_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public secondHomePosition_args()
        {
        }

        public secondHomePosition_args DeepCopy()
        {
          var tmp3991 = new secondHomePosition_args();
          if(__isset.r)
          {
            tmp3991.R = this.R;
          }
          tmp3991.__isset.r = this.__isset.r;
          return tmp3991;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3992 = new TStruct("secondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp3992, cancellationToken);
            var tmp3993 = new TField();
            if(__isset.r)
            {
              tmp3993.Name = "r";
              tmp3993.Type = TType.I32;
              tmp3993.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp3993, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3994 = new StringBuilder("secondHomePosition_args(");
          int tmp3995 = 0;
          if(__isset.r)
          {
            if(0 < tmp3995++) { tmp3994.Append(", "); }
            tmp3994.Append("R: ");
            R.ToString(tmp3994);
          }
          tmp3994.Append(')');
          return tmp3994.ToString();
        }
      }


      public partial class secondHomePosition_result : TBase
      {
        private global::Yaskawa.Ext.API.Position _success;

        public global::Yaskawa.Ext.API.Position Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public secondHomePosition_result()
        {
        }

        public secondHomePosition_result DeepCopy()
        {
          var tmp3996 = new secondHomePosition_result();
          if((Success != null) && __isset.success)
          {
            tmp3996.Success = (global::Yaskawa.Ext.API.Position)this.Success.DeepCopy();
          }
          tmp3996.__isset.success = this.__isset.success;
          return tmp3996;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Position();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp3997 = new TStruct("secondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp3997, cancellationToken);
            var tmp3998 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp3998.Name = "Success";
                tmp3998.Type = TType.Struct;
                tmp3998.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp3998, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is secondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp3999 = new StringBuilder("secondHomePosition_result(");
          int tmp4000 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp4000++) { tmp3999.Append(", "); }
            tmp3999.Append("Success: ");
            Success.ToString(tmp3999);
          }
          tmp3999.Append(')');
          return tmp3999.ToString();
        }
      }


      public partial class setSecondHomePosition_args : TBase
      {
        private int _r;
        private global::Yaskawa.Ext.API.Position _p;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }

        public global::Yaskawa.Ext.API.Position P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
          public bool p;
        }

        public setSecondHomePosition_args()
        {
        }

        public setSecondHomePosition_args DeepCopy()
        {
          var tmp4001 = new setSecondHomePosition_args();
          if(__isset.r)
          {
            tmp4001.R = this.R;
          }
          tmp4001.__isset.r = this.__isset.r;
          if((P != null) && __isset.p)
          {
            tmp4001.P = (global::Yaskawa.Ext.API.Position)this.P.DeepCopy();
          }
          tmp4001.__isset.p = this.__isset.p;
          return tmp4001;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    P = new global::Yaskawa.Ext.API.Position();
                    await P.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4002 = new TStruct("setSecondHomePosition_args");
            await oprot.WriteStructBeginAsync(tmp4002, cancellationToken);
            var tmp4003 = new TField();
            if(__isset.r)
            {
              tmp4003.Name = "r";
              tmp4003.Type = TType.I32;
              tmp4003.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4003, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((P != null) && __isset.p)
            {
              tmp4003.Name = "p";
              tmp4003.Type = TType.Struct;
              tmp4003.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp4003, cancellationToken);
              await P.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))))
            && ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
            if((P != null) && __isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4004 = new StringBuilder("setSecondHomePosition_args(");
          int tmp4005 = 0;
          if(__isset.r)
          {
            if(0 < tmp4005++) { tmp4004.Append(", "); }
            tmp4004.Append("R: ");
            R.ToString(tmp4004);
          }
          if((P != null) && __isset.p)
          {
            if(0 < tmp4005++) { tmp4004.Append(", "); }
            tmp4004.Append("P: ");
            P.ToString(tmp4004);
          }
          tmp4004.Append(')');
          return tmp4004.ToString();
        }
      }


      public partial class setSecondHomePosition_result : TBase
      {

        public setSecondHomePosition_result()
        {
        }

        public setSecondHomePosition_result DeepCopy()
        {
          var tmp4006 = new setSecondHomePosition_result();
          return tmp4006;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4007 = new TStruct("setSecondHomePosition_result");
            await oprot.WriteStructBeginAsync(tmp4007, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setSecondHomePosition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4008 = new StringBuilder("setSecondHomePosition_result(");
          tmp4008.Append(')');
          return tmp4008.ToString();
        }
      }


      public partial class maximumLinearSpeed_args : TBase
      {
        private int _r;

        public int R
        {
          get
          {
            return _r;
          }
          set
          {
            __isset.r = true;
            this._r = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool r;
        }

        public maximumLinearSpeed_args()
        {
        }

        public maximumLinearSpeed_args DeepCopy()
        {
          var tmp4010 = new maximumLinearSpeed_args();
          if(__isset.r)
          {
            tmp4010.R = this.R;
          }
          tmp4010.__isset.r = this.__isset.r;
          return tmp4010;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    R = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4011 = new TStruct("maximumLinearSpeed_args");
            await oprot.WriteStructBeginAsync(tmp4011, cancellationToken);
            var tmp4012 = new TField();
            if(__isset.r)
            {
              tmp4012.Name = "r";
              tmp4012.Type = TType.I32;
              tmp4012.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp4012, cancellationToken);
              await oprot.WriteI32Async(R, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.r == other.__isset.r) && ((!__isset.r) || (global::System.Object.Equals(R, other.R))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.r)
            {
              hashcode = (hashcode * 397) + R.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4013 = new StringBuilder("maximumLinearSpeed_args(");
          int tmp4014 = 0;
          if(__isset.r)
          {
            if(0 < tmp4014++) { tmp4013.Append(", "); }
            tmp4013.Append("R: ");
            R.ToString(tmp4013);
          }
          tmp4013.Append(')');
          return tmp4013.ToString();
        }
      }


      public partial class maximumLinearSpeed_result : TBase
      {
        private double _success;

        public double Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public maximumLinearSpeed_result()
        {
        }

        public maximumLinearSpeed_result DeepCopy()
        {
          var tmp4015 = new maximumLinearSpeed_result();
          if(__isset.success)
          {
            tmp4015.Success = this.Success;
          }
          tmp4015.__isset.success = this.__isset.success;
          return tmp4015;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Double)
                  {
                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp4016 = new TStruct("maximumLinearSpeed_result");
            await oprot.WriteStructBeginAsync(tmp4016, cancellationToken);
            var tmp4017 = new TField();

            if(this.__isset.success)
            {
              tmp4017.Name = "Success";
              tmp4017.Type = TType.Double;
              tmp4017.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp4017, cancellationToken);
              await oprot.WriteDoubleAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is maximumLinearSpeed_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp4018 = new StringBuilder("maximumLinearSpeed_result(");
          int tmp4019 = 0;
          if(__isset.success)
          {
            if(0 < tmp4019++) { tmp4018.Append(", "); }
            tmp4018.Append("Success: ");
            Success.ToString(tmp4018);
          }
          tmp4018.Append(')');
          return tmp4018.ToString();
        }
      }

    }

  }
}
