/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  public partial class Version : TBase
  {
    private short _nmajor;
    private short _nminor;
    private short _npatch;
    private string _release;
    private string _build;

    public short Nmajor
    {
      get
      {
        return _nmajor;
      }
      set
      {
        __isset.nmajor = true;
        this._nmajor = value;
      }
    }

    public short Nminor
    {
      get
      {
        return _nminor;
      }
      set
      {
        __isset.nminor = true;
        this._nminor = value;
      }
    }

    public short Npatch
    {
      get
      {
        return _npatch;
      }
      set
      {
        __isset.npatch = true;
        this._npatch = value;
      }
    }

    public string Release
    {
      get
      {
        return _release;
      }
      set
      {
        __isset.release = true;
        this._release = value;
      }
    }

    public string Build
    {
      get
      {
        return _build;
      }
      set
      {
        __isset.build = true;
        this._build = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool nmajor;
      public bool nminor;
      public bool npatch;
      public bool release;
      public bool build;
    }

    public Version()
    {
    }

    public Version DeepCopy()
    {
      var tmp57 = new Version();
      if(__isset.nmajor)
      {
        tmp57.Nmajor = this.Nmajor;
      }
      tmp57.__isset.nmajor = this.__isset.nmajor;
      if(__isset.nminor)
      {
        tmp57.Nminor = this.Nminor;
      }
      tmp57.__isset.nminor = this.__isset.nminor;
      if(__isset.npatch)
      {
        tmp57.Npatch = this.Npatch;
      }
      tmp57.__isset.npatch = this.__isset.npatch;
      if((Release != null) && __isset.release)
      {
        tmp57.Release = this.Release;
      }
      tmp57.__isset.release = this.__isset.release;
      if((Build != null) && __isset.build)
      {
        tmp57.Build = this.Build;
      }
      tmp57.__isset.build = this.__isset.build;
      return tmp57;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                Nmajor = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                Nminor = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I16)
              {
                Npatch = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Release = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Build = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp58 = new TStruct("Version");
        await oprot.WriteStructBeginAsync(tmp58, cancellationToken);
        var tmp59 = new TField();
        if(__isset.nmajor)
        {
          tmp59.Name = "nmajor";
          tmp59.Type = TType.I16;
          tmp59.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteI16Async(Nmajor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.nminor)
        {
          tmp59.Name = "nminor";
          tmp59.Type = TType.I16;
          tmp59.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteI16Async(Nminor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.npatch)
        {
          tmp59.Name = "npatch";
          tmp59.Type = TType.I16;
          tmp59.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteI16Async(Npatch, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Release != null) && __isset.release)
        {
          tmp59.Name = "release";
          tmp59.Type = TType.String;
          tmp59.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteStringAsync(Release, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Build != null) && __isset.build)
        {
          tmp59.Name = "build";
          tmp59.Type = TType.String;
          tmp59.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteStringAsync(Build, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Version other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.nmajor == other.__isset.nmajor) && ((!__isset.nmajor) || (global::System.Object.Equals(Nmajor, other.Nmajor))))
        && ((__isset.nminor == other.__isset.nminor) && ((!__isset.nminor) || (global::System.Object.Equals(Nminor, other.Nminor))))
        && ((__isset.npatch == other.__isset.npatch) && ((!__isset.npatch) || (global::System.Object.Equals(Npatch, other.Npatch))))
        && ((__isset.release == other.__isset.release) && ((!__isset.release) || (global::System.Object.Equals(Release, other.Release))))
        && ((__isset.build == other.__isset.build) && ((!__isset.build) || (global::System.Object.Equals(Build, other.Build))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.nmajor)
        {
          hashcode = (hashcode * 397) + Nmajor.GetHashCode();
        }
        if(__isset.nminor)
        {
          hashcode = (hashcode * 397) + Nminor.GetHashCode();
        }
        if(__isset.npatch)
        {
          hashcode = (hashcode * 397) + Npatch.GetHashCode();
        }
        if((Release != null) && __isset.release)
        {
          hashcode = (hashcode * 397) + Release.GetHashCode();
        }
        if((Build != null) && __isset.build)
        {
          hashcode = (hashcode * 397) + Build.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp60 = new StringBuilder("Version(");
      int tmp61 = 0;
      if(__isset.nmajor)
      {
        if(0 < tmp61++) { tmp60.Append(", "); }
        tmp60.Append("Nmajor: ");
        Nmajor.ToString(tmp60);
      }
      if(__isset.nminor)
      {
        if(0 < tmp61++) { tmp60.Append(", "); }
        tmp60.Append("Nminor: ");
        Nminor.ToString(tmp60);
      }
      if(__isset.npatch)
      {
        if(0 < tmp61++) { tmp60.Append(", "); }
        tmp60.Append("Npatch: ");
        Npatch.ToString(tmp60);
      }
      if((Release != null) && __isset.release)
      {
        if(0 < tmp61++) { tmp60.Append(", "); }
        tmp60.Append("Release: ");
        Release.ToString(tmp60);
      }
      if((Build != null) && __isset.build)
      {
        if(0 < tmp61++) { tmp60.Append(", "); }
        tmp60.Append("Build: ");
        Build.ToString(tmp60);
      }
      tmp60.Append(')');
      return tmp60.ToString();
    }
  }

}
