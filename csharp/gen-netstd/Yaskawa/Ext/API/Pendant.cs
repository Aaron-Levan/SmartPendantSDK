/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Pendant
  {
    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of the Smart Pendant itself
      /// (avoid using this for conditional feature use - use the Extension apiVersion() instead)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service events.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service YML Item-specific events.
      /// Specified events will be sent for all specified items.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service YML Item-specific events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of Pendant service events that have occured since last call
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query the current UI language of the pendant interface.
      /// Returns IETF language codes (RFCs 5646, 5645, 4647) of languages
      /// (typically ISO 693-1 code when region insignificant)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// The UI screen currently shown to the pendant user
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an Item type described using a YML source code string
      /// Returns a list of parsing errors (0 on success)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ymlSource"></param>
      global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image file for later reference by filename (must be uniquely named, with .jpg or .png).
      /// If file cannot be accessed by service, it will be locally read and registerImageData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image for later reference by name (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageData"></param>
      /// <param name="imageName"></param>
      global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a HTML file for later reference by filename (must be uniquely named, with .html).
      /// If file cannot be accessed by service, it will be locally read and registerHTMLData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlFileName"></param>
      global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register HTML for later reference by name (must be uniquely named, with .html extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlData"></param>
      /// <param name="htmlName"></param>
      global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a translation file (e.g. a Java properties file for a language); extension is used to determine format
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationFileName"></param>
      global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register translation file data (translationName typically filename-like; extension is used to determine format)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationData"></param>
      /// <param name="translationName"></param>
      global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a menu that utilities can be registered under *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      /// <param name="menuText"></param>
      /// <param name="menuIcon"></param>
      global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters a user added menu - All Utilities within the menu must be unregistered with 'unregisterUtilityWindow' first
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Utility window with the UI.
      /// The itemType references a previously registered YML item instantiated for the window
      /// UI content.
      /// The menuName refers to a previously registered menu that the utility will apear under on the
      /// main menu or if none is specified it will be under 'Utility'
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="itemType"></param>
      /// <param name="menuItemName"></param>
      /// <param name="windowTitle"></param>
      global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open (make visible) previously registered Utility Window
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close a visible Utility Window (make invisible - state is maintained)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Collapse previously registered Utility Window, if in expanded state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Expand previously registered Utility Window, if in collapsed state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Refresh the Inform grammar for instructions with the specified type *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instructionType"></param>
      global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register UI content at the specified integration point in the pendant UI.
      /// The itemType should reference a YML item previously registered via registerYML().
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="itemType"></param>
      /// <param name="buttonLabel"></param>
      /// <param name="buttonImage"></param>
      global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Switch component at the specified integraiton point in the pendant UI.
      /// When the switch is toggled, it creates a PendantEvent with a type of IntegrationPointSwitchStateChanged that can be gotten via events()
      /// Switches registered with registerSwitch() can be unregistered with unregisterIntegration()
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="switchLabel"></param>
      /// <param name="offPositionLabel"></param>
      /// <param name="onPositionLabel"></param>
      /// <param name="defaultState"></param>
      global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default);

      /// <summary>
      /// Registers the extension as a link directly from any given instruction, if the specified tags are in the line
      /// Note: the informTags are treated as disparate cases, not cumulative where all the tags specified have to be active
      /// for the direct open functionality
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="instruction"></param>
      /// <param name="instrTags"></param>
      global::System.Threading.Tasks.Task registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters the extension as a link directly from the specified inform command
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// get property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set several properties (potentially for different items) at once.  This is more
      /// efficient that many repeated calls to setProperty().
      /// Note it is asynchronous so no errors/exceptions are thrown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="propValuesList"></param>
      global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the configuration of a chart by ID.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="config"></param>
      global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the configuration of a chart by ID
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="dataset"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to access the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Add a new key to the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="data"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to remove from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Hides an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to hide a key from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="hidden"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append new data points to a specified key in the data of a chart by ID.
      /// This function will only have an effect on line/scatter charts. Set
      /// 'right' to true to pass the dataset for a secondary scale on the right
      /// hand side.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="points"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Increments a category value by `val`.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="val"></param>
      global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to the specified filename (must be uniquely named, with .jpg or .png).
      /// Calls exportChartImageData if the extension is unable to access the file.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to a binary blob (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user.
      /// Notices are automaticlly hidden after a short display period.
      /// Notice messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user with specified disposition.
      /// As for notice() but displayed in a way that connotes the specified disposition.
      /// For example, a Positive disposition may be shown in green.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// (API version 2.1 and later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="disposition"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show error to user.
      /// Errors should only indicate important situations that the user must be aware of and for which deliberate
      /// acknowledgement is required before proceeding.  Typically, some action will be required to correct the situation.
      /// Errors are displayed until dismissed by the user.
      /// Error messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Display modal pop-up dialog.  Typically, Yes/No, although negativeOption can be omitted
      /// The identifier can be used to associate the corresponding PopupOpened & PopupClosed events triggered by
      /// user positive/negative selection or automatic dismissal/cancellation - for example is screen switched, alarm etc.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="positiveOption"></param>
      /// <param name="negativeOption"></param>
      global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default);

      /// <summary>
      /// Cancel an open popup dialog.  If the dialog has a negative option, behaves as if user selected it, otherwise
      /// no event is generated
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Inserts an instruction, returns a string:
      /// Success,
      /// UnsupportedCommand,
      /// InvalidFormat,
      /// ProgrammingViewClosed,
      /// JobDoesNotExist,
      /// CallingJobFromSameJob,
      /// ExceededMaxArguments,
      /// JobNotEditable,
      /// MultiSelectActive,
      /// TimedOut,
      /// Unknown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays a standard pendant UI screen by passing a string with the screen identifier. (Only available from SDK API 2.2 onward)
      /// Refer to the YML - URI Links documentation for the list of supported screens and settings.
      /// Do not include the URI "&lt;a href&gt; screen:" portion in the identifier.  For example to display the jogging panel use:
      /// pendant.displayScreen("programmingView?panel=jogging");
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays an html file in a standard Smart Pendant help dialog. (Only available from SDK API 3.0 onward)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="htmlContentFile"></param>
      global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieves the security level on the controller. Returns:
      /// - Operate
      /// - Edit
      /// - Management
      /// - Safety
      /// - Yaskawa
      ///  (API 3.1 and Later)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> accessLevel(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Queries if the current security level is at least specified security level
      /// Accepts:
      /// 	-"Operate"
      /// 	-"Edit"
      /// 	-"Management"
      /// 	-"Safety"
      /// 	-"Yaskawa"
      /// Other inputs will return an error.
      /// (API 3.1 and Later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="level"></param>
      global::System.Threading.Tasks.Task<bool> accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await send_pendantVersion(p, cancellationToken);
        return await recv_pendantVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp676 = new InternalStructs.pendantVersion_args() {
          P = p,
        };
        
        await tmp676.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_pendantVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp677 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp677.Type == TMessageType.Exception)
        {
          var tmp678 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp678;
        }

        var tmp679 = new InternalStructs.pendantVersion_result();
        await tmp679.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp679.__isset.success)
        {
          return tmp679.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendantVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(p, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp680 = new InternalStructs.subscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp680.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp681 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp681.Type == TMessageType.Exception)
        {
          var tmp682 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp682;
        }

        var tmp683 = new InternalStructs.subscribeEventTypes_result();
        await tmp683.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(p, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp684 = new InternalStructs.unsubscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp684.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp685 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp685.Type == TMessageType.Exception)
        {
          var tmp686 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp686;
        }

        var tmp687 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp687.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_subscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp688 = new InternalStructs.subscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp688.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp689 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp689.Type == TMessageType.Exception)
        {
          var tmp690 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp690;
        }

        var tmp691 = new InternalStructs.subscribeItemEventTypes_result();
        await tmp691.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_unsubscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp692 = new InternalStructs.unsubscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp692.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp693 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp693.Type == TMessageType.Exception)
        {
          var tmp694 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp694;
        }

        var tmp695 = new InternalStructs.unsubscribeItemEventTypes_result();
        await tmp695.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default)
      {
        await send_events(p, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp696 = new InternalStructs.events_args() {
          P = p,
        };
        
        await tmp696.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp697 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp697.Type == TMessageType.Exception)
        {
          var tmp698 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp698;
        }

        var tmp699 = new InternalStructs.events_result();
        await tmp699.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp699.__isset.success)
        {
          return tmp699.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLanguage(p, cancellationToken);
        return await recv_currentLanguage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp700 = new InternalStructs.currentLanguage_args() {
          P = p,
        };
        
        await tmp700.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLanguage(CancellationToken cancellationToken = default)
      {
        
        var tmp701 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp701.Type == TMessageType.Exception)
        {
          var tmp702 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp702;
        }

        var tmp703 = new InternalStructs.currentLanguage_result();
        await tmp703.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp703.__isset.success)
        {
          return tmp703.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLanguage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLocale(p, cancellationToken);
        return await recv_currentLocale(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp704 = new InternalStructs.currentLocale_args() {
          P = p,
        };
        
        await tmp704.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLocale(CancellationToken cancellationToken = default)
      {
        
        var tmp705 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp705.Type == TMessageType.Exception)
        {
          var tmp706 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp706;
        }

        var tmp707 = new InternalStructs.currentLocale_result();
        await tmp707.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp707.__isset.success)
        {
          return tmp707.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLocale failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await send_currentScreenName(p, cancellationToken);
        return await recv_currentScreenName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp708 = new InternalStructs.currentScreenName_args() {
          P = p,
        };
        
        await tmp708.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentScreenName(CancellationToken cancellationToken = default)
      {
        
        var tmp709 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp709.Type == TMessageType.Exception)
        {
          var tmp710 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp710;
        }

        var tmp711 = new InternalStructs.currentScreenName_result();
        await tmp711.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp711.__isset.success)
        {
          return tmp711.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentScreenName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await send_registerYML(p, ymlSource, cancellationToken);
        return await recv_registerYML(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp712 = new InternalStructs.registerYML_args() {
          P = p,
          YmlSource = ymlSource,
        };
        
        await tmp712.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_registerYML(CancellationToken cancellationToken = default)
      {
        
        var tmp713 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp713.Type == TMessageType.Exception)
        {
          var tmp714 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp714;
        }

        var tmp715 = new InternalStructs.registerYML_result();
        await tmp715.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp715.__isset.success)
        {
          return tmp715.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerYML failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_registerImageFile(p, imageFileName, cancellationToken);
        await recv_registerImageFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp716 = new InternalStructs.registerImageFile_args() {
          P = p,
          ImageFileName = imageFileName,
        };
        
        await tmp716.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageFile(CancellationToken cancellationToken = default)
      {
        
        var tmp717 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp717.Type == TMessageType.Exception)
        {
          var tmp718 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp718;
        }

        var tmp719 = new InternalStructs.registerImageFile_result();
        await tmp719.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp719.__isset.e)
        {
          throw tmp719.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await send_registerImageData(p, imageData, imageName, cancellationToken);
        await recv_registerImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp720 = new InternalStructs.registerImageData_args() {
          P = p,
          ImageData = imageData,
          ImageName = imageName,
        };
        
        await tmp720.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp721 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp721.Type == TMessageType.Exception)
        {
          var tmp722 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp722;
        }

        var tmp723 = new InternalStructs.registerImageData_result();
        await tmp723.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp723.__isset.e)
        {
          throw tmp723.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLFile(p, htmlFileName, cancellationToken);
        await recv_registerHTMLFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp724 = new InternalStructs.registerHTMLFile_args() {
          P = p,
          HtmlFileName = htmlFileName,
        };
        
        await tmp724.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLFile(CancellationToken cancellationToken = default)
      {
        
        var tmp725 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp725.Type == TMessageType.Exception)
        {
          var tmp726 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp726;
        }

        var tmp727 = new InternalStructs.registerHTMLFile_result();
        await tmp727.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp727.__isset.e)
        {
          throw tmp727.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLData(p, htmlData, htmlName, cancellationToken);
        await recv_registerHTMLData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp728 = new InternalStructs.registerHTMLData_args() {
          P = p,
          HtmlData = htmlData,
          HtmlName = htmlName,
        };
        
        await tmp728.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLData(CancellationToken cancellationToken = default)
      {
        
        var tmp729 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp729.Type == TMessageType.Exception)
        {
          var tmp730 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp730;
        }

        var tmp731 = new InternalStructs.registerHTMLData_result();
        await tmp731.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp731.__isset.e)
        {
          throw tmp731.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationFile(p, locale, translationFileName, cancellationToken);
        await recv_registerTranslationFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp732 = new InternalStructs.registerTranslationFile_args() {
          P = p,
          Locale = locale,
          TranslationFileName = translationFileName,
        };
        
        await tmp732.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationFile(CancellationToken cancellationToken = default)
      {
        
        var tmp733 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp733.Type == TMessageType.Exception)
        {
          var tmp734 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp734;
        }

        var tmp735 = new InternalStructs.registerTranslationFile_result();
        await tmp735.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp735.__isset.e)
        {
          throw tmp735.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationData(p, locale, translationData, translationName, cancellationToken);
        await recv_registerTranslationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp736 = new InternalStructs.registerTranslationData_args() {
          P = p,
          Locale = locale,
          TranslationData = translationData,
          TranslationName = translationName,
        };
        
        await tmp736.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationData(CancellationToken cancellationToken = default)
      {
        
        var tmp737 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp737.Type == TMessageType.Exception)
        {
          var tmp738 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp738;
        }

        var tmp739 = new InternalStructs.registerTranslationData_result();
        await tmp739.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp739.__isset.e)
        {
          throw tmp739.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityMenu(p, menuName, menuText, menuIcon, cancellationToken);
        await recv_registerUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp740 = new InternalStructs.registerUtilityMenu_args() {
          P = p,
          MenuName = menuName,
          MenuText = menuText,
          MenuIcon = menuIcon,
        };
        
        await tmp740.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp741 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp741.Type == TMessageType.Exception)
        {
          var tmp742 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp742;
        }

        var tmp743 = new InternalStructs.registerUtilityMenu_result();
        await tmp743.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp743.__isset.e)
        {
          throw tmp743.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityMenu(p, menuName, cancellationToken);
        await recv_unregisterUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp744 = new InternalStructs.unregisterUtilityMenu_args() {
          P = p,
          MenuName = menuName,
        };
        
        await tmp744.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp745 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp745.Type == TMessageType.Exception)
        {
          var tmp746 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp746;
        }

        var tmp747 = new InternalStructs.unregisterUtilityMenu_result();
        await tmp747.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp747.__isset.e)
        {
          throw tmp747.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindow(p, identifier, itemType, menuItemName, windowTitle, cancellationToken);
        await recv_registerUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp748 = new InternalStructs.registerUtilityWindow_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
        };
        
        await tmp748.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp749 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp749.Type == TMessageType.Exception)
        {
          var tmp750 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp750;
        }

        var tmp751 = new InternalStructs.registerUtilityWindow_result();
        await tmp751.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp751.__isset.e)
        {
          throw tmp751.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindowWithMenu(p, identifier, itemType, menuItemName, windowTitle, menuName, cancellationToken);
        await recv_registerUtilityWindowWithMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp752 = new InternalStructs.registerUtilityWindowWithMenu_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
          MenuName = menuName,
        };
        
        await tmp752.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindowWithMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp753 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp753.Type == TMessageType.Exception)
        {
          var tmp754 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp754;
        }

        var tmp755 = new InternalStructs.registerUtilityWindowWithMenu_result();
        await tmp755.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp755.__isset.e)
        {
          throw tmp755.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityWindow(p, identifier, cancellationToken);
        await recv_unregisterUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp756 = new InternalStructs.unregisterUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp756.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp757 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp757.Type == TMessageType.Exception)
        {
          var tmp758 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp758;
        }

        var tmp759 = new InternalStructs.unregisterUtilityWindow_result();
        await tmp759.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp759.__isset.e)
        {
          throw tmp759.E;
        }
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_openUtilityWindow(p, identifier, cancellationToken);
        await recv_openUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp760 = new InternalStructs.openUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp760.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_openUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp761 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp761.Type == TMessageType.Exception)
        {
          var tmp762 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp762;
        }

        var tmp763 = new InternalStructs.openUtilityWindow_result();
        await tmp763.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_closeUtilityWindow(p, identifier, cancellationToken);
        await recv_closeUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp764 = new InternalStructs.closeUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp764.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp765 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp765.Type == TMessageType.Exception)
        {
          var tmp766 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp766;
        }

        var tmp767 = new InternalStructs.closeUtilityWindow_result();
        await tmp767.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_collapseUtilityWindow(p, identifier, cancellationToken);
        await recv_collapseUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp768 = new InternalStructs.collapseUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp768.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_collapseUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp769 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp769.Type == TMessageType.Exception)
        {
          var tmp770 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp770;
        }

        var tmp771 = new InternalStructs.collapseUtilityWindow_result();
        await tmp771.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_expandUtilityWindow(p, identifier, cancellationToken);
        await recv_expandUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp772 = new InternalStructs.expandUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp772.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_expandUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp773 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp773.Type == TMessageType.Exception)
        {
          var tmp774 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp774;
        }

        var tmp775 = new InternalStructs.expandUtilityWindow_result();
        await tmp775.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await send_refreshDynamicInstructions(p, instructionType, cancellationToken);
        await recv_refreshDynamicInstructions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp776 = new InternalStructs.refreshDynamicInstructions_args() {
          P = p,
          InstructionType = instructionType,
        };
        
        await tmp776.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_refreshDynamicInstructions(CancellationToken cancellationToken = default)
      {
        
        var tmp777 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp777.Type == TMessageType.Exception)
        {
          var tmp778 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp778;
        }

        var tmp779 = new InternalStructs.refreshDynamicInstructions_result();
        await tmp779.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await send_registerIntegration(p, identifier, integrationPoint, itemType, buttonLabel, buttonImage, cancellationToken);
        await recv_registerIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp780 = new InternalStructs.registerIntegration_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          ItemType = itemType,
          ButtonLabel = buttonLabel,
          ButtonImage = buttonImage,
        };
        
        await tmp780.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp781 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp781.Type == TMessageType.Exception)
        {
          var tmp782 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp782;
        }

        var tmp783 = new InternalStructs.registerIntegration_result();
        await tmp783.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp783.__isset.e)
        {
          throw tmp783.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterIntegration(p, identifier, cancellationToken);
        await recv_unregisterIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp784 = new InternalStructs.unregisterIntegration_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp784.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp785 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp785.Type == TMessageType.Exception)
        {
          var tmp786 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp786;
        }

        var tmp787 = new InternalStructs.unregisterIntegration_result();
        await tmp787.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp787.__isset.e)
        {
          throw tmp787.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await send_registerSwitch(p, identifier, integrationPoint, switchLabel, offPositionLabel, onPositionLabel, defaultState, cancellationToken);
        await recv_registerSwitch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp788 = new InternalStructs.registerSwitch_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          SwitchLabel = switchLabel,
          OffPositionLabel = offPositionLabel,
          OnPositionLabel = onPositionLabel,
          DefaultState = defaultState,
        };
        
        await tmp788.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerSwitch(CancellationToken cancellationToken = default)
      {
        
        var tmp789 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp789.Type == TMessageType.Exception)
        {
          var tmp790 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp790;
        }

        var tmp791 = new InternalStructs.registerSwitch_result();
        await tmp791.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp791.__isset.e)
        {
          throw tmp791.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default)
      {
        await send_registerDirectOpenForInstr(p, identifier, instruction, instrTags, cancellationToken);
        await recv_registerDirectOpenForInstr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerDirectOpenForInstr(long p, string identifier, string instruction, List<string> instrTags, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp792 = new InternalStructs.registerDirectOpenForInstr_args() {
          P = p,
          Identifier = identifier,
          Instruction = instruction,
          InstrTags = instrTags,
        };
        
        await tmp792.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerDirectOpenForInstr(CancellationToken cancellationToken = default)
      {
        
        var tmp793 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp793.Type == TMessageType.Exception)
        {
          var tmp794 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp794;
        }

        var tmp795 = new InternalStructs.registerDirectOpenForInstr_result();
        await tmp795.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp795.__isset.e)
        {
          throw tmp795.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default)
      {
        await send_unregisterDirectOpenForInstr(p, identifier, instruction, cancellationToken);
        await recv_unregisterDirectOpenForInstr(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterDirectOpenForInstr(long p, string identifier, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp796 = new InternalStructs.unregisterDirectOpenForInstr_args() {
          P = p,
          Identifier = identifier,
          Instruction = instruction,
        };
        
        await tmp796.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterDirectOpenForInstr(CancellationToken cancellationToken = default)
      {
        
        var tmp797 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp797.Type == TMessageType.Exception)
        {
          var tmp798 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp798;
        }

        var tmp799 = new InternalStructs.unregisterDirectOpenForInstr_result();
        await tmp799.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp799.__isset.e)
        {
          throw tmp799.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await send_property(p, itemID, name, cancellationToken);
        return await recv_property(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("property", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp800 = new InternalStructs.property_args() {
          P = p,
          ItemID = itemID,
          Name = name,
        };
        
        await tmp800.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_property(CancellationToken cancellationToken = default)
      {
        
        var tmp801 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp801.Type == TMessageType.Exception)
        {
          var tmp802 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp802;
        }

        var tmp803 = new InternalStructs.property_result();
        await tmp803.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp803.__isset.success)
        {
          return tmp803.Success;
        }
        if (tmp803.__isset.e)
        {
          throw tmp803.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "property failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setProperty(p, itemID, name, @value, cancellationToken);
        await recv_setProperty(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp804 = new InternalStructs.setProperty_args() {
          P = p,
          ItemID = itemID,
          Name = name,
          Value = @value,
        };
        
        await tmp804.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setProperty(CancellationToken cancellationToken = default)
      {
        
        var tmp805 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp805.Type == TMessageType.Exception)
        {
          var tmp806 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp806;
        }

        var tmp807 = new InternalStructs.setProperty_result();
        await tmp807.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp807.__isset.e)
        {
          throw tmp807.E;
        }
      }

      public async global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await send_setProperties(p, propValuesList, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperties", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp808 = new InternalStructs.setProperties_args() {
          P = p,
          PropValuesList = propValuesList,
        };
        
        await tmp808.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await send_setChartConfig(p, chartID, config, cancellationToken);
        await recv_setChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp809 = new InternalStructs.setChartConfig_args() {
          P = p,
          ChartID = chartID,
          Config = config,
        };
        
        await tmp809.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp810 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp810.Type == TMessageType.Exception)
        {
          var tmp811 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp811;
        }

        var tmp812 = new InternalStructs.setChartConfig_result();
        await tmp812.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp812.__isset.e)
        {
          throw tmp812.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await send_getChartConfig(p, chartID, cancellationToken);
        return await recv_getChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp813 = new InternalStructs.getChartConfig_args() {
          P = p,
          ChartID = chartID,
        };
        
        await tmp813.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_getChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp814 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp814.Type == TMessageType.Exception)
        {
          var tmp815 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp815;
        }

        var tmp816 = new InternalStructs.getChartConfig_result();
        await tmp816.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp816.__isset.success)
        {
          return tmp816.Success;
        }
        if (tmp816.__isset.e)
        {
          throw tmp816.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await send_setChartData(p, chartID, dataset, right, cancellationToken);
        await recv_setChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp817 = new InternalStructs.setChartData_args() {
          P = p,
          ChartID = chartID,
          Dataset = dataset,
          Right = right,
        };
        
        await tmp817.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp818 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp818.Type == TMessageType.Exception)
        {
          var tmp819 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp819;
        }

        var tmp820 = new InternalStructs.setChartData_result();
        await tmp820.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp820.__isset.e)
        {
          throw tmp820.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await send_getChartData(p, chartID, right, cancellationToken);
        return await recv_getChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp821 = new InternalStructs.getChartData_args() {
          P = p,
          ChartID = chartID,
          Right = right,
        };
        
        await tmp821.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> recv_getChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp822 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp822.Type == TMessageType.Exception)
        {
          var tmp823 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp823;
        }

        var tmp824 = new InternalStructs.getChartData_result();
        await tmp824.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp824.__isset.success)
        {
          return tmp824.Success;
        }
        if (tmp824.__isset.e)
        {
          throw tmp824.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await send_addChartKey(p, chartID, key, data, right, cancellationToken);
        await recv_addChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp825 = new InternalStructs.addChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Data = data,
          Right = right,
        };
        
        await tmp825.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_addChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp826 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp826.Type == TMessageType.Exception)
        {
          var tmp827 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp827;
        }

        var tmp828 = new InternalStructs.addChartKey_result();
        await tmp828.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp828.__isset.e)
        {
          throw tmp828.E;
        }
      }

      public async global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await send_removeChartKey(p, chartID, key, right, cancellationToken);
        await recv_removeChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp829 = new InternalStructs.removeChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Right = right,
        };
        
        await tmp829.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp830 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp830.Type == TMessageType.Exception)
        {
          var tmp831 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp831;
        }

        var tmp832 = new InternalStructs.removeChartKey_result();
        await tmp832.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp832.__isset.e)
        {
          throw tmp832.E;
        }
      }

      public async global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await send_hideChartKey(p, chartID, key, hidden, right, cancellationToken);
        await recv_hideChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp833 = new InternalStructs.hideChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Hidden = hidden,
          Right = right,
        };
        
        await tmp833.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_hideChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp834 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp834.Type == TMessageType.Exception)
        {
          var tmp835 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp835;
        }

        var tmp836 = new InternalStructs.hideChartKey_result();
        await tmp836.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp836.__isset.e)
        {
          throw tmp836.E;
        }
      }

      public async global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await send_appendChartPoints(p, chartID, key, points, right, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendChartPoints", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp837 = new InternalStructs.appendChartPoints_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Points = points,
          Right = right,
        };
        
        await tmp837.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await send_incrementChartKey(p, chartID, key, val, cancellationToken);
        await recv_incrementChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp838 = new InternalStructs.incrementChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Val = val,
        };
        
        await tmp838.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_incrementChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp839 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp839.Type == TMessageType.Exception)
        {
          var tmp840 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp840;
        }

        var tmp841 = new InternalStructs.incrementChartKey_result();
        await tmp841.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp841.__isset.e)
        {
          throw tmp841.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImage(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp842 = new InternalStructs.exportChartImage_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp842.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_exportChartImage(CancellationToken cancellationToken = default)
      {
        
        var tmp843 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp843.Type == TMessageType.Exception)
        {
          var tmp844 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp844;
        }

        var tmp845 = new InternalStructs.exportChartImage_result();
        await tmp845.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp845.__isset.success)
        {
          return tmp845.Success;
        }
        if (tmp845.__isset.e)
        {
          throw tmp845.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImageData(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp846 = new InternalStructs.exportChartImageData_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp846.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_exportChartImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp847 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp847.Type == TMessageType.Exception)
        {
          var tmp848 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp848;
        }

        var tmp849 = new InternalStructs.exportChartImageData_result();
        await tmp849.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp849.__isset.success)
        {
          return tmp849.Success;
        }
        if (tmp849.__isset.e)
        {
          throw tmp849.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImageData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_notice(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp850 = new InternalStructs.notice_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp850.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_dispNotice(p, disposition, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dispNotice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp851 = new InternalStructs.dispNotice_args() {
          P = p,
          Disposition = disposition,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp851.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_error(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("error", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp852 = new InternalStructs.error_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp852.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await send_popupDialog(p, identifier, title, message, positiveOption, negativeOption, cancellationToken);
        await recv_popupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp853 = new InternalStructs.popupDialog_args() {
          P = p,
          Identifier = identifier,
          Title = title,
          Message = message,
          PositiveOption = positiveOption,
          NegativeOption = negativeOption,
        };
        
        await tmp853.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_popupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp854 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp854.Type == TMessageType.Exception)
        {
          var tmp855 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp855;
        }

        var tmp856 = new InternalStructs.popupDialog_result();
        await tmp856.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp856.__isset.e)
        {
          throw tmp856.E;
        }
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_cancelPopupDialog(p, identifier, cancellationToken);
        await recv_cancelPopupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp857 = new InternalStructs.cancelPopupDialog_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp857.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelPopupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp858 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp858.Type == TMessageType.Exception)
        {
          var tmp859 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp859;
        }

        var tmp860 = new InternalStructs.cancelPopupDialog_result();
        await tmp860.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await send_insertInstructionAtSelectedLine(p, instruction, cancellationToken);
        return await recv_insertInstructionAtSelectedLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp861 = new InternalStructs.insertInstructionAtSelectedLine_args() {
          P = p,
          Instruction = instruction,
        };
        
        await tmp861.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_insertInstructionAtSelectedLine(CancellationToken cancellationToken = default)
      {
        
        var tmp862 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp862.Type == TMessageType.Exception)
        {
          var tmp863 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp863;
        }

        var tmp864 = new InternalStructs.insertInstructionAtSelectedLine_result();
        await tmp864.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp864.__isset.success)
        {
          return tmp864.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInstructionAtSelectedLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_displayScreen(p, identifier, cancellationToken);
        await recv_displayScreen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp865 = new InternalStructs.displayScreen_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp865.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayScreen(CancellationToken cancellationToken = default)
      {
        
        var tmp866 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp866.Type == TMessageType.Exception)
        {
          var tmp867 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp867;
        }

        var tmp868 = new InternalStructs.displayScreen_result();
        await tmp868.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await send_displayHelp(p, title, htmlContentFile, cancellationToken);
        await recv_displayHelp(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp869 = new InternalStructs.displayHelp_args() {
          P = p,
          Title = title,
          HtmlContentFile = htmlContentFile,
        };
        
        await tmp869.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayHelp(CancellationToken cancellationToken = default)
      {
        
        var tmp870 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp870.Type == TMessageType.Exception)
        {
          var tmp871 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp871;
        }

        var tmp872 = new InternalStructs.displayHelp_result();
        await tmp872.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> accessLevel(long p, CancellationToken cancellationToken = default)
      {
        await send_accessLevel(p, cancellationToken);
        return await recv_accessLevel(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_accessLevel(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp873 = new InternalStructs.accessLevel_args() {
          P = p,
        };
        
        await tmp873.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_accessLevel(CancellationToken cancellationToken = default)
      {
        
        var tmp874 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp874.Type == TMessageType.Exception)
        {
          var tmp875 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp875;
        }

        var tmp876 = new InternalStructs.accessLevel_result();
        await tmp876.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp876.__isset.success)
        {
          return tmp876.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "accessLevel failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default)
      {
        await send_accessLevelIncludes(p, level, cancellationToken);
        return await recv_accessLevelIncludes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_accessLevelIncludes(long p, string level, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp877 = new InternalStructs.accessLevelIncludes_args() {
          P = p,
          Level = level,
        };
        
        await tmp877.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_accessLevelIncludes(CancellationToken cancellationToken = default)
      {
        
        var tmp878 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp878.Type == TMessageType.Exception)
        {
          var tmp879 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp879;
        }

        var tmp880 = new InternalStructs.accessLevelIncludes_result();
        await tmp880.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp880.__isset.success)
        {
          return tmp880.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "accessLevelIncludes failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["pendantVersion"] = pendantVersion_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["subscribeItemEventTypes"] = subscribeItemEventTypes_ProcessAsync;
        processMap_["unsubscribeItemEventTypes"] = unsubscribeItemEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["currentLanguage"] = currentLanguage_ProcessAsync;
        processMap_["currentLocale"] = currentLocale_ProcessAsync;
        processMap_["currentScreenName"] = currentScreenName_ProcessAsync;
        processMap_["registerYML"] = registerYML_ProcessAsync;
        processMap_["registerImageFile"] = registerImageFile_ProcessAsync;
        processMap_["registerImageData"] = registerImageData_ProcessAsync;
        processMap_["registerHTMLFile"] = registerHTMLFile_ProcessAsync;
        processMap_["registerHTMLData"] = registerHTMLData_ProcessAsync;
        processMap_["registerTranslationFile"] = registerTranslationFile_ProcessAsync;
        processMap_["registerTranslationData"] = registerTranslationData_ProcessAsync;
        processMap_["registerUtilityMenu"] = registerUtilityMenu_ProcessAsync;
        processMap_["unregisterUtilityMenu"] = unregisterUtilityMenu_ProcessAsync;
        processMap_["registerUtilityWindow"] = registerUtilityWindow_ProcessAsync;
        processMap_["registerUtilityWindowWithMenu"] = registerUtilityWindowWithMenu_ProcessAsync;
        processMap_["unregisterUtilityWindow"] = unregisterUtilityWindow_ProcessAsync;
        processMap_["openUtilityWindow"] = openUtilityWindow_ProcessAsync;
        processMap_["closeUtilityWindow"] = closeUtilityWindow_ProcessAsync;
        processMap_["collapseUtilityWindow"] = collapseUtilityWindow_ProcessAsync;
        processMap_["expandUtilityWindow"] = expandUtilityWindow_ProcessAsync;
        processMap_["refreshDynamicInstructions"] = refreshDynamicInstructions_ProcessAsync;
        processMap_["registerIntegration"] = registerIntegration_ProcessAsync;
        processMap_["unregisterIntegration"] = unregisterIntegration_ProcessAsync;
        processMap_["registerSwitch"] = registerSwitch_ProcessAsync;
        processMap_["registerDirectOpenForInstr"] = registerDirectOpenForInstr_ProcessAsync;
        processMap_["unregisterDirectOpenForInstr"] = unregisterDirectOpenForInstr_ProcessAsync;
        processMap_["property"] = property_ProcessAsync;
        processMap_["setProperty"] = setProperty_ProcessAsync;
        processMap_["setProperties"] = setProperties_ProcessAsync;
        processMap_["setChartConfig"] = setChartConfig_ProcessAsync;
        processMap_["getChartConfig"] = getChartConfig_ProcessAsync;
        processMap_["setChartData"] = setChartData_ProcessAsync;
        processMap_["getChartData"] = getChartData_ProcessAsync;
        processMap_["addChartKey"] = addChartKey_ProcessAsync;
        processMap_["removeChartKey"] = removeChartKey_ProcessAsync;
        processMap_["hideChartKey"] = hideChartKey_ProcessAsync;
        processMap_["appendChartPoints"] = appendChartPoints_ProcessAsync;
        processMap_["incrementChartKey"] = incrementChartKey_ProcessAsync;
        processMap_["exportChartImage"] = exportChartImage_ProcessAsync;
        processMap_["exportChartImageData"] = exportChartImageData_ProcessAsync;
        processMap_["notice"] = notice_ProcessAsync;
        processMap_["dispNotice"] = dispNotice_ProcessAsync;
        processMap_["error"] = error_ProcessAsync;
        processMap_["popupDialog"] = popupDialog_ProcessAsync;
        processMap_["cancelPopupDialog"] = cancelPopupDialog_ProcessAsync;
        processMap_["insertInstructionAtSelectedLine"] = insertInstructionAtSelectedLine_ProcessAsync;
        processMap_["displayScreen"] = displayScreen_ProcessAsync;
        processMap_["displayHelp"] = displayHelp_ProcessAsync;
        processMap_["accessLevel"] = accessLevel_ProcessAsync;
        processMap_["accessLevelIncludes"] = accessLevelIncludes_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task pendantVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp881 = new InternalStructs.pendantVersion_args();
        await tmp881.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp882 = new InternalStructs.pendantVersion_result();
        try
        {
          tmp882.Success = await _iAsync.pendantVersion(tmp881.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp882.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp883)
        {
          var tmp884 = $"Error occurred in {GetType().FullName}: {tmp883.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp883, tmp884);
          else
            Console.Error.WriteLine(tmp884);
          var tmp885 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp885.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp886 = new InternalStructs.subscribeEventTypes_args();
        await tmp886.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp887 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp886.P, tmp886.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp887.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp888)
        {
          var tmp889 = $"Error occurred in {GetType().FullName}: {tmp888.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp888, tmp889);
          else
            Console.Error.WriteLine(tmp889);
          var tmp890 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp890.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp891 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp891.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp892 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp891.P, tmp891.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp892.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp893)
        {
          var tmp894 = $"Error occurred in {GetType().FullName}: {tmp893.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp893, tmp894);
          else
            Console.Error.WriteLine(tmp894);
          var tmp895 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp895.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp896 = new InternalStructs.subscribeItemEventTypes_args();
        await tmp896.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp897 = new InternalStructs.subscribeItemEventTypes_result();
        try
        {
          await _iAsync.subscribeItemEventTypes(tmp896.P, tmp896.ItemIDs, tmp896.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp897.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp898)
        {
          var tmp899 = $"Error occurred in {GetType().FullName}: {tmp898.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp898, tmp899);
          else
            Console.Error.WriteLine(tmp899);
          var tmp900 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp900.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp901 = new InternalStructs.unsubscribeItemEventTypes_args();
        await tmp901.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp902 = new InternalStructs.unsubscribeItemEventTypes_result();
        try
        {
          await _iAsync.unsubscribeItemEventTypes(tmp901.P, tmp901.ItemIDs, tmp901.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp902.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp903)
        {
          var tmp904 = $"Error occurred in {GetType().FullName}: {tmp903.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp903, tmp904);
          else
            Console.Error.WriteLine(tmp904);
          var tmp905 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp905.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp906 = new InternalStructs.events_args();
        await tmp906.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp907 = new InternalStructs.events_result();
        try
        {
          tmp907.Success = await _iAsync.events(tmp906.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp907.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp908)
        {
          var tmp909 = $"Error occurred in {GetType().FullName}: {tmp908.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp908, tmp909);
          else
            Console.Error.WriteLine(tmp909);
          var tmp910 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp910.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLanguage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp911 = new InternalStructs.currentLanguage_args();
        await tmp911.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp912 = new InternalStructs.currentLanguage_result();
        try
        {
          tmp912.Success = await _iAsync.currentLanguage(tmp911.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp912.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp913)
        {
          var tmp914 = $"Error occurred in {GetType().FullName}: {tmp913.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp913, tmp914);
          else
            Console.Error.WriteLine(tmp914);
          var tmp915 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Exception, seqid), cancellationToken);
          await tmp915.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLocale_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp916 = new InternalStructs.currentLocale_args();
        await tmp916.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp917 = new InternalStructs.currentLocale_result();
        try
        {
          tmp917.Success = await _iAsync.currentLocale(tmp916.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Reply, seqid), cancellationToken); 
          await tmp917.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp918)
        {
          var tmp919 = $"Error occurred in {GetType().FullName}: {tmp918.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp918, tmp919);
          else
            Console.Error.WriteLine(tmp919);
          var tmp920 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Exception, seqid), cancellationToken);
          await tmp920.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentScreenName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp921 = new InternalStructs.currentScreenName_args();
        await tmp921.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp922 = new InternalStructs.currentScreenName_result();
        try
        {
          tmp922.Success = await _iAsync.currentScreenName(tmp921.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp922.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp923)
        {
          var tmp924 = $"Error occurred in {GetType().FullName}: {tmp923.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp923, tmp924);
          else
            Console.Error.WriteLine(tmp924);
          var tmp925 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Exception, seqid), cancellationToken);
          await tmp925.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerYML_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp926 = new InternalStructs.registerYML_args();
        await tmp926.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp927 = new InternalStructs.registerYML_result();
        try
        {
          tmp927.Success = await _iAsync.registerYML(tmp926.P, tmp926.YmlSource, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Reply, seqid), cancellationToken); 
          await tmp927.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp928)
        {
          var tmp929 = $"Error occurred in {GetType().FullName}: {tmp928.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp928, tmp929);
          else
            Console.Error.WriteLine(tmp929);
          var tmp930 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Exception, seqid), cancellationToken);
          await tmp930.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp931 = new InternalStructs.registerImageFile_args();
        await tmp931.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp932 = new InternalStructs.registerImageFile_result();
        try
        {
          try
          {
            await _iAsync.registerImageFile(tmp931.P, tmp931.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp933)
          {
            tmp932.E = tmp933;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp932.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp934)
        {
          var tmp935 = $"Error occurred in {GetType().FullName}: {tmp934.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp934, tmp935);
          else
            Console.Error.WriteLine(tmp935);
          var tmp936 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp936.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp937 = new InternalStructs.registerImageData_args();
        await tmp937.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp938 = new InternalStructs.registerImageData_result();
        try
        {
          try
          {
            await _iAsync.registerImageData(tmp937.P, tmp937.ImageData, tmp937.ImageName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp939)
          {
            tmp938.E = tmp939;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp938.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp940)
        {
          var tmp941 = $"Error occurred in {GetType().FullName}: {tmp940.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp940, tmp941);
          else
            Console.Error.WriteLine(tmp941);
          var tmp942 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp942.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp943 = new InternalStructs.registerHTMLFile_args();
        await tmp943.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp944 = new InternalStructs.registerHTMLFile_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLFile(tmp943.P, tmp943.HtmlFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp945)
          {
            tmp944.E = tmp945;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp944.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp946)
        {
          var tmp947 = $"Error occurred in {GetType().FullName}: {tmp946.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp946, tmp947);
          else
            Console.Error.WriteLine(tmp947);
          var tmp948 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp948.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp949 = new InternalStructs.registerHTMLData_args();
        await tmp949.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp950 = new InternalStructs.registerHTMLData_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLData(tmp949.P, tmp949.HtmlData, tmp949.HtmlName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp951)
          {
            tmp950.E = tmp951;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp950.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp952)
        {
          var tmp953 = $"Error occurred in {GetType().FullName}: {tmp952.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp952, tmp953);
          else
            Console.Error.WriteLine(tmp953);
          var tmp954 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Exception, seqid), cancellationToken);
          await tmp954.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp955 = new InternalStructs.registerTranslationFile_args();
        await tmp955.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp956 = new InternalStructs.registerTranslationFile_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationFile(tmp955.P, tmp955.Locale, tmp955.TranslationFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp957)
          {
            tmp956.E = tmp957;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp956.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp958)
        {
          var tmp959 = $"Error occurred in {GetType().FullName}: {tmp958.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp958, tmp959);
          else
            Console.Error.WriteLine(tmp959);
          var tmp960 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp960.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp961 = new InternalStructs.registerTranslationData_args();
        await tmp961.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp962 = new InternalStructs.registerTranslationData_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationData(tmp961.P, tmp961.Locale, tmp961.TranslationData, tmp961.TranslationName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp963)
          {
            tmp962.E = tmp963;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp962.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp964)
        {
          var tmp965 = $"Error occurred in {GetType().FullName}: {tmp964.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp964, tmp965);
          else
            Console.Error.WriteLine(tmp965);
          var tmp966 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp966.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp967 = new InternalStructs.registerUtilityMenu_args();
        await tmp967.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp968 = new InternalStructs.registerUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityMenu(tmp967.P, tmp967.MenuName, tmp967.MenuText, tmp967.MenuIcon, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp969)
          {
            tmp968.E = tmp969;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp968.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp970)
        {
          var tmp971 = $"Error occurred in {GetType().FullName}: {tmp970.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp970, tmp971);
          else
            Console.Error.WriteLine(tmp971);
          var tmp972 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp972.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp973 = new InternalStructs.unregisterUtilityMenu_args();
        await tmp973.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp974 = new InternalStructs.unregisterUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityMenu(tmp973.P, tmp973.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp975)
          {
            tmp974.E = tmp975;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp974.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp976)
        {
          var tmp977 = $"Error occurred in {GetType().FullName}: {tmp976.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp976, tmp977);
          else
            Console.Error.WriteLine(tmp977);
          var tmp978 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp978.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp979 = new InternalStructs.registerUtilityWindow_args();
        await tmp979.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp980 = new InternalStructs.registerUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindow(tmp979.P, tmp979.Identifier, tmp979.ItemType, tmp979.MenuItemName, tmp979.WindowTitle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp981)
          {
            tmp980.E = tmp981;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp980.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp982)
        {
          var tmp983 = $"Error occurred in {GetType().FullName}: {tmp982.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp982, tmp983);
          else
            Console.Error.WriteLine(tmp983);
          var tmp984 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp984.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp985 = new InternalStructs.registerUtilityWindowWithMenu_args();
        await tmp985.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp986 = new InternalStructs.registerUtilityWindowWithMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindowWithMenu(tmp985.P, tmp985.Identifier, tmp985.ItemType, tmp985.MenuItemName, tmp985.WindowTitle, tmp985.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp987)
          {
            tmp986.E = tmp987;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp986.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp988)
        {
          var tmp989 = $"Error occurred in {GetType().FullName}: {tmp988.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp988, tmp989);
          else
            Console.Error.WriteLine(tmp989);
          var tmp990 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp990.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp991 = new InternalStructs.unregisterUtilityWindow_args();
        await tmp991.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp992 = new InternalStructs.unregisterUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityWindow(tmp991.P, tmp991.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp993)
          {
            tmp992.E = tmp993;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp992.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp994)
        {
          var tmp995 = $"Error occurred in {GetType().FullName}: {tmp994.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp994, tmp995);
          else
            Console.Error.WriteLine(tmp995);
          var tmp996 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp996.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp997 = new InternalStructs.openUtilityWindow_args();
        await tmp997.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp998 = new InternalStructs.openUtilityWindow_result();
        try
        {
          await _iAsync.openUtilityWindow(tmp997.P, tmp997.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp998.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp999)
        {
          var tmp1000 = $"Error occurred in {GetType().FullName}: {tmp999.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp999, tmp1000);
          else
            Console.Error.WriteLine(tmp1000);
          var tmp1001 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1001.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1002 = new InternalStructs.closeUtilityWindow_args();
        await tmp1002.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1003 = new InternalStructs.closeUtilityWindow_result();
        try
        {
          await _iAsync.closeUtilityWindow(tmp1002.P, tmp1002.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1003.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1004)
        {
          var tmp1005 = $"Error occurred in {GetType().FullName}: {tmp1004.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1004, tmp1005);
          else
            Console.Error.WriteLine(tmp1005);
          var tmp1006 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1006.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1007 = new InternalStructs.collapseUtilityWindow_args();
        await tmp1007.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1008 = new InternalStructs.collapseUtilityWindow_result();
        try
        {
          await _iAsync.collapseUtilityWindow(tmp1007.P, tmp1007.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1008.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1009)
        {
          var tmp1010 = $"Error occurred in {GetType().FullName}: {tmp1009.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1009, tmp1010);
          else
            Console.Error.WriteLine(tmp1010);
          var tmp1011 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1011.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1012 = new InternalStructs.expandUtilityWindow_args();
        await tmp1012.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1013 = new InternalStructs.expandUtilityWindow_result();
        try
        {
          await _iAsync.expandUtilityWindow(tmp1012.P, tmp1012.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1013.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1014)
        {
          var tmp1015 = $"Error occurred in {GetType().FullName}: {tmp1014.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1014, tmp1015);
          else
            Console.Error.WriteLine(tmp1015);
          var tmp1016 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp1016.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1017 = new InternalStructs.refreshDynamicInstructions_args();
        await tmp1017.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1018 = new InternalStructs.refreshDynamicInstructions_result();
        try
        {
          await _iAsync.refreshDynamicInstructions(tmp1017.P, tmp1017.InstructionType, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1018.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1019)
        {
          var tmp1020 = $"Error occurred in {GetType().FullName}: {tmp1019.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1019, tmp1020);
          else
            Console.Error.WriteLine(tmp1020);
          var tmp1021 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1021.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1022 = new InternalStructs.registerIntegration_args();
        await tmp1022.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1023 = new InternalStructs.registerIntegration_result();
        try
        {
          try
          {
            await _iAsync.registerIntegration(tmp1022.P, tmp1022.Identifier, tmp1022.IntegrationPoint, tmp1022.ItemType, tmp1022.ButtonLabel, tmp1022.ButtonImage, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1024)
          {
            tmp1023.E = tmp1024;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1023.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1025)
        {
          var tmp1026 = $"Error occurred in {GetType().FullName}: {tmp1025.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1025, tmp1026);
          else
            Console.Error.WriteLine(tmp1026);
          var tmp1027 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1027.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1028 = new InternalStructs.unregisterIntegration_args();
        await tmp1028.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1029 = new InternalStructs.unregisterIntegration_result();
        try
        {
          try
          {
            await _iAsync.unregisterIntegration(tmp1028.P, tmp1028.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1030)
          {
            tmp1029.E = tmp1030;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1029.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1031)
        {
          var tmp1032 = $"Error occurred in {GetType().FullName}: {tmp1031.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1031, tmp1032);
          else
            Console.Error.WriteLine(tmp1032);
          var tmp1033 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1033.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerSwitch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1034 = new InternalStructs.registerSwitch_args();
        await tmp1034.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1035 = new InternalStructs.registerSwitch_result();
        try
        {
          try
          {
            await _iAsync.registerSwitch(tmp1034.P, tmp1034.Identifier, tmp1034.IntegrationPoint, tmp1034.SwitchLabel, tmp1034.OffPositionLabel, tmp1034.OnPositionLabel, tmp1034.DefaultState, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1036)
          {
            tmp1035.E = tmp1036;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1035.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1037)
        {
          var tmp1038 = $"Error occurred in {GetType().FullName}: {tmp1037.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1037, tmp1038);
          else
            Console.Error.WriteLine(tmp1038);
          var tmp1039 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Exception, seqid), cancellationToken);
          await tmp1039.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerDirectOpenForInstr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1040 = new InternalStructs.registerDirectOpenForInstr_args();
        await tmp1040.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1041 = new InternalStructs.registerDirectOpenForInstr_result();
        try
        {
          try
          {
            await _iAsync.registerDirectOpenForInstr(tmp1040.P, tmp1040.Identifier, tmp1040.Instruction, tmp1040.InstrTags, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1042)
          {
            tmp1041.E = tmp1042;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1041.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1043)
        {
          var tmp1044 = $"Error occurred in {GetType().FullName}: {tmp1043.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1043, tmp1044);
          else
            Console.Error.WriteLine(tmp1044);
          var tmp1045 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerDirectOpenForInstr", TMessageType.Exception, seqid), cancellationToken);
          await tmp1045.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterDirectOpenForInstr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1046 = new InternalStructs.unregisterDirectOpenForInstr_args();
        await tmp1046.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1047 = new InternalStructs.unregisterDirectOpenForInstr_result();
        try
        {
          try
          {
            await _iAsync.unregisterDirectOpenForInstr(tmp1046.P, tmp1046.Identifier, tmp1046.Instruction, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1048)
          {
            tmp1047.E = tmp1048;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1047.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1049)
        {
          var tmp1050 = $"Error occurred in {GetType().FullName}: {tmp1049.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1049, tmp1050);
          else
            Console.Error.WriteLine(tmp1050);
          var tmp1051 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterDirectOpenForInstr", TMessageType.Exception, seqid), cancellationToken);
          await tmp1051.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task property_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1052 = new InternalStructs.property_args();
        await tmp1052.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1053 = new InternalStructs.property_result();
        try
        {
          try
          {
            tmp1053.Success = await _iAsync.property(tmp1052.P, tmp1052.ItemID, tmp1052.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1054)
          {
            tmp1053.E = tmp1054;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1053.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1055)
        {
          var tmp1056 = $"Error occurred in {GetType().FullName}: {tmp1055.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1055, tmp1056);
          else
            Console.Error.WriteLine(tmp1056);
          var tmp1057 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Exception, seqid), cancellationToken);
          await tmp1057.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1058 = new InternalStructs.setProperty_args();
        await tmp1058.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1059 = new InternalStructs.setProperty_result();
        try
        {
          try
          {
            await _iAsync.setProperty(tmp1058.P, tmp1058.ItemID, tmp1058.Name, tmp1058.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1060)
          {
            tmp1059.E = tmp1060;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1059.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1061)
        {
          var tmp1062 = $"Error occurred in {GetType().FullName}: {tmp1061.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1061, tmp1062);
          else
            Console.Error.WriteLine(tmp1062);
          var tmp1063 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Exception, seqid), cancellationToken);
          await tmp1063.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1064 = new InternalStructs.setProperties_args();
        await tmp1064.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setProperties(tmp1064.P, tmp1064.PropValuesList, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1066)
        {
          var tmp1067 = $"Error occurred in {GetType().FullName}: {tmp1066.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1066, tmp1067);
          else
            Console.Error.WriteLine(tmp1067);
        }
      }

      public async global::System.Threading.Tasks.Task setChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1068 = new InternalStructs.setChartConfig_args();
        await tmp1068.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1069 = new InternalStructs.setChartConfig_result();
        try
        {
          try
          {
            await _iAsync.setChartConfig(tmp1068.P, tmp1068.ChartID, tmp1068.Config, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1070)
          {
            tmp1069.E = tmp1070;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1069.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1071)
        {
          var tmp1072 = $"Error occurred in {GetType().FullName}: {tmp1071.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1071, tmp1072);
          else
            Console.Error.WriteLine(tmp1072);
          var tmp1073 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1073.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1074 = new InternalStructs.getChartConfig_args();
        await tmp1074.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1075 = new InternalStructs.getChartConfig_result();
        try
        {
          try
          {
            tmp1075.Success = await _iAsync.getChartConfig(tmp1074.P, tmp1074.ChartID, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1076)
          {
            tmp1075.E = tmp1076;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1075.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1077)
        {
          var tmp1078 = $"Error occurred in {GetType().FullName}: {tmp1077.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1077, tmp1078);
          else
            Console.Error.WriteLine(tmp1078);
          var tmp1079 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1079.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1080 = new InternalStructs.setChartData_args();
        await tmp1080.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1081 = new InternalStructs.setChartData_result();
        try
        {
          try
          {
            await _iAsync.setChartData(tmp1080.P, tmp1080.ChartID, tmp1080.Dataset, tmp1080.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1082)
          {
            tmp1081.E = tmp1082;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1081.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1083)
        {
          var tmp1084 = $"Error occurred in {GetType().FullName}: {tmp1083.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1083, tmp1084);
          else
            Console.Error.WriteLine(tmp1084);
          var tmp1085 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1085.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1086 = new InternalStructs.getChartData_args();
        await tmp1086.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1087 = new InternalStructs.getChartData_result();
        try
        {
          try
          {
            tmp1087.Success = await _iAsync.getChartData(tmp1086.P, tmp1086.ChartID, tmp1086.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1088)
          {
            tmp1087.E = tmp1088;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1087.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1089)
        {
          var tmp1090 = $"Error occurred in {GetType().FullName}: {tmp1089.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1089, tmp1090);
          else
            Console.Error.WriteLine(tmp1090);
          var tmp1091 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1091.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1092 = new InternalStructs.addChartKey_args();
        await tmp1092.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1093 = new InternalStructs.addChartKey_result();
        try
        {
          try
          {
            await _iAsync.addChartKey(tmp1092.P, tmp1092.ChartID, tmp1092.Key, tmp1092.Data, tmp1092.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1094)
          {
            tmp1093.E = tmp1094;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1093.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1095)
        {
          var tmp1096 = $"Error occurred in {GetType().FullName}: {tmp1095.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1095, tmp1096);
          else
            Console.Error.WriteLine(tmp1096);
          var tmp1097 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1097.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1098 = new InternalStructs.removeChartKey_args();
        await tmp1098.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1099 = new InternalStructs.removeChartKey_result();
        try
        {
          try
          {
            await _iAsync.removeChartKey(tmp1098.P, tmp1098.ChartID, tmp1098.Key, tmp1098.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1100)
          {
            tmp1099.E = tmp1100;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1099.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1101)
        {
          var tmp1102 = $"Error occurred in {GetType().FullName}: {tmp1101.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1101, tmp1102);
          else
            Console.Error.WriteLine(tmp1102);
          var tmp1103 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1103.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task hideChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1104 = new InternalStructs.hideChartKey_args();
        await tmp1104.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1105 = new InternalStructs.hideChartKey_result();
        try
        {
          try
          {
            await _iAsync.hideChartKey(tmp1104.P, tmp1104.ChartID, tmp1104.Key, tmp1104.Hidden, tmp1104.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1106)
          {
            tmp1105.E = tmp1106;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1105.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1107)
        {
          var tmp1108 = $"Error occurred in {GetType().FullName}: {tmp1107.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1107, tmp1108);
          else
            Console.Error.WriteLine(tmp1108);
          var tmp1109 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1109.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendChartPoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1110 = new InternalStructs.appendChartPoints_args();
        await tmp1110.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.appendChartPoints(tmp1110.P, tmp1110.ChartID, tmp1110.Key, tmp1110.Points, tmp1110.Right, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1112)
        {
          var tmp1113 = $"Error occurred in {GetType().FullName}: {tmp1112.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1112, tmp1113);
          else
            Console.Error.WriteLine(tmp1113);
        }
      }

      public async global::System.Threading.Tasks.Task incrementChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1114 = new InternalStructs.incrementChartKey_args();
        await tmp1114.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1115 = new InternalStructs.incrementChartKey_result();
        try
        {
          try
          {
            await _iAsync.incrementChartKey(tmp1114.P, tmp1114.ChartID, tmp1114.Key, tmp1114.Val, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1116)
          {
            tmp1115.E = tmp1116;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1115.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1117)
        {
          var tmp1118 = $"Error occurred in {GetType().FullName}: {tmp1117.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1117, tmp1118);
          else
            Console.Error.WriteLine(tmp1118);
          var tmp1119 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1119.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1120 = new InternalStructs.exportChartImage_args();
        await tmp1120.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1121 = new InternalStructs.exportChartImage_result();
        try
        {
          try
          {
            tmp1121.Success = await _iAsync.exportChartImage(tmp1120.P, tmp1120.ChartID, tmp1120.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1122)
          {
            tmp1121.E = tmp1122;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1121.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1123)
        {
          var tmp1124 = $"Error occurred in {GetType().FullName}: {tmp1123.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1123, tmp1124);
          else
            Console.Error.WriteLine(tmp1124);
          var tmp1125 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Exception, seqid), cancellationToken);
          await tmp1125.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1126 = new InternalStructs.exportChartImageData_args();
        await tmp1126.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1127 = new InternalStructs.exportChartImageData_result();
        try
        {
          try
          {
            tmp1127.Success = await _iAsync.exportChartImageData(tmp1126.P, tmp1126.ChartID, tmp1126.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1128)
          {
            tmp1127.E = tmp1128;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1127.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1129)
        {
          var tmp1130 = $"Error occurred in {GetType().FullName}: {tmp1129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1129, tmp1130);
          else
            Console.Error.WriteLine(tmp1130);
          var tmp1131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1132 = new InternalStructs.notice_args();
        await tmp1132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.notice(tmp1132.P, tmp1132.Title, tmp1132.Message, tmp1132.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1134)
        {
          var tmp1135 = $"Error occurred in {GetType().FullName}: {tmp1134.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1134, tmp1135);
          else
            Console.Error.WriteLine(tmp1135);
        }
      }

      public async global::System.Threading.Tasks.Task dispNotice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1136 = new InternalStructs.dispNotice_args();
        await tmp1136.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.dispNotice(tmp1136.P, tmp1136.Disposition, tmp1136.Title, tmp1136.Message, tmp1136.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1138)
        {
          var tmp1139 = $"Error occurred in {GetType().FullName}: {tmp1138.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1138, tmp1139);
          else
            Console.Error.WriteLine(tmp1139);
        }
      }

      public async global::System.Threading.Tasks.Task error_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1140 = new InternalStructs.error_args();
        await tmp1140.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.error(tmp1140.P, tmp1140.Title, tmp1140.Message, tmp1140.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1142)
        {
          var tmp1143 = $"Error occurred in {GetType().FullName}: {tmp1142.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1142, tmp1143);
          else
            Console.Error.WriteLine(tmp1143);
        }
      }

      public async global::System.Threading.Tasks.Task popupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1144 = new InternalStructs.popupDialog_args();
        await tmp1144.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1145 = new InternalStructs.popupDialog_result();
        try
        {
          try
          {
            await _iAsync.popupDialog(tmp1144.P, tmp1144.Identifier, tmp1144.Title, tmp1144.Message, tmp1144.PositiveOption, tmp1144.NegativeOption, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1146)
          {
            tmp1145.E = tmp1146;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1145.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1147)
        {
          var tmp1148 = $"Error occurred in {GetType().FullName}: {tmp1147.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1147, tmp1148);
          else
            Console.Error.WriteLine(tmp1148);
          var tmp1149 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1149.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1150 = new InternalStructs.cancelPopupDialog_args();
        await tmp1150.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1151 = new InternalStructs.cancelPopupDialog_result();
        try
        {
          await _iAsync.cancelPopupDialog(tmp1150.P, tmp1150.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1151.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1152)
        {
          var tmp1153 = $"Error occurred in {GetType().FullName}: {tmp1152.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1152, tmp1153);
          else
            Console.Error.WriteLine(tmp1153);
          var tmp1154 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertInstructionAtSelectedLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1155 = new InternalStructs.insertInstructionAtSelectedLine_args();
        await tmp1155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1156 = new InternalStructs.insertInstructionAtSelectedLine_result();
        try
        {
          tmp1156.Success = await _iAsync.insertInstructionAtSelectedLine(tmp1155.P, tmp1155.Instruction, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1156.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1157)
        {
          var tmp1158 = $"Error occurred in {GetType().FullName}: {tmp1157.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1157, tmp1158);
          else
            Console.Error.WriteLine(tmp1158);
          var tmp1159 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp1159.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayScreen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1160 = new InternalStructs.displayScreen_args();
        await tmp1160.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1161 = new InternalStructs.displayScreen_result();
        try
        {
          await _iAsync.displayScreen(tmp1160.P, tmp1160.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1161.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1162)
        {
          var tmp1163 = $"Error occurred in {GetType().FullName}: {tmp1162.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1162, tmp1163);
          else
            Console.Error.WriteLine(tmp1163);
          var tmp1164 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Exception, seqid), cancellationToken);
          await tmp1164.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1165 = new InternalStructs.displayHelp_args();
        await tmp1165.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1166 = new InternalStructs.displayHelp_result();
        try
        {
          await _iAsync.displayHelp(tmp1165.P, tmp1165.Title, tmp1165.HtmlContentFile, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1166.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1167)
        {
          var tmp1168 = $"Error occurred in {GetType().FullName}: {tmp1167.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1167, tmp1168);
          else
            Console.Error.WriteLine(tmp1168);
          var tmp1169 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Exception, seqid), cancellationToken);
          await tmp1169.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task accessLevel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1170 = new InternalStructs.accessLevel_args();
        await tmp1170.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1171 = new InternalStructs.accessLevel_result();
        try
        {
          tmp1171.Success = await _iAsync.accessLevel(tmp1170.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1171.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1172)
        {
          var tmp1173 = $"Error occurred in {GetType().FullName}: {tmp1172.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1172, tmp1173);
          else
            Console.Error.WriteLine(tmp1173);
          var tmp1174 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevel", TMessageType.Exception, seqid), cancellationToken);
          await tmp1174.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task accessLevelIncludes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1175 = new InternalStructs.accessLevelIncludes_args();
        await tmp1175.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1176 = new InternalStructs.accessLevelIncludes_result();
        try
        {
          tmp1176.Success = await _iAsync.accessLevelIncludes(tmp1175.P, tmp1175.Level, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1176.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1177)
        {
          var tmp1178 = $"Error occurred in {GetType().FullName}: {tmp1177.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1177, tmp1178);
          else
            Console.Error.WriteLine(tmp1178);
          var tmp1179 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("accessLevelIncludes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1179.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class pendantVersion_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public pendantVersion_args()
        {
        }

        public pendantVersion_args DeepCopy()
        {
          var tmp1180 = new pendantVersion_args();
          if(__isset.p)
          {
            tmp1180.P = this.P;
          }
          tmp1180.__isset.p = this.__isset.p;
          return tmp1180;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1181 = new TStruct("pendantVersion_args");
            await oprot.WriteStructBeginAsync(tmp1181, cancellationToken);
            var tmp1182 = new TField();
            if(__isset.p)
            {
              tmp1182.Name = "p";
              tmp1182.Type = TType.I64;
              tmp1182.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1182, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1183 = new StringBuilder("pendantVersion_args(");
          int tmp1184 = 0;
          if(__isset.p)
          {
            if(0 < tmp1184++) { tmp1183.Append(", "); }
            tmp1183.Append("P: ");
            P.ToString(tmp1183);
          }
          tmp1183.Append(')');
          return tmp1183.ToString();
        }
      }


      public partial class pendantVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public pendantVersion_result()
        {
        }

        public pendantVersion_result DeepCopy()
        {
          var tmp1185 = new pendantVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp1185.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp1185.__isset.success = this.__isset.success;
          return tmp1185;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1186 = new TStruct("pendantVersion_result");
            await oprot.WriteStructBeginAsync(tmp1186, cancellationToken);
            var tmp1187 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1187.Name = "Success";
                tmp1187.Type = TType.Struct;
                tmp1187.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1187, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1188 = new StringBuilder("pendantVersion_result(");
          int tmp1189 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1189++) { tmp1188.Append(", "); }
            tmp1188.Append("Success: ");
            Success.ToString(tmp1188);
          }
          tmp1188.Append(')');
          return tmp1188.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp1190 = new subscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1190.P = this.P;
          }
          tmp1190.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1190.Types = this.Types.DeepCopy();
          }
          tmp1190.__isset.types = this.__isset.types;
          return tmp1190;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1191 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1191.Count);
                      for(int _i1192 = 0; _i1192 < _set1191.Count; ++_i1192)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1193;
                        _elem1193 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1193);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1194 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1194, cancellationToken);
            var tmp1195 = new TField();
            if(__isset.p)
            {
              tmp1195.Name = "p";
              tmp1195.Type = TType.I64;
              tmp1195.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1195.Name = "types";
              tmp1195.Type = TType.Set;
              tmp1195.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1196 in Types)
              {
                await oprot.WriteI32Async((int)_iter1196, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1197 = new StringBuilder("subscribeEventTypes_args(");
          int tmp1198 = 0;
          if(__isset.p)
          {
            if(0 < tmp1198++) { tmp1197.Append(", "); }
            tmp1197.Append("P: ");
            P.ToString(tmp1197);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1198++) { tmp1197.Append(", "); }
            tmp1197.Append("Types: ");
            Types.ToString(tmp1197);
          }
          tmp1197.Append(')');
          return tmp1197.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp1199 = new subscribeEventTypes_result();
          return tmp1199;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1200 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1200, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1201 = new StringBuilder("subscribeEventTypes_result(");
          tmp1201.Append(')');
          return tmp1201.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp1203 = new unsubscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1203.P = this.P;
          }
          tmp1203.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1203.Types = this.Types.DeepCopy();
          }
          tmp1203.__isset.types = this.__isset.types;
          return tmp1203;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1204 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1204.Count);
                      for(int _i1205 = 0; _i1205 < _set1204.Count; ++_i1205)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1206;
                        _elem1206 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1206);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1207 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1207, cancellationToken);
            var tmp1208 = new TField();
            if(__isset.p)
            {
              tmp1208.Name = "p";
              tmp1208.Type = TType.I64;
              tmp1208.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1208.Name = "types";
              tmp1208.Type = TType.Set;
              tmp1208.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1209 in Types)
              {
                await oprot.WriteI32Async((int)_iter1209, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1210 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp1211 = 0;
          if(__isset.p)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("P: ");
            P.ToString(tmp1210);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("Types: ");
            Types.ToString(tmp1210);
          }
          tmp1210.Append(')');
          return tmp1210.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp1212 = new unsubscribeEventTypes_result();
          return tmp1212;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1213 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1213, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1214 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp1214.Append(')');
          return tmp1214.ToString();
        }
      }


      public partial class subscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public subscribeItemEventTypes_args()
        {
        }

        public subscribeItemEventTypes_args DeepCopy()
        {
          var tmp1216 = new subscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1216.P = this.P;
          }
          tmp1216.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1216.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1216.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1216.Types = this.Types.DeepCopy();
          }
          tmp1216.__isset.types = this.__isset.types;
          return tmp1216;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1217 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1217.Count);
                      for(int _i1218 = 0; _i1218 < _set1217.Count; ++_i1218)
                      {
                        string _elem1219;
                        _elem1219 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1219);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1220 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1220.Count);
                      for(int _i1221 = 0; _i1221 < _set1220.Count; ++_i1221)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1222;
                        _elem1222 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1222);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1223 = new TStruct("subscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1223, cancellationToken);
            var tmp1224 = new TField();
            if(__isset.p)
            {
              tmp1224.Name = "p";
              tmp1224.Type = TType.I64;
              tmp1224.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1224.Name = "itemIDs";
              tmp1224.Type = TType.Set;
              tmp1224.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1225 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1225, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1224.Name = "types";
              tmp1224.Type = TType.Set;
              tmp1224.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1226 in Types)
              {
                await oprot.WriteI32Async((int)_iter1226, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1227 = new StringBuilder("subscribeItemEventTypes_args(");
          int tmp1228 = 0;
          if(__isset.p)
          {
            if(0 < tmp1228++) { tmp1227.Append(", "); }
            tmp1227.Append("P: ");
            P.ToString(tmp1227);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1228++) { tmp1227.Append(", "); }
            tmp1227.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1227);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1228++) { tmp1227.Append(", "); }
            tmp1227.Append("Types: ");
            Types.ToString(tmp1227);
          }
          tmp1227.Append(')');
          return tmp1227.ToString();
        }
      }


      public partial class subscribeItemEventTypes_result : TBase
      {

        public subscribeItemEventTypes_result()
        {
        }

        public subscribeItemEventTypes_result DeepCopy()
        {
          var tmp1229 = new subscribeItemEventTypes_result();
          return tmp1229;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1230 = new TStruct("subscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1230, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1231 = new StringBuilder("subscribeItemEventTypes_result(");
          tmp1231.Append(')');
          return tmp1231.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public unsubscribeItemEventTypes_args()
        {
        }

        public unsubscribeItemEventTypes_args DeepCopy()
        {
          var tmp1233 = new unsubscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1233.P = this.P;
          }
          tmp1233.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1233.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1233.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1233.Types = this.Types.DeepCopy();
          }
          tmp1233.__isset.types = this.__isset.types;
          return tmp1233;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1234 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1234.Count);
                      for(int _i1235 = 0; _i1235 < _set1234.Count; ++_i1235)
                      {
                        string _elem1236;
                        _elem1236 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1236);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1237 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1237.Count);
                      for(int _i1238 = 0; _i1238 < _set1237.Count; ++_i1238)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1239;
                        _elem1239 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1239);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1240 = new TStruct("unsubscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1240, cancellationToken);
            var tmp1241 = new TField();
            if(__isset.p)
            {
              tmp1241.Name = "p";
              tmp1241.Type = TType.I64;
              tmp1241.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1241, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1241.Name = "itemIDs";
              tmp1241.Type = TType.Set;
              tmp1241.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1241, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1242 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1242, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1241.Name = "types";
              tmp1241.Type = TType.Set;
              tmp1241.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1241, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1243 in Types)
              {
                await oprot.WriteI32Async((int)_iter1243, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1244 = new StringBuilder("unsubscribeItemEventTypes_args(");
          int tmp1245 = 0;
          if(__isset.p)
          {
            if(0 < tmp1245++) { tmp1244.Append(", "); }
            tmp1244.Append("P: ");
            P.ToString(tmp1244);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1245++) { tmp1244.Append(", "); }
            tmp1244.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1244);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1245++) { tmp1244.Append(", "); }
            tmp1244.Append("Types: ");
            Types.ToString(tmp1244);
          }
          tmp1244.Append(')');
          return tmp1244.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_result : TBase
      {

        public unsubscribeItemEventTypes_result()
        {
        }

        public unsubscribeItemEventTypes_result DeepCopy()
        {
          var tmp1246 = new unsubscribeItemEventTypes_result();
          return tmp1246;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1247 = new TStruct("unsubscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1247, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1248 = new StringBuilder("unsubscribeItemEventTypes_result(");
          tmp1248.Append(')');
          return tmp1248.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp1250 = new events_args();
          if(__isset.p)
          {
            tmp1250.P = this.P;
          }
          tmp1250.__isset.p = this.__isset.p;
          return tmp1250;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1251 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp1251, cancellationToken);
            var tmp1252 = new TField();
            if(__isset.p)
            {
              tmp1252.Name = "p";
              tmp1252.Type = TType.I64;
              tmp1252.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1252, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1253 = new StringBuilder("events_args(");
          int tmp1254 = 0;
          if(__isset.p)
          {
            if(0 < tmp1254++) { tmp1253.Append(", "); }
            tmp1253.Append("P: ");
            P.ToString(tmp1253);
          }
          tmp1253.Append(')');
          return tmp1253.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.PendantEvent> _success;

        public List<global::Yaskawa.Ext.API.PendantEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp1255 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp1255.Success = this.Success.DeepCopy();
          }
          tmp1255.__isset.success = this.__isset.success;
          return tmp1255;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1256 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.PendantEvent>(_list1256.Count);
                      for(int _i1257 = 0; _i1257 < _list1256.Count; ++_i1257)
                      {
                        global::Yaskawa.Ext.API.PendantEvent _elem1258;
                        _elem1258 = new global::Yaskawa.Ext.API.PendantEvent();
                        await _elem1258.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1258);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1259 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp1259, cancellationToken);
            var tmp1260 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1260.Name = "Success";
                tmp1260.Type = TType.List;
                tmp1260.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1260, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.PendantEvent _iter1261 in Success)
                {
                  await _iter1261.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1262 = new StringBuilder("events_result(");
          int tmp1263 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1263++) { tmp1262.Append(", "); }
            tmp1262.Append("Success: ");
            Success.ToString(tmp1262);
          }
          tmp1262.Append(')');
          return tmp1262.ToString();
        }
      }


      public partial class currentLanguage_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLanguage_args()
        {
        }

        public currentLanguage_args DeepCopy()
        {
          var tmp1264 = new currentLanguage_args();
          if(__isset.p)
          {
            tmp1264.P = this.P;
          }
          tmp1264.__isset.p = this.__isset.p;
          return tmp1264;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1265 = new TStruct("currentLanguage_args");
            await oprot.WriteStructBeginAsync(tmp1265, cancellationToken);
            var tmp1266 = new TField();
            if(__isset.p)
            {
              tmp1266.Name = "p";
              tmp1266.Type = TType.I64;
              tmp1266.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1266, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1267 = new StringBuilder("currentLanguage_args(");
          int tmp1268 = 0;
          if(__isset.p)
          {
            if(0 < tmp1268++) { tmp1267.Append(", "); }
            tmp1267.Append("P: ");
            P.ToString(tmp1267);
          }
          tmp1267.Append(')');
          return tmp1267.ToString();
        }
      }


      public partial class currentLanguage_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLanguage_result()
        {
        }

        public currentLanguage_result DeepCopy()
        {
          var tmp1269 = new currentLanguage_result();
          if((Success != null) && __isset.success)
          {
            tmp1269.Success = this.Success;
          }
          tmp1269.__isset.success = this.__isset.success;
          return tmp1269;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1270 = new TStruct("currentLanguage_result");
            await oprot.WriteStructBeginAsync(tmp1270, cancellationToken);
            var tmp1271 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1271.Name = "Success";
                tmp1271.Type = TType.String;
                tmp1271.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1271, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1272 = new StringBuilder("currentLanguage_result(");
          int tmp1273 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1273++) { tmp1272.Append(", "); }
            tmp1272.Append("Success: ");
            Success.ToString(tmp1272);
          }
          tmp1272.Append(')');
          return tmp1272.ToString();
        }
      }


      public partial class currentLocale_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLocale_args()
        {
        }

        public currentLocale_args DeepCopy()
        {
          var tmp1274 = new currentLocale_args();
          if(__isset.p)
          {
            tmp1274.P = this.P;
          }
          tmp1274.__isset.p = this.__isset.p;
          return tmp1274;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1275 = new TStruct("currentLocale_args");
            await oprot.WriteStructBeginAsync(tmp1275, cancellationToken);
            var tmp1276 = new TField();
            if(__isset.p)
            {
              tmp1276.Name = "p";
              tmp1276.Type = TType.I64;
              tmp1276.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1276, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1277 = new StringBuilder("currentLocale_args(");
          int tmp1278 = 0;
          if(__isset.p)
          {
            if(0 < tmp1278++) { tmp1277.Append(", "); }
            tmp1277.Append("P: ");
            P.ToString(tmp1277);
          }
          tmp1277.Append(')');
          return tmp1277.ToString();
        }
      }


      public partial class currentLocale_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLocale_result()
        {
        }

        public currentLocale_result DeepCopy()
        {
          var tmp1279 = new currentLocale_result();
          if((Success != null) && __isset.success)
          {
            tmp1279.Success = this.Success;
          }
          tmp1279.__isset.success = this.__isset.success;
          return tmp1279;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1280 = new TStruct("currentLocale_result");
            await oprot.WriteStructBeginAsync(tmp1280, cancellationToken);
            var tmp1281 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1281.Name = "Success";
                tmp1281.Type = TType.String;
                tmp1281.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1281, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1282 = new StringBuilder("currentLocale_result(");
          int tmp1283 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1283++) { tmp1282.Append(", "); }
            tmp1282.Append("Success: ");
            Success.ToString(tmp1282);
          }
          tmp1282.Append(')');
          return tmp1282.ToString();
        }
      }


      public partial class currentScreenName_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentScreenName_args()
        {
        }

        public currentScreenName_args DeepCopy()
        {
          var tmp1284 = new currentScreenName_args();
          if(__isset.p)
          {
            tmp1284.P = this.P;
          }
          tmp1284.__isset.p = this.__isset.p;
          return tmp1284;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1285 = new TStruct("currentScreenName_args");
            await oprot.WriteStructBeginAsync(tmp1285, cancellationToken);
            var tmp1286 = new TField();
            if(__isset.p)
            {
              tmp1286.Name = "p";
              tmp1286.Type = TType.I64;
              tmp1286.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1286, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1287 = new StringBuilder("currentScreenName_args(");
          int tmp1288 = 0;
          if(__isset.p)
          {
            if(0 < tmp1288++) { tmp1287.Append(", "); }
            tmp1287.Append("P: ");
            P.ToString(tmp1287);
          }
          tmp1287.Append(')');
          return tmp1287.ToString();
        }
      }


      public partial class currentScreenName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentScreenName_result()
        {
        }

        public currentScreenName_result DeepCopy()
        {
          var tmp1289 = new currentScreenName_result();
          if((Success != null) && __isset.success)
          {
            tmp1289.Success = this.Success;
          }
          tmp1289.__isset.success = this.__isset.success;
          return tmp1289;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1290 = new TStruct("currentScreenName_result");
            await oprot.WriteStructBeginAsync(tmp1290, cancellationToken);
            var tmp1291 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1291.Name = "Success";
                tmp1291.Type = TType.String;
                tmp1291.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1291, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1292 = new StringBuilder("currentScreenName_result(");
          int tmp1293 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1293++) { tmp1292.Append(", "); }
            tmp1292.Append("Success: ");
            Success.ToString(tmp1292);
          }
          tmp1292.Append(')');
          return tmp1292.ToString();
        }
      }


      public partial class registerYML_args : TBase
      {
        private long _p;
        private string _ymlSource;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string YmlSource
        {
          get
          {
            return _ymlSource;
          }
          set
          {
            __isset.ymlSource = true;
            this._ymlSource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ymlSource;
        }

        public registerYML_args()
        {
        }

        public registerYML_args DeepCopy()
        {
          var tmp1294 = new registerYML_args();
          if(__isset.p)
          {
            tmp1294.P = this.P;
          }
          tmp1294.__isset.p = this.__isset.p;
          if((YmlSource != null) && __isset.ymlSource)
          {
            tmp1294.YmlSource = this.YmlSource;
          }
          tmp1294.__isset.ymlSource = this.__isset.ymlSource;
          return tmp1294;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    YmlSource = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1295 = new TStruct("registerYML_args");
            await oprot.WriteStructBeginAsync(tmp1295, cancellationToken);
            var tmp1296 = new TField();
            if(__isset.p)
            {
              tmp1296.Name = "p";
              tmp1296.Type = TType.I64;
              tmp1296.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1296, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              tmp1296.Name = "ymlSource";
              tmp1296.Type = TType.String;
              tmp1296.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1296, cancellationToken);
              await oprot.WriteStringAsync(YmlSource, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ymlSource == other.__isset.ymlSource) && ((!__isset.ymlSource) || (global::System.Object.Equals(YmlSource, other.YmlSource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              hashcode = (hashcode * 397) + YmlSource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1297 = new StringBuilder("registerYML_args(");
          int tmp1298 = 0;
          if(__isset.p)
          {
            if(0 < tmp1298++) { tmp1297.Append(", "); }
            tmp1297.Append("P: ");
            P.ToString(tmp1297);
          }
          if((YmlSource != null) && __isset.ymlSource)
          {
            if(0 < tmp1298++) { tmp1297.Append(", "); }
            tmp1297.Append("YmlSource: ");
            YmlSource.ToString(tmp1297);
          }
          tmp1297.Append(')');
          return tmp1297.ToString();
        }
      }


      public partial class registerYML_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public registerYML_result()
        {
        }

        public registerYML_result DeepCopy()
        {
          var tmp1299 = new registerYML_result();
          if((Success != null) && __isset.success)
          {
            tmp1299.Success = this.Success.DeepCopy();
          }
          tmp1299.__isset.success = this.__isset.success;
          return tmp1299;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1300 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list1300.Count);
                      for(int _i1301 = 0; _i1301 < _list1300.Count; ++_i1301)
                      {
                        string _elem1302;
                        _elem1302 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem1302);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1303 = new TStruct("registerYML_result");
            await oprot.WriteStructBeginAsync(tmp1303, cancellationToken);
            var tmp1304 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1304.Name = "Success";
                tmp1304.Type = TType.List;
                tmp1304.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1304, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter1305 in Success)
                {
                  await oprot.WriteStringAsync(_iter1305, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1306 = new StringBuilder("registerYML_result(");
          int tmp1307 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1307++) { tmp1306.Append(", "); }
            tmp1306.Append("Success: ");
            Success.ToString(tmp1306);
          }
          tmp1306.Append(')');
          return tmp1306.ToString();
        }
      }


      public partial class registerImageFile_args : TBase
      {
        private long _p;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageFileName;
        }

        public registerImageFile_args()
        {
        }

        public registerImageFile_args DeepCopy()
        {
          var tmp1308 = new registerImageFile_args();
          if(__isset.p)
          {
            tmp1308.P = this.P;
          }
          tmp1308.__isset.p = this.__isset.p;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1308.ImageFileName = this.ImageFileName;
          }
          tmp1308.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1308;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1309 = new TStruct("registerImageFile_args");
            await oprot.WriteStructBeginAsync(tmp1309, cancellationToken);
            var tmp1310 = new TField();
            if(__isset.p)
            {
              tmp1310.Name = "p";
              tmp1310.Type = TType.I64;
              tmp1310.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1310, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1310.Name = "imageFileName";
              tmp1310.Type = TType.String;
              tmp1310.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1310, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1311 = new StringBuilder("registerImageFile_args(");
          int tmp1312 = 0;
          if(__isset.p)
          {
            if(0 < tmp1312++) { tmp1311.Append(", "); }
            tmp1311.Append("P: ");
            P.ToString(tmp1311);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1312++) { tmp1311.Append(", "); }
            tmp1311.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1311);
          }
          tmp1311.Append(')');
          return tmp1311.ToString();
        }
      }


      public partial class registerImageFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageFile_result()
        {
        }

        public registerImageFile_result DeepCopy()
        {
          var tmp1313 = new registerImageFile_result();
          if((E != null) && __isset.e)
          {
            tmp1313.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1313.__isset.e = this.__isset.e;
          return tmp1313;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1314 = new TStruct("registerImageFile_result");
            await oprot.WriteStructBeginAsync(tmp1314, cancellationToken);
            var tmp1315 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1315.Name = "E";
                tmp1315.Type = TType.Struct;
                tmp1315.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1315, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1316 = new StringBuilder("registerImageFile_result(");
          int tmp1317 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1317++) { tmp1316.Append(", "); }
            tmp1316.Append("E: ");
            E.ToString(tmp1316);
          }
          tmp1316.Append(')');
          return tmp1316.ToString();
        }
      }


      public partial class registerImageData_args : TBase
      {
        private long _p;
        private byte[] _imageData;
        private string _imageName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] ImageData
        {
          get
          {
            return _imageData;
          }
          set
          {
            __isset.imageData = true;
            this._imageData = value;
          }
        }

        public string ImageName
        {
          get
          {
            return _imageName;
          }
          set
          {
            __isset.imageName = true;
            this._imageName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageData;
          public bool imageName;
        }

        public registerImageData_args()
        {
        }

        public registerImageData_args DeepCopy()
        {
          var tmp1318 = new registerImageData_args();
          if(__isset.p)
          {
            tmp1318.P = this.P;
          }
          tmp1318.__isset.p = this.__isset.p;
          if((ImageData != null) && __isset.imageData)
          {
            tmp1318.ImageData = this.ImageData.ToArray();
          }
          tmp1318.__isset.imageData = this.__isset.imageData;
          if((ImageName != null) && __isset.imageName)
          {
            tmp1318.ImageName = this.ImageName;
          }
          tmp1318.__isset.imageName = this.__isset.imageName;
          return tmp1318;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1319 = new TStruct("registerImageData_args");
            await oprot.WriteStructBeginAsync(tmp1319, cancellationToken);
            var tmp1320 = new TField();
            if(__isset.p)
            {
              tmp1320.Name = "p";
              tmp1320.Type = TType.I64;
              tmp1320.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageData != null) && __isset.imageData)
            {
              tmp1320.Name = "imageData";
              tmp1320.Type = TType.String;
              tmp1320.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
              await oprot.WriteBinaryAsync(ImageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageName != null) && __isset.imageName)
            {
              tmp1320.Name = "imageName";
              tmp1320.Type = TType.String;
              tmp1320.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
              await oprot.WriteStringAsync(ImageName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageData == other.__isset.imageData) && ((!__isset.imageData) || (TCollections.Equals(ImageData, other.ImageData))))
            && ((__isset.imageName == other.__isset.imageName) && ((!__isset.imageName) || (global::System.Object.Equals(ImageName, other.ImageName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageData != null) && __isset.imageData)
            {
              hashcode = (hashcode * 397) + ImageData.GetHashCode();
            }
            if((ImageName != null) && __isset.imageName)
            {
              hashcode = (hashcode * 397) + ImageName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1321 = new StringBuilder("registerImageData_args(");
          int tmp1322 = 0;
          if(__isset.p)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("P: ");
            P.ToString(tmp1321);
          }
          if((ImageData != null) && __isset.imageData)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("ImageData: ");
            ImageData.ToString(tmp1321);
          }
          if((ImageName != null) && __isset.imageName)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("ImageName: ");
            ImageName.ToString(tmp1321);
          }
          tmp1321.Append(')');
          return tmp1321.ToString();
        }
      }


      public partial class registerImageData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageData_result()
        {
        }

        public registerImageData_result DeepCopy()
        {
          var tmp1323 = new registerImageData_result();
          if((E != null) && __isset.e)
          {
            tmp1323.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1323.__isset.e = this.__isset.e;
          return tmp1323;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1324 = new TStruct("registerImageData_result");
            await oprot.WriteStructBeginAsync(tmp1324, cancellationToken);
            var tmp1325 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1325.Name = "E";
                tmp1325.Type = TType.Struct;
                tmp1325.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1325, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1326 = new StringBuilder("registerImageData_result(");
          int tmp1327 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1327++) { tmp1326.Append(", "); }
            tmp1326.Append("E: ");
            E.ToString(tmp1326);
          }
          tmp1326.Append(')');
          return tmp1326.ToString();
        }
      }


      public partial class registerHTMLFile_args : TBase
      {
        private long _p;
        private string _htmlFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string HtmlFileName
        {
          get
          {
            return _htmlFileName;
          }
          set
          {
            __isset.htmlFileName = true;
            this._htmlFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlFileName;
        }

        public registerHTMLFile_args()
        {
        }

        public registerHTMLFile_args DeepCopy()
        {
          var tmp1328 = new registerHTMLFile_args();
          if(__isset.p)
          {
            tmp1328.P = this.P;
          }
          tmp1328.__isset.p = this.__isset.p;
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            tmp1328.HtmlFileName = this.HtmlFileName;
          }
          tmp1328.__isset.htmlFileName = this.__isset.htmlFileName;
          return tmp1328;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1329 = new TStruct("registerHTMLFile_args");
            await oprot.WriteStructBeginAsync(tmp1329, cancellationToken);
            var tmp1330 = new TField();
            if(__isset.p)
            {
              tmp1330.Name = "p";
              tmp1330.Type = TType.I64;
              tmp1330.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              tmp1330.Name = "htmlFileName";
              tmp1330.Type = TType.String;
              tmp1330.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteStringAsync(HtmlFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlFileName == other.__isset.htmlFileName) && ((!__isset.htmlFileName) || (global::System.Object.Equals(HtmlFileName, other.HtmlFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              hashcode = (hashcode * 397) + HtmlFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1331 = new StringBuilder("registerHTMLFile_args(");
          int tmp1332 = 0;
          if(__isset.p)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("P: ");
            P.ToString(tmp1331);
          }
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("HtmlFileName: ");
            HtmlFileName.ToString(tmp1331);
          }
          tmp1331.Append(')');
          return tmp1331.ToString();
        }
      }


      public partial class registerHTMLFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLFile_result()
        {
        }

        public registerHTMLFile_result DeepCopy()
        {
          var tmp1333 = new registerHTMLFile_result();
          if((E != null) && __isset.e)
          {
            tmp1333.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1333.__isset.e = this.__isset.e;
          return tmp1333;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1334 = new TStruct("registerHTMLFile_result");
            await oprot.WriteStructBeginAsync(tmp1334, cancellationToken);
            var tmp1335 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1335.Name = "E";
                tmp1335.Type = TType.Struct;
                tmp1335.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1335, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1336 = new StringBuilder("registerHTMLFile_result(");
          int tmp1337 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1337++) { tmp1336.Append(", "); }
            tmp1336.Append("E: ");
            E.ToString(tmp1336);
          }
          tmp1336.Append(')');
          return tmp1336.ToString();
        }
      }


      public partial class registerHTMLData_args : TBase
      {
        private long _p;
        private byte[] _htmlData;
        private string _htmlName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] HtmlData
        {
          get
          {
            return _htmlData;
          }
          set
          {
            __isset.htmlData = true;
            this._htmlData = value;
          }
        }

        public string HtmlName
        {
          get
          {
            return _htmlName;
          }
          set
          {
            __isset.htmlName = true;
            this._htmlName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlData;
          public bool htmlName;
        }

        public registerHTMLData_args()
        {
        }

        public registerHTMLData_args DeepCopy()
        {
          var tmp1338 = new registerHTMLData_args();
          if(__isset.p)
          {
            tmp1338.P = this.P;
          }
          tmp1338.__isset.p = this.__isset.p;
          if((HtmlData != null) && __isset.htmlData)
          {
            tmp1338.HtmlData = this.HtmlData.ToArray();
          }
          tmp1338.__isset.htmlData = this.__isset.htmlData;
          if((HtmlName != null) && __isset.htmlName)
          {
            tmp1338.HtmlName = this.HtmlName;
          }
          tmp1338.__isset.htmlName = this.__isset.htmlName;
          return tmp1338;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1339 = new TStruct("registerHTMLData_args");
            await oprot.WriteStructBeginAsync(tmp1339, cancellationToken);
            var tmp1340 = new TField();
            if(__isset.p)
            {
              tmp1340.Name = "p";
              tmp1340.Type = TType.I64;
              tmp1340.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              tmp1340.Name = "htmlData";
              tmp1340.Type = TType.String;
              tmp1340.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
              await oprot.WriteBinaryAsync(HtmlData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              tmp1340.Name = "htmlName";
              tmp1340.Type = TType.String;
              tmp1340.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
              await oprot.WriteStringAsync(HtmlName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlData == other.__isset.htmlData) && ((!__isset.htmlData) || (TCollections.Equals(HtmlData, other.HtmlData))))
            && ((__isset.htmlName == other.__isset.htmlName) && ((!__isset.htmlName) || (global::System.Object.Equals(HtmlName, other.HtmlName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              hashcode = (hashcode * 397) + HtmlData.GetHashCode();
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              hashcode = (hashcode * 397) + HtmlName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1341 = new StringBuilder("registerHTMLData_args(");
          int tmp1342 = 0;
          if(__isset.p)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("P: ");
            P.ToString(tmp1341);
          }
          if((HtmlData != null) && __isset.htmlData)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("HtmlData: ");
            HtmlData.ToString(tmp1341);
          }
          if((HtmlName != null) && __isset.htmlName)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("HtmlName: ");
            HtmlName.ToString(tmp1341);
          }
          tmp1341.Append(')');
          return tmp1341.ToString();
        }
      }


      public partial class registerHTMLData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLData_result()
        {
        }

        public registerHTMLData_result DeepCopy()
        {
          var tmp1343 = new registerHTMLData_result();
          if((E != null) && __isset.e)
          {
            tmp1343.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1343.__isset.e = this.__isset.e;
          return tmp1343;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1344 = new TStruct("registerHTMLData_result");
            await oprot.WriteStructBeginAsync(tmp1344, cancellationToken);
            var tmp1345 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1345.Name = "E";
                tmp1345.Type = TType.Struct;
                tmp1345.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1345, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1346 = new StringBuilder("registerHTMLData_result(");
          int tmp1347 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1347++) { tmp1346.Append(", "); }
            tmp1346.Append("E: ");
            E.ToString(tmp1346);
          }
          tmp1346.Append(')');
          return tmp1346.ToString();
        }
      }


      public partial class registerTranslationFile_args : TBase
      {
        private long _p;
        private string _locale;
        private string _translationFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public string TranslationFileName
        {
          get
          {
            return _translationFileName;
          }
          set
          {
            __isset.translationFileName = true;
            this._translationFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationFileName;
        }

        public registerTranslationFile_args()
        {
        }

        public registerTranslationFile_args DeepCopy()
        {
          var tmp1348 = new registerTranslationFile_args();
          if(__isset.p)
          {
            tmp1348.P = this.P;
          }
          tmp1348.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1348.Locale = this.Locale;
          }
          tmp1348.__isset.locale = this.__isset.locale;
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            tmp1348.TranslationFileName = this.TranslationFileName;
          }
          tmp1348.__isset.translationFileName = this.__isset.translationFileName;
          return tmp1348;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1349 = new TStruct("registerTranslationFile_args");
            await oprot.WriteStructBeginAsync(tmp1349, cancellationToken);
            var tmp1350 = new TField();
            if(__isset.p)
            {
              tmp1350.Name = "p";
              tmp1350.Type = TType.I64;
              tmp1350.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1350.Name = "locale";
              tmp1350.Type = TType.String;
              tmp1350.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              tmp1350.Name = "translationFileName";
              tmp1350.Type = TType.String;
              tmp1350.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteStringAsync(TranslationFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationFileName == other.__isset.translationFileName) && ((!__isset.translationFileName) || (global::System.Object.Equals(TranslationFileName, other.TranslationFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              hashcode = (hashcode * 397) + TranslationFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1351 = new StringBuilder("registerTranslationFile_args(");
          int tmp1352 = 0;
          if(__isset.p)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("P: ");
            P.ToString(tmp1351);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("Locale: ");
            Locale.ToString(tmp1351);
          }
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("TranslationFileName: ");
            TranslationFileName.ToString(tmp1351);
          }
          tmp1351.Append(')');
          return tmp1351.ToString();
        }
      }


      public partial class registerTranslationFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationFile_result()
        {
        }

        public registerTranslationFile_result DeepCopy()
        {
          var tmp1353 = new registerTranslationFile_result();
          if((E != null) && __isset.e)
          {
            tmp1353.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1353.__isset.e = this.__isset.e;
          return tmp1353;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1354 = new TStruct("registerTranslationFile_result");
            await oprot.WriteStructBeginAsync(tmp1354, cancellationToken);
            var tmp1355 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1355.Name = "E";
                tmp1355.Type = TType.Struct;
                tmp1355.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1355, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1356 = new StringBuilder("registerTranslationFile_result(");
          int tmp1357 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1357++) { tmp1356.Append(", "); }
            tmp1356.Append("E: ");
            E.ToString(tmp1356);
          }
          tmp1356.Append(')');
          return tmp1356.ToString();
        }
      }


      public partial class registerTranslationData_args : TBase
      {
        private long _p;
        private string _locale;
        private byte[] _translationData;
        private string _translationName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public byte[] TranslationData
        {
          get
          {
            return _translationData;
          }
          set
          {
            __isset.translationData = true;
            this._translationData = value;
          }
        }

        public string TranslationName
        {
          get
          {
            return _translationName;
          }
          set
          {
            __isset.translationName = true;
            this._translationName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationData;
          public bool translationName;
        }

        public registerTranslationData_args()
        {
        }

        public registerTranslationData_args DeepCopy()
        {
          var tmp1358 = new registerTranslationData_args();
          if(__isset.p)
          {
            tmp1358.P = this.P;
          }
          tmp1358.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1358.Locale = this.Locale;
          }
          tmp1358.__isset.locale = this.__isset.locale;
          if((TranslationData != null) && __isset.translationData)
          {
            tmp1358.TranslationData = this.TranslationData.ToArray();
          }
          tmp1358.__isset.translationData = this.__isset.translationData;
          if((TranslationName != null) && __isset.translationName)
          {
            tmp1358.TranslationName = this.TranslationName;
          }
          tmp1358.__isset.translationName = this.__isset.translationName;
          return tmp1358;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    TranslationName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1359 = new TStruct("registerTranslationData_args");
            await oprot.WriteStructBeginAsync(tmp1359, cancellationToken);
            var tmp1360 = new TField();
            if(__isset.p)
            {
              tmp1360.Name = "p";
              tmp1360.Type = TType.I64;
              tmp1360.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1360.Name = "locale";
              tmp1360.Type = TType.String;
              tmp1360.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationData != null) && __isset.translationData)
            {
              tmp1360.Name = "translationData";
              tmp1360.Type = TType.String;
              tmp1360.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteBinaryAsync(TranslationData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationName != null) && __isset.translationName)
            {
              tmp1360.Name = "translationName";
              tmp1360.Type = TType.String;
              tmp1360.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteStringAsync(TranslationName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationData == other.__isset.translationData) && ((!__isset.translationData) || (TCollections.Equals(TranslationData, other.TranslationData))))
            && ((__isset.translationName == other.__isset.translationName) && ((!__isset.translationName) || (global::System.Object.Equals(TranslationName, other.TranslationName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationData != null) && __isset.translationData)
            {
              hashcode = (hashcode * 397) + TranslationData.GetHashCode();
            }
            if((TranslationName != null) && __isset.translationName)
            {
              hashcode = (hashcode * 397) + TranslationName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1361 = new StringBuilder("registerTranslationData_args(");
          int tmp1362 = 0;
          if(__isset.p)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("P: ");
            P.ToString(tmp1361);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("Locale: ");
            Locale.ToString(tmp1361);
          }
          if((TranslationData != null) && __isset.translationData)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("TranslationData: ");
            TranslationData.ToString(tmp1361);
          }
          if((TranslationName != null) && __isset.translationName)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("TranslationName: ");
            TranslationName.ToString(tmp1361);
          }
          tmp1361.Append(')');
          return tmp1361.ToString();
        }
      }


      public partial class registerTranslationData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationData_result()
        {
        }

        public registerTranslationData_result DeepCopy()
        {
          var tmp1363 = new registerTranslationData_result();
          if((E != null) && __isset.e)
          {
            tmp1363.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1363.__isset.e = this.__isset.e;
          return tmp1363;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1364 = new TStruct("registerTranslationData_result");
            await oprot.WriteStructBeginAsync(tmp1364, cancellationToken);
            var tmp1365 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1365.Name = "E";
                tmp1365.Type = TType.Struct;
                tmp1365.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1365, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1366 = new StringBuilder("registerTranslationData_result(");
          int tmp1367 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1367++) { tmp1366.Append(", "); }
            tmp1366.Append("E: ");
            E.ToString(tmp1366);
          }
          tmp1366.Append(')');
          return tmp1366.ToString();
        }
      }


      public partial class registerUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;
        private string _menuText;
        private string _menuIcon;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }

        public string MenuText
        {
          get
          {
            return _menuText;
          }
          set
          {
            __isset.menuText = true;
            this._menuText = value;
          }
        }

        public string MenuIcon
        {
          get
          {
            return _menuIcon;
          }
          set
          {
            __isset.menuIcon = true;
            this._menuIcon = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
          public bool menuText;
          public bool menuIcon;
        }

        public registerUtilityMenu_args()
        {
        }

        public registerUtilityMenu_args DeepCopy()
        {
          var tmp1368 = new registerUtilityMenu_args();
          if(__isset.p)
          {
            tmp1368.P = this.P;
          }
          tmp1368.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1368.MenuName = this.MenuName;
          }
          tmp1368.__isset.menuName = this.__isset.menuName;
          if((MenuText != null) && __isset.menuText)
          {
            tmp1368.MenuText = this.MenuText;
          }
          tmp1368.__isset.menuText = this.__isset.menuText;
          if((MenuIcon != null) && __isset.menuIcon)
          {
            tmp1368.MenuIcon = this.MenuIcon;
          }
          tmp1368.__isset.menuIcon = this.__isset.menuIcon;
          return tmp1368;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    MenuText = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuIcon = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1369 = new TStruct("registerUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1369, cancellationToken);
            var tmp1370 = new TField();
            if(__isset.p)
            {
              tmp1370.Name = "p";
              tmp1370.Type = TType.I64;
              tmp1370.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1370, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1370.Name = "menuName";
              tmp1370.Type = TType.String;
              tmp1370.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1370, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuText != null) && __isset.menuText)
            {
              tmp1370.Name = "menuText";
              tmp1370.Type = TType.String;
              tmp1370.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1370, cancellationToken);
              await oprot.WriteStringAsync(MenuText, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              tmp1370.Name = "menuIcon";
              tmp1370.Type = TType.String;
              tmp1370.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1370, cancellationToken);
              await oprot.WriteStringAsync(MenuIcon, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))))
            && ((__isset.menuText == other.__isset.menuText) && ((!__isset.menuText) || (global::System.Object.Equals(MenuText, other.MenuText))))
            && ((__isset.menuIcon == other.__isset.menuIcon) && ((!__isset.menuIcon) || (global::System.Object.Equals(MenuIcon, other.MenuIcon))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
            if((MenuText != null) && __isset.menuText)
            {
              hashcode = (hashcode * 397) + MenuText.GetHashCode();
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              hashcode = (hashcode * 397) + MenuIcon.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1371 = new StringBuilder("registerUtilityMenu_args(");
          int tmp1372 = 0;
          if(__isset.p)
          {
            if(0 < tmp1372++) { tmp1371.Append(", "); }
            tmp1371.Append("P: ");
            P.ToString(tmp1371);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1372++) { tmp1371.Append(", "); }
            tmp1371.Append("MenuName: ");
            MenuName.ToString(tmp1371);
          }
          if((MenuText != null) && __isset.menuText)
          {
            if(0 < tmp1372++) { tmp1371.Append(", "); }
            tmp1371.Append("MenuText: ");
            MenuText.ToString(tmp1371);
          }
          if((MenuIcon != null) && __isset.menuIcon)
          {
            if(0 < tmp1372++) { tmp1371.Append(", "); }
            tmp1371.Append("MenuIcon: ");
            MenuIcon.ToString(tmp1371);
          }
          tmp1371.Append(')');
          return tmp1371.ToString();
        }
      }


      public partial class registerUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityMenu_result()
        {
        }

        public registerUtilityMenu_result DeepCopy()
        {
          var tmp1373 = new registerUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1373.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1373.__isset.e = this.__isset.e;
          return tmp1373;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1374 = new TStruct("registerUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1374, cancellationToken);
            var tmp1375 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1375.Name = "E";
                tmp1375.Type = TType.Struct;
                tmp1375.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1375, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1376 = new StringBuilder("registerUtilityMenu_result(");
          int tmp1377 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1377++) { tmp1376.Append(", "); }
            tmp1376.Append("E: ");
            E.ToString(tmp1376);
          }
          tmp1376.Append(')');
          return tmp1376.ToString();
        }
      }


      public partial class unregisterUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
        }

        public unregisterUtilityMenu_args()
        {
        }

        public unregisterUtilityMenu_args DeepCopy()
        {
          var tmp1378 = new unregisterUtilityMenu_args();
          if(__isset.p)
          {
            tmp1378.P = this.P;
          }
          tmp1378.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1378.MenuName = this.MenuName;
          }
          tmp1378.__isset.menuName = this.__isset.menuName;
          return tmp1378;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1379 = new TStruct("unregisterUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1379, cancellationToken);
            var tmp1380 = new TField();
            if(__isset.p)
            {
              tmp1380.Name = "p";
              tmp1380.Type = TType.I64;
              tmp1380.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1380, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1380.Name = "menuName";
              tmp1380.Type = TType.String;
              tmp1380.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1380, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1381 = new StringBuilder("unregisterUtilityMenu_args(");
          int tmp1382 = 0;
          if(__isset.p)
          {
            if(0 < tmp1382++) { tmp1381.Append(", "); }
            tmp1381.Append("P: ");
            P.ToString(tmp1381);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1382++) { tmp1381.Append(", "); }
            tmp1381.Append("MenuName: ");
            MenuName.ToString(tmp1381);
          }
          tmp1381.Append(')');
          return tmp1381.ToString();
        }
      }


      public partial class unregisterUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityMenu_result()
        {
        }

        public unregisterUtilityMenu_result DeepCopy()
        {
          var tmp1383 = new unregisterUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1383.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1383.__isset.e = this.__isset.e;
          return tmp1383;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1384 = new TStruct("unregisterUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1384, cancellationToken);
            var tmp1385 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1385.Name = "E";
                tmp1385.Type = TType.Struct;
                tmp1385.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1385, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1386 = new StringBuilder("unregisterUtilityMenu_result(");
          int tmp1387 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1387++) { tmp1386.Append(", "); }
            tmp1386.Append("E: ");
            E.ToString(tmp1386);
          }
          tmp1386.Append(')');
          return tmp1386.ToString();
        }
      }


      public partial class registerUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
        }

        public registerUtilityWindow_args()
        {
        }

        public registerUtilityWindow_args DeepCopy()
        {
          var tmp1388 = new registerUtilityWindow_args();
          if(__isset.p)
          {
            tmp1388.P = this.P;
          }
          tmp1388.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1388.Identifier = this.Identifier;
          }
          tmp1388.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1388.ItemType = this.ItemType;
          }
          tmp1388.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1388.MenuItemName = this.MenuItemName;
          }
          tmp1388.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1388.WindowTitle = this.WindowTitle;
          }
          tmp1388.__isset.windowTitle = this.__isset.windowTitle;
          return tmp1388;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1389 = new TStruct("registerUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1389, cancellationToken);
            var tmp1390 = new TField();
            if(__isset.p)
            {
              tmp1390.Name = "p";
              tmp1390.Type = TType.I64;
              tmp1390.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1390.Name = "identifier";
              tmp1390.Type = TType.String;
              tmp1390.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1390.Name = "itemType";
              tmp1390.Type = TType.String;
              tmp1390.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1390.Name = "menuItemName";
              tmp1390.Type = TType.String;
              tmp1390.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1390.Name = "windowTitle";
              tmp1390.Type = TType.String;
              tmp1390.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1390, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1391 = new StringBuilder("registerUtilityWindow_args(");
          int tmp1392 = 0;
          if(__isset.p)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("P: ");
            P.ToString(tmp1391);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("Identifier: ");
            Identifier.ToString(tmp1391);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("ItemType: ");
            ItemType.ToString(tmp1391);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1391);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1392++) { tmp1391.Append(", "); }
            tmp1391.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1391);
          }
          tmp1391.Append(')');
          return tmp1391.ToString();
        }
      }


      public partial class registerUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindow_result()
        {
        }

        public registerUtilityWindow_result DeepCopy()
        {
          var tmp1393 = new registerUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1393.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1393.__isset.e = this.__isset.e;
          return tmp1393;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1394 = new TStruct("registerUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1394, cancellationToken);
            var tmp1395 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1395.Name = "E";
                tmp1395.Type = TType.Struct;
                tmp1395.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1395, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1396 = new StringBuilder("registerUtilityWindow_result(");
          int tmp1397 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1397++) { tmp1396.Append(", "); }
            tmp1396.Append("E: ");
            E.ToString(tmp1396);
          }
          tmp1396.Append(')');
          return tmp1396.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
          public bool menuName;
        }

        public registerUtilityWindowWithMenu_args()
        {
        }

        public registerUtilityWindowWithMenu_args DeepCopy()
        {
          var tmp1398 = new registerUtilityWindowWithMenu_args();
          if(__isset.p)
          {
            tmp1398.P = this.P;
          }
          tmp1398.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1398.Identifier = this.Identifier;
          }
          tmp1398.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1398.ItemType = this.ItemType;
          }
          tmp1398.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1398.MenuItemName = this.MenuItemName;
          }
          tmp1398.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1398.WindowTitle = this.WindowTitle;
          }
          tmp1398.__isset.windowTitle = this.__isset.windowTitle;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1398.MenuName = this.MenuName;
          }
          tmp1398.__isset.menuName = this.__isset.menuName;
          return tmp1398;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1399 = new TStruct("registerUtilityWindowWithMenu_args");
            await oprot.WriteStructBeginAsync(tmp1399, cancellationToken);
            var tmp1400 = new TField();
            if(__isset.p)
            {
              tmp1400.Name = "p";
              tmp1400.Type = TType.I64;
              tmp1400.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1400.Name = "identifier";
              tmp1400.Type = TType.String;
              tmp1400.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1400.Name = "itemType";
              tmp1400.Type = TType.String;
              tmp1400.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1400.Name = "menuItemName";
              tmp1400.Type = TType.String;
              tmp1400.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1400.Name = "windowTitle";
              tmp1400.Type = TType.String;
              tmp1400.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1400.Name = "menuName";
              tmp1400.Type = TType.String;
              tmp1400.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1400, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1401 = new StringBuilder("registerUtilityWindowWithMenu_args(");
          int tmp1402 = 0;
          if(__isset.p)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("P: ");
            P.ToString(tmp1401);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("Identifier: ");
            Identifier.ToString(tmp1401);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("ItemType: ");
            ItemType.ToString(tmp1401);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1401);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1401);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1402++) { tmp1401.Append(", "); }
            tmp1401.Append("MenuName: ");
            MenuName.ToString(tmp1401);
          }
          tmp1401.Append(')');
          return tmp1401.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindowWithMenu_result()
        {
        }

        public registerUtilityWindowWithMenu_result DeepCopy()
        {
          var tmp1403 = new registerUtilityWindowWithMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1403.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1403.__isset.e = this.__isset.e;
          return tmp1403;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1404 = new TStruct("registerUtilityWindowWithMenu_result");
            await oprot.WriteStructBeginAsync(tmp1404, cancellationToken);
            var tmp1405 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1405.Name = "E";
                tmp1405.Type = TType.Struct;
                tmp1405.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1405, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1406 = new StringBuilder("registerUtilityWindowWithMenu_result(");
          int tmp1407 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1407++) { tmp1406.Append(", "); }
            tmp1406.Append("E: ");
            E.ToString(tmp1406);
          }
          tmp1406.Append(')');
          return tmp1406.ToString();
        }
      }


      public partial class unregisterUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterUtilityWindow_args()
        {
        }

        public unregisterUtilityWindow_args DeepCopy()
        {
          var tmp1408 = new unregisterUtilityWindow_args();
          if(__isset.p)
          {
            tmp1408.P = this.P;
          }
          tmp1408.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1408.Identifier = this.Identifier;
          }
          tmp1408.__isset.identifier = this.__isset.identifier;
          return tmp1408;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1409 = new TStruct("unregisterUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1409, cancellationToken);
            var tmp1410 = new TField();
            if(__isset.p)
            {
              tmp1410.Name = "p";
              tmp1410.Type = TType.I64;
              tmp1410.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1410.Name = "identifier";
              tmp1410.Type = TType.String;
              tmp1410.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1410, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1411 = new StringBuilder("unregisterUtilityWindow_args(");
          int tmp1412 = 0;
          if(__isset.p)
          {
            if(0 < tmp1412++) { tmp1411.Append(", "); }
            tmp1411.Append("P: ");
            P.ToString(tmp1411);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1412++) { tmp1411.Append(", "); }
            tmp1411.Append("Identifier: ");
            Identifier.ToString(tmp1411);
          }
          tmp1411.Append(')');
          return tmp1411.ToString();
        }
      }


      public partial class unregisterUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityWindow_result()
        {
        }

        public unregisterUtilityWindow_result DeepCopy()
        {
          var tmp1413 = new unregisterUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1413.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1413.__isset.e = this.__isset.e;
          return tmp1413;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1414 = new TStruct("unregisterUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1414, cancellationToken);
            var tmp1415 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1415.Name = "E";
                tmp1415.Type = TType.Struct;
                tmp1415.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1415, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1416 = new StringBuilder("unregisterUtilityWindow_result(");
          int tmp1417 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1417++) { tmp1416.Append(", "); }
            tmp1416.Append("E: ");
            E.ToString(tmp1416);
          }
          tmp1416.Append(')');
          return tmp1416.ToString();
        }
      }


      public partial class openUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public openUtilityWindow_args()
        {
        }

        public openUtilityWindow_args DeepCopy()
        {
          var tmp1418 = new openUtilityWindow_args();
          if(__isset.p)
          {
            tmp1418.P = this.P;
          }
          tmp1418.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1418.Identifier = this.Identifier;
          }
          tmp1418.__isset.identifier = this.__isset.identifier;
          return tmp1418;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1419 = new TStruct("openUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1419, cancellationToken);
            var tmp1420 = new TField();
            if(__isset.p)
            {
              tmp1420.Name = "p";
              tmp1420.Type = TType.I64;
              tmp1420.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1420, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1420.Name = "identifier";
              tmp1420.Type = TType.String;
              tmp1420.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1420, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1421 = new StringBuilder("openUtilityWindow_args(");
          int tmp1422 = 0;
          if(__isset.p)
          {
            if(0 < tmp1422++) { tmp1421.Append(", "); }
            tmp1421.Append("P: ");
            P.ToString(tmp1421);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1422++) { tmp1421.Append(", "); }
            tmp1421.Append("Identifier: ");
            Identifier.ToString(tmp1421);
          }
          tmp1421.Append(')');
          return tmp1421.ToString();
        }
      }


      public partial class openUtilityWindow_result : TBase
      {

        public openUtilityWindow_result()
        {
        }

        public openUtilityWindow_result DeepCopy()
        {
          var tmp1423 = new openUtilityWindow_result();
          return tmp1423;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1424 = new TStruct("openUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1424, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1425 = new StringBuilder("openUtilityWindow_result(");
          tmp1425.Append(')');
          return tmp1425.ToString();
        }
      }


      public partial class closeUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public closeUtilityWindow_args()
        {
        }

        public closeUtilityWindow_args DeepCopy()
        {
          var tmp1427 = new closeUtilityWindow_args();
          if(__isset.p)
          {
            tmp1427.P = this.P;
          }
          tmp1427.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1427.Identifier = this.Identifier;
          }
          tmp1427.__isset.identifier = this.__isset.identifier;
          return tmp1427;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1428 = new TStruct("closeUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1428, cancellationToken);
            var tmp1429 = new TField();
            if(__isset.p)
            {
              tmp1429.Name = "p";
              tmp1429.Type = TType.I64;
              tmp1429.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1429.Name = "identifier";
              tmp1429.Type = TType.String;
              tmp1429.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1430 = new StringBuilder("closeUtilityWindow_args(");
          int tmp1431 = 0;
          if(__isset.p)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("P: ");
            P.ToString(tmp1430);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("Identifier: ");
            Identifier.ToString(tmp1430);
          }
          tmp1430.Append(')');
          return tmp1430.ToString();
        }
      }


      public partial class closeUtilityWindow_result : TBase
      {

        public closeUtilityWindow_result()
        {
        }

        public closeUtilityWindow_result DeepCopy()
        {
          var tmp1432 = new closeUtilityWindow_result();
          return tmp1432;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1433 = new TStruct("closeUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1433, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1434 = new StringBuilder("closeUtilityWindow_result(");
          tmp1434.Append(')');
          return tmp1434.ToString();
        }
      }


      public partial class collapseUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public collapseUtilityWindow_args()
        {
        }

        public collapseUtilityWindow_args DeepCopy()
        {
          var tmp1436 = new collapseUtilityWindow_args();
          if(__isset.p)
          {
            tmp1436.P = this.P;
          }
          tmp1436.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1436.Identifier = this.Identifier;
          }
          tmp1436.__isset.identifier = this.__isset.identifier;
          return tmp1436;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1437 = new TStruct("collapseUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1437, cancellationToken);
            var tmp1438 = new TField();
            if(__isset.p)
            {
              tmp1438.Name = "p";
              tmp1438.Type = TType.I64;
              tmp1438.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1438, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1438.Name = "identifier";
              tmp1438.Type = TType.String;
              tmp1438.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1438, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1439 = new StringBuilder("collapseUtilityWindow_args(");
          int tmp1440 = 0;
          if(__isset.p)
          {
            if(0 < tmp1440++) { tmp1439.Append(", "); }
            tmp1439.Append("P: ");
            P.ToString(tmp1439);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1440++) { tmp1439.Append(", "); }
            tmp1439.Append("Identifier: ");
            Identifier.ToString(tmp1439);
          }
          tmp1439.Append(')');
          return tmp1439.ToString();
        }
      }


      public partial class collapseUtilityWindow_result : TBase
      {

        public collapseUtilityWindow_result()
        {
        }

        public collapseUtilityWindow_result DeepCopy()
        {
          var tmp1441 = new collapseUtilityWindow_result();
          return tmp1441;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1442 = new TStruct("collapseUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1442, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1443 = new StringBuilder("collapseUtilityWindow_result(");
          tmp1443.Append(')');
          return tmp1443.ToString();
        }
      }


      public partial class expandUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public expandUtilityWindow_args()
        {
        }

        public expandUtilityWindow_args DeepCopy()
        {
          var tmp1445 = new expandUtilityWindow_args();
          if(__isset.p)
          {
            tmp1445.P = this.P;
          }
          tmp1445.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1445.Identifier = this.Identifier;
          }
          tmp1445.__isset.identifier = this.__isset.identifier;
          return tmp1445;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1446 = new TStruct("expandUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1446, cancellationToken);
            var tmp1447 = new TField();
            if(__isset.p)
            {
              tmp1447.Name = "p";
              tmp1447.Type = TType.I64;
              tmp1447.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1447, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1447.Name = "identifier";
              tmp1447.Type = TType.String;
              tmp1447.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1447, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1448 = new StringBuilder("expandUtilityWindow_args(");
          int tmp1449 = 0;
          if(__isset.p)
          {
            if(0 < tmp1449++) { tmp1448.Append(", "); }
            tmp1448.Append("P: ");
            P.ToString(tmp1448);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1449++) { tmp1448.Append(", "); }
            tmp1448.Append("Identifier: ");
            Identifier.ToString(tmp1448);
          }
          tmp1448.Append(')');
          return tmp1448.ToString();
        }
      }


      public partial class expandUtilityWindow_result : TBase
      {

        public expandUtilityWindow_result()
        {
        }

        public expandUtilityWindow_result DeepCopy()
        {
          var tmp1450 = new expandUtilityWindow_result();
          return tmp1450;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1451 = new TStruct("expandUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1451, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1452 = new StringBuilder("expandUtilityWindow_result(");
          tmp1452.Append(')');
          return tmp1452.ToString();
        }
      }


      public partial class refreshDynamicInstructions_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.DynamicInstructionType _instructionType;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.DynamicInstructionType"/>
        /// </summary>
        public global::Yaskawa.Ext.API.DynamicInstructionType InstructionType
        {
          get
          {
            return _instructionType;
          }
          set
          {
            __isset.instructionType = true;
            this._instructionType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instructionType;
        }

        public refreshDynamicInstructions_args()
        {
        }

        public refreshDynamicInstructions_args DeepCopy()
        {
          var tmp1454 = new refreshDynamicInstructions_args();
          if(__isset.p)
          {
            tmp1454.P = this.P;
          }
          tmp1454.__isset.p = this.__isset.p;
          if(__isset.instructionType)
          {
            tmp1454.InstructionType = this.InstructionType;
          }
          tmp1454.__isset.instructionType = this.__isset.instructionType;
          return tmp1454;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    InstructionType = (global::Yaskawa.Ext.API.DynamicInstructionType)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1455 = new TStruct("refreshDynamicInstructions_args");
            await oprot.WriteStructBeginAsync(tmp1455, cancellationToken);
            var tmp1456 = new TField();
            if(__isset.p)
            {
              tmp1456.Name = "p";
              tmp1456.Type = TType.I64;
              tmp1456.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1456, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.instructionType)
            {
              tmp1456.Name = "instructionType";
              tmp1456.Type = TType.I32;
              tmp1456.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1456, cancellationToken);
              await oprot.WriteI32Async((int)InstructionType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instructionType == other.__isset.instructionType) && ((!__isset.instructionType) || (global::System.Object.Equals(InstructionType, other.InstructionType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.instructionType)
            {
              hashcode = (hashcode * 397) + InstructionType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1457 = new StringBuilder("refreshDynamicInstructions_args(");
          int tmp1458 = 0;
          if(__isset.p)
          {
            if(0 < tmp1458++) { tmp1457.Append(", "); }
            tmp1457.Append("P: ");
            P.ToString(tmp1457);
          }
          if(__isset.instructionType)
          {
            if(0 < tmp1458++) { tmp1457.Append(", "); }
            tmp1457.Append("InstructionType: ");
            InstructionType.ToString(tmp1457);
          }
          tmp1457.Append(')');
          return tmp1457.ToString();
        }
      }


      public partial class refreshDynamicInstructions_result : TBase
      {

        public refreshDynamicInstructions_result()
        {
        }

        public refreshDynamicInstructions_result DeepCopy()
        {
          var tmp1459 = new refreshDynamicInstructions_result();
          return tmp1459;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1460 = new TStruct("refreshDynamicInstructions_result");
            await oprot.WriteStructBeginAsync(tmp1460, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1461 = new StringBuilder("refreshDynamicInstructions_result(");
          tmp1461.Append(')');
          return tmp1461.ToString();
        }
      }


      public partial class registerIntegration_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _itemType;
        private string _buttonLabel;
        private string _buttonImage;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string ButtonLabel
        {
          get
          {
            return _buttonLabel;
          }
          set
          {
            __isset.buttonLabel = true;
            this._buttonLabel = value;
          }
        }

        public string ButtonImage
        {
          get
          {
            return _buttonImage;
          }
          set
          {
            __isset.buttonImage = true;
            this._buttonImage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool itemType;
          public bool buttonLabel;
          public bool buttonImage;
        }

        public registerIntegration_args()
        {
        }

        public registerIntegration_args DeepCopy()
        {
          var tmp1463 = new registerIntegration_args();
          if(__isset.p)
          {
            tmp1463.P = this.P;
          }
          tmp1463.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1463.Identifier = this.Identifier;
          }
          tmp1463.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1463.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1463.__isset.integrationPoint = this.__isset.integrationPoint;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1463.ItemType = this.ItemType;
          }
          tmp1463.__isset.itemType = this.__isset.itemType;
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            tmp1463.ButtonLabel = this.ButtonLabel;
          }
          tmp1463.__isset.buttonLabel = this.__isset.buttonLabel;
          if((ButtonImage != null) && __isset.buttonImage)
          {
            tmp1463.ButtonImage = this.ButtonImage;
          }
          tmp1463.__isset.buttonImage = this.__isset.buttonImage;
          return tmp1463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    ButtonLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    ButtonImage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1464 = new TStruct("registerIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1464, cancellationToken);
            var tmp1465 = new TField();
            if(__isset.p)
            {
              tmp1465.Name = "p";
              tmp1465.Type = TType.I64;
              tmp1465.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1465.Name = "identifier";
              tmp1465.Type = TType.String;
              tmp1465.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1465.Name = "integrationPoint";
              tmp1465.Type = TType.I32;
              tmp1465.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1465.Name = "itemType";
              tmp1465.Type = TType.String;
              tmp1465.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              tmp1465.Name = "buttonLabel";
              tmp1465.Type = TType.String;
              tmp1465.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteStringAsync(ButtonLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              tmp1465.Name = "buttonImage";
              tmp1465.Type = TType.String;
              tmp1465.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1465, cancellationToken);
              await oprot.WriteStringAsync(ButtonImage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.buttonLabel == other.__isset.buttonLabel) && ((!__isset.buttonLabel) || (global::System.Object.Equals(ButtonLabel, other.ButtonLabel))))
            && ((__isset.buttonImage == other.__isset.buttonImage) && ((!__isset.buttonImage) || (global::System.Object.Equals(ButtonImage, other.ButtonImage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              hashcode = (hashcode * 397) + ButtonLabel.GetHashCode();
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              hashcode = (hashcode * 397) + ButtonImage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1466 = new StringBuilder("registerIntegration_args(");
          int tmp1467 = 0;
          if(__isset.p)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("P: ");
            P.ToString(tmp1466);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("Identifier: ");
            Identifier.ToString(tmp1466);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1466);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("ItemType: ");
            ItemType.ToString(tmp1466);
          }
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("ButtonLabel: ");
            ButtonLabel.ToString(tmp1466);
          }
          if((ButtonImage != null) && __isset.buttonImage)
          {
            if(0 < tmp1467++) { tmp1466.Append(", "); }
            tmp1466.Append("ButtonImage: ");
            ButtonImage.ToString(tmp1466);
          }
          tmp1466.Append(')');
          return tmp1466.ToString();
        }
      }


      public partial class registerIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerIntegration_result()
        {
        }

        public registerIntegration_result DeepCopy()
        {
          var tmp1468 = new registerIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1468.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1468.__isset.e = this.__isset.e;
          return tmp1468;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1469 = new TStruct("registerIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1469, cancellationToken);
            var tmp1470 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1470.Name = "E";
                tmp1470.Type = TType.Struct;
                tmp1470.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1470, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1471 = new StringBuilder("registerIntegration_result(");
          int tmp1472 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1472++) { tmp1471.Append(", "); }
            tmp1471.Append("E: ");
            E.ToString(tmp1471);
          }
          tmp1471.Append(')');
          return tmp1471.ToString();
        }
      }


      public partial class unregisterIntegration_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterIntegration_args()
        {
        }

        public unregisterIntegration_args DeepCopy()
        {
          var tmp1473 = new unregisterIntegration_args();
          if(__isset.p)
          {
            tmp1473.P = this.P;
          }
          tmp1473.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1473.Identifier = this.Identifier;
          }
          tmp1473.__isset.identifier = this.__isset.identifier;
          return tmp1473;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1474 = new TStruct("unregisterIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1474, cancellationToken);
            var tmp1475 = new TField();
            if(__isset.p)
            {
              tmp1475.Name = "p";
              tmp1475.Type = TType.I64;
              tmp1475.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1475, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1475.Name = "identifier";
              tmp1475.Type = TType.String;
              tmp1475.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1475, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1476 = new StringBuilder("unregisterIntegration_args(");
          int tmp1477 = 0;
          if(__isset.p)
          {
            if(0 < tmp1477++) { tmp1476.Append(", "); }
            tmp1476.Append("P: ");
            P.ToString(tmp1476);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1477++) { tmp1476.Append(", "); }
            tmp1476.Append("Identifier: ");
            Identifier.ToString(tmp1476);
          }
          tmp1476.Append(')');
          return tmp1476.ToString();
        }
      }


      public partial class unregisterIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterIntegration_result()
        {
        }

        public unregisterIntegration_result DeepCopy()
        {
          var tmp1478 = new unregisterIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1478.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1478.__isset.e = this.__isset.e;
          return tmp1478;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1479 = new TStruct("unregisterIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1479, cancellationToken);
            var tmp1480 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1480.Name = "E";
                tmp1480.Type = TType.Struct;
                tmp1480.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1480, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1481 = new StringBuilder("unregisterIntegration_result(");
          int tmp1482 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1482++) { tmp1481.Append(", "); }
            tmp1481.Append("E: ");
            E.ToString(tmp1481);
          }
          tmp1481.Append(')');
          return tmp1481.ToString();
        }
      }


      public partial class registerSwitch_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _switchLabel;
        private string _offPositionLabel;
        private string _onPositionLabel;
        private bool _defaultState;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string SwitchLabel
        {
          get
          {
            return _switchLabel;
          }
          set
          {
            __isset.switchLabel = true;
            this._switchLabel = value;
          }
        }

        public string OffPositionLabel
        {
          get
          {
            return _offPositionLabel;
          }
          set
          {
            __isset.offPositionLabel = true;
            this._offPositionLabel = value;
          }
        }

        public string OnPositionLabel
        {
          get
          {
            return _onPositionLabel;
          }
          set
          {
            __isset.onPositionLabel = true;
            this._onPositionLabel = value;
          }
        }

        public bool DefaultState
        {
          get
          {
            return _defaultState;
          }
          set
          {
            __isset.defaultState = true;
            this._defaultState = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool switchLabel;
          public bool offPositionLabel;
          public bool onPositionLabel;
          public bool defaultState;
        }

        public registerSwitch_args()
        {
        }

        public registerSwitch_args DeepCopy()
        {
          var tmp1483 = new registerSwitch_args();
          if(__isset.p)
          {
            tmp1483.P = this.P;
          }
          tmp1483.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1483.Identifier = this.Identifier;
          }
          tmp1483.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1483.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1483.__isset.integrationPoint = this.__isset.integrationPoint;
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            tmp1483.SwitchLabel = this.SwitchLabel;
          }
          tmp1483.__isset.switchLabel = this.__isset.switchLabel;
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            tmp1483.OffPositionLabel = this.OffPositionLabel;
          }
          tmp1483.__isset.offPositionLabel = this.__isset.offPositionLabel;
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            tmp1483.OnPositionLabel = this.OnPositionLabel;
          }
          tmp1483.__isset.onPositionLabel = this.__isset.onPositionLabel;
          if(__isset.defaultState)
          {
            tmp1483.DefaultState = this.DefaultState;
          }
          tmp1483.__isset.defaultState = this.__isset.defaultState;
          return tmp1483;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SwitchLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    OffPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    OnPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 7:
                  if (field.Type == TType.Bool)
                  {
                    DefaultState = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1484 = new TStruct("registerSwitch_args");
            await oprot.WriteStructBeginAsync(tmp1484, cancellationToken);
            var tmp1485 = new TField();
            if(__isset.p)
            {
              tmp1485.Name = "p";
              tmp1485.Type = TType.I64;
              tmp1485.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1485.Name = "identifier";
              tmp1485.Type = TType.String;
              tmp1485.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1485.Name = "integrationPoint";
              tmp1485.Type = TType.I32;
              tmp1485.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              tmp1485.Name = "switchLabel";
              tmp1485.Type = TType.String;
              tmp1485.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteStringAsync(SwitchLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              tmp1485.Name = "offPositionLabel";
              tmp1485.Type = TType.String;
              tmp1485.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteStringAsync(OffPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              tmp1485.Name = "onPositionLabel";
              tmp1485.Type = TType.String;
              tmp1485.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteStringAsync(OnPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.defaultState)
            {
              tmp1485.Name = "defaultState";
              tmp1485.Type = TType.Bool;
              tmp1485.ID = 7;
              await oprot.WriteFieldBeginAsync(tmp1485, cancellationToken);
              await oprot.WriteBoolAsync(DefaultState, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.switchLabel == other.__isset.switchLabel) && ((!__isset.switchLabel) || (global::System.Object.Equals(SwitchLabel, other.SwitchLabel))))
            && ((__isset.offPositionLabel == other.__isset.offPositionLabel) && ((!__isset.offPositionLabel) || (global::System.Object.Equals(OffPositionLabel, other.OffPositionLabel))))
            && ((__isset.onPositionLabel == other.__isset.onPositionLabel) && ((!__isset.onPositionLabel) || (global::System.Object.Equals(OnPositionLabel, other.OnPositionLabel))))
            && ((__isset.defaultState == other.__isset.defaultState) && ((!__isset.defaultState) || (global::System.Object.Equals(DefaultState, other.DefaultState))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              hashcode = (hashcode * 397) + SwitchLabel.GetHashCode();
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              hashcode = (hashcode * 397) + OffPositionLabel.GetHashCode();
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              hashcode = (hashcode * 397) + OnPositionLabel.GetHashCode();
            }
            if(__isset.defaultState)
            {
              hashcode = (hashcode * 397) + DefaultState.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1486 = new StringBuilder("registerSwitch_args(");
          int tmp1487 = 0;
          if(__isset.p)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("P: ");
            P.ToString(tmp1486);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("Identifier: ");
            Identifier.ToString(tmp1486);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1486);
          }
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("SwitchLabel: ");
            SwitchLabel.ToString(tmp1486);
          }
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("OffPositionLabel: ");
            OffPositionLabel.ToString(tmp1486);
          }
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("OnPositionLabel: ");
            OnPositionLabel.ToString(tmp1486);
          }
          if(__isset.defaultState)
          {
            if(0 < tmp1487++) { tmp1486.Append(", "); }
            tmp1486.Append("DefaultState: ");
            DefaultState.ToString(tmp1486);
          }
          tmp1486.Append(')');
          return tmp1486.ToString();
        }
      }


      public partial class registerSwitch_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerSwitch_result()
        {
        }

        public registerSwitch_result DeepCopy()
        {
          var tmp1488 = new registerSwitch_result();
          if((E != null) && __isset.e)
          {
            tmp1488.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1488.__isset.e = this.__isset.e;
          return tmp1488;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1489 = new TStruct("registerSwitch_result");
            await oprot.WriteStructBeginAsync(tmp1489, cancellationToken);
            var tmp1490 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1490.Name = "E";
                tmp1490.Type = TType.Struct;
                tmp1490.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1490, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1491 = new StringBuilder("registerSwitch_result(");
          int tmp1492 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1492++) { tmp1491.Append(", "); }
            tmp1491.Append("E: ");
            E.ToString(tmp1491);
          }
          tmp1491.Append(')');
          return tmp1491.ToString();
        }
      }


      public partial class registerDirectOpenForInstr_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _instruction;
        private List<string> _instrTags;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }

        public List<string> InstrTags
        {
          get
          {
            return _instrTags;
          }
          set
          {
            __isset.instrTags = true;
            this._instrTags = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool instruction;
          public bool instrTags;
        }

        public registerDirectOpenForInstr_args()
        {
        }

        public registerDirectOpenForInstr_args DeepCopy()
        {
          var tmp1493 = new registerDirectOpenForInstr_args();
          if(__isset.p)
          {
            tmp1493.P = this.P;
          }
          tmp1493.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1493.Identifier = this.Identifier;
          }
          tmp1493.__isset.identifier = this.__isset.identifier;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1493.Instruction = this.Instruction;
          }
          tmp1493.__isset.instruction = this.__isset.instruction;
          if((InstrTags != null) && __isset.instrTags)
          {
            tmp1493.InstrTags = this.InstrTags.DeepCopy();
          }
          tmp1493.__isset.instrTags = this.__isset.instrTags;
          return tmp1493;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1494 = await iprot.ReadListBeginAsync(cancellationToken);
                      InstrTags = new List<string>(_list1494.Count);
                      for(int _i1495 = 0; _i1495 < _list1494.Count; ++_i1495)
                      {
                        string _elem1496;
                        _elem1496 = await iprot.ReadStringAsync(cancellationToken);
                        InstrTags.Add(_elem1496);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1497 = new TStruct("registerDirectOpenForInstr_args");
            await oprot.WriteStructBeginAsync(tmp1497, cancellationToken);
            var tmp1498 = new TField();
            if(__isset.p)
            {
              tmp1498.Name = "p";
              tmp1498.Type = TType.I64;
              tmp1498.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1498.Name = "identifier";
              tmp1498.Type = TType.String;
              tmp1498.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1498.Name = "instruction";
              tmp1498.Type = TType.String;
              tmp1498.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((InstrTags != null) && __isset.instrTags)
            {
              tmp1498.Name = "instrTags";
              tmp1498.Type = TType.List;
              tmp1498.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, InstrTags.Count), cancellationToken);
              foreach (string _iter1499 in InstrTags)
              {
                await oprot.WriteStringAsync(_iter1499, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerDirectOpenForInstr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))))
            && ((__isset.instrTags == other.__isset.instrTags) && ((!__isset.instrTags) || (TCollections.Equals(InstrTags, other.InstrTags))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
            if((InstrTags != null) && __isset.instrTags)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(InstrTags);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1500 = new StringBuilder("registerDirectOpenForInstr_args(");
          int tmp1501 = 0;
          if(__isset.p)
          {
            if(0 < tmp1501++) { tmp1500.Append(", "); }
            tmp1500.Append("P: ");
            P.ToString(tmp1500);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1501++) { tmp1500.Append(", "); }
            tmp1500.Append("Identifier: ");
            Identifier.ToString(tmp1500);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1501++) { tmp1500.Append(", "); }
            tmp1500.Append("Instruction: ");
            Instruction.ToString(tmp1500);
          }
          if((InstrTags != null) && __isset.instrTags)
          {
            if(0 < tmp1501++) { tmp1500.Append(", "); }
            tmp1500.Append("InstrTags: ");
            InstrTags.ToString(tmp1500);
          }
          tmp1500.Append(')');
          return tmp1500.ToString();
        }
      }


      public partial class registerDirectOpenForInstr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerDirectOpenForInstr_result()
        {
        }

        public registerDirectOpenForInstr_result DeepCopy()
        {
          var tmp1502 = new registerDirectOpenForInstr_result();
          if((E != null) && __isset.e)
          {
            tmp1502.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1502.__isset.e = this.__isset.e;
          return tmp1502;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1503 = new TStruct("registerDirectOpenForInstr_result");
            await oprot.WriteStructBeginAsync(tmp1503, cancellationToken);
            var tmp1504 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1504.Name = "E";
                tmp1504.Type = TType.Struct;
                tmp1504.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1504, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerDirectOpenForInstr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1505 = new StringBuilder("registerDirectOpenForInstr_result(");
          int tmp1506 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1506++) { tmp1505.Append(", "); }
            tmp1505.Append("E: ");
            E.ToString(tmp1505);
          }
          tmp1505.Append(')');
          return tmp1505.ToString();
        }
      }


      public partial class unregisterDirectOpenForInstr_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool instruction;
        }

        public unregisterDirectOpenForInstr_args()
        {
        }

        public unregisterDirectOpenForInstr_args DeepCopy()
        {
          var tmp1507 = new unregisterDirectOpenForInstr_args();
          if(__isset.p)
          {
            tmp1507.P = this.P;
          }
          tmp1507.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1507.Identifier = this.Identifier;
          }
          tmp1507.__isset.identifier = this.__isset.identifier;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1507.Instruction = this.Instruction;
          }
          tmp1507.__isset.instruction = this.__isset.instruction;
          return tmp1507;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1508 = new TStruct("unregisterDirectOpenForInstr_args");
            await oprot.WriteStructBeginAsync(tmp1508, cancellationToken);
            var tmp1509 = new TField();
            if(__isset.p)
            {
              tmp1509.Name = "p";
              tmp1509.Type = TType.I64;
              tmp1509.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1509, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1509.Name = "identifier";
              tmp1509.Type = TType.String;
              tmp1509.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1509, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1509.Name = "instruction";
              tmp1509.Type = TType.String;
              tmp1509.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1509, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterDirectOpenForInstr_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1510 = new StringBuilder("unregisterDirectOpenForInstr_args(");
          int tmp1511 = 0;
          if(__isset.p)
          {
            if(0 < tmp1511++) { tmp1510.Append(", "); }
            tmp1510.Append("P: ");
            P.ToString(tmp1510);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1511++) { tmp1510.Append(", "); }
            tmp1510.Append("Identifier: ");
            Identifier.ToString(tmp1510);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1511++) { tmp1510.Append(", "); }
            tmp1510.Append("Instruction: ");
            Instruction.ToString(tmp1510);
          }
          tmp1510.Append(')');
          return tmp1510.ToString();
        }
      }


      public partial class unregisterDirectOpenForInstr_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterDirectOpenForInstr_result()
        {
        }

        public unregisterDirectOpenForInstr_result DeepCopy()
        {
          var tmp1512 = new unregisterDirectOpenForInstr_result();
          if((E != null) && __isset.e)
          {
            tmp1512.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1512.__isset.e = this.__isset.e;
          return tmp1512;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1513 = new TStruct("unregisterDirectOpenForInstr_result");
            await oprot.WriteStructBeginAsync(tmp1513, cancellationToken);
            var tmp1514 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1514.Name = "E";
                tmp1514.Type = TType.Struct;
                tmp1514.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1514, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterDirectOpenForInstr_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1515 = new StringBuilder("unregisterDirectOpenForInstr_result(");
          int tmp1516 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1516++) { tmp1515.Append(", "); }
            tmp1515.Append("E: ");
            E.ToString(tmp1515);
          }
          tmp1515.Append(')');
          return tmp1515.ToString();
        }
      }


      public partial class property_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
        }

        public property_args()
        {
        }

        public property_args DeepCopy()
        {
          var tmp1517 = new property_args();
          if(__isset.p)
          {
            tmp1517.P = this.P;
          }
          tmp1517.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1517.ItemID = this.ItemID;
          }
          tmp1517.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1517.Name = this.Name;
          }
          tmp1517.__isset.name = this.__isset.name;
          return tmp1517;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1518 = new TStruct("property_args");
            await oprot.WriteStructBeginAsync(tmp1518, cancellationToken);
            var tmp1519 = new TField();
            if(__isset.p)
            {
              tmp1519.Name = "p";
              tmp1519.Type = TType.I64;
              tmp1519.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1519, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1519.Name = "itemID";
              tmp1519.Type = TType.String;
              tmp1519.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1519, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1519.Name = "name";
              tmp1519.Type = TType.String;
              tmp1519.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1519, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1520 = new StringBuilder("property_args(");
          int tmp1521 = 0;
          if(__isset.p)
          {
            if(0 < tmp1521++) { tmp1520.Append(", "); }
            tmp1520.Append("P: ");
            P.ToString(tmp1520);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1521++) { tmp1520.Append(", "); }
            tmp1520.Append("ItemID: ");
            ItemID.ToString(tmp1520);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1521++) { tmp1520.Append(", "); }
            tmp1520.Append("Name: ");
            Name.ToString(tmp1520);
          }
          tmp1520.Append(')');
          return tmp1520.ToString();
        }
      }


      public partial class property_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public property_result()
        {
        }

        public property_result DeepCopy()
        {
          var tmp1522 = new property_result();
          if((Success != null) && __isset.success)
          {
            tmp1522.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1522.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1522.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1522.__isset.e = this.__isset.e;
          return tmp1522;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1523 = new TStruct("property_result");
            await oprot.WriteStructBeginAsync(tmp1523, cancellationToken);
            var tmp1524 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1524.Name = "Success";
                tmp1524.Type = TType.Struct;
                tmp1524.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1524, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1524.Name = "E";
                tmp1524.Type = TType.Struct;
                tmp1524.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1524, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1525 = new StringBuilder("property_result(");
          int tmp1526 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1526++) { tmp1525.Append(", "); }
            tmp1525.Append("Success: ");
            Success.ToString(tmp1525);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1526++) { tmp1525.Append(", "); }
            tmp1525.Append("E: ");
            E.ToString(tmp1525);
          }
          tmp1525.Append(')');
          return tmp1525.ToString();
        }
      }


      public partial class setProperty_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
          public bool @value;
        }

        public setProperty_args()
        {
        }

        public setProperty_args DeepCopy()
        {
          var tmp1527 = new setProperty_args();
          if(__isset.p)
          {
            tmp1527.P = this.P;
          }
          tmp1527.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1527.ItemID = this.ItemID;
          }
          tmp1527.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1527.Name = this.Name;
          }
          tmp1527.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp1527.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp1527.__isset.@value = this.__isset.@value;
          return tmp1527;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1528 = new TStruct("setProperty_args");
            await oprot.WriteStructBeginAsync(tmp1528, cancellationToken);
            var tmp1529 = new TField();
            if(__isset.p)
            {
              tmp1529.Name = "p";
              tmp1529.Type = TType.I64;
              tmp1529.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1529, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1529.Name = "itemID";
              tmp1529.Type = TType.String;
              tmp1529.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1529, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1529.Name = "name";
              tmp1529.Type = TType.String;
              tmp1529.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1529, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1529.Name = "value";
              tmp1529.Type = TType.Struct;
              tmp1529.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1529, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1530 = new StringBuilder("setProperty_args(");
          int tmp1531 = 0;
          if(__isset.p)
          {
            if(0 < tmp1531++) { tmp1530.Append(", "); }
            tmp1530.Append("P: ");
            P.ToString(tmp1530);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1531++) { tmp1530.Append(", "); }
            tmp1530.Append("ItemID: ");
            ItemID.ToString(tmp1530);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1531++) { tmp1530.Append(", "); }
            tmp1530.Append("Name: ");
            Name.ToString(tmp1530);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1531++) { tmp1530.Append(", "); }
            tmp1530.Append("Value: ");
            Value.ToString(tmp1530);
          }
          tmp1530.Append(')');
          return tmp1530.ToString();
        }
      }


      public partial class setProperty_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setProperty_result()
        {
        }

        public setProperty_result DeepCopy()
        {
          var tmp1532 = new setProperty_result();
          if((E != null) && __isset.e)
          {
            tmp1532.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1532.__isset.e = this.__isset.e;
          return tmp1532;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1533 = new TStruct("setProperty_result");
            await oprot.WriteStructBeginAsync(tmp1533, cancellationToken);
            var tmp1534 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1534.Name = "E";
                tmp1534.Type = TType.Struct;
                tmp1534.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1534, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1535 = new StringBuilder("setProperty_result(");
          int tmp1536 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1536++) { tmp1535.Append(", "); }
            tmp1535.Append("E: ");
            E.ToString(tmp1535);
          }
          tmp1535.Append(')');
          return tmp1535.ToString();
        }
      }


      public partial class setProperties_args : TBase
      {
        private long _p;
        private List<global::Yaskawa.Ext.API.PropValues> _propValuesList;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public List<global::Yaskawa.Ext.API.PropValues> PropValuesList
        {
          get
          {
            return _propValuesList;
          }
          set
          {
            __isset.propValuesList = true;
            this._propValuesList = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool propValuesList;
        }

        public setProperties_args()
        {
        }

        public setProperties_args DeepCopy()
        {
          var tmp1537 = new setProperties_args();
          if(__isset.p)
          {
            tmp1537.P = this.P;
          }
          tmp1537.__isset.p = this.__isset.p;
          if((PropValuesList != null) && __isset.propValuesList)
          {
            tmp1537.PropValuesList = this.PropValuesList.DeepCopy();
          }
          tmp1537.__isset.propValuesList = this.__isset.propValuesList;
          return tmp1537;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1538 = await iprot.ReadListBeginAsync(cancellationToken);
                      PropValuesList = new List<global::Yaskawa.Ext.API.PropValues>(_list1538.Count);
                      for(int _i1539 = 0; _i1539 < _list1538.Count; ++_i1539)
                      {
                        global::Yaskawa.Ext.API.PropValues _elem1540;
                        _elem1540 = new global::Yaskawa.Ext.API.PropValues();
                        await _elem1540.ReadAsync(iprot, cancellationToken);
                        PropValuesList.Add(_elem1540);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1541 = new TStruct("setProperties_args");
            await oprot.WriteStructBeginAsync(tmp1541, cancellationToken);
            var tmp1542 = new TField();
            if(__isset.p)
            {
              tmp1542.Name = "p";
              tmp1542.Type = TType.I64;
              tmp1542.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              tmp1542.Name = "propValuesList";
              tmp1542.Type = TType.List;
              tmp1542.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, PropValuesList.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PropValues _iter1543 in PropValuesList)
              {
                await _iter1543.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperties_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.propValuesList == other.__isset.propValuesList) && ((!__isset.propValuesList) || (TCollections.Equals(PropValuesList, other.PropValuesList))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(PropValuesList);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1544 = new StringBuilder("setProperties_args(");
          int tmp1545 = 0;
          if(__isset.p)
          {
            if(0 < tmp1545++) { tmp1544.Append(", "); }
            tmp1544.Append("P: ");
            P.ToString(tmp1544);
          }
          if((PropValuesList != null) && __isset.propValuesList)
          {
            if(0 < tmp1545++) { tmp1544.Append(", "); }
            tmp1544.Append("PropValuesList: ");
            PropValuesList.ToString(tmp1544);
          }
          tmp1544.Append(')');
          return tmp1544.ToString();
        }
      }


      public partial class setChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;
        private global::Yaskawa.Ext.API.Any _config;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool config;
        }

        public setChartConfig_args()
        {
        }

        public setChartConfig_args DeepCopy()
        {
          var tmp1546 = new setChartConfig_args();
          if(__isset.p)
          {
            tmp1546.P = this.P;
          }
          tmp1546.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1546.ChartID = this.ChartID;
          }
          tmp1546.__isset.chartID = this.__isset.chartID;
          if((Config != null) && __isset.config)
          {
            tmp1546.Config = (global::Yaskawa.Ext.API.Any)this.Config.DeepCopy();
          }
          tmp1546.__isset.config = this.__isset.config;
          return tmp1546;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::Yaskawa.Ext.API.Any();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1547 = new TStruct("setChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1547, cancellationToken);
            var tmp1548 = new TField();
            if(__isset.p)
            {
              tmp1548.Name = "p";
              tmp1548.Type = TType.I64;
              tmp1548.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1548, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1548.Name = "chartID";
              tmp1548.Type = TType.String;
              tmp1548.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1548, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1548.Name = "config";
              tmp1548.Type = TType.Struct;
              tmp1548.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1548, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1549 = new StringBuilder("setChartConfig_args(");
          int tmp1550 = 0;
          if(__isset.p)
          {
            if(0 < tmp1550++) { tmp1549.Append(", "); }
            tmp1549.Append("P: ");
            P.ToString(tmp1549);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1550++) { tmp1549.Append(", "); }
            tmp1549.Append("ChartID: ");
            ChartID.ToString(tmp1549);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1550++) { tmp1549.Append(", "); }
            tmp1549.Append("Config: ");
            Config.ToString(tmp1549);
          }
          tmp1549.Append(')');
          return tmp1549.ToString();
        }
      }


      public partial class setChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartConfig_result()
        {
        }

        public setChartConfig_result DeepCopy()
        {
          var tmp1551 = new setChartConfig_result();
          if((E != null) && __isset.e)
          {
            tmp1551.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1551.__isset.e = this.__isset.e;
          return tmp1551;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1552 = new TStruct("setChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1552, cancellationToken);
            var tmp1553 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1553.Name = "E";
                tmp1553.Type = TType.Struct;
                tmp1553.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1553, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1554 = new StringBuilder("setChartConfig_result(");
          int tmp1555 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1555++) { tmp1554.Append(", "); }
            tmp1554.Append("E: ");
            E.ToString(tmp1554);
          }
          tmp1554.Append(')');
          return tmp1554.ToString();
        }
      }


      public partial class getChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
        }

        public getChartConfig_args()
        {
        }

        public getChartConfig_args DeepCopy()
        {
          var tmp1556 = new getChartConfig_args();
          if(__isset.p)
          {
            tmp1556.P = this.P;
          }
          tmp1556.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1556.ChartID = this.ChartID;
          }
          tmp1556.__isset.chartID = this.__isset.chartID;
          return tmp1556;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1557 = new TStruct("getChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1557, cancellationToken);
            var tmp1558 = new TField();
            if(__isset.p)
            {
              tmp1558.Name = "p";
              tmp1558.Type = TType.I64;
              tmp1558.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1558, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1558.Name = "chartID";
              tmp1558.Type = TType.String;
              tmp1558.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1558, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1559 = new StringBuilder("getChartConfig_args(");
          int tmp1560 = 0;
          if(__isset.p)
          {
            if(0 < tmp1560++) { tmp1559.Append(", "); }
            tmp1559.Append("P: ");
            P.ToString(tmp1559);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1560++) { tmp1559.Append(", "); }
            tmp1559.Append("ChartID: ");
            ChartID.ToString(tmp1559);
          }
          tmp1559.Append(')');
          return tmp1559.ToString();
        }
      }


      public partial class getChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartConfig_result()
        {
        }

        public getChartConfig_result DeepCopy()
        {
          var tmp1561 = new getChartConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1561.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1561.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1561.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1561.__isset.e = this.__isset.e;
          return tmp1561;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1562 = new TStruct("getChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1562, cancellationToken);
            var tmp1563 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1563.Name = "Success";
                tmp1563.Type = TType.Struct;
                tmp1563.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1563, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1563.Name = "E";
                tmp1563.Type = TType.Struct;
                tmp1563.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1563, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1564 = new StringBuilder("getChartConfig_result(");
          int tmp1565 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1565++) { tmp1564.Append(", "); }
            tmp1564.Append("Success: ");
            Success.ToString(tmp1564);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1565++) { tmp1564.Append(", "); }
            tmp1564.Append("E: ");
            E.ToString(tmp1564);
          }
          tmp1564.Append(')');
          return tmp1564.ToString();
        }
      }


      public partial class setChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _dataset;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Dataset
        {
          get
          {
            return _dataset;
          }
          set
          {
            __isset.dataset = true;
            this._dataset = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool dataset;
          public bool right;
        }

        public setChartData_args()
        {
        }

        public setChartData_args DeepCopy()
        {
          var tmp1566 = new setChartData_args();
          if(__isset.p)
          {
            tmp1566.P = this.P;
          }
          tmp1566.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1566.ChartID = this.ChartID;
          }
          tmp1566.__isset.chartID = this.__isset.chartID;
          if((Dataset != null) && __isset.dataset)
          {
            tmp1566.Dataset = this.Dataset.DeepCopy();
          }
          tmp1566.__isset.dataset = this.__isset.dataset;
          if(__isset.right)
          {
            tmp1566.Right = this.Right;
          }
          tmp1566.__isset.right = this.__isset.right;
          return tmp1566;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1567 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dataset = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1567.Count);
                      for(int _i1568 = 0; _i1568 < _map1567.Count; ++_i1568)
                      {
                        string _key1569;
                        global::Yaskawa.Ext.API.Data _val1570;
                        _key1569 = await iprot.ReadStringAsync(cancellationToken);
                        _val1570 = new global::Yaskawa.Ext.API.Data();
                        await _val1570.ReadAsync(iprot, cancellationToken);
                        Dataset[_key1569] = _val1570;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1571 = new TStruct("setChartData_args");
            await oprot.WriteStructBeginAsync(tmp1571, cancellationToken);
            var tmp1572 = new TField();
            if(__isset.p)
            {
              tmp1572.Name = "p";
              tmp1572.Type = TType.I64;
              tmp1572.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1572.Name = "chartID";
              tmp1572.Type = TType.String;
              tmp1572.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dataset != null) && __isset.dataset)
            {
              tmp1572.Name = "dataset";
              tmp1572.Type = TType.Map;
              tmp1572.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dataset.Count), cancellationToken);
              foreach (string _iter1573 in Dataset.Keys)
              {
                await oprot.WriteStringAsync(_iter1573, cancellationToken);
                await Dataset[_iter1573].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1572.Name = "right";
              tmp1572.Type = TType.Bool;
              tmp1572.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.dataset == other.__isset.dataset) && ((!__isset.dataset) || (global::System.Object.Equals(Dataset, other.Dataset))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Dataset != null) && __isset.dataset)
            {
              hashcode = (hashcode * 397) + Dataset.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1574 = new StringBuilder("setChartData_args(");
          int tmp1575 = 0;
          if(__isset.p)
          {
            if(0 < tmp1575++) { tmp1574.Append(", "); }
            tmp1574.Append("P: ");
            P.ToString(tmp1574);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1575++) { tmp1574.Append(", "); }
            tmp1574.Append("ChartID: ");
            ChartID.ToString(tmp1574);
          }
          if((Dataset != null) && __isset.dataset)
          {
            if(0 < tmp1575++) { tmp1574.Append(", "); }
            tmp1574.Append("Dataset: ");
            Dataset.ToString(tmp1574);
          }
          if(__isset.right)
          {
            if(0 < tmp1575++) { tmp1574.Append(", "); }
            tmp1574.Append("Right: ");
            Right.ToString(tmp1574);
          }
          tmp1574.Append(')');
          return tmp1574.ToString();
        }
      }


      public partial class setChartData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartData_result()
        {
        }

        public setChartData_result DeepCopy()
        {
          var tmp1576 = new setChartData_result();
          if((E != null) && __isset.e)
          {
            tmp1576.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1576.__isset.e = this.__isset.e;
          return tmp1576;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1577 = new TStruct("setChartData_result");
            await oprot.WriteStructBeginAsync(tmp1577, cancellationToken);
            var tmp1578 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1578.Name = "E";
                tmp1578.Type = TType.Struct;
                tmp1578.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1578, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1579 = new StringBuilder("setChartData_result(");
          int tmp1580 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1580++) { tmp1579.Append(", "); }
            tmp1579.Append("E: ");
            E.ToString(tmp1579);
          }
          tmp1579.Append(')');
          return tmp1579.ToString();
        }
      }


      public partial class getChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool right;
        }

        public getChartData_args()
        {
        }

        public getChartData_args DeepCopy()
        {
          var tmp1581 = new getChartData_args();
          if(__isset.p)
          {
            tmp1581.P = this.P;
          }
          tmp1581.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1581.ChartID = this.ChartID;
          }
          tmp1581.__isset.chartID = this.__isset.chartID;
          if(__isset.right)
          {
            tmp1581.Right = this.Right;
          }
          tmp1581.__isset.right = this.__isset.right;
          return tmp1581;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1582 = new TStruct("getChartData_args");
            await oprot.WriteStructBeginAsync(tmp1582, cancellationToken);
            var tmp1583 = new TField();
            if(__isset.p)
            {
              tmp1583.Name = "p";
              tmp1583.Type = TType.I64;
              tmp1583.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1583, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1583.Name = "chartID";
              tmp1583.Type = TType.String;
              tmp1583.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1583, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1583.Name = "right";
              tmp1583.Type = TType.Bool;
              tmp1583.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1583, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1584 = new StringBuilder("getChartData_args(");
          int tmp1585 = 0;
          if(__isset.p)
          {
            if(0 < tmp1585++) { tmp1584.Append(", "); }
            tmp1584.Append("P: ");
            P.ToString(tmp1584);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1585++) { tmp1584.Append(", "); }
            tmp1584.Append("ChartID: ");
            ChartID.ToString(tmp1584);
          }
          if(__isset.right)
          {
            if(0 < tmp1585++) { tmp1584.Append(", "); }
            tmp1584.Append("Right: ");
            Right.ToString(tmp1584);
          }
          tmp1584.Append(')');
          return tmp1584.ToString();
        }
      }


      public partial class getChartData_result : TBase
      {
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartData_result()
        {
        }

        public getChartData_result DeepCopy()
        {
          var tmp1586 = new getChartData_result();
          if((Success != null) && __isset.success)
          {
            tmp1586.Success = this.Success.DeepCopy();
          }
          tmp1586.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1586.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1586.__isset.e = this.__isset.e;
          return tmp1586;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1587 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1587.Count);
                      for(int _i1588 = 0; _i1588 < _map1587.Count; ++_i1588)
                      {
                        string _key1589;
                        global::Yaskawa.Ext.API.Data _val1590;
                        _key1589 = await iprot.ReadStringAsync(cancellationToken);
                        _val1590 = new global::Yaskawa.Ext.API.Data();
                        await _val1590.ReadAsync(iprot, cancellationToken);
                        Success[_key1589] = _val1590;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1591 = new TStruct("getChartData_result");
            await oprot.WriteStructBeginAsync(tmp1591, cancellationToken);
            var tmp1592 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1592.Name = "Success";
                tmp1592.Type = TType.Map;
                tmp1592.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1592, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter1593 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter1593, cancellationToken);
                  await Success[_iter1593].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1592.Name = "E";
                tmp1592.Type = TType.Struct;
                tmp1592.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1592, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1594 = new StringBuilder("getChartData_result(");
          int tmp1595 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1595++) { tmp1594.Append(", "); }
            tmp1594.Append("Success: ");
            Success.ToString(tmp1594);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1595++) { tmp1594.Append(", "); }
            tmp1594.Append("E: ");
            E.ToString(tmp1594);
          }
          tmp1594.Append(')');
          return tmp1594.ToString();
        }
      }


      public partial class addChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private global::Yaskawa.Ext.API.Data _data;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::Yaskawa.Ext.API.Data Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool data;
          public bool right;
        }

        public addChartKey_args()
        {
        }

        public addChartKey_args DeepCopy()
        {
          var tmp1596 = new addChartKey_args();
          if(__isset.p)
          {
            tmp1596.P = this.P;
          }
          tmp1596.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1596.ChartID = this.ChartID;
          }
          tmp1596.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1596.Key = this.Key;
          }
          tmp1596.__isset.key = this.__isset.key;
          if((Data != null) && __isset.data)
          {
            tmp1596.Data = (global::Yaskawa.Ext.API.Data)this.Data.DeepCopy();
          }
          tmp1596.__isset.data = this.__isset.data;
          if(__isset.right)
          {
            tmp1596.Right = this.Right;
          }
          tmp1596.__isset.right = this.__isset.right;
          return tmp1596;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Data = new global::Yaskawa.Ext.API.Data();
                    await Data.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1597 = new TStruct("addChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1597, cancellationToken);
            var tmp1598 = new TField();
            if(__isset.p)
            {
              tmp1598.Name = "p";
              tmp1598.Type = TType.I64;
              tmp1598.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1598.Name = "chartID";
              tmp1598.Type = TType.String;
              tmp1598.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1598.Name = "key";
              tmp1598.Type = TType.String;
              tmp1598.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp1598.Name = "data";
              tmp1598.Type = TType.Struct;
              tmp1598.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await Data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1598.Name = "right";
              tmp1598.Type = TType.Bool;
              tmp1598.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1598, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1599 = new StringBuilder("addChartKey_args(");
          int tmp1600 = 0;
          if(__isset.p)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("P: ");
            P.ToString(tmp1599);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("ChartID: ");
            ChartID.ToString(tmp1599);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("Key: ");
            Key.ToString(tmp1599);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("Data: ");
            Data.ToString(tmp1599);
          }
          if(__isset.right)
          {
            if(0 < tmp1600++) { tmp1599.Append(", "); }
            tmp1599.Append("Right: ");
            Right.ToString(tmp1599);
          }
          tmp1599.Append(')');
          return tmp1599.ToString();
        }
      }


      public partial class addChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public addChartKey_result()
        {
        }

        public addChartKey_result DeepCopy()
        {
          var tmp1601 = new addChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1601.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1601.__isset.e = this.__isset.e;
          return tmp1601;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1602 = new TStruct("addChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1602, cancellationToken);
            var tmp1603 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1603.Name = "E";
                tmp1603.Type = TType.Struct;
                tmp1603.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1603, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1604 = new StringBuilder("addChartKey_result(");
          int tmp1605 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1605++) { tmp1604.Append(", "); }
            tmp1604.Append("E: ");
            E.ToString(tmp1604);
          }
          tmp1604.Append(')');
          return tmp1604.ToString();
        }
      }


      public partial class removeChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool right;
        }

        public removeChartKey_args()
        {
        }

        public removeChartKey_args DeepCopy()
        {
          var tmp1606 = new removeChartKey_args();
          if(__isset.p)
          {
            tmp1606.P = this.P;
          }
          tmp1606.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1606.ChartID = this.ChartID;
          }
          tmp1606.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1606.Key = this.Key;
          }
          tmp1606.__isset.key = this.__isset.key;
          if(__isset.right)
          {
            tmp1606.Right = this.Right;
          }
          tmp1606.__isset.right = this.__isset.right;
          return tmp1606;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1607 = new TStruct("removeChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1607, cancellationToken);
            var tmp1608 = new TField();
            if(__isset.p)
            {
              tmp1608.Name = "p";
              tmp1608.Type = TType.I64;
              tmp1608.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1608.Name = "chartID";
              tmp1608.Type = TType.String;
              tmp1608.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1608.Name = "key";
              tmp1608.Type = TType.String;
              tmp1608.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1608.Name = "right";
              tmp1608.Type = TType.Bool;
              tmp1608.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1608, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1609 = new StringBuilder("removeChartKey_args(");
          int tmp1610 = 0;
          if(__isset.p)
          {
            if(0 < tmp1610++) { tmp1609.Append(", "); }
            tmp1609.Append("P: ");
            P.ToString(tmp1609);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1610++) { tmp1609.Append(", "); }
            tmp1609.Append("ChartID: ");
            ChartID.ToString(tmp1609);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1610++) { tmp1609.Append(", "); }
            tmp1609.Append("Key: ");
            Key.ToString(tmp1609);
          }
          if(__isset.right)
          {
            if(0 < tmp1610++) { tmp1609.Append(", "); }
            tmp1609.Append("Right: ");
            Right.ToString(tmp1609);
          }
          tmp1609.Append(')');
          return tmp1609.ToString();
        }
      }


      public partial class removeChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeChartKey_result()
        {
        }

        public removeChartKey_result DeepCopy()
        {
          var tmp1611 = new removeChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1611.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1611.__isset.e = this.__isset.e;
          return tmp1611;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1612 = new TStruct("removeChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1612, cancellationToken);
            var tmp1613 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1613.Name = "E";
                tmp1613.Type = TType.Struct;
                tmp1613.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1613, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1614 = new StringBuilder("removeChartKey_result(");
          int tmp1615 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1615++) { tmp1614.Append(", "); }
            tmp1614.Append("E: ");
            E.ToString(tmp1614);
          }
          tmp1614.Append(')');
          return tmp1614.ToString();
        }
      }


      public partial class hideChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _hidden;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Hidden
        {
          get
          {
            return _hidden;
          }
          set
          {
            __isset.hidden = true;
            this._hidden = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool hidden;
          public bool right;
        }

        public hideChartKey_args()
        {
        }

        public hideChartKey_args DeepCopy()
        {
          var tmp1616 = new hideChartKey_args();
          if(__isset.p)
          {
            tmp1616.P = this.P;
          }
          tmp1616.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1616.ChartID = this.ChartID;
          }
          tmp1616.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1616.Key = this.Key;
          }
          tmp1616.__isset.key = this.__isset.key;
          if(__isset.hidden)
          {
            tmp1616.Hidden = this.Hidden;
          }
          tmp1616.__isset.hidden = this.__isset.hidden;
          if(__isset.right)
          {
            tmp1616.Right = this.Right;
          }
          tmp1616.__isset.right = this.__isset.right;
          return tmp1616;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Hidden = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1617 = new TStruct("hideChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1617, cancellationToken);
            var tmp1618 = new TField();
            if(__isset.p)
            {
              tmp1618.Name = "p";
              tmp1618.Type = TType.I64;
              tmp1618.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1618.Name = "chartID";
              tmp1618.Type = TType.String;
              tmp1618.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1618.Name = "key";
              tmp1618.Type = TType.String;
              tmp1618.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.hidden)
            {
              tmp1618.Name = "hidden";
              tmp1618.Type = TType.Bool;
              tmp1618.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
              await oprot.WriteBoolAsync(Hidden, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1618.Name = "right";
              tmp1618.Type = TType.Bool;
              tmp1618.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1618, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.hidden)
            {
              hashcode = (hashcode * 397) + Hidden.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1619 = new StringBuilder("hideChartKey_args(");
          int tmp1620 = 0;
          if(__isset.p)
          {
            if(0 < tmp1620++) { tmp1619.Append(", "); }
            tmp1619.Append("P: ");
            P.ToString(tmp1619);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1620++) { tmp1619.Append(", "); }
            tmp1619.Append("ChartID: ");
            ChartID.ToString(tmp1619);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1620++) { tmp1619.Append(", "); }
            tmp1619.Append("Key: ");
            Key.ToString(tmp1619);
          }
          if(__isset.hidden)
          {
            if(0 < tmp1620++) { tmp1619.Append(", "); }
            tmp1619.Append("Hidden: ");
            Hidden.ToString(tmp1619);
          }
          if(__isset.right)
          {
            if(0 < tmp1620++) { tmp1619.Append(", "); }
            tmp1619.Append("Right: ");
            Right.ToString(tmp1619);
          }
          tmp1619.Append(')');
          return tmp1619.ToString();
        }
      }


      public partial class hideChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public hideChartKey_result()
        {
        }

        public hideChartKey_result DeepCopy()
        {
          var tmp1621 = new hideChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1621.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1621.__isset.e = this.__isset.e;
          return tmp1621;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1622 = new TStruct("hideChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1622, cancellationToken);
            var tmp1623 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1623.Name = "E";
                tmp1623.Type = TType.Struct;
                tmp1623.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1623, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1624 = new StringBuilder("hideChartKey_result(");
          int tmp1625 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1625++) { tmp1624.Append(", "); }
            tmp1624.Append("E: ");
            E.ToString(tmp1624);
          }
          tmp1624.Append(')');
          return tmp1624.ToString();
        }
      }


      public partial class appendChartPoints_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private List<global::Yaskawa.Ext.API.DataPoint> _points;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public List<global::Yaskawa.Ext.API.DataPoint> Points
        {
          get
          {
            return _points;
          }
          set
          {
            __isset.points = true;
            this._points = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool points;
          public bool right;
        }

        public appendChartPoints_args()
        {
        }

        public appendChartPoints_args DeepCopy()
        {
          var tmp1626 = new appendChartPoints_args();
          if(__isset.p)
          {
            tmp1626.P = this.P;
          }
          tmp1626.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1626.ChartID = this.ChartID;
          }
          tmp1626.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1626.Key = this.Key;
          }
          tmp1626.__isset.key = this.__isset.key;
          if((Points != null) && __isset.points)
          {
            tmp1626.Points = this.Points.DeepCopy();
          }
          tmp1626.__isset.points = this.__isset.points;
          if(__isset.right)
          {
            tmp1626.Right = this.Right;
          }
          tmp1626.__isset.right = this.__isset.right;
          return tmp1626;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1627 = await iprot.ReadListBeginAsync(cancellationToken);
                      Points = new List<global::Yaskawa.Ext.API.DataPoint>(_list1627.Count);
                      for(int _i1628 = 0; _i1628 < _list1627.Count; ++_i1628)
                      {
                        global::Yaskawa.Ext.API.DataPoint _elem1629;
                        _elem1629 = new global::Yaskawa.Ext.API.DataPoint();
                        await _elem1629.ReadAsync(iprot, cancellationToken);
                        Points.Add(_elem1629);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1630 = new TStruct("appendChartPoints_args");
            await oprot.WriteStructBeginAsync(tmp1630, cancellationToken);
            var tmp1631 = new TField();
            if(__isset.p)
            {
              tmp1631.Name = "p";
              tmp1631.Type = TType.I64;
              tmp1631.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1631.Name = "chartID";
              tmp1631.Type = TType.String;
              tmp1631.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1631.Name = "key";
              tmp1631.Type = TType.String;
              tmp1631.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Points != null) && __isset.points)
            {
              tmp1631.Name = "points";
              tmp1631.Type = TType.List;
              tmp1631.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Points.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.DataPoint _iter1632 in Points)
              {
                await _iter1632.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1631.Name = "right";
              tmp1631.Type = TType.Bool;
              tmp1631.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendChartPoints_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.points == other.__isset.points) && ((!__isset.points) || (TCollections.Equals(Points, other.Points))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Points != null) && __isset.points)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Points);
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1633 = new StringBuilder("appendChartPoints_args(");
          int tmp1634 = 0;
          if(__isset.p)
          {
            if(0 < tmp1634++) { tmp1633.Append(", "); }
            tmp1633.Append("P: ");
            P.ToString(tmp1633);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1634++) { tmp1633.Append(", "); }
            tmp1633.Append("ChartID: ");
            ChartID.ToString(tmp1633);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1634++) { tmp1633.Append(", "); }
            tmp1633.Append("Key: ");
            Key.ToString(tmp1633);
          }
          if((Points != null) && __isset.points)
          {
            if(0 < tmp1634++) { tmp1633.Append(", "); }
            tmp1633.Append("Points: ");
            Points.ToString(tmp1633);
          }
          if(__isset.right)
          {
            if(0 < tmp1634++) { tmp1633.Append(", "); }
            tmp1633.Append("Right: ");
            Right.ToString(tmp1633);
          }
          tmp1633.Append(')');
          return tmp1633.ToString();
        }
      }


      public partial class incrementChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private double _val;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public double Val
        {
          get
          {
            return _val;
          }
          set
          {
            __isset.val = true;
            this._val = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool val;
        }

        public incrementChartKey_args()
        {
        }

        public incrementChartKey_args DeepCopy()
        {
          var tmp1635 = new incrementChartKey_args();
          if(__isset.p)
          {
            tmp1635.P = this.P;
          }
          tmp1635.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1635.ChartID = this.ChartID;
          }
          tmp1635.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1635.Key = this.Key;
          }
          tmp1635.__isset.key = this.__isset.key;
          if(__isset.val)
          {
            tmp1635.Val = this.Val;
          }
          tmp1635.__isset.val = this.__isset.val;
          return tmp1635;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    Val = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1636 = new TStruct("incrementChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1636, cancellationToken);
            var tmp1637 = new TField();
            if(__isset.p)
            {
              tmp1637.Name = "p";
              tmp1637.Type = TType.I64;
              tmp1637.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1637, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1637.Name = "chartID";
              tmp1637.Type = TType.String;
              tmp1637.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1637, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1637.Name = "key";
              tmp1637.Type = TType.String;
              tmp1637.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1637, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.val)
            {
              tmp1637.Name = "val";
              tmp1637.Type = TType.Double;
              tmp1637.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1637, cancellationToken);
              await oprot.WriteDoubleAsync(Val, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.val == other.__isset.val) && ((!__isset.val) || (global::System.Object.Equals(Val, other.Val))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.val)
            {
              hashcode = (hashcode * 397) + Val.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1638 = new StringBuilder("incrementChartKey_args(");
          int tmp1639 = 0;
          if(__isset.p)
          {
            if(0 < tmp1639++) { tmp1638.Append(", "); }
            tmp1638.Append("P: ");
            P.ToString(tmp1638);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1639++) { tmp1638.Append(", "); }
            tmp1638.Append("ChartID: ");
            ChartID.ToString(tmp1638);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1639++) { tmp1638.Append(", "); }
            tmp1638.Append("Key: ");
            Key.ToString(tmp1638);
          }
          if(__isset.val)
          {
            if(0 < tmp1639++) { tmp1638.Append(", "); }
            tmp1638.Append("Val: ");
            Val.ToString(tmp1638);
          }
          tmp1638.Append(')');
          return tmp1638.ToString();
        }
      }


      public partial class incrementChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public incrementChartKey_result()
        {
        }

        public incrementChartKey_result DeepCopy()
        {
          var tmp1640 = new incrementChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1640.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1640.__isset.e = this.__isset.e;
          return tmp1640;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1641 = new TStruct("incrementChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1641, cancellationToken);
            var tmp1642 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1642.Name = "E";
                tmp1642.Type = TType.Struct;
                tmp1642.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1642, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1643 = new StringBuilder("incrementChartKey_result(");
          int tmp1644 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1644++) { tmp1643.Append(", "); }
            tmp1643.Append("E: ");
            E.ToString(tmp1643);
          }
          tmp1643.Append(')');
          return tmp1643.ToString();
        }
      }


      public partial class exportChartImage_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImage_args()
        {
        }

        public exportChartImage_args DeepCopy()
        {
          var tmp1645 = new exportChartImage_args();
          if(__isset.p)
          {
            tmp1645.P = this.P;
          }
          tmp1645.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1645.ChartID = this.ChartID;
          }
          tmp1645.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1645.ImageFileName = this.ImageFileName;
          }
          tmp1645.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1645;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1646 = new TStruct("exportChartImage_args");
            await oprot.WriteStructBeginAsync(tmp1646, cancellationToken);
            var tmp1647 = new TField();
            if(__isset.p)
            {
              tmp1647.Name = "p";
              tmp1647.Type = TType.I64;
              tmp1647.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1647, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1647.Name = "chartID";
              tmp1647.Type = TType.String;
              tmp1647.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1647, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1647.Name = "imageFileName";
              tmp1647.Type = TType.String;
              tmp1647.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1647, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1648 = new StringBuilder("exportChartImage_args(");
          int tmp1649 = 0;
          if(__isset.p)
          {
            if(0 < tmp1649++) { tmp1648.Append(", "); }
            tmp1648.Append("P: ");
            P.ToString(tmp1648);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1649++) { tmp1648.Append(", "); }
            tmp1648.Append("ChartID: ");
            ChartID.ToString(tmp1648);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1649++) { tmp1648.Append(", "); }
            tmp1648.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1648);
          }
          tmp1648.Append(')');
          return tmp1648.ToString();
        }
      }


      public partial class exportChartImage_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImage_result()
        {
        }

        public exportChartImage_result DeepCopy()
        {
          var tmp1650 = new exportChartImage_result();
          if((Success != null) && __isset.success)
          {
            tmp1650.Success = this.Success;
          }
          tmp1650.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1650.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1650.__isset.e = this.__isset.e;
          return tmp1650;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1651 = new TStruct("exportChartImage_result");
            await oprot.WriteStructBeginAsync(tmp1651, cancellationToken);
            var tmp1652 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1652.Name = "Success";
                tmp1652.Type = TType.String;
                tmp1652.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1652, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1652.Name = "E";
                tmp1652.Type = TType.Struct;
                tmp1652.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1652, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1653 = new StringBuilder("exportChartImage_result(");
          int tmp1654 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1654++) { tmp1653.Append(", "); }
            tmp1653.Append("Success: ");
            Success.ToString(tmp1653);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1654++) { tmp1653.Append(", "); }
            tmp1653.Append("E: ");
            E.ToString(tmp1653);
          }
          tmp1653.Append(')');
          return tmp1653.ToString();
        }
      }


      public partial class exportChartImageData_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImageData_args()
        {
        }

        public exportChartImageData_args DeepCopy()
        {
          var tmp1655 = new exportChartImageData_args();
          if(__isset.p)
          {
            tmp1655.P = this.P;
          }
          tmp1655.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1655.ChartID = this.ChartID;
          }
          tmp1655.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1655.ImageFileName = this.ImageFileName;
          }
          tmp1655.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1655;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1656 = new TStruct("exportChartImageData_args");
            await oprot.WriteStructBeginAsync(tmp1656, cancellationToken);
            var tmp1657 = new TField();
            if(__isset.p)
            {
              tmp1657.Name = "p";
              tmp1657.Type = TType.I64;
              tmp1657.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1657, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1657.Name = "chartID";
              tmp1657.Type = TType.String;
              tmp1657.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1657, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1657.Name = "imageFileName";
              tmp1657.Type = TType.String;
              tmp1657.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1657, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1658 = new StringBuilder("exportChartImageData_args(");
          int tmp1659 = 0;
          if(__isset.p)
          {
            if(0 < tmp1659++) { tmp1658.Append(", "); }
            tmp1658.Append("P: ");
            P.ToString(tmp1658);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1659++) { tmp1658.Append(", "); }
            tmp1658.Append("ChartID: ");
            ChartID.ToString(tmp1658);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1659++) { tmp1658.Append(", "); }
            tmp1658.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1658);
          }
          tmp1658.Append(')');
          return tmp1658.ToString();
        }
      }


      public partial class exportChartImageData_result : TBase
      {
        private byte[] _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImageData_result()
        {
        }

        public exportChartImageData_result DeepCopy()
        {
          var tmp1660 = new exportChartImageData_result();
          if((Success != null) && __isset.success)
          {
            tmp1660.Success = this.Success.ToArray();
          }
          tmp1660.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1660.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1660.__isset.e = this.__isset.e;
          return tmp1660;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1661 = new TStruct("exportChartImageData_result");
            await oprot.WriteStructBeginAsync(tmp1661, cancellationToken);
            var tmp1662 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1662.Name = "Success";
                tmp1662.Type = TType.String;
                tmp1662.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1662, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1662.Name = "E";
                tmp1662.Type = TType.Struct;
                tmp1662.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1662, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1663 = new StringBuilder("exportChartImageData_result(");
          int tmp1664 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1664++) { tmp1663.Append(", "); }
            tmp1663.Append("Success: ");
            Success.ToString(tmp1663);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1664++) { tmp1663.Append(", "); }
            tmp1663.Append("E: ");
            E.ToString(tmp1663);
          }
          tmp1663.Append(')');
          return tmp1663.ToString();
        }
      }


      public partial class notice_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public notice_args()
        {
        }

        public notice_args DeepCopy()
        {
          var tmp1665 = new notice_args();
          if(__isset.p)
          {
            tmp1665.P = this.P;
          }
          tmp1665.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1665.Title = this.Title;
          }
          tmp1665.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1665.Message = this.Message;
          }
          tmp1665.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1665.Log = this.Log;
          }
          tmp1665.__isset.log = this.__isset.log;
          return tmp1665;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1666 = new TStruct("notice_args");
            await oprot.WriteStructBeginAsync(tmp1666, cancellationToken);
            var tmp1667 = new TField();
            if(__isset.p)
            {
              tmp1667.Name = "p";
              tmp1667.Type = TType.I64;
              tmp1667.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1667.Name = "title";
              tmp1667.Type = TType.String;
              tmp1667.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1667.Name = "message";
              tmp1667.Type = TType.String;
              tmp1667.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1667.Name = "log";
              tmp1667.Type = TType.String;
              tmp1667.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1667, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1668 = new StringBuilder("notice_args(");
          int tmp1669 = 0;
          if(__isset.p)
          {
            if(0 < tmp1669++) { tmp1668.Append(", "); }
            tmp1668.Append("P: ");
            P.ToString(tmp1668);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1669++) { tmp1668.Append(", "); }
            tmp1668.Append("Title: ");
            Title.ToString(tmp1668);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1669++) { tmp1668.Append(", "); }
            tmp1668.Append("Message: ");
            Message.ToString(tmp1668);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1669++) { tmp1668.Append(", "); }
            tmp1668.Append("Log: ");
            Log.ToString(tmp1668);
          }
          tmp1668.Append(')');
          return tmp1668.ToString();
        }
      }


      public partial class dispNotice_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.Disposition _disposition;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.Disposition"/>
        /// </summary>
        public global::Yaskawa.Ext.API.Disposition Disposition
        {
          get
          {
            return _disposition;
          }
          set
          {
            __isset.disposition = true;
            this._disposition = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool disposition;
          public bool title;
          public bool message;
          public bool log;
        }

        public dispNotice_args()
        {
        }

        public dispNotice_args DeepCopy()
        {
          var tmp1670 = new dispNotice_args();
          if(__isset.p)
          {
            tmp1670.P = this.P;
          }
          tmp1670.__isset.p = this.__isset.p;
          if(__isset.disposition)
          {
            tmp1670.Disposition = this.Disposition;
          }
          tmp1670.__isset.disposition = this.__isset.disposition;
          if((Title != null) && __isset.title)
          {
            tmp1670.Title = this.Title;
          }
          tmp1670.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1670.Message = this.Message;
          }
          tmp1670.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1670.Log = this.Log;
          }
          tmp1670.__isset.log = this.__isset.log;
          return tmp1670;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Disposition = (global::Yaskawa.Ext.API.Disposition)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1671 = new TStruct("dispNotice_args");
            await oprot.WriteStructBeginAsync(tmp1671, cancellationToken);
            var tmp1672 = new TField();
            if(__isset.p)
            {
              tmp1672.Name = "p";
              tmp1672.Type = TType.I64;
              tmp1672.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1672, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.disposition)
            {
              tmp1672.Name = "disposition";
              tmp1672.Type = TType.I32;
              tmp1672.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1672, cancellationToken);
              await oprot.WriteI32Async((int)Disposition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1672.Name = "title";
              tmp1672.Type = TType.String;
              tmp1672.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1672, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1672.Name = "message";
              tmp1672.Type = TType.String;
              tmp1672.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1672, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1672.Name = "log";
              tmp1672.Type = TType.String;
              tmp1672.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1672, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dispNotice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.disposition == other.__isset.disposition) && ((!__isset.disposition) || (global::System.Object.Equals(Disposition, other.Disposition))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.disposition)
            {
              hashcode = (hashcode * 397) + Disposition.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1673 = new StringBuilder("dispNotice_args(");
          int tmp1674 = 0;
          if(__isset.p)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("P: ");
            P.ToString(tmp1673);
          }
          if(__isset.disposition)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Disposition: ");
            Disposition.ToString(tmp1673);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Title: ");
            Title.ToString(tmp1673);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Message: ");
            Message.ToString(tmp1673);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1674++) { tmp1673.Append(", "); }
            tmp1673.Append("Log: ");
            Log.ToString(tmp1673);
          }
          tmp1673.Append(')');
          return tmp1673.ToString();
        }
      }


      public partial class error_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public error_args()
        {
        }

        public error_args DeepCopy()
        {
          var tmp1675 = new error_args();
          if(__isset.p)
          {
            tmp1675.P = this.P;
          }
          tmp1675.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1675.Title = this.Title;
          }
          tmp1675.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1675.Message = this.Message;
          }
          tmp1675.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1675.Log = this.Log;
          }
          tmp1675.__isset.log = this.__isset.log;
          return tmp1675;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1676 = new TStruct("error_args");
            await oprot.WriteStructBeginAsync(tmp1676, cancellationToken);
            var tmp1677 = new TField();
            if(__isset.p)
            {
              tmp1677.Name = "p";
              tmp1677.Type = TType.I64;
              tmp1677.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1677.Name = "title";
              tmp1677.Type = TType.String;
              tmp1677.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1677.Name = "message";
              tmp1677.Type = TType.String;
              tmp1677.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1677.Name = "log";
              tmp1677.Type = TType.String;
              tmp1677.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1677, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is error_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1678 = new StringBuilder("error_args(");
          int tmp1679 = 0;
          if(__isset.p)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("P: ");
            P.ToString(tmp1678);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("Title: ");
            Title.ToString(tmp1678);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("Message: ");
            Message.ToString(tmp1678);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1679++) { tmp1678.Append(", "); }
            tmp1678.Append("Log: ");
            Log.ToString(tmp1678);
          }
          tmp1678.Append(')');
          return tmp1678.ToString();
        }
      }


      public partial class popupDialog_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _title;
        private string _message;
        private string _positiveOption;
        private string _negativeOption;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string PositiveOption
        {
          get
          {
            return _positiveOption;
          }
          set
          {
            __isset.positiveOption = true;
            this._positiveOption = value;
          }
        }

        public string NegativeOption
        {
          get
          {
            return _negativeOption;
          }
          set
          {
            __isset.negativeOption = true;
            this._negativeOption = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool title;
          public bool message;
          public bool positiveOption;
          public bool negativeOption;
        }

        public popupDialog_args()
        {
        }

        public popupDialog_args DeepCopy()
        {
          var tmp1680 = new popupDialog_args();
          if(__isset.p)
          {
            tmp1680.P = this.P;
          }
          tmp1680.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1680.Identifier = this.Identifier;
          }
          tmp1680.__isset.identifier = this.__isset.identifier;
          if((Title != null) && __isset.title)
          {
            tmp1680.Title = this.Title;
          }
          tmp1680.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1680.Message = this.Message;
          }
          tmp1680.__isset.message = this.__isset.message;
          if((PositiveOption != null) && __isset.positiveOption)
          {
            tmp1680.PositiveOption = this.PositiveOption;
          }
          tmp1680.__isset.positiveOption = this.__isset.positiveOption;
          if((NegativeOption != null) && __isset.negativeOption)
          {
            tmp1680.NegativeOption = this.NegativeOption;
          }
          tmp1680.__isset.negativeOption = this.__isset.negativeOption;
          return tmp1680;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    PositiveOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    NegativeOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1681 = new TStruct("popupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1681, cancellationToken);
            var tmp1682 = new TField();
            if(__isset.p)
            {
              tmp1682.Name = "p";
              tmp1682.Type = TType.I64;
              tmp1682.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1682.Name = "identifier";
              tmp1682.Type = TType.String;
              tmp1682.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1682.Name = "title";
              tmp1682.Type = TType.String;
              tmp1682.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1682.Name = "message";
              tmp1682.Type = TType.String;
              tmp1682.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              tmp1682.Name = "positiveOption";
              tmp1682.Type = TType.String;
              tmp1682.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
              await oprot.WriteStringAsync(PositiveOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              tmp1682.Name = "negativeOption";
              tmp1682.Type = TType.String;
              tmp1682.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1682, cancellationToken);
              await oprot.WriteStringAsync(NegativeOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.positiveOption == other.__isset.positiveOption) && ((!__isset.positiveOption) || (global::System.Object.Equals(PositiveOption, other.PositiveOption))))
            && ((__isset.negativeOption == other.__isset.negativeOption) && ((!__isset.negativeOption) || (global::System.Object.Equals(NegativeOption, other.NegativeOption))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              hashcode = (hashcode * 397) + PositiveOption.GetHashCode();
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              hashcode = (hashcode * 397) + NegativeOption.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1683 = new StringBuilder("popupDialog_args(");
          int tmp1684 = 0;
          if(__isset.p)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("P: ");
            P.ToString(tmp1683);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("Identifier: ");
            Identifier.ToString(tmp1683);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("Title: ");
            Title.ToString(tmp1683);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("Message: ");
            Message.ToString(tmp1683);
          }
          if((PositiveOption != null) && __isset.positiveOption)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("PositiveOption: ");
            PositiveOption.ToString(tmp1683);
          }
          if((NegativeOption != null) && __isset.negativeOption)
          {
            if(0 < tmp1684++) { tmp1683.Append(", "); }
            tmp1683.Append("NegativeOption: ");
            NegativeOption.ToString(tmp1683);
          }
          tmp1683.Append(')');
          return tmp1683.ToString();
        }
      }


      public partial class popupDialog_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public popupDialog_result()
        {
        }

        public popupDialog_result DeepCopy()
        {
          var tmp1685 = new popupDialog_result();
          if((E != null) && __isset.e)
          {
            tmp1685.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1685.__isset.e = this.__isset.e;
          return tmp1685;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1686 = new TStruct("popupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1686, cancellationToken);
            var tmp1687 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1687.Name = "E";
                tmp1687.Type = TType.Struct;
                tmp1687.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1687, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1688 = new StringBuilder("popupDialog_result(");
          int tmp1689 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1689++) { tmp1688.Append(", "); }
            tmp1688.Append("E: ");
            E.ToString(tmp1688);
          }
          tmp1688.Append(')');
          return tmp1688.ToString();
        }
      }


      public partial class cancelPopupDialog_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public cancelPopupDialog_args()
        {
        }

        public cancelPopupDialog_args DeepCopy()
        {
          var tmp1690 = new cancelPopupDialog_args();
          if(__isset.p)
          {
            tmp1690.P = this.P;
          }
          tmp1690.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1690.Identifier = this.Identifier;
          }
          tmp1690.__isset.identifier = this.__isset.identifier;
          return tmp1690;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1691 = new TStruct("cancelPopupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1691, cancellationToken);
            var tmp1692 = new TField();
            if(__isset.p)
            {
              tmp1692.Name = "p";
              tmp1692.Type = TType.I64;
              tmp1692.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1692, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1692.Name = "identifier";
              tmp1692.Type = TType.String;
              tmp1692.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1692, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1693 = new StringBuilder("cancelPopupDialog_args(");
          int tmp1694 = 0;
          if(__isset.p)
          {
            if(0 < tmp1694++) { tmp1693.Append(", "); }
            tmp1693.Append("P: ");
            P.ToString(tmp1693);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1694++) { tmp1693.Append(", "); }
            tmp1693.Append("Identifier: ");
            Identifier.ToString(tmp1693);
          }
          tmp1693.Append(')');
          return tmp1693.ToString();
        }
      }


      public partial class cancelPopupDialog_result : TBase
      {

        public cancelPopupDialog_result()
        {
        }

        public cancelPopupDialog_result DeepCopy()
        {
          var tmp1695 = new cancelPopupDialog_result();
          return tmp1695;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1696 = new TStruct("cancelPopupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1696, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1697 = new StringBuilder("cancelPopupDialog_result(");
          tmp1697.Append(')');
          return tmp1697.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_args : TBase
      {
        private long _p;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instruction;
        }

        public insertInstructionAtSelectedLine_args()
        {
        }

        public insertInstructionAtSelectedLine_args DeepCopy()
        {
          var tmp1699 = new insertInstructionAtSelectedLine_args();
          if(__isset.p)
          {
            tmp1699.P = this.P;
          }
          tmp1699.__isset.p = this.__isset.p;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1699.Instruction = this.Instruction;
          }
          tmp1699.__isset.instruction = this.__isset.instruction;
          return tmp1699;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1700 = new TStruct("insertInstructionAtSelectedLine_args");
            await oprot.WriteStructBeginAsync(tmp1700, cancellationToken);
            var tmp1701 = new TField();
            if(__isset.p)
            {
              tmp1701.Name = "p";
              tmp1701.Type = TType.I64;
              tmp1701.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1701, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1701.Name = "instruction";
              tmp1701.Type = TType.String;
              tmp1701.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1701, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1702 = new StringBuilder("insertInstructionAtSelectedLine_args(");
          int tmp1703 = 0;
          if(__isset.p)
          {
            if(0 < tmp1703++) { tmp1702.Append(", "); }
            tmp1702.Append("P: ");
            P.ToString(tmp1702);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1703++) { tmp1702.Append(", "); }
            tmp1702.Append("Instruction: ");
            Instruction.ToString(tmp1702);
          }
          tmp1702.Append(')');
          return tmp1702.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public insertInstructionAtSelectedLine_result()
        {
        }

        public insertInstructionAtSelectedLine_result DeepCopy()
        {
          var tmp1704 = new insertInstructionAtSelectedLine_result();
          if((Success != null) && __isset.success)
          {
            tmp1704.Success = this.Success;
          }
          tmp1704.__isset.success = this.__isset.success;
          return tmp1704;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1705 = new TStruct("insertInstructionAtSelectedLine_result");
            await oprot.WriteStructBeginAsync(tmp1705, cancellationToken);
            var tmp1706 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1706.Name = "Success";
                tmp1706.Type = TType.String;
                tmp1706.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1706, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1707 = new StringBuilder("insertInstructionAtSelectedLine_result(");
          int tmp1708 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1708++) { tmp1707.Append(", "); }
            tmp1707.Append("Success: ");
            Success.ToString(tmp1707);
          }
          tmp1707.Append(')');
          return tmp1707.ToString();
        }
      }


      public partial class displayScreen_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public displayScreen_args()
        {
        }

        public displayScreen_args DeepCopy()
        {
          var tmp1709 = new displayScreen_args();
          if(__isset.p)
          {
            tmp1709.P = this.P;
          }
          tmp1709.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1709.Identifier = this.Identifier;
          }
          tmp1709.__isset.identifier = this.__isset.identifier;
          return tmp1709;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1710 = new TStruct("displayScreen_args");
            await oprot.WriteStructBeginAsync(tmp1710, cancellationToken);
            var tmp1711 = new TField();
            if(__isset.p)
            {
              tmp1711.Name = "p";
              tmp1711.Type = TType.I64;
              tmp1711.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1711, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1711.Name = "identifier";
              tmp1711.Type = TType.String;
              tmp1711.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1711, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1712 = new StringBuilder("displayScreen_args(");
          int tmp1713 = 0;
          if(__isset.p)
          {
            if(0 < tmp1713++) { tmp1712.Append(", "); }
            tmp1712.Append("P: ");
            P.ToString(tmp1712);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1713++) { tmp1712.Append(", "); }
            tmp1712.Append("Identifier: ");
            Identifier.ToString(tmp1712);
          }
          tmp1712.Append(')');
          return tmp1712.ToString();
        }
      }


      public partial class displayScreen_result : TBase
      {

        public displayScreen_result()
        {
        }

        public displayScreen_result DeepCopy()
        {
          var tmp1714 = new displayScreen_result();
          return tmp1714;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1715 = new TStruct("displayScreen_result");
            await oprot.WriteStructBeginAsync(tmp1715, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1716 = new StringBuilder("displayScreen_result(");
          tmp1716.Append(')');
          return tmp1716.ToString();
        }
      }


      public partial class displayHelp_args : TBase
      {
        private long _p;
        private string _title;
        private string _htmlContentFile;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string HtmlContentFile
        {
          get
          {
            return _htmlContentFile;
          }
          set
          {
            __isset.htmlContentFile = true;
            this._htmlContentFile = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool htmlContentFile;
        }

        public displayHelp_args()
        {
        }

        public displayHelp_args DeepCopy()
        {
          var tmp1718 = new displayHelp_args();
          if(__isset.p)
          {
            tmp1718.P = this.P;
          }
          tmp1718.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1718.Title = this.Title;
          }
          tmp1718.__isset.title = this.__isset.title;
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            tmp1718.HtmlContentFile = this.HtmlContentFile;
          }
          tmp1718.__isset.htmlContentFile = this.__isset.htmlContentFile;
          return tmp1718;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlContentFile = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1719 = new TStruct("displayHelp_args");
            await oprot.WriteStructBeginAsync(tmp1719, cancellationToken);
            var tmp1720 = new TField();
            if(__isset.p)
            {
              tmp1720.Name = "p";
              tmp1720.Type = TType.I64;
              tmp1720.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1720.Name = "title";
              tmp1720.Type = TType.String;
              tmp1720.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              tmp1720.Name = "htmlContentFile";
              tmp1720.Type = TType.String;
              tmp1720.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
              await oprot.WriteStringAsync(HtmlContentFile, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.htmlContentFile == other.__isset.htmlContentFile) && ((!__isset.htmlContentFile) || (global::System.Object.Equals(HtmlContentFile, other.HtmlContentFile))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              hashcode = (hashcode * 397) + HtmlContentFile.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1721 = new StringBuilder("displayHelp_args(");
          int tmp1722 = 0;
          if(__isset.p)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("P: ");
            P.ToString(tmp1721);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("Title: ");
            Title.ToString(tmp1721);
          }
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("HtmlContentFile: ");
            HtmlContentFile.ToString(tmp1721);
          }
          tmp1721.Append(')');
          return tmp1721.ToString();
        }
      }


      public partial class displayHelp_result : TBase
      {

        public displayHelp_result()
        {
        }

        public displayHelp_result DeepCopy()
        {
          var tmp1723 = new displayHelp_result();
          return tmp1723;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1724 = new TStruct("displayHelp_result");
            await oprot.WriteStructBeginAsync(tmp1724, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1725 = new StringBuilder("displayHelp_result(");
          tmp1725.Append(')');
          return tmp1725.ToString();
        }
      }


      public partial class accessLevel_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public accessLevel_args()
        {
        }

        public accessLevel_args DeepCopy()
        {
          var tmp1727 = new accessLevel_args();
          if(__isset.p)
          {
            tmp1727.P = this.P;
          }
          tmp1727.__isset.p = this.__isset.p;
          return tmp1727;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1728 = new TStruct("accessLevel_args");
            await oprot.WriteStructBeginAsync(tmp1728, cancellationToken);
            var tmp1729 = new TField();
            if(__isset.p)
            {
              tmp1729.Name = "p";
              tmp1729.Type = TType.I64;
              tmp1729.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1729, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevel_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1730 = new StringBuilder("accessLevel_args(");
          int tmp1731 = 0;
          if(__isset.p)
          {
            if(0 < tmp1731++) { tmp1730.Append(", "); }
            tmp1730.Append("P: ");
            P.ToString(tmp1730);
          }
          tmp1730.Append(')');
          return tmp1730.ToString();
        }
      }


      public partial class accessLevel_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public accessLevel_result()
        {
        }

        public accessLevel_result DeepCopy()
        {
          var tmp1732 = new accessLevel_result();
          if((Success != null) && __isset.success)
          {
            tmp1732.Success = this.Success;
          }
          tmp1732.__isset.success = this.__isset.success;
          return tmp1732;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1733 = new TStruct("accessLevel_result");
            await oprot.WriteStructBeginAsync(tmp1733, cancellationToken);
            var tmp1734 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1734.Name = "Success";
                tmp1734.Type = TType.String;
                tmp1734.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1734, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevel_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1735 = new StringBuilder("accessLevel_result(");
          int tmp1736 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1736++) { tmp1735.Append(", "); }
            tmp1735.Append("Success: ");
            Success.ToString(tmp1735);
          }
          tmp1735.Append(')');
          return tmp1735.ToString();
        }
      }


      public partial class accessLevelIncludes_args : TBase
      {
        private long _p;
        private string _level;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool level;
        }

        public accessLevelIncludes_args()
        {
        }

        public accessLevelIncludes_args DeepCopy()
        {
          var tmp1737 = new accessLevelIncludes_args();
          if(__isset.p)
          {
            tmp1737.P = this.P;
          }
          tmp1737.__isset.p = this.__isset.p;
          if((Level != null) && __isset.level)
          {
            tmp1737.Level = this.Level;
          }
          tmp1737.__isset.level = this.__isset.level;
          return tmp1737;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Level = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1738 = new TStruct("accessLevelIncludes_args");
            await oprot.WriteStructBeginAsync(tmp1738, cancellationToken);
            var tmp1739 = new TField();
            if(__isset.p)
            {
              tmp1739.Name = "p";
              tmp1739.Type = TType.I64;
              tmp1739.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1739, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Level != null) && __isset.level)
            {
              tmp1739.Name = "level";
              tmp1739.Type = TType.String;
              tmp1739.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1739, cancellationToken);
              await oprot.WriteStringAsync(Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevelIncludes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Level != null) && __isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1740 = new StringBuilder("accessLevelIncludes_args(");
          int tmp1741 = 0;
          if(__isset.p)
          {
            if(0 < tmp1741++) { tmp1740.Append(", "); }
            tmp1740.Append("P: ");
            P.ToString(tmp1740);
          }
          if((Level != null) && __isset.level)
          {
            if(0 < tmp1741++) { tmp1740.Append(", "); }
            tmp1740.Append("Level: ");
            Level.ToString(tmp1740);
          }
          tmp1740.Append(')');
          return tmp1740.ToString();
        }
      }


      public partial class accessLevelIncludes_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public accessLevelIncludes_result()
        {
        }

        public accessLevelIncludes_result DeepCopy()
        {
          var tmp1742 = new accessLevelIncludes_result();
          if(__isset.success)
          {
            tmp1742.Success = this.Success;
          }
          tmp1742.__isset.success = this.__isset.success;
          return tmp1742;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1743 = new TStruct("accessLevelIncludes_result");
            await oprot.WriteStructBeginAsync(tmp1743, cancellationToken);
            var tmp1744 = new TField();

            if(this.__isset.success)
            {
              tmp1744.Name = "Success";
              tmp1744.Type = TType.Bool;
              tmp1744.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1744, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is accessLevelIncludes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1745 = new StringBuilder("accessLevelIncludes_result(");
          int tmp1746 = 0;
          if(__isset.success)
          {
            if(0 < tmp1746++) { tmp1745.Append(", "); }
            tmp1745.Append("Success: ");
            Success.ToString(tmp1745);
          }
          tmp1745.Append(')');
          return tmp1745.ToString();
        }
      }

    }

  }
}
