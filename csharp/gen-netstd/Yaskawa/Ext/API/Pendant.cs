/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Pendant
  {
    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of the Smart Pendant itself
      /// (avoid using this for conditional feature use - use the Extension apiVersion() instead)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service events.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service YML Item-specific events.
      /// Specified events will be sent for all specified items.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service YML Item-specific events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of Pendant service events that have occured since last call
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query the current UI language of the pendant interface.
      /// Returns IETF language codes (RFCs 5646, 5645, 4647) of languages
      /// (typically ISO 693-1 code when region insignificant)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// The UI screen currently shown to the pendant user
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an Item type described using a YML source code string
      /// Returns a list of parsing errors (0 on success)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ymlSource"></param>
      global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image file for later reference by filename (must be uniquely named, with .jpg or .png).
      /// If file cannot be accessed by service, it will be locally read and registerImageData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image for later reference by name (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageData"></param>
      /// <param name="imageName"></param>
      global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a HTML file for later reference by filename (must be uniquely named, with .html).
      /// If file cannot be accessed by service, it will be locally read and registerHTMLData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlFileName"></param>
      global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register HTML for later reference by name (must be uniquely named, with .html extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlData"></param>
      /// <param name="htmlName"></param>
      global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a translation file (e.g. a Java properties file for a language); extension is used to determine format
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationFileName"></param>
      global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register translation file data (translationName typically filename-like; extension is used to determine format)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationData"></param>
      /// <param name="translationName"></param>
      global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a menu that utilities can be registered under *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      /// <param name="menuText"></param>
      /// <param name="menuIcon"></param>
      global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unregisters a user added menu - All Utilities within the menu must be unregistered with 'unregisterUtilityWindow' first
      /// </summary>
      /// <param name="p"></param>
      /// <param name="menuName"></param>
      global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Utility window with the UI.
      /// The itemType references a previously registered YML item instantiated for the window
      /// UI content.
      /// The menuName refers to a previously registered menu that the utility will apear under on the
      /// main menu or if none is specified it will be under 'Utility'
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="itemType"></param>
      /// <param name="menuItemName"></param>
      /// <param name="windowTitle"></param>
      global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open (make visible) previously registered Utility Window
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close a visible Utility Window (make invisible - state is maintained)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Collapse previously registered Utility Window, if in expanded state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Expand previously registered Utility Window, if in collapsed state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Refresh the Inform grammar for instructions with the specified type *
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instructionType"></param>
      global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register UI content at the specified integration point in the pendant UI.
      /// The itemType should reference a YML item previously registered via registerYML().
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="itemType"></param>
      /// <param name="buttonLabel"></param>
      /// <param name="buttonImage"></param>
      global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Switch component at the specified integraiton point in the pendant UI.
      /// When the switch is toggled, it creates a PendantEvent with a type of IntegrationPointSwitchStateChanged that can be gotten via events()
      /// Switches registered with registerSwitch() can be unregistered with unregisterIntegration()
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="switchLabel"></param>
      /// <param name="offPositionLabel"></param>
      /// <param name="onPositionLabel"></param>
      /// <param name="defaultState"></param>
      global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default);

      /// <summary>
      /// get property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set several properties (potentially for different items) at once.  This is more
      /// efficient that many repeated calls to setProperty().
      /// Note it is asynchronous so no errors/exceptions are thrown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="propValuesList"></param>
      global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the configuration of a chart by ID.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="config"></param>
      global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the configuration of a chart by ID
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="dataset"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to access the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Add a new key to the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="data"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to remove from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Hides an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to hide a key from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="hidden"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append new data points to a specified key in the data of a chart by ID.
      /// This function will only have an effect on line/scatter charts. Set
      /// 'right' to true to pass the dataset for a secondary scale on the right
      /// hand side.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="points"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Increments a category value by `val`.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="val"></param>
      global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to the specified filename (must be uniquely named, with .jpg or .png).
      /// Calls exportChartImageData if the extension is unable to access the file.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to a binary blob (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user.
      /// Notices are automaticlly hidden after a short display period.
      /// Notice messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user with specified disposition.
      /// As for notice() but displayed in a way that connotes the specified disposition.
      /// For example, a Positive disposition may be shown in green.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// (API version 2.1 and later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="disposition"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show error to user.
      /// Errors should only indicate important situations that the user must be aware of and for which deliberate
      /// acknowledgement is required before proceeding.  Typically, some action will be required to correct the situation.
      /// Errors are displayed until dismissed by the user.
      /// Error messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Display modal pop-up dialog.  Typically, Yes/No, although negativeOption can be omitted
      /// The identifier can be used to associate the corresponding PopupOpened & PopupClosed events triggered by
      /// user positive/negative selection or automatic dismissal/cancellation - for example is screen switched, alarm etc.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="positiveOption"></param>
      /// <param name="negativeOption"></param>
      global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default);

      /// <summary>
      /// Cancel an open popup dialog.  If the dialog has a negative option, behaves as if user selected it, otherwise
      /// no event is generated
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Inserts an instruction, returns a string:
      /// Success,
      /// UnsupportedCommand,
      /// InvalidFormat,
      /// ProgrammingViewClosed,
      /// JobDoesNotExist,
      /// CallingJobFromSameJob,
      /// ExceededMaxArguments,
      /// JobNotEditable,
      /// MultiSelectActive,
      /// TimedOut,
      /// Unknown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays a standard pendant UI screen by passing a string with the screen identifier. (Only available from SDK API 2.2 onward)
      /// Refer to the YML - URI Links documentation for the list of supported screens and settings.
      /// Do not include the URI "&lt;a href&gt; screen:" portion in the identifier.  For example to display the jogging panel use:
      /// pendant.displayScreen("programmingView?panel=jogging");
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays an html file in a standard Smart Pendant help dialog. (Only available from SDK API 3.0 onward)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="htmlContentFile"></param>
      global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await send_pendantVersion(p, cancellationToken);
        return await recv_pendantVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp672 = new InternalStructs.pendantVersion_args() {
          P = p,
        };
        
        await tmp672.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_pendantVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp673 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp673.Type == TMessageType.Exception)
        {
          var tmp674 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp674;
        }

        var tmp675 = new InternalStructs.pendantVersion_result();
        await tmp675.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp675.__isset.success)
        {
          return tmp675.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendantVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(p, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp676 = new InternalStructs.subscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp676.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp677 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp677.Type == TMessageType.Exception)
        {
          var tmp678 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp678;
        }

        var tmp679 = new InternalStructs.subscribeEventTypes_result();
        await tmp679.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(p, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp680 = new InternalStructs.unsubscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp680.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp681 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp681.Type == TMessageType.Exception)
        {
          var tmp682 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp682;
        }

        var tmp683 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp683.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_subscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp684 = new InternalStructs.subscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp684.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp685 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp685.Type == TMessageType.Exception)
        {
          var tmp686 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp686;
        }

        var tmp687 = new InternalStructs.subscribeItemEventTypes_result();
        await tmp687.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_unsubscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp688 = new InternalStructs.unsubscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp688.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp689 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp689.Type == TMessageType.Exception)
        {
          var tmp690 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp690;
        }

        var tmp691 = new InternalStructs.unsubscribeItemEventTypes_result();
        await tmp691.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default)
      {
        await send_events(p, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp692 = new InternalStructs.events_args() {
          P = p,
        };
        
        await tmp692.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp693 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp693.Type == TMessageType.Exception)
        {
          var tmp694 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp694;
        }

        var tmp695 = new InternalStructs.events_result();
        await tmp695.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp695.__isset.success)
        {
          return tmp695.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLanguage(p, cancellationToken);
        return await recv_currentLanguage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp696 = new InternalStructs.currentLanguage_args() {
          P = p,
        };
        
        await tmp696.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLanguage(CancellationToken cancellationToken = default)
      {
        
        var tmp697 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp697.Type == TMessageType.Exception)
        {
          var tmp698 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp698;
        }

        var tmp699 = new InternalStructs.currentLanguage_result();
        await tmp699.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp699.__isset.success)
        {
          return tmp699.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLanguage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLocale(p, cancellationToken);
        return await recv_currentLocale(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp700 = new InternalStructs.currentLocale_args() {
          P = p,
        };
        
        await tmp700.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLocale(CancellationToken cancellationToken = default)
      {
        
        var tmp701 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp701.Type == TMessageType.Exception)
        {
          var tmp702 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp702;
        }

        var tmp703 = new InternalStructs.currentLocale_result();
        await tmp703.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp703.__isset.success)
        {
          return tmp703.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLocale failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await send_currentScreenName(p, cancellationToken);
        return await recv_currentScreenName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp704 = new InternalStructs.currentScreenName_args() {
          P = p,
        };
        
        await tmp704.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentScreenName(CancellationToken cancellationToken = default)
      {
        
        var tmp705 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp705.Type == TMessageType.Exception)
        {
          var tmp706 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp706;
        }

        var tmp707 = new InternalStructs.currentScreenName_result();
        await tmp707.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp707.__isset.success)
        {
          return tmp707.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentScreenName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await send_registerYML(p, ymlSource, cancellationToken);
        return await recv_registerYML(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp708 = new InternalStructs.registerYML_args() {
          P = p,
          YmlSource = ymlSource,
        };
        
        await tmp708.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_registerYML(CancellationToken cancellationToken = default)
      {
        
        var tmp709 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp709.Type == TMessageType.Exception)
        {
          var tmp710 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp710;
        }

        var tmp711 = new InternalStructs.registerYML_result();
        await tmp711.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp711.__isset.success)
        {
          return tmp711.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerYML failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_registerImageFile(p, imageFileName, cancellationToken);
        await recv_registerImageFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp712 = new InternalStructs.registerImageFile_args() {
          P = p,
          ImageFileName = imageFileName,
        };
        
        await tmp712.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageFile(CancellationToken cancellationToken = default)
      {
        
        var tmp713 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp713.Type == TMessageType.Exception)
        {
          var tmp714 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp714;
        }

        var tmp715 = new InternalStructs.registerImageFile_result();
        await tmp715.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp715.__isset.e)
        {
          throw tmp715.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await send_registerImageData(p, imageData, imageName, cancellationToken);
        await recv_registerImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp716 = new InternalStructs.registerImageData_args() {
          P = p,
          ImageData = imageData,
          ImageName = imageName,
        };
        
        await tmp716.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp717 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp717.Type == TMessageType.Exception)
        {
          var tmp718 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp718;
        }

        var tmp719 = new InternalStructs.registerImageData_result();
        await tmp719.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp719.__isset.e)
        {
          throw tmp719.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLFile(p, htmlFileName, cancellationToken);
        await recv_registerHTMLFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp720 = new InternalStructs.registerHTMLFile_args() {
          P = p,
          HtmlFileName = htmlFileName,
        };
        
        await tmp720.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLFile(CancellationToken cancellationToken = default)
      {
        
        var tmp721 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp721.Type == TMessageType.Exception)
        {
          var tmp722 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp722;
        }

        var tmp723 = new InternalStructs.registerHTMLFile_result();
        await tmp723.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp723.__isset.e)
        {
          throw tmp723.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLData(p, htmlData, htmlName, cancellationToken);
        await recv_registerHTMLData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp724 = new InternalStructs.registerHTMLData_args() {
          P = p,
          HtmlData = htmlData,
          HtmlName = htmlName,
        };
        
        await tmp724.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLData(CancellationToken cancellationToken = default)
      {
        
        var tmp725 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp725.Type == TMessageType.Exception)
        {
          var tmp726 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp726;
        }

        var tmp727 = new InternalStructs.registerHTMLData_result();
        await tmp727.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp727.__isset.e)
        {
          throw tmp727.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationFile(p, locale, translationFileName, cancellationToken);
        await recv_registerTranslationFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp728 = new InternalStructs.registerTranslationFile_args() {
          P = p,
          Locale = locale,
          TranslationFileName = translationFileName,
        };
        
        await tmp728.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationFile(CancellationToken cancellationToken = default)
      {
        
        var tmp729 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp729.Type == TMessageType.Exception)
        {
          var tmp730 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp730;
        }

        var tmp731 = new InternalStructs.registerTranslationFile_result();
        await tmp731.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp731.__isset.e)
        {
          throw tmp731.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationData(p, locale, translationData, translationName, cancellationToken);
        await recv_registerTranslationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp732 = new InternalStructs.registerTranslationData_args() {
          P = p,
          Locale = locale,
          TranslationData = translationData,
          TranslationName = translationName,
        };
        
        await tmp732.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationData(CancellationToken cancellationToken = default)
      {
        
        var tmp733 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp733.Type == TMessageType.Exception)
        {
          var tmp734 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp734;
        }

        var tmp735 = new InternalStructs.registerTranslationData_result();
        await tmp735.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp735.__isset.e)
        {
          throw tmp735.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityMenu(p, menuName, menuText, menuIcon, cancellationToken);
        await recv_registerUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityMenu(long p, string menuName, string menuText, string menuIcon, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp736 = new InternalStructs.registerUtilityMenu_args() {
          P = p,
          MenuName = menuName,
          MenuText = menuText,
          MenuIcon = menuIcon,
        };
        
        await tmp736.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp737 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp737.Type == TMessageType.Exception)
        {
          var tmp738 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp738;
        }

        var tmp739 = new InternalStructs.registerUtilityMenu_result();
        await tmp739.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp739.__isset.e)
        {
          throw tmp739.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityMenu(p, menuName, cancellationToken);
        await recv_unregisterUtilityMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityMenu(long p, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp740 = new InternalStructs.unregisterUtilityMenu_args() {
          P = p,
          MenuName = menuName,
        };
        
        await tmp740.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp741 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp741.Type == TMessageType.Exception)
        {
          var tmp742 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp742;
        }

        var tmp743 = new InternalStructs.unregisterUtilityMenu_result();
        await tmp743.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp743.__isset.e)
        {
          throw tmp743.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindow(p, identifier, itemType, menuItemName, windowTitle, cancellationToken);
        await recv_registerUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp744 = new InternalStructs.registerUtilityWindow_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
        };
        
        await tmp744.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp745 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp745.Type == TMessageType.Exception)
        {
          var tmp746 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp746;
        }

        var tmp747 = new InternalStructs.registerUtilityWindow_result();
        await tmp747.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp747.__isset.e)
        {
          throw tmp747.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindowWithMenu(p, identifier, itemType, menuItemName, windowTitle, menuName, cancellationToken);
        await recv_registerUtilityWindowWithMenu(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindowWithMenu(long p, string identifier, string itemType, string menuItemName, string windowTitle, string menuName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp748 = new InternalStructs.registerUtilityWindowWithMenu_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
          MenuName = menuName,
        };
        
        await tmp748.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindowWithMenu(CancellationToken cancellationToken = default)
      {
        
        var tmp749 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp749.Type == TMessageType.Exception)
        {
          var tmp750 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp750;
        }

        var tmp751 = new InternalStructs.registerUtilityWindowWithMenu_result();
        await tmp751.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp751.__isset.e)
        {
          throw tmp751.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityWindow(p, identifier, cancellationToken);
        await recv_unregisterUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp752 = new InternalStructs.unregisterUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp752.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp753 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp753.Type == TMessageType.Exception)
        {
          var tmp754 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp754;
        }

        var tmp755 = new InternalStructs.unregisterUtilityWindow_result();
        await tmp755.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp755.__isset.e)
        {
          throw tmp755.E;
        }
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_openUtilityWindow(p, identifier, cancellationToken);
        await recv_openUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp756 = new InternalStructs.openUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp756.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_openUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp757 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp757.Type == TMessageType.Exception)
        {
          var tmp758 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp758;
        }

        var tmp759 = new InternalStructs.openUtilityWindow_result();
        await tmp759.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_closeUtilityWindow(p, identifier, cancellationToken);
        await recv_closeUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp760 = new InternalStructs.closeUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp760.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp761 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp761.Type == TMessageType.Exception)
        {
          var tmp762 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp762;
        }

        var tmp763 = new InternalStructs.closeUtilityWindow_result();
        await tmp763.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_collapseUtilityWindow(p, identifier, cancellationToken);
        await recv_collapseUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp764 = new InternalStructs.collapseUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp764.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_collapseUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp765 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp765.Type == TMessageType.Exception)
        {
          var tmp766 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp766;
        }

        var tmp767 = new InternalStructs.collapseUtilityWindow_result();
        await tmp767.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_expandUtilityWindow(p, identifier, cancellationToken);
        await recv_expandUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp768 = new InternalStructs.expandUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp768.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_expandUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp769 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp769.Type == TMessageType.Exception)
        {
          var tmp770 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp770;
        }

        var tmp771 = new InternalStructs.expandUtilityWindow_result();
        await tmp771.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await send_refreshDynamicInstructions(p, instructionType, cancellationToken);
        await recv_refreshDynamicInstructions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_refreshDynamicInstructions(long p, global::Yaskawa.Ext.API.DynamicInstructionType instructionType, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp772 = new InternalStructs.refreshDynamicInstructions_args() {
          P = p,
          InstructionType = instructionType,
        };
        
        await tmp772.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_refreshDynamicInstructions(CancellationToken cancellationToken = default)
      {
        
        var tmp773 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp773.Type == TMessageType.Exception)
        {
          var tmp774 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp774;
        }

        var tmp775 = new InternalStructs.refreshDynamicInstructions_result();
        await tmp775.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await send_registerIntegration(p, identifier, integrationPoint, itemType, buttonLabel, buttonImage, cancellationToken);
        await recv_registerIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp776 = new InternalStructs.registerIntegration_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          ItemType = itemType,
          ButtonLabel = buttonLabel,
          ButtonImage = buttonImage,
        };
        
        await tmp776.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp777 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp777.Type == TMessageType.Exception)
        {
          var tmp778 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp778;
        }

        var tmp779 = new InternalStructs.registerIntegration_result();
        await tmp779.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp779.__isset.e)
        {
          throw tmp779.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterIntegration(p, identifier, cancellationToken);
        await recv_unregisterIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp780 = new InternalStructs.unregisterIntegration_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp780.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp781 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp781.Type == TMessageType.Exception)
        {
          var tmp782 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp782;
        }

        var tmp783 = new InternalStructs.unregisterIntegration_result();
        await tmp783.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp783.__isset.e)
        {
          throw tmp783.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await send_registerSwitch(p, identifier, integrationPoint, switchLabel, offPositionLabel, onPositionLabel, defaultState, cancellationToken);
        await recv_registerSwitch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerSwitch(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string switchLabel, string offPositionLabel, string onPositionLabel, bool defaultState, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp784 = new InternalStructs.registerSwitch_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          SwitchLabel = switchLabel,
          OffPositionLabel = offPositionLabel,
          OnPositionLabel = onPositionLabel,
          DefaultState = defaultState,
        };
        
        await tmp784.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerSwitch(CancellationToken cancellationToken = default)
      {
        
        var tmp785 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp785.Type == TMessageType.Exception)
        {
          var tmp786 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp786;
        }

        var tmp787 = new InternalStructs.registerSwitch_result();
        await tmp787.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp787.__isset.e)
        {
          throw tmp787.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await send_property(p, itemID, name, cancellationToken);
        return await recv_property(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("property", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp788 = new InternalStructs.property_args() {
          P = p,
          ItemID = itemID,
          Name = name,
        };
        
        await tmp788.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_property(CancellationToken cancellationToken = default)
      {
        
        var tmp789 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp789.Type == TMessageType.Exception)
        {
          var tmp790 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp790;
        }

        var tmp791 = new InternalStructs.property_result();
        await tmp791.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp791.__isset.success)
        {
          return tmp791.Success;
        }
        if (tmp791.__isset.e)
        {
          throw tmp791.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "property failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setProperty(p, itemID, name, @value, cancellationToken);
        await recv_setProperty(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp792 = new InternalStructs.setProperty_args() {
          P = p,
          ItemID = itemID,
          Name = name,
          Value = @value,
        };
        
        await tmp792.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setProperty(CancellationToken cancellationToken = default)
      {
        
        var tmp793 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp793.Type == TMessageType.Exception)
        {
          var tmp794 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp794;
        }

        var tmp795 = new InternalStructs.setProperty_result();
        await tmp795.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp795.__isset.e)
        {
          throw tmp795.E;
        }
      }

      public async global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await send_setProperties(p, propValuesList, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperties", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp796 = new InternalStructs.setProperties_args() {
          P = p,
          PropValuesList = propValuesList,
        };
        
        await tmp796.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await send_setChartConfig(p, chartID, config, cancellationToken);
        await recv_setChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp797 = new InternalStructs.setChartConfig_args() {
          P = p,
          ChartID = chartID,
          Config = config,
        };
        
        await tmp797.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp798 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp798.Type == TMessageType.Exception)
        {
          var tmp799 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp799;
        }

        var tmp800 = new InternalStructs.setChartConfig_result();
        await tmp800.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp800.__isset.e)
        {
          throw tmp800.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await send_getChartConfig(p, chartID, cancellationToken);
        return await recv_getChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp801 = new InternalStructs.getChartConfig_args() {
          P = p,
          ChartID = chartID,
        };
        
        await tmp801.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_getChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp802 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp802.Type == TMessageType.Exception)
        {
          var tmp803 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp803;
        }

        var tmp804 = new InternalStructs.getChartConfig_result();
        await tmp804.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp804.__isset.success)
        {
          return tmp804.Success;
        }
        if (tmp804.__isset.e)
        {
          throw tmp804.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await send_setChartData(p, chartID, dataset, right, cancellationToken);
        await recv_setChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp805 = new InternalStructs.setChartData_args() {
          P = p,
          ChartID = chartID,
          Dataset = dataset,
          Right = right,
        };
        
        await tmp805.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp806 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp806.Type == TMessageType.Exception)
        {
          var tmp807 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp807;
        }

        var tmp808 = new InternalStructs.setChartData_result();
        await tmp808.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp808.__isset.e)
        {
          throw tmp808.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await send_getChartData(p, chartID, right, cancellationToken);
        return await recv_getChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp809 = new InternalStructs.getChartData_args() {
          P = p,
          ChartID = chartID,
          Right = right,
        };
        
        await tmp809.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> recv_getChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp810 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp810.Type == TMessageType.Exception)
        {
          var tmp811 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp811;
        }

        var tmp812 = new InternalStructs.getChartData_result();
        await tmp812.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp812.__isset.success)
        {
          return tmp812.Success;
        }
        if (tmp812.__isset.e)
        {
          throw tmp812.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await send_addChartKey(p, chartID, key, data, right, cancellationToken);
        await recv_addChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp813 = new InternalStructs.addChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Data = data,
          Right = right,
        };
        
        await tmp813.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_addChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp814 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp814.Type == TMessageType.Exception)
        {
          var tmp815 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp815;
        }

        var tmp816 = new InternalStructs.addChartKey_result();
        await tmp816.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp816.__isset.e)
        {
          throw tmp816.E;
        }
      }

      public async global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await send_removeChartKey(p, chartID, key, right, cancellationToken);
        await recv_removeChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp817 = new InternalStructs.removeChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Right = right,
        };
        
        await tmp817.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp818 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp818.Type == TMessageType.Exception)
        {
          var tmp819 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp819;
        }

        var tmp820 = new InternalStructs.removeChartKey_result();
        await tmp820.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp820.__isset.e)
        {
          throw tmp820.E;
        }
      }

      public async global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await send_hideChartKey(p, chartID, key, hidden, right, cancellationToken);
        await recv_hideChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp821 = new InternalStructs.hideChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Hidden = hidden,
          Right = right,
        };
        
        await tmp821.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_hideChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp822 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp822.Type == TMessageType.Exception)
        {
          var tmp823 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp823;
        }

        var tmp824 = new InternalStructs.hideChartKey_result();
        await tmp824.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp824.__isset.e)
        {
          throw tmp824.E;
        }
      }

      public async global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await send_appendChartPoints(p, chartID, key, points, right, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendChartPoints", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp825 = new InternalStructs.appendChartPoints_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Points = points,
          Right = right,
        };
        
        await tmp825.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await send_incrementChartKey(p, chartID, key, val, cancellationToken);
        await recv_incrementChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp826 = new InternalStructs.incrementChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Val = val,
        };
        
        await tmp826.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_incrementChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp827 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp827.Type == TMessageType.Exception)
        {
          var tmp828 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp828;
        }

        var tmp829 = new InternalStructs.incrementChartKey_result();
        await tmp829.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp829.__isset.e)
        {
          throw tmp829.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImage(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp830 = new InternalStructs.exportChartImage_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp830.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_exportChartImage(CancellationToken cancellationToken = default)
      {
        
        var tmp831 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp831.Type == TMessageType.Exception)
        {
          var tmp832 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp832;
        }

        var tmp833 = new InternalStructs.exportChartImage_result();
        await tmp833.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp833.__isset.success)
        {
          return tmp833.Success;
        }
        if (tmp833.__isset.e)
        {
          throw tmp833.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImageData(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp834 = new InternalStructs.exportChartImageData_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp834.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_exportChartImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp835 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp835.Type == TMessageType.Exception)
        {
          var tmp836 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp836;
        }

        var tmp837 = new InternalStructs.exportChartImageData_result();
        await tmp837.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp837.__isset.success)
        {
          return tmp837.Success;
        }
        if (tmp837.__isset.e)
        {
          throw tmp837.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImageData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_notice(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp838 = new InternalStructs.notice_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp838.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_dispNotice(p, disposition, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dispNotice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp839 = new InternalStructs.dispNotice_args() {
          P = p,
          Disposition = disposition,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp839.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_error(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("error", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp840 = new InternalStructs.error_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp840.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await send_popupDialog(p, identifier, title, message, positiveOption, negativeOption, cancellationToken);
        await recv_popupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp841 = new InternalStructs.popupDialog_args() {
          P = p,
          Identifier = identifier,
          Title = title,
          Message = message,
          PositiveOption = positiveOption,
          NegativeOption = negativeOption,
        };
        
        await tmp841.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_popupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp842 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp842.Type == TMessageType.Exception)
        {
          var tmp843 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp843;
        }

        var tmp844 = new InternalStructs.popupDialog_result();
        await tmp844.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp844.__isset.e)
        {
          throw tmp844.E;
        }
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_cancelPopupDialog(p, identifier, cancellationToken);
        await recv_cancelPopupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp845 = new InternalStructs.cancelPopupDialog_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp845.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelPopupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp846 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp846.Type == TMessageType.Exception)
        {
          var tmp847 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp847;
        }

        var tmp848 = new InternalStructs.cancelPopupDialog_result();
        await tmp848.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await send_insertInstructionAtSelectedLine(p, instruction, cancellationToken);
        return await recv_insertInstructionAtSelectedLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp849 = new InternalStructs.insertInstructionAtSelectedLine_args() {
          P = p,
          Instruction = instruction,
        };
        
        await tmp849.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_insertInstructionAtSelectedLine(CancellationToken cancellationToken = default)
      {
        
        var tmp850 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp850.Type == TMessageType.Exception)
        {
          var tmp851 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp851;
        }

        var tmp852 = new InternalStructs.insertInstructionAtSelectedLine_result();
        await tmp852.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp852.__isset.success)
        {
          return tmp852.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInstructionAtSelectedLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_displayScreen(p, identifier, cancellationToken);
        await recv_displayScreen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp853 = new InternalStructs.displayScreen_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp853.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayScreen(CancellationToken cancellationToken = default)
      {
        
        var tmp854 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp854.Type == TMessageType.Exception)
        {
          var tmp855 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp855;
        }

        var tmp856 = new InternalStructs.displayScreen_result();
        await tmp856.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await send_displayHelp(p, title, htmlContentFile, cancellationToken);
        await recv_displayHelp(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp857 = new InternalStructs.displayHelp_args() {
          P = p,
          Title = title,
          HtmlContentFile = htmlContentFile,
        };
        
        await tmp857.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayHelp(CancellationToken cancellationToken = default)
      {
        
        var tmp858 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp858.Type == TMessageType.Exception)
        {
          var tmp859 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp859;
        }

        var tmp860 = new InternalStructs.displayHelp_result();
        await tmp860.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["pendantVersion"] = pendantVersion_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["subscribeItemEventTypes"] = subscribeItemEventTypes_ProcessAsync;
        processMap_["unsubscribeItemEventTypes"] = unsubscribeItemEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["currentLanguage"] = currentLanguage_ProcessAsync;
        processMap_["currentLocale"] = currentLocale_ProcessAsync;
        processMap_["currentScreenName"] = currentScreenName_ProcessAsync;
        processMap_["registerYML"] = registerYML_ProcessAsync;
        processMap_["registerImageFile"] = registerImageFile_ProcessAsync;
        processMap_["registerImageData"] = registerImageData_ProcessAsync;
        processMap_["registerHTMLFile"] = registerHTMLFile_ProcessAsync;
        processMap_["registerHTMLData"] = registerHTMLData_ProcessAsync;
        processMap_["registerTranslationFile"] = registerTranslationFile_ProcessAsync;
        processMap_["registerTranslationData"] = registerTranslationData_ProcessAsync;
        processMap_["registerUtilityMenu"] = registerUtilityMenu_ProcessAsync;
        processMap_["unregisterUtilityMenu"] = unregisterUtilityMenu_ProcessAsync;
        processMap_["registerUtilityWindow"] = registerUtilityWindow_ProcessAsync;
        processMap_["registerUtilityWindowWithMenu"] = registerUtilityWindowWithMenu_ProcessAsync;
        processMap_["unregisterUtilityWindow"] = unregisterUtilityWindow_ProcessAsync;
        processMap_["openUtilityWindow"] = openUtilityWindow_ProcessAsync;
        processMap_["closeUtilityWindow"] = closeUtilityWindow_ProcessAsync;
        processMap_["collapseUtilityWindow"] = collapseUtilityWindow_ProcessAsync;
        processMap_["expandUtilityWindow"] = expandUtilityWindow_ProcessAsync;
        processMap_["refreshDynamicInstructions"] = refreshDynamicInstructions_ProcessAsync;
        processMap_["registerIntegration"] = registerIntegration_ProcessAsync;
        processMap_["unregisterIntegration"] = unregisterIntegration_ProcessAsync;
        processMap_["registerSwitch"] = registerSwitch_ProcessAsync;
        processMap_["property"] = property_ProcessAsync;
        processMap_["setProperty"] = setProperty_ProcessAsync;
        processMap_["setProperties"] = setProperties_ProcessAsync;
        processMap_["setChartConfig"] = setChartConfig_ProcessAsync;
        processMap_["getChartConfig"] = getChartConfig_ProcessAsync;
        processMap_["setChartData"] = setChartData_ProcessAsync;
        processMap_["getChartData"] = getChartData_ProcessAsync;
        processMap_["addChartKey"] = addChartKey_ProcessAsync;
        processMap_["removeChartKey"] = removeChartKey_ProcessAsync;
        processMap_["hideChartKey"] = hideChartKey_ProcessAsync;
        processMap_["appendChartPoints"] = appendChartPoints_ProcessAsync;
        processMap_["incrementChartKey"] = incrementChartKey_ProcessAsync;
        processMap_["exportChartImage"] = exportChartImage_ProcessAsync;
        processMap_["exportChartImageData"] = exportChartImageData_ProcessAsync;
        processMap_["notice"] = notice_ProcessAsync;
        processMap_["dispNotice"] = dispNotice_ProcessAsync;
        processMap_["error"] = error_ProcessAsync;
        processMap_["popupDialog"] = popupDialog_ProcessAsync;
        processMap_["cancelPopupDialog"] = cancelPopupDialog_ProcessAsync;
        processMap_["insertInstructionAtSelectedLine"] = insertInstructionAtSelectedLine_ProcessAsync;
        processMap_["displayScreen"] = displayScreen_ProcessAsync;
        processMap_["displayHelp"] = displayHelp_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task pendantVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp861 = new InternalStructs.pendantVersion_args();
        await tmp861.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp862 = new InternalStructs.pendantVersion_result();
        try
        {
          tmp862.Success = await _iAsync.pendantVersion(tmp861.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp862.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp863)
        {
          var tmp864 = $"Error occurred in {GetType().FullName}: {tmp863.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp863, tmp864);
          else
            Console.Error.WriteLine(tmp864);
          var tmp865 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp865.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp866 = new InternalStructs.subscribeEventTypes_args();
        await tmp866.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp867 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp866.P, tmp866.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp867.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp868)
        {
          var tmp869 = $"Error occurred in {GetType().FullName}: {tmp868.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp868, tmp869);
          else
            Console.Error.WriteLine(tmp869);
          var tmp870 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp870.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp871 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp871.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp872 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp871.P, tmp871.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp872.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp873)
        {
          var tmp874 = $"Error occurred in {GetType().FullName}: {tmp873.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp873, tmp874);
          else
            Console.Error.WriteLine(tmp874);
          var tmp875 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp875.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp876 = new InternalStructs.subscribeItemEventTypes_args();
        await tmp876.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp877 = new InternalStructs.subscribeItemEventTypes_result();
        try
        {
          await _iAsync.subscribeItemEventTypes(tmp876.P, tmp876.ItemIDs, tmp876.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp877.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp878)
        {
          var tmp879 = $"Error occurred in {GetType().FullName}: {tmp878.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp878, tmp879);
          else
            Console.Error.WriteLine(tmp879);
          var tmp880 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp880.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp881 = new InternalStructs.unsubscribeItemEventTypes_args();
        await tmp881.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp882 = new InternalStructs.unsubscribeItemEventTypes_result();
        try
        {
          await _iAsync.unsubscribeItemEventTypes(tmp881.P, tmp881.ItemIDs, tmp881.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp882.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp883)
        {
          var tmp884 = $"Error occurred in {GetType().FullName}: {tmp883.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp883, tmp884);
          else
            Console.Error.WriteLine(tmp884);
          var tmp885 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp885.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp886 = new InternalStructs.events_args();
        await tmp886.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp887 = new InternalStructs.events_result();
        try
        {
          tmp887.Success = await _iAsync.events(tmp886.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp887.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp888)
        {
          var tmp889 = $"Error occurred in {GetType().FullName}: {tmp888.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp888, tmp889);
          else
            Console.Error.WriteLine(tmp889);
          var tmp890 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp890.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLanguage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp891 = new InternalStructs.currentLanguage_args();
        await tmp891.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp892 = new InternalStructs.currentLanguage_result();
        try
        {
          tmp892.Success = await _iAsync.currentLanguage(tmp891.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp892.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp893)
        {
          var tmp894 = $"Error occurred in {GetType().FullName}: {tmp893.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp893, tmp894);
          else
            Console.Error.WriteLine(tmp894);
          var tmp895 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Exception, seqid), cancellationToken);
          await tmp895.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLocale_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp896 = new InternalStructs.currentLocale_args();
        await tmp896.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp897 = new InternalStructs.currentLocale_result();
        try
        {
          tmp897.Success = await _iAsync.currentLocale(tmp896.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Reply, seqid), cancellationToken); 
          await tmp897.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp898)
        {
          var tmp899 = $"Error occurred in {GetType().FullName}: {tmp898.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp898, tmp899);
          else
            Console.Error.WriteLine(tmp899);
          var tmp900 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Exception, seqid), cancellationToken);
          await tmp900.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentScreenName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp901 = new InternalStructs.currentScreenName_args();
        await tmp901.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp902 = new InternalStructs.currentScreenName_result();
        try
        {
          tmp902.Success = await _iAsync.currentScreenName(tmp901.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp902.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp903)
        {
          var tmp904 = $"Error occurred in {GetType().FullName}: {tmp903.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp903, tmp904);
          else
            Console.Error.WriteLine(tmp904);
          var tmp905 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Exception, seqid), cancellationToken);
          await tmp905.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerYML_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp906 = new InternalStructs.registerYML_args();
        await tmp906.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp907 = new InternalStructs.registerYML_result();
        try
        {
          tmp907.Success = await _iAsync.registerYML(tmp906.P, tmp906.YmlSource, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Reply, seqid), cancellationToken); 
          await tmp907.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp908)
        {
          var tmp909 = $"Error occurred in {GetType().FullName}: {tmp908.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp908, tmp909);
          else
            Console.Error.WriteLine(tmp909);
          var tmp910 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Exception, seqid), cancellationToken);
          await tmp910.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp911 = new InternalStructs.registerImageFile_args();
        await tmp911.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp912 = new InternalStructs.registerImageFile_result();
        try
        {
          try
          {
            await _iAsync.registerImageFile(tmp911.P, tmp911.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp913)
          {
            tmp912.E = tmp913;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp912.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp914)
        {
          var tmp915 = $"Error occurred in {GetType().FullName}: {tmp914.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp914, tmp915);
          else
            Console.Error.WriteLine(tmp915);
          var tmp916 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp916.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp917 = new InternalStructs.registerImageData_args();
        await tmp917.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp918 = new InternalStructs.registerImageData_result();
        try
        {
          try
          {
            await _iAsync.registerImageData(tmp917.P, tmp917.ImageData, tmp917.ImageName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp919)
          {
            tmp918.E = tmp919;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp918.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp920)
        {
          var tmp921 = $"Error occurred in {GetType().FullName}: {tmp920.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp920, tmp921);
          else
            Console.Error.WriteLine(tmp921);
          var tmp922 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp922.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp923 = new InternalStructs.registerHTMLFile_args();
        await tmp923.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp924 = new InternalStructs.registerHTMLFile_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLFile(tmp923.P, tmp923.HtmlFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp925)
          {
            tmp924.E = tmp925;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp924.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp926)
        {
          var tmp927 = $"Error occurred in {GetType().FullName}: {tmp926.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp926, tmp927);
          else
            Console.Error.WriteLine(tmp927);
          var tmp928 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp928.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp929 = new InternalStructs.registerHTMLData_args();
        await tmp929.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp930 = new InternalStructs.registerHTMLData_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLData(tmp929.P, tmp929.HtmlData, tmp929.HtmlName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp931)
          {
            tmp930.E = tmp931;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp930.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp932)
        {
          var tmp933 = $"Error occurred in {GetType().FullName}: {tmp932.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp932, tmp933);
          else
            Console.Error.WriteLine(tmp933);
          var tmp934 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Exception, seqid), cancellationToken);
          await tmp934.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp935 = new InternalStructs.registerTranslationFile_args();
        await tmp935.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp936 = new InternalStructs.registerTranslationFile_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationFile(tmp935.P, tmp935.Locale, tmp935.TranslationFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp937)
          {
            tmp936.E = tmp937;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp936.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp938)
        {
          var tmp939 = $"Error occurred in {GetType().FullName}: {tmp938.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp938, tmp939);
          else
            Console.Error.WriteLine(tmp939);
          var tmp940 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp940.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp941 = new InternalStructs.registerTranslationData_args();
        await tmp941.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp942 = new InternalStructs.registerTranslationData_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationData(tmp941.P, tmp941.Locale, tmp941.TranslationData, tmp941.TranslationName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp943)
          {
            tmp942.E = tmp943;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp942.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp944)
        {
          var tmp945 = $"Error occurred in {GetType().FullName}: {tmp944.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp944, tmp945);
          else
            Console.Error.WriteLine(tmp945);
          var tmp946 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp946.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp947 = new InternalStructs.registerUtilityMenu_args();
        await tmp947.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp948 = new InternalStructs.registerUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityMenu(tmp947.P, tmp947.MenuName, tmp947.MenuText, tmp947.MenuIcon, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp949)
          {
            tmp948.E = tmp949;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp948.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp950)
        {
          var tmp951 = $"Error occurred in {GetType().FullName}: {tmp950.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp950, tmp951);
          else
            Console.Error.WriteLine(tmp951);
          var tmp952 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp952.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp953 = new InternalStructs.unregisterUtilityMenu_args();
        await tmp953.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp954 = new InternalStructs.unregisterUtilityMenu_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityMenu(tmp953.P, tmp953.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp955)
          {
            tmp954.E = tmp955;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp954.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp956)
        {
          var tmp957 = $"Error occurred in {GetType().FullName}: {tmp956.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp956, tmp957);
          else
            Console.Error.WriteLine(tmp957);
          var tmp958 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp958.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp959 = new InternalStructs.registerUtilityWindow_args();
        await tmp959.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp960 = new InternalStructs.registerUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindow(tmp959.P, tmp959.Identifier, tmp959.ItemType, tmp959.MenuItemName, tmp959.WindowTitle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp961)
          {
            tmp960.E = tmp961;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp960.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp962)
        {
          var tmp963 = $"Error occurred in {GetType().FullName}: {tmp962.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp962, tmp963);
          else
            Console.Error.WriteLine(tmp963);
          var tmp964 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp964.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindowWithMenu_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp965 = new InternalStructs.registerUtilityWindowWithMenu_args();
        await tmp965.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp966 = new InternalStructs.registerUtilityWindowWithMenu_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindowWithMenu(tmp965.P, tmp965.Identifier, tmp965.ItemType, tmp965.MenuItemName, tmp965.WindowTitle, tmp965.MenuName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp967)
          {
            tmp966.E = tmp967;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Reply, seqid), cancellationToken); 
          await tmp966.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp968)
        {
          var tmp969 = $"Error occurred in {GetType().FullName}: {tmp968.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp968, tmp969);
          else
            Console.Error.WriteLine(tmp969);
          var tmp970 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindowWithMenu", TMessageType.Exception, seqid), cancellationToken);
          await tmp970.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp971 = new InternalStructs.unregisterUtilityWindow_args();
        await tmp971.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp972 = new InternalStructs.unregisterUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityWindow(tmp971.P, tmp971.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp973)
          {
            tmp972.E = tmp973;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp972.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp974)
        {
          var tmp975 = $"Error occurred in {GetType().FullName}: {tmp974.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp974, tmp975);
          else
            Console.Error.WriteLine(tmp975);
          var tmp976 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp976.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp977 = new InternalStructs.openUtilityWindow_args();
        await tmp977.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp978 = new InternalStructs.openUtilityWindow_result();
        try
        {
          await _iAsync.openUtilityWindow(tmp977.P, tmp977.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp978.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp979)
        {
          var tmp980 = $"Error occurred in {GetType().FullName}: {tmp979.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp979, tmp980);
          else
            Console.Error.WriteLine(tmp980);
          var tmp981 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp981.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp982 = new InternalStructs.closeUtilityWindow_args();
        await tmp982.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp983 = new InternalStructs.closeUtilityWindow_result();
        try
        {
          await _iAsync.closeUtilityWindow(tmp982.P, tmp982.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp983.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp984)
        {
          var tmp985 = $"Error occurred in {GetType().FullName}: {tmp984.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp984, tmp985);
          else
            Console.Error.WriteLine(tmp985);
          var tmp986 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp986.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp987 = new InternalStructs.collapseUtilityWindow_args();
        await tmp987.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp988 = new InternalStructs.collapseUtilityWindow_result();
        try
        {
          await _iAsync.collapseUtilityWindow(tmp987.P, tmp987.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp988.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp989)
        {
          var tmp990 = $"Error occurred in {GetType().FullName}: {tmp989.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp989, tmp990);
          else
            Console.Error.WriteLine(tmp990);
          var tmp991 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp991.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp992 = new InternalStructs.expandUtilityWindow_args();
        await tmp992.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp993 = new InternalStructs.expandUtilityWindow_result();
        try
        {
          await _iAsync.expandUtilityWindow(tmp992.P, tmp992.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp993.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp994)
        {
          var tmp995 = $"Error occurred in {GetType().FullName}: {tmp994.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp994, tmp995);
          else
            Console.Error.WriteLine(tmp995);
          var tmp996 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp996.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task refreshDynamicInstructions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp997 = new InternalStructs.refreshDynamicInstructions_args();
        await tmp997.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp998 = new InternalStructs.refreshDynamicInstructions_result();
        try
        {
          await _iAsync.refreshDynamicInstructions(tmp997.P, tmp997.InstructionType, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp998.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp999)
        {
          var tmp1000 = $"Error occurred in {GetType().FullName}: {tmp999.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp999, tmp1000);
          else
            Console.Error.WriteLine(tmp1000);
          var tmp1001 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("refreshDynamicInstructions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1001.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1002 = new InternalStructs.registerIntegration_args();
        await tmp1002.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1003 = new InternalStructs.registerIntegration_result();
        try
        {
          try
          {
            await _iAsync.registerIntegration(tmp1002.P, tmp1002.Identifier, tmp1002.IntegrationPoint, tmp1002.ItemType, tmp1002.ButtonLabel, tmp1002.ButtonImage, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1004)
          {
            tmp1003.E = tmp1004;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1003.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1005)
        {
          var tmp1006 = $"Error occurred in {GetType().FullName}: {tmp1005.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1005, tmp1006);
          else
            Console.Error.WriteLine(tmp1006);
          var tmp1007 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1007.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1008 = new InternalStructs.unregisterIntegration_args();
        await tmp1008.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1009 = new InternalStructs.unregisterIntegration_result();
        try
        {
          try
          {
            await _iAsync.unregisterIntegration(tmp1008.P, tmp1008.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1010)
          {
            tmp1009.E = tmp1010;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1009.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1011)
        {
          var tmp1012 = $"Error occurred in {GetType().FullName}: {tmp1011.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1011, tmp1012);
          else
            Console.Error.WriteLine(tmp1012);
          var tmp1013 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp1013.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerSwitch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1014 = new InternalStructs.registerSwitch_args();
        await tmp1014.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1015 = new InternalStructs.registerSwitch_result();
        try
        {
          try
          {
            await _iAsync.registerSwitch(tmp1014.P, tmp1014.Identifier, tmp1014.IntegrationPoint, tmp1014.SwitchLabel, tmp1014.OffPositionLabel, tmp1014.OnPositionLabel, tmp1014.DefaultState, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1016)
          {
            tmp1015.E = tmp1016;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1015.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1017)
        {
          var tmp1018 = $"Error occurred in {GetType().FullName}: {tmp1017.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1017, tmp1018);
          else
            Console.Error.WriteLine(tmp1018);
          var tmp1019 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerSwitch", TMessageType.Exception, seqid), cancellationToken);
          await tmp1019.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task property_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1020 = new InternalStructs.property_args();
        await tmp1020.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1021 = new InternalStructs.property_result();
        try
        {
          try
          {
            tmp1021.Success = await _iAsync.property(tmp1020.P, tmp1020.ItemID, tmp1020.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1022)
          {
            tmp1021.E = tmp1022;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1021.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1023)
        {
          var tmp1024 = $"Error occurred in {GetType().FullName}: {tmp1023.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1023, tmp1024);
          else
            Console.Error.WriteLine(tmp1024);
          var tmp1025 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Exception, seqid), cancellationToken);
          await tmp1025.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1026 = new InternalStructs.setProperty_args();
        await tmp1026.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1027 = new InternalStructs.setProperty_result();
        try
        {
          try
          {
            await _iAsync.setProperty(tmp1026.P, tmp1026.ItemID, tmp1026.Name, tmp1026.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1028)
          {
            tmp1027.E = tmp1028;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1027.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1029)
        {
          var tmp1030 = $"Error occurred in {GetType().FullName}: {tmp1029.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1029, tmp1030);
          else
            Console.Error.WriteLine(tmp1030);
          var tmp1031 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Exception, seqid), cancellationToken);
          await tmp1031.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1032 = new InternalStructs.setProperties_args();
        await tmp1032.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setProperties(tmp1032.P, tmp1032.PropValuesList, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1034)
        {
          var tmp1035 = $"Error occurred in {GetType().FullName}: {tmp1034.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1034, tmp1035);
          else
            Console.Error.WriteLine(tmp1035);
        }
      }

      public async global::System.Threading.Tasks.Task setChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1036 = new InternalStructs.setChartConfig_args();
        await tmp1036.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1037 = new InternalStructs.setChartConfig_result();
        try
        {
          try
          {
            await _iAsync.setChartConfig(tmp1036.P, tmp1036.ChartID, tmp1036.Config, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1038)
          {
            tmp1037.E = tmp1038;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1037.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1039)
        {
          var tmp1040 = $"Error occurred in {GetType().FullName}: {tmp1039.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1039, tmp1040);
          else
            Console.Error.WriteLine(tmp1040);
          var tmp1041 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1041.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1042 = new InternalStructs.getChartConfig_args();
        await tmp1042.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1043 = new InternalStructs.getChartConfig_result();
        try
        {
          try
          {
            tmp1043.Success = await _iAsync.getChartConfig(tmp1042.P, tmp1042.ChartID, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1044)
          {
            tmp1043.E = tmp1044;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1043.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1045)
        {
          var tmp1046 = $"Error occurred in {GetType().FullName}: {tmp1045.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1045, tmp1046);
          else
            Console.Error.WriteLine(tmp1046);
          var tmp1047 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1047.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1048 = new InternalStructs.setChartData_args();
        await tmp1048.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1049 = new InternalStructs.setChartData_result();
        try
        {
          try
          {
            await _iAsync.setChartData(tmp1048.P, tmp1048.ChartID, tmp1048.Dataset, tmp1048.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1050)
          {
            tmp1049.E = tmp1050;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1049.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1051)
        {
          var tmp1052 = $"Error occurred in {GetType().FullName}: {tmp1051.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1051, tmp1052);
          else
            Console.Error.WriteLine(tmp1052);
          var tmp1053 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1053.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1054 = new InternalStructs.getChartData_args();
        await tmp1054.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1055 = new InternalStructs.getChartData_result();
        try
        {
          try
          {
            tmp1055.Success = await _iAsync.getChartData(tmp1054.P, tmp1054.ChartID, tmp1054.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1056)
          {
            tmp1055.E = tmp1056;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1055.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1057)
        {
          var tmp1058 = $"Error occurred in {GetType().FullName}: {tmp1057.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1057, tmp1058);
          else
            Console.Error.WriteLine(tmp1058);
          var tmp1059 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1059.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1060 = new InternalStructs.addChartKey_args();
        await tmp1060.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1061 = new InternalStructs.addChartKey_result();
        try
        {
          try
          {
            await _iAsync.addChartKey(tmp1060.P, tmp1060.ChartID, tmp1060.Key, tmp1060.Data, tmp1060.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1062)
          {
            tmp1061.E = tmp1062;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1061.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1063)
        {
          var tmp1064 = $"Error occurred in {GetType().FullName}: {tmp1063.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1063, tmp1064);
          else
            Console.Error.WriteLine(tmp1064);
          var tmp1065 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1065.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1066 = new InternalStructs.removeChartKey_args();
        await tmp1066.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1067 = new InternalStructs.removeChartKey_result();
        try
        {
          try
          {
            await _iAsync.removeChartKey(tmp1066.P, tmp1066.ChartID, tmp1066.Key, tmp1066.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1068)
          {
            tmp1067.E = tmp1068;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1067.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1069)
        {
          var tmp1070 = $"Error occurred in {GetType().FullName}: {tmp1069.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1069, tmp1070);
          else
            Console.Error.WriteLine(tmp1070);
          var tmp1071 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1071.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task hideChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1072 = new InternalStructs.hideChartKey_args();
        await tmp1072.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1073 = new InternalStructs.hideChartKey_result();
        try
        {
          try
          {
            await _iAsync.hideChartKey(tmp1072.P, tmp1072.ChartID, tmp1072.Key, tmp1072.Hidden, tmp1072.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1074)
          {
            tmp1073.E = tmp1074;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1073.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1075)
        {
          var tmp1076 = $"Error occurred in {GetType().FullName}: {tmp1075.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1075, tmp1076);
          else
            Console.Error.WriteLine(tmp1076);
          var tmp1077 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1077.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendChartPoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1078 = new InternalStructs.appendChartPoints_args();
        await tmp1078.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.appendChartPoints(tmp1078.P, tmp1078.ChartID, tmp1078.Key, tmp1078.Points, tmp1078.Right, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1080)
        {
          var tmp1081 = $"Error occurred in {GetType().FullName}: {tmp1080.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1080, tmp1081);
          else
            Console.Error.WriteLine(tmp1081);
        }
      }

      public async global::System.Threading.Tasks.Task incrementChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1082 = new InternalStructs.incrementChartKey_args();
        await tmp1082.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1083 = new InternalStructs.incrementChartKey_result();
        try
        {
          try
          {
            await _iAsync.incrementChartKey(tmp1082.P, tmp1082.ChartID, tmp1082.Key, tmp1082.Val, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1084)
          {
            tmp1083.E = tmp1084;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1083.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1085)
        {
          var tmp1086 = $"Error occurred in {GetType().FullName}: {tmp1085.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1085, tmp1086);
          else
            Console.Error.WriteLine(tmp1086);
          var tmp1087 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1087.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1088 = new InternalStructs.exportChartImage_args();
        await tmp1088.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1089 = new InternalStructs.exportChartImage_result();
        try
        {
          try
          {
            tmp1089.Success = await _iAsync.exportChartImage(tmp1088.P, tmp1088.ChartID, tmp1088.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1090)
          {
            tmp1089.E = tmp1090;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1089.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1091)
        {
          var tmp1092 = $"Error occurred in {GetType().FullName}: {tmp1091.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1091, tmp1092);
          else
            Console.Error.WriteLine(tmp1092);
          var tmp1093 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Exception, seqid), cancellationToken);
          await tmp1093.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1094 = new InternalStructs.exportChartImageData_args();
        await tmp1094.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1095 = new InternalStructs.exportChartImageData_result();
        try
        {
          try
          {
            tmp1095.Success = await _iAsync.exportChartImageData(tmp1094.P, tmp1094.ChartID, tmp1094.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1096)
          {
            tmp1095.E = tmp1096;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1095.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1097)
        {
          var tmp1098 = $"Error occurred in {GetType().FullName}: {tmp1097.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1097, tmp1098);
          else
            Console.Error.WriteLine(tmp1098);
          var tmp1099 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1099.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1100 = new InternalStructs.notice_args();
        await tmp1100.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.notice(tmp1100.P, tmp1100.Title, tmp1100.Message, tmp1100.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1102)
        {
          var tmp1103 = $"Error occurred in {GetType().FullName}: {tmp1102.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1102, tmp1103);
          else
            Console.Error.WriteLine(tmp1103);
        }
      }

      public async global::System.Threading.Tasks.Task dispNotice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1104 = new InternalStructs.dispNotice_args();
        await tmp1104.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.dispNotice(tmp1104.P, tmp1104.Disposition, tmp1104.Title, tmp1104.Message, tmp1104.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1106)
        {
          var tmp1107 = $"Error occurred in {GetType().FullName}: {tmp1106.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1106, tmp1107);
          else
            Console.Error.WriteLine(tmp1107);
        }
      }

      public async global::System.Threading.Tasks.Task error_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1108 = new InternalStructs.error_args();
        await tmp1108.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.error(tmp1108.P, tmp1108.Title, tmp1108.Message, tmp1108.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1110)
        {
          var tmp1111 = $"Error occurred in {GetType().FullName}: {tmp1110.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1110, tmp1111);
          else
            Console.Error.WriteLine(tmp1111);
        }
      }

      public async global::System.Threading.Tasks.Task popupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1112 = new InternalStructs.popupDialog_args();
        await tmp1112.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1113 = new InternalStructs.popupDialog_result();
        try
        {
          try
          {
            await _iAsync.popupDialog(tmp1112.P, tmp1112.Identifier, tmp1112.Title, tmp1112.Message, tmp1112.PositiveOption, tmp1112.NegativeOption, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1114)
          {
            tmp1113.E = tmp1114;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1113.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1115)
        {
          var tmp1116 = $"Error occurred in {GetType().FullName}: {tmp1115.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1115, tmp1116);
          else
            Console.Error.WriteLine(tmp1116);
          var tmp1117 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1117.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1118 = new InternalStructs.cancelPopupDialog_args();
        await tmp1118.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1119 = new InternalStructs.cancelPopupDialog_result();
        try
        {
          await _iAsync.cancelPopupDialog(tmp1118.P, tmp1118.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1119.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1120)
        {
          var tmp1121 = $"Error occurred in {GetType().FullName}: {tmp1120.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1120, tmp1121);
          else
            Console.Error.WriteLine(tmp1121);
          var tmp1122 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1122.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertInstructionAtSelectedLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1123 = new InternalStructs.insertInstructionAtSelectedLine_args();
        await tmp1123.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1124 = new InternalStructs.insertInstructionAtSelectedLine_result();
        try
        {
          tmp1124.Success = await _iAsync.insertInstructionAtSelectedLine(tmp1123.P, tmp1123.Instruction, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1124.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1125)
        {
          var tmp1126 = $"Error occurred in {GetType().FullName}: {tmp1125.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1125, tmp1126);
          else
            Console.Error.WriteLine(tmp1126);
          var tmp1127 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp1127.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayScreen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1128 = new InternalStructs.displayScreen_args();
        await tmp1128.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1129 = new InternalStructs.displayScreen_result();
        try
        {
          await _iAsync.displayScreen(tmp1128.P, tmp1128.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1129.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1130)
        {
          var tmp1131 = $"Error occurred in {GetType().FullName}: {tmp1130.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1130, tmp1131);
          else
            Console.Error.WriteLine(tmp1131);
          var tmp1132 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Exception, seqid), cancellationToken);
          await tmp1132.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1133 = new InternalStructs.displayHelp_args();
        await tmp1133.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1134 = new InternalStructs.displayHelp_result();
        try
        {
          await _iAsync.displayHelp(tmp1133.P, tmp1133.Title, tmp1133.HtmlContentFile, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1134.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1135)
        {
          var tmp1136 = $"Error occurred in {GetType().FullName}: {tmp1135.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1135, tmp1136);
          else
            Console.Error.WriteLine(tmp1136);
          var tmp1137 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Exception, seqid), cancellationToken);
          await tmp1137.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class pendantVersion_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public pendantVersion_args()
        {
        }

        public pendantVersion_args DeepCopy()
        {
          var tmp1138 = new pendantVersion_args();
          if(__isset.p)
          {
            tmp1138.P = this.P;
          }
          tmp1138.__isset.p = this.__isset.p;
          return tmp1138;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1139 = new TStruct("pendantVersion_args");
            await oprot.WriteStructBeginAsync(tmp1139, cancellationToken);
            var tmp1140 = new TField();
            if(__isset.p)
            {
              tmp1140.Name = "p";
              tmp1140.Type = TType.I64;
              tmp1140.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1140, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1141 = new StringBuilder("pendantVersion_args(");
          int tmp1142 = 0;
          if(__isset.p)
          {
            if(0 < tmp1142++) { tmp1141.Append(", "); }
            tmp1141.Append("P: ");
            P.ToString(tmp1141);
          }
          tmp1141.Append(')');
          return tmp1141.ToString();
        }
      }


      public partial class pendantVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public pendantVersion_result()
        {
        }

        public pendantVersion_result DeepCopy()
        {
          var tmp1143 = new pendantVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp1143.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp1143.__isset.success = this.__isset.success;
          return tmp1143;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1144 = new TStruct("pendantVersion_result");
            await oprot.WriteStructBeginAsync(tmp1144, cancellationToken);
            var tmp1145 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1145.Name = "Success";
                tmp1145.Type = TType.Struct;
                tmp1145.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1145, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1146 = new StringBuilder("pendantVersion_result(");
          int tmp1147 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1147++) { tmp1146.Append(", "); }
            tmp1146.Append("Success: ");
            Success.ToString(tmp1146);
          }
          tmp1146.Append(')');
          return tmp1146.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp1148 = new subscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1148.P = this.P;
          }
          tmp1148.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1148.Types = this.Types.DeepCopy();
          }
          tmp1148.__isset.types = this.__isset.types;
          return tmp1148;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1149 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1149.Count);
                      for(int _i1150 = 0; _i1150 < _set1149.Count; ++_i1150)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1151;
                        _elem1151 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1151);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1152 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1152, cancellationToken);
            var tmp1153 = new TField();
            if(__isset.p)
            {
              tmp1153.Name = "p";
              tmp1153.Type = TType.I64;
              tmp1153.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1153, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1153.Name = "types";
              tmp1153.Type = TType.Set;
              tmp1153.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1153, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1154 in Types)
              {
                await oprot.WriteI32Async((int)_iter1154, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1155 = new StringBuilder("subscribeEventTypes_args(");
          int tmp1156 = 0;
          if(__isset.p)
          {
            if(0 < tmp1156++) { tmp1155.Append(", "); }
            tmp1155.Append("P: ");
            P.ToString(tmp1155);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1156++) { tmp1155.Append(", "); }
            tmp1155.Append("Types: ");
            Types.ToString(tmp1155);
          }
          tmp1155.Append(')');
          return tmp1155.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp1157 = new subscribeEventTypes_result();
          return tmp1157;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1158 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1158, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1159 = new StringBuilder("subscribeEventTypes_result(");
          tmp1159.Append(')');
          return tmp1159.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp1161 = new unsubscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1161.P = this.P;
          }
          tmp1161.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1161.Types = this.Types.DeepCopy();
          }
          tmp1161.__isset.types = this.__isset.types;
          return tmp1161;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1162 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1162.Count);
                      for(int _i1163 = 0; _i1163 < _set1162.Count; ++_i1163)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1164;
                        _elem1164 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1164);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1165 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1165, cancellationToken);
            var tmp1166 = new TField();
            if(__isset.p)
            {
              tmp1166.Name = "p";
              tmp1166.Type = TType.I64;
              tmp1166.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1166, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1166.Name = "types";
              tmp1166.Type = TType.Set;
              tmp1166.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1166, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1167 in Types)
              {
                await oprot.WriteI32Async((int)_iter1167, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1168 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp1169 = 0;
          if(__isset.p)
          {
            if(0 < tmp1169++) { tmp1168.Append(", "); }
            tmp1168.Append("P: ");
            P.ToString(tmp1168);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1169++) { tmp1168.Append(", "); }
            tmp1168.Append("Types: ");
            Types.ToString(tmp1168);
          }
          tmp1168.Append(')');
          return tmp1168.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp1170 = new unsubscribeEventTypes_result();
          return tmp1170;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1171 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1171, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1172 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp1172.Append(')');
          return tmp1172.ToString();
        }
      }


      public partial class subscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public subscribeItemEventTypes_args()
        {
        }

        public subscribeItemEventTypes_args DeepCopy()
        {
          var tmp1174 = new subscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1174.P = this.P;
          }
          tmp1174.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1174.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1174.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1174.Types = this.Types.DeepCopy();
          }
          tmp1174.__isset.types = this.__isset.types;
          return tmp1174;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1175 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1175.Count);
                      for(int _i1176 = 0; _i1176 < _set1175.Count; ++_i1176)
                      {
                        string _elem1177;
                        _elem1177 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1177);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1178 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1178.Count);
                      for(int _i1179 = 0; _i1179 < _set1178.Count; ++_i1179)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1180;
                        _elem1180 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1180);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1181 = new TStruct("subscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1181, cancellationToken);
            var tmp1182 = new TField();
            if(__isset.p)
            {
              tmp1182.Name = "p";
              tmp1182.Type = TType.I64;
              tmp1182.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1182, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1182.Name = "itemIDs";
              tmp1182.Type = TType.Set;
              tmp1182.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1182, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1183 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1183, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1182.Name = "types";
              tmp1182.Type = TType.Set;
              tmp1182.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1182, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1184 in Types)
              {
                await oprot.WriteI32Async((int)_iter1184, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1185 = new StringBuilder("subscribeItemEventTypes_args(");
          int tmp1186 = 0;
          if(__isset.p)
          {
            if(0 < tmp1186++) { tmp1185.Append(", "); }
            tmp1185.Append("P: ");
            P.ToString(tmp1185);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1186++) { tmp1185.Append(", "); }
            tmp1185.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1185);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1186++) { tmp1185.Append(", "); }
            tmp1185.Append("Types: ");
            Types.ToString(tmp1185);
          }
          tmp1185.Append(')');
          return tmp1185.ToString();
        }
      }


      public partial class subscribeItemEventTypes_result : TBase
      {

        public subscribeItemEventTypes_result()
        {
        }

        public subscribeItemEventTypes_result DeepCopy()
        {
          var tmp1187 = new subscribeItemEventTypes_result();
          return tmp1187;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1188 = new TStruct("subscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1188, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1189 = new StringBuilder("subscribeItemEventTypes_result(");
          tmp1189.Append(')');
          return tmp1189.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public unsubscribeItemEventTypes_args()
        {
        }

        public unsubscribeItemEventTypes_args DeepCopy()
        {
          var tmp1191 = new unsubscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1191.P = this.P;
          }
          tmp1191.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1191.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1191.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1191.Types = this.Types.DeepCopy();
          }
          tmp1191.__isset.types = this.__isset.types;
          return tmp1191;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1192 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1192.Count);
                      for(int _i1193 = 0; _i1193 < _set1192.Count; ++_i1193)
                      {
                        string _elem1194;
                        _elem1194 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1194);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1195 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1195.Count);
                      for(int _i1196 = 0; _i1196 < _set1195.Count; ++_i1196)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1197;
                        _elem1197 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1197);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1198 = new TStruct("unsubscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1198, cancellationToken);
            var tmp1199 = new TField();
            if(__isset.p)
            {
              tmp1199.Name = "p";
              tmp1199.Type = TType.I64;
              tmp1199.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1199, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1199.Name = "itemIDs";
              tmp1199.Type = TType.Set;
              tmp1199.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1199, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1200 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1200, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1199.Name = "types";
              tmp1199.Type = TType.Set;
              tmp1199.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1199, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1201 in Types)
              {
                await oprot.WriteI32Async((int)_iter1201, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1202 = new StringBuilder("unsubscribeItemEventTypes_args(");
          int tmp1203 = 0;
          if(__isset.p)
          {
            if(0 < tmp1203++) { tmp1202.Append(", "); }
            tmp1202.Append("P: ");
            P.ToString(tmp1202);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1203++) { tmp1202.Append(", "); }
            tmp1202.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1202);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1203++) { tmp1202.Append(", "); }
            tmp1202.Append("Types: ");
            Types.ToString(tmp1202);
          }
          tmp1202.Append(')');
          return tmp1202.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_result : TBase
      {

        public unsubscribeItemEventTypes_result()
        {
        }

        public unsubscribeItemEventTypes_result DeepCopy()
        {
          var tmp1204 = new unsubscribeItemEventTypes_result();
          return tmp1204;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1205 = new TStruct("unsubscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1205, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1206 = new StringBuilder("unsubscribeItemEventTypes_result(");
          tmp1206.Append(')');
          return tmp1206.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp1208 = new events_args();
          if(__isset.p)
          {
            tmp1208.P = this.P;
          }
          tmp1208.__isset.p = this.__isset.p;
          return tmp1208;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1209 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp1209, cancellationToken);
            var tmp1210 = new TField();
            if(__isset.p)
            {
              tmp1210.Name = "p";
              tmp1210.Type = TType.I64;
              tmp1210.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1210, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1211 = new StringBuilder("events_args(");
          int tmp1212 = 0;
          if(__isset.p)
          {
            if(0 < tmp1212++) { tmp1211.Append(", "); }
            tmp1211.Append("P: ");
            P.ToString(tmp1211);
          }
          tmp1211.Append(')');
          return tmp1211.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.PendantEvent> _success;

        public List<global::Yaskawa.Ext.API.PendantEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp1213 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp1213.Success = this.Success.DeepCopy();
          }
          tmp1213.__isset.success = this.__isset.success;
          return tmp1213;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1214 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.PendantEvent>(_list1214.Count);
                      for(int _i1215 = 0; _i1215 < _list1214.Count; ++_i1215)
                      {
                        global::Yaskawa.Ext.API.PendantEvent _elem1216;
                        _elem1216 = new global::Yaskawa.Ext.API.PendantEvent();
                        await _elem1216.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1216);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1217 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp1217, cancellationToken);
            var tmp1218 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1218.Name = "Success";
                tmp1218.Type = TType.List;
                tmp1218.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1218, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.PendantEvent _iter1219 in Success)
                {
                  await _iter1219.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1220 = new StringBuilder("events_result(");
          int tmp1221 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1221++) { tmp1220.Append(", "); }
            tmp1220.Append("Success: ");
            Success.ToString(tmp1220);
          }
          tmp1220.Append(')');
          return tmp1220.ToString();
        }
      }


      public partial class currentLanguage_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLanguage_args()
        {
        }

        public currentLanguage_args DeepCopy()
        {
          var tmp1222 = new currentLanguage_args();
          if(__isset.p)
          {
            tmp1222.P = this.P;
          }
          tmp1222.__isset.p = this.__isset.p;
          return tmp1222;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1223 = new TStruct("currentLanguage_args");
            await oprot.WriteStructBeginAsync(tmp1223, cancellationToken);
            var tmp1224 = new TField();
            if(__isset.p)
            {
              tmp1224.Name = "p";
              tmp1224.Type = TType.I64;
              tmp1224.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1225 = new StringBuilder("currentLanguage_args(");
          int tmp1226 = 0;
          if(__isset.p)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("P: ");
            P.ToString(tmp1225);
          }
          tmp1225.Append(')');
          return tmp1225.ToString();
        }
      }


      public partial class currentLanguage_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLanguage_result()
        {
        }

        public currentLanguage_result DeepCopy()
        {
          var tmp1227 = new currentLanguage_result();
          if((Success != null) && __isset.success)
          {
            tmp1227.Success = this.Success;
          }
          tmp1227.__isset.success = this.__isset.success;
          return tmp1227;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1228 = new TStruct("currentLanguage_result");
            await oprot.WriteStructBeginAsync(tmp1228, cancellationToken);
            var tmp1229 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1229.Name = "Success";
                tmp1229.Type = TType.String;
                tmp1229.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1229, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1230 = new StringBuilder("currentLanguage_result(");
          int tmp1231 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1231++) { tmp1230.Append(", "); }
            tmp1230.Append("Success: ");
            Success.ToString(tmp1230);
          }
          tmp1230.Append(')');
          return tmp1230.ToString();
        }
      }


      public partial class currentLocale_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLocale_args()
        {
        }

        public currentLocale_args DeepCopy()
        {
          var tmp1232 = new currentLocale_args();
          if(__isset.p)
          {
            tmp1232.P = this.P;
          }
          tmp1232.__isset.p = this.__isset.p;
          return tmp1232;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1233 = new TStruct("currentLocale_args");
            await oprot.WriteStructBeginAsync(tmp1233, cancellationToken);
            var tmp1234 = new TField();
            if(__isset.p)
            {
              tmp1234.Name = "p";
              tmp1234.Type = TType.I64;
              tmp1234.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1234, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1235 = new StringBuilder("currentLocale_args(");
          int tmp1236 = 0;
          if(__isset.p)
          {
            if(0 < tmp1236++) { tmp1235.Append(", "); }
            tmp1235.Append("P: ");
            P.ToString(tmp1235);
          }
          tmp1235.Append(')');
          return tmp1235.ToString();
        }
      }


      public partial class currentLocale_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLocale_result()
        {
        }

        public currentLocale_result DeepCopy()
        {
          var tmp1237 = new currentLocale_result();
          if((Success != null) && __isset.success)
          {
            tmp1237.Success = this.Success;
          }
          tmp1237.__isset.success = this.__isset.success;
          return tmp1237;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1238 = new TStruct("currentLocale_result");
            await oprot.WriteStructBeginAsync(tmp1238, cancellationToken);
            var tmp1239 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1239.Name = "Success";
                tmp1239.Type = TType.String;
                tmp1239.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1239, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1240 = new StringBuilder("currentLocale_result(");
          int tmp1241 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1241++) { tmp1240.Append(", "); }
            tmp1240.Append("Success: ");
            Success.ToString(tmp1240);
          }
          tmp1240.Append(')');
          return tmp1240.ToString();
        }
      }


      public partial class currentScreenName_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentScreenName_args()
        {
        }

        public currentScreenName_args DeepCopy()
        {
          var tmp1242 = new currentScreenName_args();
          if(__isset.p)
          {
            tmp1242.P = this.P;
          }
          tmp1242.__isset.p = this.__isset.p;
          return tmp1242;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1243 = new TStruct("currentScreenName_args");
            await oprot.WriteStructBeginAsync(tmp1243, cancellationToken);
            var tmp1244 = new TField();
            if(__isset.p)
            {
              tmp1244.Name = "p";
              tmp1244.Type = TType.I64;
              tmp1244.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1245 = new StringBuilder("currentScreenName_args(");
          int tmp1246 = 0;
          if(__isset.p)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("P: ");
            P.ToString(tmp1245);
          }
          tmp1245.Append(')');
          return tmp1245.ToString();
        }
      }


      public partial class currentScreenName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentScreenName_result()
        {
        }

        public currentScreenName_result DeepCopy()
        {
          var tmp1247 = new currentScreenName_result();
          if((Success != null) && __isset.success)
          {
            tmp1247.Success = this.Success;
          }
          tmp1247.__isset.success = this.__isset.success;
          return tmp1247;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1248 = new TStruct("currentScreenName_result");
            await oprot.WriteStructBeginAsync(tmp1248, cancellationToken);
            var tmp1249 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1249.Name = "Success";
                tmp1249.Type = TType.String;
                tmp1249.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1250 = new StringBuilder("currentScreenName_result(");
          int tmp1251 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("Success: ");
            Success.ToString(tmp1250);
          }
          tmp1250.Append(')');
          return tmp1250.ToString();
        }
      }


      public partial class registerYML_args : TBase
      {
        private long _p;
        private string _ymlSource;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string YmlSource
        {
          get
          {
            return _ymlSource;
          }
          set
          {
            __isset.ymlSource = true;
            this._ymlSource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ymlSource;
        }

        public registerYML_args()
        {
        }

        public registerYML_args DeepCopy()
        {
          var tmp1252 = new registerYML_args();
          if(__isset.p)
          {
            tmp1252.P = this.P;
          }
          tmp1252.__isset.p = this.__isset.p;
          if((YmlSource != null) && __isset.ymlSource)
          {
            tmp1252.YmlSource = this.YmlSource;
          }
          tmp1252.__isset.ymlSource = this.__isset.ymlSource;
          return tmp1252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    YmlSource = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1253 = new TStruct("registerYML_args");
            await oprot.WriteStructBeginAsync(tmp1253, cancellationToken);
            var tmp1254 = new TField();
            if(__isset.p)
            {
              tmp1254.Name = "p";
              tmp1254.Type = TType.I64;
              tmp1254.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              tmp1254.Name = "ymlSource";
              tmp1254.Type = TType.String;
              tmp1254.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteStringAsync(YmlSource, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ymlSource == other.__isset.ymlSource) && ((!__isset.ymlSource) || (global::System.Object.Equals(YmlSource, other.YmlSource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              hashcode = (hashcode * 397) + YmlSource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1255 = new StringBuilder("registerYML_args(");
          int tmp1256 = 0;
          if(__isset.p)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("P: ");
            P.ToString(tmp1255);
          }
          if((YmlSource != null) && __isset.ymlSource)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("YmlSource: ");
            YmlSource.ToString(tmp1255);
          }
          tmp1255.Append(')');
          return tmp1255.ToString();
        }
      }


      public partial class registerYML_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public registerYML_result()
        {
        }

        public registerYML_result DeepCopy()
        {
          var tmp1257 = new registerYML_result();
          if((Success != null) && __isset.success)
          {
            tmp1257.Success = this.Success.DeepCopy();
          }
          tmp1257.__isset.success = this.__isset.success;
          return tmp1257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1258 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list1258.Count);
                      for(int _i1259 = 0; _i1259 < _list1258.Count; ++_i1259)
                      {
                        string _elem1260;
                        _elem1260 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem1260);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1261 = new TStruct("registerYML_result");
            await oprot.WriteStructBeginAsync(tmp1261, cancellationToken);
            var tmp1262 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1262.Name = "Success";
                tmp1262.Type = TType.List;
                tmp1262.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1262, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter1263 in Success)
                {
                  await oprot.WriteStringAsync(_iter1263, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1264 = new StringBuilder("registerYML_result(");
          int tmp1265 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1265++) { tmp1264.Append(", "); }
            tmp1264.Append("Success: ");
            Success.ToString(tmp1264);
          }
          tmp1264.Append(')');
          return tmp1264.ToString();
        }
      }


      public partial class registerImageFile_args : TBase
      {
        private long _p;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageFileName;
        }

        public registerImageFile_args()
        {
        }

        public registerImageFile_args DeepCopy()
        {
          var tmp1266 = new registerImageFile_args();
          if(__isset.p)
          {
            tmp1266.P = this.P;
          }
          tmp1266.__isset.p = this.__isset.p;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1266.ImageFileName = this.ImageFileName;
          }
          tmp1266.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1266;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1267 = new TStruct("registerImageFile_args");
            await oprot.WriteStructBeginAsync(tmp1267, cancellationToken);
            var tmp1268 = new TField();
            if(__isset.p)
            {
              tmp1268.Name = "p";
              tmp1268.Type = TType.I64;
              tmp1268.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1268, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1268.Name = "imageFileName";
              tmp1268.Type = TType.String;
              tmp1268.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1268, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1269 = new StringBuilder("registerImageFile_args(");
          int tmp1270 = 0;
          if(__isset.p)
          {
            if(0 < tmp1270++) { tmp1269.Append(", "); }
            tmp1269.Append("P: ");
            P.ToString(tmp1269);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1270++) { tmp1269.Append(", "); }
            tmp1269.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1269);
          }
          tmp1269.Append(')');
          return tmp1269.ToString();
        }
      }


      public partial class registerImageFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageFile_result()
        {
        }

        public registerImageFile_result DeepCopy()
        {
          var tmp1271 = new registerImageFile_result();
          if((E != null) && __isset.e)
          {
            tmp1271.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1271.__isset.e = this.__isset.e;
          return tmp1271;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1272 = new TStruct("registerImageFile_result");
            await oprot.WriteStructBeginAsync(tmp1272, cancellationToken);
            var tmp1273 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1273.Name = "E";
                tmp1273.Type = TType.Struct;
                tmp1273.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1273, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1274 = new StringBuilder("registerImageFile_result(");
          int tmp1275 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1275++) { tmp1274.Append(", "); }
            tmp1274.Append("E: ");
            E.ToString(tmp1274);
          }
          tmp1274.Append(')');
          return tmp1274.ToString();
        }
      }


      public partial class registerImageData_args : TBase
      {
        private long _p;
        private byte[] _imageData;
        private string _imageName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] ImageData
        {
          get
          {
            return _imageData;
          }
          set
          {
            __isset.imageData = true;
            this._imageData = value;
          }
        }

        public string ImageName
        {
          get
          {
            return _imageName;
          }
          set
          {
            __isset.imageName = true;
            this._imageName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageData;
          public bool imageName;
        }

        public registerImageData_args()
        {
        }

        public registerImageData_args DeepCopy()
        {
          var tmp1276 = new registerImageData_args();
          if(__isset.p)
          {
            tmp1276.P = this.P;
          }
          tmp1276.__isset.p = this.__isset.p;
          if((ImageData != null) && __isset.imageData)
          {
            tmp1276.ImageData = this.ImageData.ToArray();
          }
          tmp1276.__isset.imageData = this.__isset.imageData;
          if((ImageName != null) && __isset.imageName)
          {
            tmp1276.ImageName = this.ImageName;
          }
          tmp1276.__isset.imageName = this.__isset.imageName;
          return tmp1276;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1277 = new TStruct("registerImageData_args");
            await oprot.WriteStructBeginAsync(tmp1277, cancellationToken);
            var tmp1278 = new TField();
            if(__isset.p)
            {
              tmp1278.Name = "p";
              tmp1278.Type = TType.I64;
              tmp1278.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1278, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageData != null) && __isset.imageData)
            {
              tmp1278.Name = "imageData";
              tmp1278.Type = TType.String;
              tmp1278.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1278, cancellationToken);
              await oprot.WriteBinaryAsync(ImageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageName != null) && __isset.imageName)
            {
              tmp1278.Name = "imageName";
              tmp1278.Type = TType.String;
              tmp1278.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1278, cancellationToken);
              await oprot.WriteStringAsync(ImageName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageData == other.__isset.imageData) && ((!__isset.imageData) || (TCollections.Equals(ImageData, other.ImageData))))
            && ((__isset.imageName == other.__isset.imageName) && ((!__isset.imageName) || (global::System.Object.Equals(ImageName, other.ImageName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageData != null) && __isset.imageData)
            {
              hashcode = (hashcode * 397) + ImageData.GetHashCode();
            }
            if((ImageName != null) && __isset.imageName)
            {
              hashcode = (hashcode * 397) + ImageName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1279 = new StringBuilder("registerImageData_args(");
          int tmp1280 = 0;
          if(__isset.p)
          {
            if(0 < tmp1280++) { tmp1279.Append(", "); }
            tmp1279.Append("P: ");
            P.ToString(tmp1279);
          }
          if((ImageData != null) && __isset.imageData)
          {
            if(0 < tmp1280++) { tmp1279.Append(", "); }
            tmp1279.Append("ImageData: ");
            ImageData.ToString(tmp1279);
          }
          if((ImageName != null) && __isset.imageName)
          {
            if(0 < tmp1280++) { tmp1279.Append(", "); }
            tmp1279.Append("ImageName: ");
            ImageName.ToString(tmp1279);
          }
          tmp1279.Append(')');
          return tmp1279.ToString();
        }
      }


      public partial class registerImageData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageData_result()
        {
        }

        public registerImageData_result DeepCopy()
        {
          var tmp1281 = new registerImageData_result();
          if((E != null) && __isset.e)
          {
            tmp1281.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1281.__isset.e = this.__isset.e;
          return tmp1281;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1282 = new TStruct("registerImageData_result");
            await oprot.WriteStructBeginAsync(tmp1282, cancellationToken);
            var tmp1283 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1283.Name = "E";
                tmp1283.Type = TType.Struct;
                tmp1283.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1283, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1284 = new StringBuilder("registerImageData_result(");
          int tmp1285 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1285++) { tmp1284.Append(", "); }
            tmp1284.Append("E: ");
            E.ToString(tmp1284);
          }
          tmp1284.Append(')');
          return tmp1284.ToString();
        }
      }


      public partial class registerHTMLFile_args : TBase
      {
        private long _p;
        private string _htmlFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string HtmlFileName
        {
          get
          {
            return _htmlFileName;
          }
          set
          {
            __isset.htmlFileName = true;
            this._htmlFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlFileName;
        }

        public registerHTMLFile_args()
        {
        }

        public registerHTMLFile_args DeepCopy()
        {
          var tmp1286 = new registerHTMLFile_args();
          if(__isset.p)
          {
            tmp1286.P = this.P;
          }
          tmp1286.__isset.p = this.__isset.p;
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            tmp1286.HtmlFileName = this.HtmlFileName;
          }
          tmp1286.__isset.htmlFileName = this.__isset.htmlFileName;
          return tmp1286;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1287 = new TStruct("registerHTMLFile_args");
            await oprot.WriteStructBeginAsync(tmp1287, cancellationToken);
            var tmp1288 = new TField();
            if(__isset.p)
            {
              tmp1288.Name = "p";
              tmp1288.Type = TType.I64;
              tmp1288.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1288, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              tmp1288.Name = "htmlFileName";
              tmp1288.Type = TType.String;
              tmp1288.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1288, cancellationToken);
              await oprot.WriteStringAsync(HtmlFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlFileName == other.__isset.htmlFileName) && ((!__isset.htmlFileName) || (global::System.Object.Equals(HtmlFileName, other.HtmlFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              hashcode = (hashcode * 397) + HtmlFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1289 = new StringBuilder("registerHTMLFile_args(");
          int tmp1290 = 0;
          if(__isset.p)
          {
            if(0 < tmp1290++) { tmp1289.Append(", "); }
            tmp1289.Append("P: ");
            P.ToString(tmp1289);
          }
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            if(0 < tmp1290++) { tmp1289.Append(", "); }
            tmp1289.Append("HtmlFileName: ");
            HtmlFileName.ToString(tmp1289);
          }
          tmp1289.Append(')');
          return tmp1289.ToString();
        }
      }


      public partial class registerHTMLFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLFile_result()
        {
        }

        public registerHTMLFile_result DeepCopy()
        {
          var tmp1291 = new registerHTMLFile_result();
          if((E != null) && __isset.e)
          {
            tmp1291.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1291.__isset.e = this.__isset.e;
          return tmp1291;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1292 = new TStruct("registerHTMLFile_result");
            await oprot.WriteStructBeginAsync(tmp1292, cancellationToken);
            var tmp1293 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1293.Name = "E";
                tmp1293.Type = TType.Struct;
                tmp1293.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1293, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1294 = new StringBuilder("registerHTMLFile_result(");
          int tmp1295 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1295++) { tmp1294.Append(", "); }
            tmp1294.Append("E: ");
            E.ToString(tmp1294);
          }
          tmp1294.Append(')');
          return tmp1294.ToString();
        }
      }


      public partial class registerHTMLData_args : TBase
      {
        private long _p;
        private byte[] _htmlData;
        private string _htmlName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] HtmlData
        {
          get
          {
            return _htmlData;
          }
          set
          {
            __isset.htmlData = true;
            this._htmlData = value;
          }
        }

        public string HtmlName
        {
          get
          {
            return _htmlName;
          }
          set
          {
            __isset.htmlName = true;
            this._htmlName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlData;
          public bool htmlName;
        }

        public registerHTMLData_args()
        {
        }

        public registerHTMLData_args DeepCopy()
        {
          var tmp1296 = new registerHTMLData_args();
          if(__isset.p)
          {
            tmp1296.P = this.P;
          }
          tmp1296.__isset.p = this.__isset.p;
          if((HtmlData != null) && __isset.htmlData)
          {
            tmp1296.HtmlData = this.HtmlData.ToArray();
          }
          tmp1296.__isset.htmlData = this.__isset.htmlData;
          if((HtmlName != null) && __isset.htmlName)
          {
            tmp1296.HtmlName = this.HtmlName;
          }
          tmp1296.__isset.htmlName = this.__isset.htmlName;
          return tmp1296;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1297 = new TStruct("registerHTMLData_args");
            await oprot.WriteStructBeginAsync(tmp1297, cancellationToken);
            var tmp1298 = new TField();
            if(__isset.p)
            {
              tmp1298.Name = "p";
              tmp1298.Type = TType.I64;
              tmp1298.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1298, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              tmp1298.Name = "htmlData";
              tmp1298.Type = TType.String;
              tmp1298.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1298, cancellationToken);
              await oprot.WriteBinaryAsync(HtmlData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              tmp1298.Name = "htmlName";
              tmp1298.Type = TType.String;
              tmp1298.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1298, cancellationToken);
              await oprot.WriteStringAsync(HtmlName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlData == other.__isset.htmlData) && ((!__isset.htmlData) || (TCollections.Equals(HtmlData, other.HtmlData))))
            && ((__isset.htmlName == other.__isset.htmlName) && ((!__isset.htmlName) || (global::System.Object.Equals(HtmlName, other.HtmlName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              hashcode = (hashcode * 397) + HtmlData.GetHashCode();
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              hashcode = (hashcode * 397) + HtmlName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1299 = new StringBuilder("registerHTMLData_args(");
          int tmp1300 = 0;
          if(__isset.p)
          {
            if(0 < tmp1300++) { tmp1299.Append(", "); }
            tmp1299.Append("P: ");
            P.ToString(tmp1299);
          }
          if((HtmlData != null) && __isset.htmlData)
          {
            if(0 < tmp1300++) { tmp1299.Append(", "); }
            tmp1299.Append("HtmlData: ");
            HtmlData.ToString(tmp1299);
          }
          if((HtmlName != null) && __isset.htmlName)
          {
            if(0 < tmp1300++) { tmp1299.Append(", "); }
            tmp1299.Append("HtmlName: ");
            HtmlName.ToString(tmp1299);
          }
          tmp1299.Append(')');
          return tmp1299.ToString();
        }
      }


      public partial class registerHTMLData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLData_result()
        {
        }

        public registerHTMLData_result DeepCopy()
        {
          var tmp1301 = new registerHTMLData_result();
          if((E != null) && __isset.e)
          {
            tmp1301.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1301.__isset.e = this.__isset.e;
          return tmp1301;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1302 = new TStruct("registerHTMLData_result");
            await oprot.WriteStructBeginAsync(tmp1302, cancellationToken);
            var tmp1303 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1303.Name = "E";
                tmp1303.Type = TType.Struct;
                tmp1303.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1303, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1304 = new StringBuilder("registerHTMLData_result(");
          int tmp1305 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1305++) { tmp1304.Append(", "); }
            tmp1304.Append("E: ");
            E.ToString(tmp1304);
          }
          tmp1304.Append(')');
          return tmp1304.ToString();
        }
      }


      public partial class registerTranslationFile_args : TBase
      {
        private long _p;
        private string _locale;
        private string _translationFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public string TranslationFileName
        {
          get
          {
            return _translationFileName;
          }
          set
          {
            __isset.translationFileName = true;
            this._translationFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationFileName;
        }

        public registerTranslationFile_args()
        {
        }

        public registerTranslationFile_args DeepCopy()
        {
          var tmp1306 = new registerTranslationFile_args();
          if(__isset.p)
          {
            tmp1306.P = this.P;
          }
          tmp1306.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1306.Locale = this.Locale;
          }
          tmp1306.__isset.locale = this.__isset.locale;
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            tmp1306.TranslationFileName = this.TranslationFileName;
          }
          tmp1306.__isset.translationFileName = this.__isset.translationFileName;
          return tmp1306;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1307 = new TStruct("registerTranslationFile_args");
            await oprot.WriteStructBeginAsync(tmp1307, cancellationToken);
            var tmp1308 = new TField();
            if(__isset.p)
            {
              tmp1308.Name = "p";
              tmp1308.Type = TType.I64;
              tmp1308.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1308, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1308.Name = "locale";
              tmp1308.Type = TType.String;
              tmp1308.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1308, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              tmp1308.Name = "translationFileName";
              tmp1308.Type = TType.String;
              tmp1308.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1308, cancellationToken);
              await oprot.WriteStringAsync(TranslationFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationFileName == other.__isset.translationFileName) && ((!__isset.translationFileName) || (global::System.Object.Equals(TranslationFileName, other.TranslationFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              hashcode = (hashcode * 397) + TranslationFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1309 = new StringBuilder("registerTranslationFile_args(");
          int tmp1310 = 0;
          if(__isset.p)
          {
            if(0 < tmp1310++) { tmp1309.Append(", "); }
            tmp1309.Append("P: ");
            P.ToString(tmp1309);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1310++) { tmp1309.Append(", "); }
            tmp1309.Append("Locale: ");
            Locale.ToString(tmp1309);
          }
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            if(0 < tmp1310++) { tmp1309.Append(", "); }
            tmp1309.Append("TranslationFileName: ");
            TranslationFileName.ToString(tmp1309);
          }
          tmp1309.Append(')');
          return tmp1309.ToString();
        }
      }


      public partial class registerTranslationFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationFile_result()
        {
        }

        public registerTranslationFile_result DeepCopy()
        {
          var tmp1311 = new registerTranslationFile_result();
          if((E != null) && __isset.e)
          {
            tmp1311.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1311.__isset.e = this.__isset.e;
          return tmp1311;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1312 = new TStruct("registerTranslationFile_result");
            await oprot.WriteStructBeginAsync(tmp1312, cancellationToken);
            var tmp1313 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1313.Name = "E";
                tmp1313.Type = TType.Struct;
                tmp1313.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1313, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1314 = new StringBuilder("registerTranslationFile_result(");
          int tmp1315 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1315++) { tmp1314.Append(", "); }
            tmp1314.Append("E: ");
            E.ToString(tmp1314);
          }
          tmp1314.Append(')');
          return tmp1314.ToString();
        }
      }


      public partial class registerTranslationData_args : TBase
      {
        private long _p;
        private string _locale;
        private byte[] _translationData;
        private string _translationName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public byte[] TranslationData
        {
          get
          {
            return _translationData;
          }
          set
          {
            __isset.translationData = true;
            this._translationData = value;
          }
        }

        public string TranslationName
        {
          get
          {
            return _translationName;
          }
          set
          {
            __isset.translationName = true;
            this._translationName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationData;
          public bool translationName;
        }

        public registerTranslationData_args()
        {
        }

        public registerTranslationData_args DeepCopy()
        {
          var tmp1316 = new registerTranslationData_args();
          if(__isset.p)
          {
            tmp1316.P = this.P;
          }
          tmp1316.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1316.Locale = this.Locale;
          }
          tmp1316.__isset.locale = this.__isset.locale;
          if((TranslationData != null) && __isset.translationData)
          {
            tmp1316.TranslationData = this.TranslationData.ToArray();
          }
          tmp1316.__isset.translationData = this.__isset.translationData;
          if((TranslationName != null) && __isset.translationName)
          {
            tmp1316.TranslationName = this.TranslationName;
          }
          tmp1316.__isset.translationName = this.__isset.translationName;
          return tmp1316;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    TranslationName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1317 = new TStruct("registerTranslationData_args");
            await oprot.WriteStructBeginAsync(tmp1317, cancellationToken);
            var tmp1318 = new TField();
            if(__isset.p)
            {
              tmp1318.Name = "p";
              tmp1318.Type = TType.I64;
              tmp1318.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1318, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1318.Name = "locale";
              tmp1318.Type = TType.String;
              tmp1318.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1318, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationData != null) && __isset.translationData)
            {
              tmp1318.Name = "translationData";
              tmp1318.Type = TType.String;
              tmp1318.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1318, cancellationToken);
              await oprot.WriteBinaryAsync(TranslationData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationName != null) && __isset.translationName)
            {
              tmp1318.Name = "translationName";
              tmp1318.Type = TType.String;
              tmp1318.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1318, cancellationToken);
              await oprot.WriteStringAsync(TranslationName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationData == other.__isset.translationData) && ((!__isset.translationData) || (TCollections.Equals(TranslationData, other.TranslationData))))
            && ((__isset.translationName == other.__isset.translationName) && ((!__isset.translationName) || (global::System.Object.Equals(TranslationName, other.TranslationName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationData != null) && __isset.translationData)
            {
              hashcode = (hashcode * 397) + TranslationData.GetHashCode();
            }
            if((TranslationName != null) && __isset.translationName)
            {
              hashcode = (hashcode * 397) + TranslationName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1319 = new StringBuilder("registerTranslationData_args(");
          int tmp1320 = 0;
          if(__isset.p)
          {
            if(0 < tmp1320++) { tmp1319.Append(", "); }
            tmp1319.Append("P: ");
            P.ToString(tmp1319);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1320++) { tmp1319.Append(", "); }
            tmp1319.Append("Locale: ");
            Locale.ToString(tmp1319);
          }
          if((TranslationData != null) && __isset.translationData)
          {
            if(0 < tmp1320++) { tmp1319.Append(", "); }
            tmp1319.Append("TranslationData: ");
            TranslationData.ToString(tmp1319);
          }
          if((TranslationName != null) && __isset.translationName)
          {
            if(0 < tmp1320++) { tmp1319.Append(", "); }
            tmp1319.Append("TranslationName: ");
            TranslationName.ToString(tmp1319);
          }
          tmp1319.Append(')');
          return tmp1319.ToString();
        }
      }


      public partial class registerTranslationData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationData_result()
        {
        }

        public registerTranslationData_result DeepCopy()
        {
          var tmp1321 = new registerTranslationData_result();
          if((E != null) && __isset.e)
          {
            tmp1321.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1321.__isset.e = this.__isset.e;
          return tmp1321;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1322 = new TStruct("registerTranslationData_result");
            await oprot.WriteStructBeginAsync(tmp1322, cancellationToken);
            var tmp1323 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1323.Name = "E";
                tmp1323.Type = TType.Struct;
                tmp1323.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1323, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1324 = new StringBuilder("registerTranslationData_result(");
          int tmp1325 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1325++) { tmp1324.Append(", "); }
            tmp1324.Append("E: ");
            E.ToString(tmp1324);
          }
          tmp1324.Append(')');
          return tmp1324.ToString();
        }
      }


      public partial class registerUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;
        private string _menuText;
        private string _menuIcon;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }

        public string MenuText
        {
          get
          {
            return _menuText;
          }
          set
          {
            __isset.menuText = true;
            this._menuText = value;
          }
        }

        public string MenuIcon
        {
          get
          {
            return _menuIcon;
          }
          set
          {
            __isset.menuIcon = true;
            this._menuIcon = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
          public bool menuText;
          public bool menuIcon;
        }

        public registerUtilityMenu_args()
        {
        }

        public registerUtilityMenu_args DeepCopy()
        {
          var tmp1326 = new registerUtilityMenu_args();
          if(__isset.p)
          {
            tmp1326.P = this.P;
          }
          tmp1326.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1326.MenuName = this.MenuName;
          }
          tmp1326.__isset.menuName = this.__isset.menuName;
          if((MenuText != null) && __isset.menuText)
          {
            tmp1326.MenuText = this.MenuText;
          }
          tmp1326.__isset.menuText = this.__isset.menuText;
          if((MenuIcon != null) && __isset.menuIcon)
          {
            tmp1326.MenuIcon = this.MenuIcon;
          }
          tmp1326.__isset.menuIcon = this.__isset.menuIcon;
          return tmp1326;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    MenuText = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuIcon = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1327 = new TStruct("registerUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1327, cancellationToken);
            var tmp1328 = new TField();
            if(__isset.p)
            {
              tmp1328.Name = "p";
              tmp1328.Type = TType.I64;
              tmp1328.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1328, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1328.Name = "menuName";
              tmp1328.Type = TType.String;
              tmp1328.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1328, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuText != null) && __isset.menuText)
            {
              tmp1328.Name = "menuText";
              tmp1328.Type = TType.String;
              tmp1328.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1328, cancellationToken);
              await oprot.WriteStringAsync(MenuText, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              tmp1328.Name = "menuIcon";
              tmp1328.Type = TType.String;
              tmp1328.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1328, cancellationToken);
              await oprot.WriteStringAsync(MenuIcon, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))))
            && ((__isset.menuText == other.__isset.menuText) && ((!__isset.menuText) || (global::System.Object.Equals(MenuText, other.MenuText))))
            && ((__isset.menuIcon == other.__isset.menuIcon) && ((!__isset.menuIcon) || (global::System.Object.Equals(MenuIcon, other.MenuIcon))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
            if((MenuText != null) && __isset.menuText)
            {
              hashcode = (hashcode * 397) + MenuText.GetHashCode();
            }
            if((MenuIcon != null) && __isset.menuIcon)
            {
              hashcode = (hashcode * 397) + MenuIcon.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1329 = new StringBuilder("registerUtilityMenu_args(");
          int tmp1330 = 0;
          if(__isset.p)
          {
            if(0 < tmp1330++) { tmp1329.Append(", "); }
            tmp1329.Append("P: ");
            P.ToString(tmp1329);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1330++) { tmp1329.Append(", "); }
            tmp1329.Append("MenuName: ");
            MenuName.ToString(tmp1329);
          }
          if((MenuText != null) && __isset.menuText)
          {
            if(0 < tmp1330++) { tmp1329.Append(", "); }
            tmp1329.Append("MenuText: ");
            MenuText.ToString(tmp1329);
          }
          if((MenuIcon != null) && __isset.menuIcon)
          {
            if(0 < tmp1330++) { tmp1329.Append(", "); }
            tmp1329.Append("MenuIcon: ");
            MenuIcon.ToString(tmp1329);
          }
          tmp1329.Append(')');
          return tmp1329.ToString();
        }
      }


      public partial class registerUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityMenu_result()
        {
        }

        public registerUtilityMenu_result DeepCopy()
        {
          var tmp1331 = new registerUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1331.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1331.__isset.e = this.__isset.e;
          return tmp1331;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1332 = new TStruct("registerUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1332, cancellationToken);
            var tmp1333 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1333.Name = "E";
                tmp1333.Type = TType.Struct;
                tmp1333.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1333, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1334 = new StringBuilder("registerUtilityMenu_result(");
          int tmp1335 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1335++) { tmp1334.Append(", "); }
            tmp1334.Append("E: ");
            E.ToString(tmp1334);
          }
          tmp1334.Append(')');
          return tmp1334.ToString();
        }
      }


      public partial class unregisterUtilityMenu_args : TBase
      {
        private long _p;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool menuName;
        }

        public unregisterUtilityMenu_args()
        {
        }

        public unregisterUtilityMenu_args DeepCopy()
        {
          var tmp1336 = new unregisterUtilityMenu_args();
          if(__isset.p)
          {
            tmp1336.P = this.P;
          }
          tmp1336.__isset.p = this.__isset.p;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1336.MenuName = this.MenuName;
          }
          tmp1336.__isset.menuName = this.__isset.menuName;
          return tmp1336;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1337 = new TStruct("unregisterUtilityMenu_args");
            await oprot.WriteStructBeginAsync(tmp1337, cancellationToken);
            var tmp1338 = new TField();
            if(__isset.p)
            {
              tmp1338.Name = "p";
              tmp1338.Type = TType.I64;
              tmp1338.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1338, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1338.Name = "menuName";
              tmp1338.Type = TType.String;
              tmp1338.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1338, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1339 = new StringBuilder("unregisterUtilityMenu_args(");
          int tmp1340 = 0;
          if(__isset.p)
          {
            if(0 < tmp1340++) { tmp1339.Append(", "); }
            tmp1339.Append("P: ");
            P.ToString(tmp1339);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1340++) { tmp1339.Append(", "); }
            tmp1339.Append("MenuName: ");
            MenuName.ToString(tmp1339);
          }
          tmp1339.Append(')');
          return tmp1339.ToString();
        }
      }


      public partial class unregisterUtilityMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityMenu_result()
        {
        }

        public unregisterUtilityMenu_result DeepCopy()
        {
          var tmp1341 = new unregisterUtilityMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1341.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1341.__isset.e = this.__isset.e;
          return tmp1341;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1342 = new TStruct("unregisterUtilityMenu_result");
            await oprot.WriteStructBeginAsync(tmp1342, cancellationToken);
            var tmp1343 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1343.Name = "E";
                tmp1343.Type = TType.Struct;
                tmp1343.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1343, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1344 = new StringBuilder("unregisterUtilityMenu_result(");
          int tmp1345 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1345++) { tmp1344.Append(", "); }
            tmp1344.Append("E: ");
            E.ToString(tmp1344);
          }
          tmp1344.Append(')');
          return tmp1344.ToString();
        }
      }


      public partial class registerUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
        }

        public registerUtilityWindow_args()
        {
        }

        public registerUtilityWindow_args DeepCopy()
        {
          var tmp1346 = new registerUtilityWindow_args();
          if(__isset.p)
          {
            tmp1346.P = this.P;
          }
          tmp1346.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1346.Identifier = this.Identifier;
          }
          tmp1346.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1346.ItemType = this.ItemType;
          }
          tmp1346.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1346.MenuItemName = this.MenuItemName;
          }
          tmp1346.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1346.WindowTitle = this.WindowTitle;
          }
          tmp1346.__isset.windowTitle = this.__isset.windowTitle;
          return tmp1346;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1347 = new TStruct("registerUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1347, cancellationToken);
            var tmp1348 = new TField();
            if(__isset.p)
            {
              tmp1348.Name = "p";
              tmp1348.Type = TType.I64;
              tmp1348.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1348, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1348.Name = "identifier";
              tmp1348.Type = TType.String;
              tmp1348.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1348, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1348.Name = "itemType";
              tmp1348.Type = TType.String;
              tmp1348.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1348, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1348.Name = "menuItemName";
              tmp1348.Type = TType.String;
              tmp1348.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1348, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1348.Name = "windowTitle";
              tmp1348.Type = TType.String;
              tmp1348.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1348, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1349 = new StringBuilder("registerUtilityWindow_args(");
          int tmp1350 = 0;
          if(__isset.p)
          {
            if(0 < tmp1350++) { tmp1349.Append(", "); }
            tmp1349.Append("P: ");
            P.ToString(tmp1349);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1350++) { tmp1349.Append(", "); }
            tmp1349.Append("Identifier: ");
            Identifier.ToString(tmp1349);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1350++) { tmp1349.Append(", "); }
            tmp1349.Append("ItemType: ");
            ItemType.ToString(tmp1349);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1350++) { tmp1349.Append(", "); }
            tmp1349.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1349);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1350++) { tmp1349.Append(", "); }
            tmp1349.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1349);
          }
          tmp1349.Append(')');
          return tmp1349.ToString();
        }
      }


      public partial class registerUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindow_result()
        {
        }

        public registerUtilityWindow_result DeepCopy()
        {
          var tmp1351 = new registerUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1351.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1351.__isset.e = this.__isset.e;
          return tmp1351;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1352 = new TStruct("registerUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1352, cancellationToken);
            var tmp1353 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1353.Name = "E";
                tmp1353.Type = TType.Struct;
                tmp1353.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1353, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1354 = new StringBuilder("registerUtilityWindow_result(");
          int tmp1355 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1355++) { tmp1354.Append(", "); }
            tmp1354.Append("E: ");
            E.ToString(tmp1354);
          }
          tmp1354.Append(')');
          return tmp1354.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;
        private string _menuName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }

        public string MenuName
        {
          get
          {
            return _menuName;
          }
          set
          {
            __isset.menuName = true;
            this._menuName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
          public bool menuName;
        }

        public registerUtilityWindowWithMenu_args()
        {
        }

        public registerUtilityWindowWithMenu_args DeepCopy()
        {
          var tmp1356 = new registerUtilityWindowWithMenu_args();
          if(__isset.p)
          {
            tmp1356.P = this.P;
          }
          tmp1356.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1356.Identifier = this.Identifier;
          }
          tmp1356.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1356.ItemType = this.ItemType;
          }
          tmp1356.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1356.MenuItemName = this.MenuItemName;
          }
          tmp1356.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1356.WindowTitle = this.WindowTitle;
          }
          tmp1356.__isset.windowTitle = this.__isset.windowTitle;
          if((MenuName != null) && __isset.menuName)
          {
            tmp1356.MenuName = this.MenuName;
          }
          tmp1356.__isset.menuName = this.__isset.menuName;
          return tmp1356;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    MenuName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1357 = new TStruct("registerUtilityWindowWithMenu_args");
            await oprot.WriteStructBeginAsync(tmp1357, cancellationToken);
            var tmp1358 = new TField();
            if(__isset.p)
            {
              tmp1358.Name = "p";
              tmp1358.Type = TType.I64;
              tmp1358.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1358, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1358.Name = "identifier";
              tmp1358.Type = TType.String;
              tmp1358.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1358, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1358.Name = "itemType";
              tmp1358.Type = TType.String;
              tmp1358.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1358, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1358.Name = "menuItemName";
              tmp1358.Type = TType.String;
              tmp1358.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1358, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1358.Name = "windowTitle";
              tmp1358.Type = TType.String;
              tmp1358.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1358, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuName != null) && __isset.menuName)
            {
              tmp1358.Name = "menuName";
              tmp1358.Type = TType.String;
              tmp1358.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1358, cancellationToken);
              await oprot.WriteStringAsync(MenuName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))))
            && ((__isset.menuName == other.__isset.menuName) && ((!__isset.menuName) || (global::System.Object.Equals(MenuName, other.MenuName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
            if((MenuName != null) && __isset.menuName)
            {
              hashcode = (hashcode * 397) + MenuName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1359 = new StringBuilder("registerUtilityWindowWithMenu_args(");
          int tmp1360 = 0;
          if(__isset.p)
          {
            if(0 < tmp1360++) { tmp1359.Append(", "); }
            tmp1359.Append("P: ");
            P.ToString(tmp1359);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1360++) { tmp1359.Append(", "); }
            tmp1359.Append("Identifier: ");
            Identifier.ToString(tmp1359);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1360++) { tmp1359.Append(", "); }
            tmp1359.Append("ItemType: ");
            ItemType.ToString(tmp1359);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1360++) { tmp1359.Append(", "); }
            tmp1359.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1359);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1360++) { tmp1359.Append(", "); }
            tmp1359.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1359);
          }
          if((MenuName != null) && __isset.menuName)
          {
            if(0 < tmp1360++) { tmp1359.Append(", "); }
            tmp1359.Append("MenuName: ");
            MenuName.ToString(tmp1359);
          }
          tmp1359.Append(')');
          return tmp1359.ToString();
        }
      }


      public partial class registerUtilityWindowWithMenu_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindowWithMenu_result()
        {
        }

        public registerUtilityWindowWithMenu_result DeepCopy()
        {
          var tmp1361 = new registerUtilityWindowWithMenu_result();
          if((E != null) && __isset.e)
          {
            tmp1361.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1361.__isset.e = this.__isset.e;
          return tmp1361;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1362 = new TStruct("registerUtilityWindowWithMenu_result");
            await oprot.WriteStructBeginAsync(tmp1362, cancellationToken);
            var tmp1363 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1363.Name = "E";
                tmp1363.Type = TType.Struct;
                tmp1363.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1363, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindowWithMenu_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1364 = new StringBuilder("registerUtilityWindowWithMenu_result(");
          int tmp1365 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1365++) { tmp1364.Append(", "); }
            tmp1364.Append("E: ");
            E.ToString(tmp1364);
          }
          tmp1364.Append(')');
          return tmp1364.ToString();
        }
      }


      public partial class unregisterUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterUtilityWindow_args()
        {
        }

        public unregisterUtilityWindow_args DeepCopy()
        {
          var tmp1366 = new unregisterUtilityWindow_args();
          if(__isset.p)
          {
            tmp1366.P = this.P;
          }
          tmp1366.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1366.Identifier = this.Identifier;
          }
          tmp1366.__isset.identifier = this.__isset.identifier;
          return tmp1366;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1367 = new TStruct("unregisterUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1367, cancellationToken);
            var tmp1368 = new TField();
            if(__isset.p)
            {
              tmp1368.Name = "p";
              tmp1368.Type = TType.I64;
              tmp1368.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1368, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1368.Name = "identifier";
              tmp1368.Type = TType.String;
              tmp1368.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1368, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1369 = new StringBuilder("unregisterUtilityWindow_args(");
          int tmp1370 = 0;
          if(__isset.p)
          {
            if(0 < tmp1370++) { tmp1369.Append(", "); }
            tmp1369.Append("P: ");
            P.ToString(tmp1369);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1370++) { tmp1369.Append(", "); }
            tmp1369.Append("Identifier: ");
            Identifier.ToString(tmp1369);
          }
          tmp1369.Append(')');
          return tmp1369.ToString();
        }
      }


      public partial class unregisterUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityWindow_result()
        {
        }

        public unregisterUtilityWindow_result DeepCopy()
        {
          var tmp1371 = new unregisterUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1371.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1371.__isset.e = this.__isset.e;
          return tmp1371;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1372 = new TStruct("unregisterUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1372, cancellationToken);
            var tmp1373 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1373.Name = "E";
                tmp1373.Type = TType.Struct;
                tmp1373.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1373, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1374 = new StringBuilder("unregisterUtilityWindow_result(");
          int tmp1375 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1375++) { tmp1374.Append(", "); }
            tmp1374.Append("E: ");
            E.ToString(tmp1374);
          }
          tmp1374.Append(')');
          return tmp1374.ToString();
        }
      }


      public partial class openUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public openUtilityWindow_args()
        {
        }

        public openUtilityWindow_args DeepCopy()
        {
          var tmp1376 = new openUtilityWindow_args();
          if(__isset.p)
          {
            tmp1376.P = this.P;
          }
          tmp1376.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1376.Identifier = this.Identifier;
          }
          tmp1376.__isset.identifier = this.__isset.identifier;
          return tmp1376;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1377 = new TStruct("openUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1377, cancellationToken);
            var tmp1378 = new TField();
            if(__isset.p)
            {
              tmp1378.Name = "p";
              tmp1378.Type = TType.I64;
              tmp1378.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1378, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1378.Name = "identifier";
              tmp1378.Type = TType.String;
              tmp1378.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1378, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1379 = new StringBuilder("openUtilityWindow_args(");
          int tmp1380 = 0;
          if(__isset.p)
          {
            if(0 < tmp1380++) { tmp1379.Append(", "); }
            tmp1379.Append("P: ");
            P.ToString(tmp1379);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1380++) { tmp1379.Append(", "); }
            tmp1379.Append("Identifier: ");
            Identifier.ToString(tmp1379);
          }
          tmp1379.Append(')');
          return tmp1379.ToString();
        }
      }


      public partial class openUtilityWindow_result : TBase
      {

        public openUtilityWindow_result()
        {
        }

        public openUtilityWindow_result DeepCopy()
        {
          var tmp1381 = new openUtilityWindow_result();
          return tmp1381;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1382 = new TStruct("openUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1382, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1383 = new StringBuilder("openUtilityWindow_result(");
          tmp1383.Append(')');
          return tmp1383.ToString();
        }
      }


      public partial class closeUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public closeUtilityWindow_args()
        {
        }

        public closeUtilityWindow_args DeepCopy()
        {
          var tmp1385 = new closeUtilityWindow_args();
          if(__isset.p)
          {
            tmp1385.P = this.P;
          }
          tmp1385.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1385.Identifier = this.Identifier;
          }
          tmp1385.__isset.identifier = this.__isset.identifier;
          return tmp1385;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1386 = new TStruct("closeUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1386, cancellationToken);
            var tmp1387 = new TField();
            if(__isset.p)
            {
              tmp1387.Name = "p";
              tmp1387.Type = TType.I64;
              tmp1387.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1387, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1387.Name = "identifier";
              tmp1387.Type = TType.String;
              tmp1387.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1387, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1388 = new StringBuilder("closeUtilityWindow_args(");
          int tmp1389 = 0;
          if(__isset.p)
          {
            if(0 < tmp1389++) { tmp1388.Append(", "); }
            tmp1388.Append("P: ");
            P.ToString(tmp1388);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1389++) { tmp1388.Append(", "); }
            tmp1388.Append("Identifier: ");
            Identifier.ToString(tmp1388);
          }
          tmp1388.Append(')');
          return tmp1388.ToString();
        }
      }


      public partial class closeUtilityWindow_result : TBase
      {

        public closeUtilityWindow_result()
        {
        }

        public closeUtilityWindow_result DeepCopy()
        {
          var tmp1390 = new closeUtilityWindow_result();
          return tmp1390;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1391 = new TStruct("closeUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1391, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1392 = new StringBuilder("closeUtilityWindow_result(");
          tmp1392.Append(')');
          return tmp1392.ToString();
        }
      }


      public partial class collapseUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public collapseUtilityWindow_args()
        {
        }

        public collapseUtilityWindow_args DeepCopy()
        {
          var tmp1394 = new collapseUtilityWindow_args();
          if(__isset.p)
          {
            tmp1394.P = this.P;
          }
          tmp1394.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1394.Identifier = this.Identifier;
          }
          tmp1394.__isset.identifier = this.__isset.identifier;
          return tmp1394;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1395 = new TStruct("collapseUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1395, cancellationToken);
            var tmp1396 = new TField();
            if(__isset.p)
            {
              tmp1396.Name = "p";
              tmp1396.Type = TType.I64;
              tmp1396.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1396, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1396.Name = "identifier";
              tmp1396.Type = TType.String;
              tmp1396.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1396, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1397 = new StringBuilder("collapseUtilityWindow_args(");
          int tmp1398 = 0;
          if(__isset.p)
          {
            if(0 < tmp1398++) { tmp1397.Append(", "); }
            tmp1397.Append("P: ");
            P.ToString(tmp1397);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1398++) { tmp1397.Append(", "); }
            tmp1397.Append("Identifier: ");
            Identifier.ToString(tmp1397);
          }
          tmp1397.Append(')');
          return tmp1397.ToString();
        }
      }


      public partial class collapseUtilityWindow_result : TBase
      {

        public collapseUtilityWindow_result()
        {
        }

        public collapseUtilityWindow_result DeepCopy()
        {
          var tmp1399 = new collapseUtilityWindow_result();
          return tmp1399;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1400 = new TStruct("collapseUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1400, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1401 = new StringBuilder("collapseUtilityWindow_result(");
          tmp1401.Append(')');
          return tmp1401.ToString();
        }
      }


      public partial class expandUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public expandUtilityWindow_args()
        {
        }

        public expandUtilityWindow_args DeepCopy()
        {
          var tmp1403 = new expandUtilityWindow_args();
          if(__isset.p)
          {
            tmp1403.P = this.P;
          }
          tmp1403.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1403.Identifier = this.Identifier;
          }
          tmp1403.__isset.identifier = this.__isset.identifier;
          return tmp1403;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1404 = new TStruct("expandUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1404, cancellationToken);
            var tmp1405 = new TField();
            if(__isset.p)
            {
              tmp1405.Name = "p";
              tmp1405.Type = TType.I64;
              tmp1405.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1405, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1405.Name = "identifier";
              tmp1405.Type = TType.String;
              tmp1405.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1405, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1406 = new StringBuilder("expandUtilityWindow_args(");
          int tmp1407 = 0;
          if(__isset.p)
          {
            if(0 < tmp1407++) { tmp1406.Append(", "); }
            tmp1406.Append("P: ");
            P.ToString(tmp1406);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1407++) { tmp1406.Append(", "); }
            tmp1406.Append("Identifier: ");
            Identifier.ToString(tmp1406);
          }
          tmp1406.Append(')');
          return tmp1406.ToString();
        }
      }


      public partial class expandUtilityWindow_result : TBase
      {

        public expandUtilityWindow_result()
        {
        }

        public expandUtilityWindow_result DeepCopy()
        {
          var tmp1408 = new expandUtilityWindow_result();
          return tmp1408;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1409 = new TStruct("expandUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1409, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1410 = new StringBuilder("expandUtilityWindow_result(");
          tmp1410.Append(')');
          return tmp1410.ToString();
        }
      }


      public partial class refreshDynamicInstructions_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.DynamicInstructionType _instructionType;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.DynamicInstructionType"/>
        /// </summary>
        public global::Yaskawa.Ext.API.DynamicInstructionType InstructionType
        {
          get
          {
            return _instructionType;
          }
          set
          {
            __isset.instructionType = true;
            this._instructionType = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instructionType;
        }

        public refreshDynamicInstructions_args()
        {
        }

        public refreshDynamicInstructions_args DeepCopy()
        {
          var tmp1412 = new refreshDynamicInstructions_args();
          if(__isset.p)
          {
            tmp1412.P = this.P;
          }
          tmp1412.__isset.p = this.__isset.p;
          if(__isset.instructionType)
          {
            tmp1412.InstructionType = this.InstructionType;
          }
          tmp1412.__isset.instructionType = this.__isset.instructionType;
          return tmp1412;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    InstructionType = (global::Yaskawa.Ext.API.DynamicInstructionType)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1413 = new TStruct("refreshDynamicInstructions_args");
            await oprot.WriteStructBeginAsync(tmp1413, cancellationToken);
            var tmp1414 = new TField();
            if(__isset.p)
            {
              tmp1414.Name = "p";
              tmp1414.Type = TType.I64;
              tmp1414.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.instructionType)
            {
              tmp1414.Name = "instructionType";
              tmp1414.Type = TType.I32;
              tmp1414.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await oprot.WriteI32Async((int)InstructionType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instructionType == other.__isset.instructionType) && ((!__isset.instructionType) || (global::System.Object.Equals(InstructionType, other.InstructionType))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.instructionType)
            {
              hashcode = (hashcode * 397) + InstructionType.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1415 = new StringBuilder("refreshDynamicInstructions_args(");
          int tmp1416 = 0;
          if(__isset.p)
          {
            if(0 < tmp1416++) { tmp1415.Append(", "); }
            tmp1415.Append("P: ");
            P.ToString(tmp1415);
          }
          if(__isset.instructionType)
          {
            if(0 < tmp1416++) { tmp1415.Append(", "); }
            tmp1415.Append("InstructionType: ");
            InstructionType.ToString(tmp1415);
          }
          tmp1415.Append(')');
          return tmp1415.ToString();
        }
      }


      public partial class refreshDynamicInstructions_result : TBase
      {

        public refreshDynamicInstructions_result()
        {
        }

        public refreshDynamicInstructions_result DeepCopy()
        {
          var tmp1417 = new refreshDynamicInstructions_result();
          return tmp1417;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1418 = new TStruct("refreshDynamicInstructions_result");
            await oprot.WriteStructBeginAsync(tmp1418, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is refreshDynamicInstructions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1419 = new StringBuilder("refreshDynamicInstructions_result(");
          tmp1419.Append(')');
          return tmp1419.ToString();
        }
      }


      public partial class registerIntegration_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _itemType;
        private string _buttonLabel;
        private string _buttonImage;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string ButtonLabel
        {
          get
          {
            return _buttonLabel;
          }
          set
          {
            __isset.buttonLabel = true;
            this._buttonLabel = value;
          }
        }

        public string ButtonImage
        {
          get
          {
            return _buttonImage;
          }
          set
          {
            __isset.buttonImage = true;
            this._buttonImage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool itemType;
          public bool buttonLabel;
          public bool buttonImage;
        }

        public registerIntegration_args()
        {
        }

        public registerIntegration_args DeepCopy()
        {
          var tmp1421 = new registerIntegration_args();
          if(__isset.p)
          {
            tmp1421.P = this.P;
          }
          tmp1421.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1421.Identifier = this.Identifier;
          }
          tmp1421.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1421.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1421.__isset.integrationPoint = this.__isset.integrationPoint;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1421.ItemType = this.ItemType;
          }
          tmp1421.__isset.itemType = this.__isset.itemType;
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            tmp1421.ButtonLabel = this.ButtonLabel;
          }
          tmp1421.__isset.buttonLabel = this.__isset.buttonLabel;
          if((ButtonImage != null) && __isset.buttonImage)
          {
            tmp1421.ButtonImage = this.ButtonImage;
          }
          tmp1421.__isset.buttonImage = this.__isset.buttonImage;
          return tmp1421;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    ButtonLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    ButtonImage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1422 = new TStruct("registerIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1422, cancellationToken);
            var tmp1423 = new TField();
            if(__isset.p)
            {
              tmp1423.Name = "p";
              tmp1423.Type = TType.I64;
              tmp1423.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1423.Name = "identifier";
              tmp1423.Type = TType.String;
              tmp1423.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1423.Name = "integrationPoint";
              tmp1423.Type = TType.I32;
              tmp1423.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1423.Name = "itemType";
              tmp1423.Type = TType.String;
              tmp1423.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              tmp1423.Name = "buttonLabel";
              tmp1423.Type = TType.String;
              tmp1423.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteStringAsync(ButtonLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              tmp1423.Name = "buttonImage";
              tmp1423.Type = TType.String;
              tmp1423.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteStringAsync(ButtonImage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.buttonLabel == other.__isset.buttonLabel) && ((!__isset.buttonLabel) || (global::System.Object.Equals(ButtonLabel, other.ButtonLabel))))
            && ((__isset.buttonImage == other.__isset.buttonImage) && ((!__isset.buttonImage) || (global::System.Object.Equals(ButtonImage, other.ButtonImage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              hashcode = (hashcode * 397) + ButtonLabel.GetHashCode();
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              hashcode = (hashcode * 397) + ButtonImage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1424 = new StringBuilder("registerIntegration_args(");
          int tmp1425 = 0;
          if(__isset.p)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("P: ");
            P.ToString(tmp1424);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("Identifier: ");
            Identifier.ToString(tmp1424);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1424);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("ItemType: ");
            ItemType.ToString(tmp1424);
          }
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("ButtonLabel: ");
            ButtonLabel.ToString(tmp1424);
          }
          if((ButtonImage != null) && __isset.buttonImage)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("ButtonImage: ");
            ButtonImage.ToString(tmp1424);
          }
          tmp1424.Append(')');
          return tmp1424.ToString();
        }
      }


      public partial class registerIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerIntegration_result()
        {
        }

        public registerIntegration_result DeepCopy()
        {
          var tmp1426 = new registerIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1426.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1426.__isset.e = this.__isset.e;
          return tmp1426;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1427 = new TStruct("registerIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1427, cancellationToken);
            var tmp1428 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1428.Name = "E";
                tmp1428.Type = TType.Struct;
                tmp1428.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1428, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1429 = new StringBuilder("registerIntegration_result(");
          int tmp1430 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1430++) { tmp1429.Append(", "); }
            tmp1429.Append("E: ");
            E.ToString(tmp1429);
          }
          tmp1429.Append(')');
          return tmp1429.ToString();
        }
      }


      public partial class unregisterIntegration_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterIntegration_args()
        {
        }

        public unregisterIntegration_args DeepCopy()
        {
          var tmp1431 = new unregisterIntegration_args();
          if(__isset.p)
          {
            tmp1431.P = this.P;
          }
          tmp1431.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1431.Identifier = this.Identifier;
          }
          tmp1431.__isset.identifier = this.__isset.identifier;
          return tmp1431;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1432 = new TStruct("unregisterIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1432, cancellationToken);
            var tmp1433 = new TField();
            if(__isset.p)
            {
              tmp1433.Name = "p";
              tmp1433.Type = TType.I64;
              tmp1433.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1433, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1433.Name = "identifier";
              tmp1433.Type = TType.String;
              tmp1433.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1433, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1434 = new StringBuilder("unregisterIntegration_args(");
          int tmp1435 = 0;
          if(__isset.p)
          {
            if(0 < tmp1435++) { tmp1434.Append(", "); }
            tmp1434.Append("P: ");
            P.ToString(tmp1434);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1435++) { tmp1434.Append(", "); }
            tmp1434.Append("Identifier: ");
            Identifier.ToString(tmp1434);
          }
          tmp1434.Append(')');
          return tmp1434.ToString();
        }
      }


      public partial class unregisterIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterIntegration_result()
        {
        }

        public unregisterIntegration_result DeepCopy()
        {
          var tmp1436 = new unregisterIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1436.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1436.__isset.e = this.__isset.e;
          return tmp1436;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1437 = new TStruct("unregisterIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1437, cancellationToken);
            var tmp1438 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1438.Name = "E";
                tmp1438.Type = TType.Struct;
                tmp1438.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1438, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1439 = new StringBuilder("unregisterIntegration_result(");
          int tmp1440 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1440++) { tmp1439.Append(", "); }
            tmp1439.Append("E: ");
            E.ToString(tmp1439);
          }
          tmp1439.Append(')');
          return tmp1439.ToString();
        }
      }


      public partial class registerSwitch_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _switchLabel;
        private string _offPositionLabel;
        private string _onPositionLabel;
        private bool _defaultState;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string SwitchLabel
        {
          get
          {
            return _switchLabel;
          }
          set
          {
            __isset.switchLabel = true;
            this._switchLabel = value;
          }
        }

        public string OffPositionLabel
        {
          get
          {
            return _offPositionLabel;
          }
          set
          {
            __isset.offPositionLabel = true;
            this._offPositionLabel = value;
          }
        }

        public string OnPositionLabel
        {
          get
          {
            return _onPositionLabel;
          }
          set
          {
            __isset.onPositionLabel = true;
            this._onPositionLabel = value;
          }
        }

        public bool DefaultState
        {
          get
          {
            return _defaultState;
          }
          set
          {
            __isset.defaultState = true;
            this._defaultState = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool switchLabel;
          public bool offPositionLabel;
          public bool onPositionLabel;
          public bool defaultState;
        }

        public registerSwitch_args()
        {
        }

        public registerSwitch_args DeepCopy()
        {
          var tmp1441 = new registerSwitch_args();
          if(__isset.p)
          {
            tmp1441.P = this.P;
          }
          tmp1441.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1441.Identifier = this.Identifier;
          }
          tmp1441.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1441.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1441.__isset.integrationPoint = this.__isset.integrationPoint;
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            tmp1441.SwitchLabel = this.SwitchLabel;
          }
          tmp1441.__isset.switchLabel = this.__isset.switchLabel;
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            tmp1441.OffPositionLabel = this.OffPositionLabel;
          }
          tmp1441.__isset.offPositionLabel = this.__isset.offPositionLabel;
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            tmp1441.OnPositionLabel = this.OnPositionLabel;
          }
          tmp1441.__isset.onPositionLabel = this.__isset.onPositionLabel;
          if(__isset.defaultState)
          {
            tmp1441.DefaultState = this.DefaultState;
          }
          tmp1441.__isset.defaultState = this.__isset.defaultState;
          return tmp1441;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    SwitchLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    OffPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    OnPositionLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 7:
                  if (field.Type == TType.Bool)
                  {
                    DefaultState = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1442 = new TStruct("registerSwitch_args");
            await oprot.WriteStructBeginAsync(tmp1442, cancellationToken);
            var tmp1443 = new TField();
            if(__isset.p)
            {
              tmp1443.Name = "p";
              tmp1443.Type = TType.I64;
              tmp1443.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1443.Name = "identifier";
              tmp1443.Type = TType.String;
              tmp1443.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1443.Name = "integrationPoint";
              tmp1443.Type = TType.I32;
              tmp1443.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              tmp1443.Name = "switchLabel";
              tmp1443.Type = TType.String;
              tmp1443.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteStringAsync(SwitchLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              tmp1443.Name = "offPositionLabel";
              tmp1443.Type = TType.String;
              tmp1443.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteStringAsync(OffPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              tmp1443.Name = "onPositionLabel";
              tmp1443.Type = TType.String;
              tmp1443.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteStringAsync(OnPositionLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.defaultState)
            {
              tmp1443.Name = "defaultState";
              tmp1443.Type = TType.Bool;
              tmp1443.ID = 7;
              await oprot.WriteFieldBeginAsync(tmp1443, cancellationToken);
              await oprot.WriteBoolAsync(DefaultState, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.switchLabel == other.__isset.switchLabel) && ((!__isset.switchLabel) || (global::System.Object.Equals(SwitchLabel, other.SwitchLabel))))
            && ((__isset.offPositionLabel == other.__isset.offPositionLabel) && ((!__isset.offPositionLabel) || (global::System.Object.Equals(OffPositionLabel, other.OffPositionLabel))))
            && ((__isset.onPositionLabel == other.__isset.onPositionLabel) && ((!__isset.onPositionLabel) || (global::System.Object.Equals(OnPositionLabel, other.OnPositionLabel))))
            && ((__isset.defaultState == other.__isset.defaultState) && ((!__isset.defaultState) || (global::System.Object.Equals(DefaultState, other.DefaultState))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((SwitchLabel != null) && __isset.switchLabel)
            {
              hashcode = (hashcode * 397) + SwitchLabel.GetHashCode();
            }
            if((OffPositionLabel != null) && __isset.offPositionLabel)
            {
              hashcode = (hashcode * 397) + OffPositionLabel.GetHashCode();
            }
            if((OnPositionLabel != null) && __isset.onPositionLabel)
            {
              hashcode = (hashcode * 397) + OnPositionLabel.GetHashCode();
            }
            if(__isset.defaultState)
            {
              hashcode = (hashcode * 397) + DefaultState.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1444 = new StringBuilder("registerSwitch_args(");
          int tmp1445 = 0;
          if(__isset.p)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("P: ");
            P.ToString(tmp1444);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("Identifier: ");
            Identifier.ToString(tmp1444);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1444);
          }
          if((SwitchLabel != null) && __isset.switchLabel)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("SwitchLabel: ");
            SwitchLabel.ToString(tmp1444);
          }
          if((OffPositionLabel != null) && __isset.offPositionLabel)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("OffPositionLabel: ");
            OffPositionLabel.ToString(tmp1444);
          }
          if((OnPositionLabel != null) && __isset.onPositionLabel)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("OnPositionLabel: ");
            OnPositionLabel.ToString(tmp1444);
          }
          if(__isset.defaultState)
          {
            if(0 < tmp1445++) { tmp1444.Append(", "); }
            tmp1444.Append("DefaultState: ");
            DefaultState.ToString(tmp1444);
          }
          tmp1444.Append(')');
          return tmp1444.ToString();
        }
      }


      public partial class registerSwitch_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerSwitch_result()
        {
        }

        public registerSwitch_result DeepCopy()
        {
          var tmp1446 = new registerSwitch_result();
          if((E != null) && __isset.e)
          {
            tmp1446.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1446.__isset.e = this.__isset.e;
          return tmp1446;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1447 = new TStruct("registerSwitch_result");
            await oprot.WriteStructBeginAsync(tmp1447, cancellationToken);
            var tmp1448 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1448.Name = "E";
                tmp1448.Type = TType.Struct;
                tmp1448.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1448, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerSwitch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1449 = new StringBuilder("registerSwitch_result(");
          int tmp1450 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1450++) { tmp1449.Append(", "); }
            tmp1449.Append("E: ");
            E.ToString(tmp1449);
          }
          tmp1449.Append(')');
          return tmp1449.ToString();
        }
      }


      public partial class property_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
        }

        public property_args()
        {
        }

        public property_args DeepCopy()
        {
          var tmp1451 = new property_args();
          if(__isset.p)
          {
            tmp1451.P = this.P;
          }
          tmp1451.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1451.ItemID = this.ItemID;
          }
          tmp1451.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1451.Name = this.Name;
          }
          tmp1451.__isset.name = this.__isset.name;
          return tmp1451;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1452 = new TStruct("property_args");
            await oprot.WriteStructBeginAsync(tmp1452, cancellationToken);
            var tmp1453 = new TField();
            if(__isset.p)
            {
              tmp1453.Name = "p";
              tmp1453.Type = TType.I64;
              tmp1453.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1453, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1453.Name = "itemID";
              tmp1453.Type = TType.String;
              tmp1453.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1453, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1453.Name = "name";
              tmp1453.Type = TType.String;
              tmp1453.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1453, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1454 = new StringBuilder("property_args(");
          int tmp1455 = 0;
          if(__isset.p)
          {
            if(0 < tmp1455++) { tmp1454.Append(", "); }
            tmp1454.Append("P: ");
            P.ToString(tmp1454);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1455++) { tmp1454.Append(", "); }
            tmp1454.Append("ItemID: ");
            ItemID.ToString(tmp1454);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1455++) { tmp1454.Append(", "); }
            tmp1454.Append("Name: ");
            Name.ToString(tmp1454);
          }
          tmp1454.Append(')');
          return tmp1454.ToString();
        }
      }


      public partial class property_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public property_result()
        {
        }

        public property_result DeepCopy()
        {
          var tmp1456 = new property_result();
          if((Success != null) && __isset.success)
          {
            tmp1456.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1456.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1456.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1456.__isset.e = this.__isset.e;
          return tmp1456;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1457 = new TStruct("property_result");
            await oprot.WriteStructBeginAsync(tmp1457, cancellationToken);
            var tmp1458 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1458.Name = "Success";
                tmp1458.Type = TType.Struct;
                tmp1458.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1458, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1458.Name = "E";
                tmp1458.Type = TType.Struct;
                tmp1458.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1458, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1459 = new StringBuilder("property_result(");
          int tmp1460 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1460++) { tmp1459.Append(", "); }
            tmp1459.Append("Success: ");
            Success.ToString(tmp1459);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1460++) { tmp1459.Append(", "); }
            tmp1459.Append("E: ");
            E.ToString(tmp1459);
          }
          tmp1459.Append(')');
          return tmp1459.ToString();
        }
      }


      public partial class setProperty_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
          public bool @value;
        }

        public setProperty_args()
        {
        }

        public setProperty_args DeepCopy()
        {
          var tmp1461 = new setProperty_args();
          if(__isset.p)
          {
            tmp1461.P = this.P;
          }
          tmp1461.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1461.ItemID = this.ItemID;
          }
          tmp1461.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1461.Name = this.Name;
          }
          tmp1461.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp1461.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp1461.__isset.@value = this.__isset.@value;
          return tmp1461;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1462 = new TStruct("setProperty_args");
            await oprot.WriteStructBeginAsync(tmp1462, cancellationToken);
            var tmp1463 = new TField();
            if(__isset.p)
            {
              tmp1463.Name = "p";
              tmp1463.Type = TType.I64;
              tmp1463.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1463, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1463.Name = "itemID";
              tmp1463.Type = TType.String;
              tmp1463.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1463, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1463.Name = "name";
              tmp1463.Type = TType.String;
              tmp1463.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1463, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1463.Name = "value";
              tmp1463.Type = TType.Struct;
              tmp1463.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1463, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1464 = new StringBuilder("setProperty_args(");
          int tmp1465 = 0;
          if(__isset.p)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("P: ");
            P.ToString(tmp1464);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("ItemID: ");
            ItemID.ToString(tmp1464);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("Name: ");
            Name.ToString(tmp1464);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("Value: ");
            Value.ToString(tmp1464);
          }
          tmp1464.Append(')');
          return tmp1464.ToString();
        }
      }


      public partial class setProperty_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setProperty_result()
        {
        }

        public setProperty_result DeepCopy()
        {
          var tmp1466 = new setProperty_result();
          if((E != null) && __isset.e)
          {
            tmp1466.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1466.__isset.e = this.__isset.e;
          return tmp1466;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1467 = new TStruct("setProperty_result");
            await oprot.WriteStructBeginAsync(tmp1467, cancellationToken);
            var tmp1468 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1468.Name = "E";
                tmp1468.Type = TType.Struct;
                tmp1468.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1468, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1469 = new StringBuilder("setProperty_result(");
          int tmp1470 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1470++) { tmp1469.Append(", "); }
            tmp1469.Append("E: ");
            E.ToString(tmp1469);
          }
          tmp1469.Append(')');
          return tmp1469.ToString();
        }
      }


      public partial class setProperties_args : TBase
      {
        private long _p;
        private List<global::Yaskawa.Ext.API.PropValues> _propValuesList;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public List<global::Yaskawa.Ext.API.PropValues> PropValuesList
        {
          get
          {
            return _propValuesList;
          }
          set
          {
            __isset.propValuesList = true;
            this._propValuesList = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool propValuesList;
        }

        public setProperties_args()
        {
        }

        public setProperties_args DeepCopy()
        {
          var tmp1471 = new setProperties_args();
          if(__isset.p)
          {
            tmp1471.P = this.P;
          }
          tmp1471.__isset.p = this.__isset.p;
          if((PropValuesList != null) && __isset.propValuesList)
          {
            tmp1471.PropValuesList = this.PropValuesList.DeepCopy();
          }
          tmp1471.__isset.propValuesList = this.__isset.propValuesList;
          return tmp1471;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1472 = await iprot.ReadListBeginAsync(cancellationToken);
                      PropValuesList = new List<global::Yaskawa.Ext.API.PropValues>(_list1472.Count);
                      for(int _i1473 = 0; _i1473 < _list1472.Count; ++_i1473)
                      {
                        global::Yaskawa.Ext.API.PropValues _elem1474;
                        _elem1474 = new global::Yaskawa.Ext.API.PropValues();
                        await _elem1474.ReadAsync(iprot, cancellationToken);
                        PropValuesList.Add(_elem1474);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1475 = new TStruct("setProperties_args");
            await oprot.WriteStructBeginAsync(tmp1475, cancellationToken);
            var tmp1476 = new TField();
            if(__isset.p)
            {
              tmp1476.Name = "p";
              tmp1476.Type = TType.I64;
              tmp1476.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1476, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              tmp1476.Name = "propValuesList";
              tmp1476.Type = TType.List;
              tmp1476.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1476, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, PropValuesList.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PropValues _iter1477 in PropValuesList)
              {
                await _iter1477.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperties_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.propValuesList == other.__isset.propValuesList) && ((!__isset.propValuesList) || (TCollections.Equals(PropValuesList, other.PropValuesList))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(PropValuesList);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1478 = new StringBuilder("setProperties_args(");
          int tmp1479 = 0;
          if(__isset.p)
          {
            if(0 < tmp1479++) { tmp1478.Append(", "); }
            tmp1478.Append("P: ");
            P.ToString(tmp1478);
          }
          if((PropValuesList != null) && __isset.propValuesList)
          {
            if(0 < tmp1479++) { tmp1478.Append(", "); }
            tmp1478.Append("PropValuesList: ");
            PropValuesList.ToString(tmp1478);
          }
          tmp1478.Append(')');
          return tmp1478.ToString();
        }
      }


      public partial class setChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;
        private global::Yaskawa.Ext.API.Any _config;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool config;
        }

        public setChartConfig_args()
        {
        }

        public setChartConfig_args DeepCopy()
        {
          var tmp1480 = new setChartConfig_args();
          if(__isset.p)
          {
            tmp1480.P = this.P;
          }
          tmp1480.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1480.ChartID = this.ChartID;
          }
          tmp1480.__isset.chartID = this.__isset.chartID;
          if((Config != null) && __isset.config)
          {
            tmp1480.Config = (global::Yaskawa.Ext.API.Any)this.Config.DeepCopy();
          }
          tmp1480.__isset.config = this.__isset.config;
          return tmp1480;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::Yaskawa.Ext.API.Any();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1481 = new TStruct("setChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1481, cancellationToken);
            var tmp1482 = new TField();
            if(__isset.p)
            {
              tmp1482.Name = "p";
              tmp1482.Type = TType.I64;
              tmp1482.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1482.Name = "chartID";
              tmp1482.Type = TType.String;
              tmp1482.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1482.Name = "config";
              tmp1482.Type = TType.Struct;
              tmp1482.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1483 = new StringBuilder("setChartConfig_args(");
          int tmp1484 = 0;
          if(__isset.p)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("P: ");
            P.ToString(tmp1483);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("ChartID: ");
            ChartID.ToString(tmp1483);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("Config: ");
            Config.ToString(tmp1483);
          }
          tmp1483.Append(')');
          return tmp1483.ToString();
        }
      }


      public partial class setChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartConfig_result()
        {
        }

        public setChartConfig_result DeepCopy()
        {
          var tmp1485 = new setChartConfig_result();
          if((E != null) && __isset.e)
          {
            tmp1485.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1485.__isset.e = this.__isset.e;
          return tmp1485;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1486 = new TStruct("setChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1486, cancellationToken);
            var tmp1487 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1487.Name = "E";
                tmp1487.Type = TType.Struct;
                tmp1487.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1488 = new StringBuilder("setChartConfig_result(");
          int tmp1489 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("E: ");
            E.ToString(tmp1488);
          }
          tmp1488.Append(')');
          return tmp1488.ToString();
        }
      }


      public partial class getChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
        }

        public getChartConfig_args()
        {
        }

        public getChartConfig_args DeepCopy()
        {
          var tmp1490 = new getChartConfig_args();
          if(__isset.p)
          {
            tmp1490.P = this.P;
          }
          tmp1490.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1490.ChartID = this.ChartID;
          }
          tmp1490.__isset.chartID = this.__isset.chartID;
          return tmp1490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1491 = new TStruct("getChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1491, cancellationToken);
            var tmp1492 = new TField();
            if(__isset.p)
            {
              tmp1492.Name = "p";
              tmp1492.Type = TType.I64;
              tmp1492.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1492.Name = "chartID";
              tmp1492.Type = TType.String;
              tmp1492.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1493 = new StringBuilder("getChartConfig_args(");
          int tmp1494 = 0;
          if(__isset.p)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("P: ");
            P.ToString(tmp1493);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("ChartID: ");
            ChartID.ToString(tmp1493);
          }
          tmp1493.Append(')');
          return tmp1493.ToString();
        }
      }


      public partial class getChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartConfig_result()
        {
        }

        public getChartConfig_result DeepCopy()
        {
          var tmp1495 = new getChartConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1495.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1495.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1495.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1495.__isset.e = this.__isset.e;
          return tmp1495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1496 = new TStruct("getChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1496, cancellationToken);
            var tmp1497 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1497.Name = "Success";
                tmp1497.Type = TType.Struct;
                tmp1497.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1497.Name = "E";
                tmp1497.Type = TType.Struct;
                tmp1497.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1498 = new StringBuilder("getChartConfig_result(");
          int tmp1499 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("Success: ");
            Success.ToString(tmp1498);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("E: ");
            E.ToString(tmp1498);
          }
          tmp1498.Append(')');
          return tmp1498.ToString();
        }
      }


      public partial class setChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _dataset;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Dataset
        {
          get
          {
            return _dataset;
          }
          set
          {
            __isset.dataset = true;
            this._dataset = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool dataset;
          public bool right;
        }

        public setChartData_args()
        {
        }

        public setChartData_args DeepCopy()
        {
          var tmp1500 = new setChartData_args();
          if(__isset.p)
          {
            tmp1500.P = this.P;
          }
          tmp1500.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1500.ChartID = this.ChartID;
          }
          tmp1500.__isset.chartID = this.__isset.chartID;
          if((Dataset != null) && __isset.dataset)
          {
            tmp1500.Dataset = this.Dataset.DeepCopy();
          }
          tmp1500.__isset.dataset = this.__isset.dataset;
          if(__isset.right)
          {
            tmp1500.Right = this.Right;
          }
          tmp1500.__isset.right = this.__isset.right;
          return tmp1500;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1501 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dataset = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1501.Count);
                      for(int _i1502 = 0; _i1502 < _map1501.Count; ++_i1502)
                      {
                        string _key1503;
                        global::Yaskawa.Ext.API.Data _val1504;
                        _key1503 = await iprot.ReadStringAsync(cancellationToken);
                        _val1504 = new global::Yaskawa.Ext.API.Data();
                        await _val1504.ReadAsync(iprot, cancellationToken);
                        Dataset[_key1503] = _val1504;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1505 = new TStruct("setChartData_args");
            await oprot.WriteStructBeginAsync(tmp1505, cancellationToken);
            var tmp1506 = new TField();
            if(__isset.p)
            {
              tmp1506.Name = "p";
              tmp1506.Type = TType.I64;
              tmp1506.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1506, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1506.Name = "chartID";
              tmp1506.Type = TType.String;
              tmp1506.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1506, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dataset != null) && __isset.dataset)
            {
              tmp1506.Name = "dataset";
              tmp1506.Type = TType.Map;
              tmp1506.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1506, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dataset.Count), cancellationToken);
              foreach (string _iter1507 in Dataset.Keys)
              {
                await oprot.WriteStringAsync(_iter1507, cancellationToken);
                await Dataset[_iter1507].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1506.Name = "right";
              tmp1506.Type = TType.Bool;
              tmp1506.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1506, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.dataset == other.__isset.dataset) && ((!__isset.dataset) || (global::System.Object.Equals(Dataset, other.Dataset))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Dataset != null) && __isset.dataset)
            {
              hashcode = (hashcode * 397) + Dataset.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1508 = new StringBuilder("setChartData_args(");
          int tmp1509 = 0;
          if(__isset.p)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("P: ");
            P.ToString(tmp1508);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("ChartID: ");
            ChartID.ToString(tmp1508);
          }
          if((Dataset != null) && __isset.dataset)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("Dataset: ");
            Dataset.ToString(tmp1508);
          }
          if(__isset.right)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("Right: ");
            Right.ToString(tmp1508);
          }
          tmp1508.Append(')');
          return tmp1508.ToString();
        }
      }


      public partial class setChartData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartData_result()
        {
        }

        public setChartData_result DeepCopy()
        {
          var tmp1510 = new setChartData_result();
          if((E != null) && __isset.e)
          {
            tmp1510.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1510.__isset.e = this.__isset.e;
          return tmp1510;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1511 = new TStruct("setChartData_result");
            await oprot.WriteStructBeginAsync(tmp1511, cancellationToken);
            var tmp1512 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1512.Name = "E";
                tmp1512.Type = TType.Struct;
                tmp1512.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1512, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1513 = new StringBuilder("setChartData_result(");
          int tmp1514 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1514++) { tmp1513.Append(", "); }
            tmp1513.Append("E: ");
            E.ToString(tmp1513);
          }
          tmp1513.Append(')');
          return tmp1513.ToString();
        }
      }


      public partial class getChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool right;
        }

        public getChartData_args()
        {
        }

        public getChartData_args DeepCopy()
        {
          var tmp1515 = new getChartData_args();
          if(__isset.p)
          {
            tmp1515.P = this.P;
          }
          tmp1515.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1515.ChartID = this.ChartID;
          }
          tmp1515.__isset.chartID = this.__isset.chartID;
          if(__isset.right)
          {
            tmp1515.Right = this.Right;
          }
          tmp1515.__isset.right = this.__isset.right;
          return tmp1515;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1516 = new TStruct("getChartData_args");
            await oprot.WriteStructBeginAsync(tmp1516, cancellationToken);
            var tmp1517 = new TField();
            if(__isset.p)
            {
              tmp1517.Name = "p";
              tmp1517.Type = TType.I64;
              tmp1517.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1517.Name = "chartID";
              tmp1517.Type = TType.String;
              tmp1517.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1517.Name = "right";
              tmp1517.Type = TType.Bool;
              tmp1517.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1518 = new StringBuilder("getChartData_args(");
          int tmp1519 = 0;
          if(__isset.p)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("P: ");
            P.ToString(tmp1518);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("ChartID: ");
            ChartID.ToString(tmp1518);
          }
          if(__isset.right)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("Right: ");
            Right.ToString(tmp1518);
          }
          tmp1518.Append(')');
          return tmp1518.ToString();
        }
      }


      public partial class getChartData_result : TBase
      {
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartData_result()
        {
        }

        public getChartData_result DeepCopy()
        {
          var tmp1520 = new getChartData_result();
          if((Success != null) && __isset.success)
          {
            tmp1520.Success = this.Success.DeepCopy();
          }
          tmp1520.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1520.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1520.__isset.e = this.__isset.e;
          return tmp1520;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1521 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1521.Count);
                      for(int _i1522 = 0; _i1522 < _map1521.Count; ++_i1522)
                      {
                        string _key1523;
                        global::Yaskawa.Ext.API.Data _val1524;
                        _key1523 = await iprot.ReadStringAsync(cancellationToken);
                        _val1524 = new global::Yaskawa.Ext.API.Data();
                        await _val1524.ReadAsync(iprot, cancellationToken);
                        Success[_key1523] = _val1524;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1525 = new TStruct("getChartData_result");
            await oprot.WriteStructBeginAsync(tmp1525, cancellationToken);
            var tmp1526 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1526.Name = "Success";
                tmp1526.Type = TType.Map;
                tmp1526.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1526, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter1527 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter1527, cancellationToken);
                  await Success[_iter1527].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1526.Name = "E";
                tmp1526.Type = TType.Struct;
                tmp1526.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1526, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1528 = new StringBuilder("getChartData_result(");
          int tmp1529 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("Success: ");
            Success.ToString(tmp1528);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("E: ");
            E.ToString(tmp1528);
          }
          tmp1528.Append(')');
          return tmp1528.ToString();
        }
      }


      public partial class addChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private global::Yaskawa.Ext.API.Data _data;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::Yaskawa.Ext.API.Data Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool data;
          public bool right;
        }

        public addChartKey_args()
        {
        }

        public addChartKey_args DeepCopy()
        {
          var tmp1530 = new addChartKey_args();
          if(__isset.p)
          {
            tmp1530.P = this.P;
          }
          tmp1530.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1530.ChartID = this.ChartID;
          }
          tmp1530.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1530.Key = this.Key;
          }
          tmp1530.__isset.key = this.__isset.key;
          if((Data != null) && __isset.data)
          {
            tmp1530.Data = (global::Yaskawa.Ext.API.Data)this.Data.DeepCopy();
          }
          tmp1530.__isset.data = this.__isset.data;
          if(__isset.right)
          {
            tmp1530.Right = this.Right;
          }
          tmp1530.__isset.right = this.__isset.right;
          return tmp1530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Data = new global::Yaskawa.Ext.API.Data();
                    await Data.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1531 = new TStruct("addChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1531, cancellationToken);
            var tmp1532 = new TField();
            if(__isset.p)
            {
              tmp1532.Name = "p";
              tmp1532.Type = TType.I64;
              tmp1532.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1532.Name = "chartID";
              tmp1532.Type = TType.String;
              tmp1532.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1532.Name = "key";
              tmp1532.Type = TType.String;
              tmp1532.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp1532.Name = "data";
              tmp1532.Type = TType.Struct;
              tmp1532.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await Data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1532.Name = "right";
              tmp1532.Type = TType.Bool;
              tmp1532.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1533 = new StringBuilder("addChartKey_args(");
          int tmp1534 = 0;
          if(__isset.p)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("P: ");
            P.ToString(tmp1533);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("ChartID: ");
            ChartID.ToString(tmp1533);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("Key: ");
            Key.ToString(tmp1533);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("Data: ");
            Data.ToString(tmp1533);
          }
          if(__isset.right)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("Right: ");
            Right.ToString(tmp1533);
          }
          tmp1533.Append(')');
          return tmp1533.ToString();
        }
      }


      public partial class addChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public addChartKey_result()
        {
        }

        public addChartKey_result DeepCopy()
        {
          var tmp1535 = new addChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1535.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1535.__isset.e = this.__isset.e;
          return tmp1535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1536 = new TStruct("addChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1536, cancellationToken);
            var tmp1537 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1537.Name = "E";
                tmp1537.Type = TType.Struct;
                tmp1537.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1537, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1538 = new StringBuilder("addChartKey_result(");
          int tmp1539 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1539++) { tmp1538.Append(", "); }
            tmp1538.Append("E: ");
            E.ToString(tmp1538);
          }
          tmp1538.Append(')');
          return tmp1538.ToString();
        }
      }


      public partial class removeChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool right;
        }

        public removeChartKey_args()
        {
        }

        public removeChartKey_args DeepCopy()
        {
          var tmp1540 = new removeChartKey_args();
          if(__isset.p)
          {
            tmp1540.P = this.P;
          }
          tmp1540.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1540.ChartID = this.ChartID;
          }
          tmp1540.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1540.Key = this.Key;
          }
          tmp1540.__isset.key = this.__isset.key;
          if(__isset.right)
          {
            tmp1540.Right = this.Right;
          }
          tmp1540.__isset.right = this.__isset.right;
          return tmp1540;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1541 = new TStruct("removeChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1541, cancellationToken);
            var tmp1542 = new TField();
            if(__isset.p)
            {
              tmp1542.Name = "p";
              tmp1542.Type = TType.I64;
              tmp1542.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1542.Name = "chartID";
              tmp1542.Type = TType.String;
              tmp1542.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1542.Name = "key";
              tmp1542.Type = TType.String;
              tmp1542.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1542.Name = "right";
              tmp1542.Type = TType.Bool;
              tmp1542.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1543 = new StringBuilder("removeChartKey_args(");
          int tmp1544 = 0;
          if(__isset.p)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("P: ");
            P.ToString(tmp1543);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("ChartID: ");
            ChartID.ToString(tmp1543);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("Key: ");
            Key.ToString(tmp1543);
          }
          if(__isset.right)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("Right: ");
            Right.ToString(tmp1543);
          }
          tmp1543.Append(')');
          return tmp1543.ToString();
        }
      }


      public partial class removeChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeChartKey_result()
        {
        }

        public removeChartKey_result DeepCopy()
        {
          var tmp1545 = new removeChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1545.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1545.__isset.e = this.__isset.e;
          return tmp1545;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1546 = new TStruct("removeChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1546, cancellationToken);
            var tmp1547 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1547.Name = "E";
                tmp1547.Type = TType.Struct;
                tmp1547.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1547, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1548 = new StringBuilder("removeChartKey_result(");
          int tmp1549 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1549++) { tmp1548.Append(", "); }
            tmp1548.Append("E: ");
            E.ToString(tmp1548);
          }
          tmp1548.Append(')');
          return tmp1548.ToString();
        }
      }


      public partial class hideChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _hidden;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Hidden
        {
          get
          {
            return _hidden;
          }
          set
          {
            __isset.hidden = true;
            this._hidden = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool hidden;
          public bool right;
        }

        public hideChartKey_args()
        {
        }

        public hideChartKey_args DeepCopy()
        {
          var tmp1550 = new hideChartKey_args();
          if(__isset.p)
          {
            tmp1550.P = this.P;
          }
          tmp1550.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1550.ChartID = this.ChartID;
          }
          tmp1550.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1550.Key = this.Key;
          }
          tmp1550.__isset.key = this.__isset.key;
          if(__isset.hidden)
          {
            tmp1550.Hidden = this.Hidden;
          }
          tmp1550.__isset.hidden = this.__isset.hidden;
          if(__isset.right)
          {
            tmp1550.Right = this.Right;
          }
          tmp1550.__isset.right = this.__isset.right;
          return tmp1550;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Hidden = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1551 = new TStruct("hideChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1551, cancellationToken);
            var tmp1552 = new TField();
            if(__isset.p)
            {
              tmp1552.Name = "p";
              tmp1552.Type = TType.I64;
              tmp1552.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1552.Name = "chartID";
              tmp1552.Type = TType.String;
              tmp1552.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1552.Name = "key";
              tmp1552.Type = TType.String;
              tmp1552.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.hidden)
            {
              tmp1552.Name = "hidden";
              tmp1552.Type = TType.Bool;
              tmp1552.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
              await oprot.WriteBoolAsync(Hidden, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1552.Name = "right";
              tmp1552.Type = TType.Bool;
              tmp1552.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.hidden)
            {
              hashcode = (hashcode * 397) + Hidden.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1553 = new StringBuilder("hideChartKey_args(");
          int tmp1554 = 0;
          if(__isset.p)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("P: ");
            P.ToString(tmp1553);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("ChartID: ");
            ChartID.ToString(tmp1553);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("Key: ");
            Key.ToString(tmp1553);
          }
          if(__isset.hidden)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("Hidden: ");
            Hidden.ToString(tmp1553);
          }
          if(__isset.right)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("Right: ");
            Right.ToString(tmp1553);
          }
          tmp1553.Append(')');
          return tmp1553.ToString();
        }
      }


      public partial class hideChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public hideChartKey_result()
        {
        }

        public hideChartKey_result DeepCopy()
        {
          var tmp1555 = new hideChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1555.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1555.__isset.e = this.__isset.e;
          return tmp1555;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1556 = new TStruct("hideChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1556, cancellationToken);
            var tmp1557 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1557.Name = "E";
                tmp1557.Type = TType.Struct;
                tmp1557.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1557, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1558 = new StringBuilder("hideChartKey_result(");
          int tmp1559 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1559++) { tmp1558.Append(", "); }
            tmp1558.Append("E: ");
            E.ToString(tmp1558);
          }
          tmp1558.Append(')');
          return tmp1558.ToString();
        }
      }


      public partial class appendChartPoints_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private List<global::Yaskawa.Ext.API.DataPoint> _points;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public List<global::Yaskawa.Ext.API.DataPoint> Points
        {
          get
          {
            return _points;
          }
          set
          {
            __isset.points = true;
            this._points = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool points;
          public bool right;
        }

        public appendChartPoints_args()
        {
        }

        public appendChartPoints_args DeepCopy()
        {
          var tmp1560 = new appendChartPoints_args();
          if(__isset.p)
          {
            tmp1560.P = this.P;
          }
          tmp1560.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1560.ChartID = this.ChartID;
          }
          tmp1560.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1560.Key = this.Key;
          }
          tmp1560.__isset.key = this.__isset.key;
          if((Points != null) && __isset.points)
          {
            tmp1560.Points = this.Points.DeepCopy();
          }
          tmp1560.__isset.points = this.__isset.points;
          if(__isset.right)
          {
            tmp1560.Right = this.Right;
          }
          tmp1560.__isset.right = this.__isset.right;
          return tmp1560;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1561 = await iprot.ReadListBeginAsync(cancellationToken);
                      Points = new List<global::Yaskawa.Ext.API.DataPoint>(_list1561.Count);
                      for(int _i1562 = 0; _i1562 < _list1561.Count; ++_i1562)
                      {
                        global::Yaskawa.Ext.API.DataPoint _elem1563;
                        _elem1563 = new global::Yaskawa.Ext.API.DataPoint();
                        await _elem1563.ReadAsync(iprot, cancellationToken);
                        Points.Add(_elem1563);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1564 = new TStruct("appendChartPoints_args");
            await oprot.WriteStructBeginAsync(tmp1564, cancellationToken);
            var tmp1565 = new TField();
            if(__isset.p)
            {
              tmp1565.Name = "p";
              tmp1565.Type = TType.I64;
              tmp1565.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1565.Name = "chartID";
              tmp1565.Type = TType.String;
              tmp1565.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1565.Name = "key";
              tmp1565.Type = TType.String;
              tmp1565.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Points != null) && __isset.points)
            {
              tmp1565.Name = "points";
              tmp1565.Type = TType.List;
              tmp1565.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Points.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.DataPoint _iter1566 in Points)
              {
                await _iter1566.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1565.Name = "right";
              tmp1565.Type = TType.Bool;
              tmp1565.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendChartPoints_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.points == other.__isset.points) && ((!__isset.points) || (TCollections.Equals(Points, other.Points))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Points != null) && __isset.points)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Points);
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1567 = new StringBuilder("appendChartPoints_args(");
          int tmp1568 = 0;
          if(__isset.p)
          {
            if(0 < tmp1568++) { tmp1567.Append(", "); }
            tmp1567.Append("P: ");
            P.ToString(tmp1567);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1568++) { tmp1567.Append(", "); }
            tmp1567.Append("ChartID: ");
            ChartID.ToString(tmp1567);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1568++) { tmp1567.Append(", "); }
            tmp1567.Append("Key: ");
            Key.ToString(tmp1567);
          }
          if((Points != null) && __isset.points)
          {
            if(0 < tmp1568++) { tmp1567.Append(", "); }
            tmp1567.Append("Points: ");
            Points.ToString(tmp1567);
          }
          if(__isset.right)
          {
            if(0 < tmp1568++) { tmp1567.Append(", "); }
            tmp1567.Append("Right: ");
            Right.ToString(tmp1567);
          }
          tmp1567.Append(')');
          return tmp1567.ToString();
        }
      }


      public partial class incrementChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private double _val;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public double Val
        {
          get
          {
            return _val;
          }
          set
          {
            __isset.val = true;
            this._val = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool val;
        }

        public incrementChartKey_args()
        {
        }

        public incrementChartKey_args DeepCopy()
        {
          var tmp1569 = new incrementChartKey_args();
          if(__isset.p)
          {
            tmp1569.P = this.P;
          }
          tmp1569.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1569.ChartID = this.ChartID;
          }
          tmp1569.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1569.Key = this.Key;
          }
          tmp1569.__isset.key = this.__isset.key;
          if(__isset.val)
          {
            tmp1569.Val = this.Val;
          }
          tmp1569.__isset.val = this.__isset.val;
          return tmp1569;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    Val = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1570 = new TStruct("incrementChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1570, cancellationToken);
            var tmp1571 = new TField();
            if(__isset.p)
            {
              tmp1571.Name = "p";
              tmp1571.Type = TType.I64;
              tmp1571.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1571, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1571.Name = "chartID";
              tmp1571.Type = TType.String;
              tmp1571.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1571, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1571.Name = "key";
              tmp1571.Type = TType.String;
              tmp1571.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1571, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.val)
            {
              tmp1571.Name = "val";
              tmp1571.Type = TType.Double;
              tmp1571.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1571, cancellationToken);
              await oprot.WriteDoubleAsync(Val, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.val == other.__isset.val) && ((!__isset.val) || (global::System.Object.Equals(Val, other.Val))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.val)
            {
              hashcode = (hashcode * 397) + Val.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1572 = new StringBuilder("incrementChartKey_args(");
          int tmp1573 = 0;
          if(__isset.p)
          {
            if(0 < tmp1573++) { tmp1572.Append(", "); }
            tmp1572.Append("P: ");
            P.ToString(tmp1572);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1573++) { tmp1572.Append(", "); }
            tmp1572.Append("ChartID: ");
            ChartID.ToString(tmp1572);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1573++) { tmp1572.Append(", "); }
            tmp1572.Append("Key: ");
            Key.ToString(tmp1572);
          }
          if(__isset.val)
          {
            if(0 < tmp1573++) { tmp1572.Append(", "); }
            tmp1572.Append("Val: ");
            Val.ToString(tmp1572);
          }
          tmp1572.Append(')');
          return tmp1572.ToString();
        }
      }


      public partial class incrementChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public incrementChartKey_result()
        {
        }

        public incrementChartKey_result DeepCopy()
        {
          var tmp1574 = new incrementChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1574.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1574.__isset.e = this.__isset.e;
          return tmp1574;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1575 = new TStruct("incrementChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1575, cancellationToken);
            var tmp1576 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1576.Name = "E";
                tmp1576.Type = TType.Struct;
                tmp1576.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1576, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1577 = new StringBuilder("incrementChartKey_result(");
          int tmp1578 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1578++) { tmp1577.Append(", "); }
            tmp1577.Append("E: ");
            E.ToString(tmp1577);
          }
          tmp1577.Append(')');
          return tmp1577.ToString();
        }
      }


      public partial class exportChartImage_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImage_args()
        {
        }

        public exportChartImage_args DeepCopy()
        {
          var tmp1579 = new exportChartImage_args();
          if(__isset.p)
          {
            tmp1579.P = this.P;
          }
          tmp1579.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1579.ChartID = this.ChartID;
          }
          tmp1579.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1579.ImageFileName = this.ImageFileName;
          }
          tmp1579.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1579;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1580 = new TStruct("exportChartImage_args");
            await oprot.WriteStructBeginAsync(tmp1580, cancellationToken);
            var tmp1581 = new TField();
            if(__isset.p)
            {
              tmp1581.Name = "p";
              tmp1581.Type = TType.I64;
              tmp1581.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1581, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1581.Name = "chartID";
              tmp1581.Type = TType.String;
              tmp1581.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1581, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1581.Name = "imageFileName";
              tmp1581.Type = TType.String;
              tmp1581.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1581, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1582 = new StringBuilder("exportChartImage_args(");
          int tmp1583 = 0;
          if(__isset.p)
          {
            if(0 < tmp1583++) { tmp1582.Append(", "); }
            tmp1582.Append("P: ");
            P.ToString(tmp1582);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1583++) { tmp1582.Append(", "); }
            tmp1582.Append("ChartID: ");
            ChartID.ToString(tmp1582);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1583++) { tmp1582.Append(", "); }
            tmp1582.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1582);
          }
          tmp1582.Append(')');
          return tmp1582.ToString();
        }
      }


      public partial class exportChartImage_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImage_result()
        {
        }

        public exportChartImage_result DeepCopy()
        {
          var tmp1584 = new exportChartImage_result();
          if((Success != null) && __isset.success)
          {
            tmp1584.Success = this.Success;
          }
          tmp1584.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1584.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1584.__isset.e = this.__isset.e;
          return tmp1584;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1585 = new TStruct("exportChartImage_result");
            await oprot.WriteStructBeginAsync(tmp1585, cancellationToken);
            var tmp1586 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1586.Name = "Success";
                tmp1586.Type = TType.String;
                tmp1586.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1586, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1586.Name = "E";
                tmp1586.Type = TType.Struct;
                tmp1586.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1586, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1587 = new StringBuilder("exportChartImage_result(");
          int tmp1588 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1588++) { tmp1587.Append(", "); }
            tmp1587.Append("Success: ");
            Success.ToString(tmp1587);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1588++) { tmp1587.Append(", "); }
            tmp1587.Append("E: ");
            E.ToString(tmp1587);
          }
          tmp1587.Append(')');
          return tmp1587.ToString();
        }
      }


      public partial class exportChartImageData_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImageData_args()
        {
        }

        public exportChartImageData_args DeepCopy()
        {
          var tmp1589 = new exportChartImageData_args();
          if(__isset.p)
          {
            tmp1589.P = this.P;
          }
          tmp1589.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1589.ChartID = this.ChartID;
          }
          tmp1589.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1589.ImageFileName = this.ImageFileName;
          }
          tmp1589.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1589;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1590 = new TStruct("exportChartImageData_args");
            await oprot.WriteStructBeginAsync(tmp1590, cancellationToken);
            var tmp1591 = new TField();
            if(__isset.p)
            {
              tmp1591.Name = "p";
              tmp1591.Type = TType.I64;
              tmp1591.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1591, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1591.Name = "chartID";
              tmp1591.Type = TType.String;
              tmp1591.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1591, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1591.Name = "imageFileName";
              tmp1591.Type = TType.String;
              tmp1591.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1591, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1592 = new StringBuilder("exportChartImageData_args(");
          int tmp1593 = 0;
          if(__isset.p)
          {
            if(0 < tmp1593++) { tmp1592.Append(", "); }
            tmp1592.Append("P: ");
            P.ToString(tmp1592);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1593++) { tmp1592.Append(", "); }
            tmp1592.Append("ChartID: ");
            ChartID.ToString(tmp1592);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1593++) { tmp1592.Append(", "); }
            tmp1592.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1592);
          }
          tmp1592.Append(')');
          return tmp1592.ToString();
        }
      }


      public partial class exportChartImageData_result : TBase
      {
        private byte[] _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImageData_result()
        {
        }

        public exportChartImageData_result DeepCopy()
        {
          var tmp1594 = new exportChartImageData_result();
          if((Success != null) && __isset.success)
          {
            tmp1594.Success = this.Success.ToArray();
          }
          tmp1594.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1594.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1594.__isset.e = this.__isset.e;
          return tmp1594;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1595 = new TStruct("exportChartImageData_result");
            await oprot.WriteStructBeginAsync(tmp1595, cancellationToken);
            var tmp1596 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1596.Name = "Success";
                tmp1596.Type = TType.String;
                tmp1596.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1596, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1596.Name = "E";
                tmp1596.Type = TType.Struct;
                tmp1596.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1596, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1597 = new StringBuilder("exportChartImageData_result(");
          int tmp1598 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1598++) { tmp1597.Append(", "); }
            tmp1597.Append("Success: ");
            Success.ToString(tmp1597);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1598++) { tmp1597.Append(", "); }
            tmp1597.Append("E: ");
            E.ToString(tmp1597);
          }
          tmp1597.Append(')');
          return tmp1597.ToString();
        }
      }


      public partial class notice_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public notice_args()
        {
        }

        public notice_args DeepCopy()
        {
          var tmp1599 = new notice_args();
          if(__isset.p)
          {
            tmp1599.P = this.P;
          }
          tmp1599.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1599.Title = this.Title;
          }
          tmp1599.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1599.Message = this.Message;
          }
          tmp1599.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1599.Log = this.Log;
          }
          tmp1599.__isset.log = this.__isset.log;
          return tmp1599;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1600 = new TStruct("notice_args");
            await oprot.WriteStructBeginAsync(tmp1600, cancellationToken);
            var tmp1601 = new TField();
            if(__isset.p)
            {
              tmp1601.Name = "p";
              tmp1601.Type = TType.I64;
              tmp1601.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1601, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1601.Name = "title";
              tmp1601.Type = TType.String;
              tmp1601.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1601, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1601.Name = "message";
              tmp1601.Type = TType.String;
              tmp1601.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1601, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1601.Name = "log";
              tmp1601.Type = TType.String;
              tmp1601.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1601, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1602 = new StringBuilder("notice_args(");
          int tmp1603 = 0;
          if(__isset.p)
          {
            if(0 < tmp1603++) { tmp1602.Append(", "); }
            tmp1602.Append("P: ");
            P.ToString(tmp1602);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1603++) { tmp1602.Append(", "); }
            tmp1602.Append("Title: ");
            Title.ToString(tmp1602);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1603++) { tmp1602.Append(", "); }
            tmp1602.Append("Message: ");
            Message.ToString(tmp1602);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1603++) { tmp1602.Append(", "); }
            tmp1602.Append("Log: ");
            Log.ToString(tmp1602);
          }
          tmp1602.Append(')');
          return tmp1602.ToString();
        }
      }


      public partial class dispNotice_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.Disposition _disposition;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.Disposition"/>
        /// </summary>
        public global::Yaskawa.Ext.API.Disposition Disposition
        {
          get
          {
            return _disposition;
          }
          set
          {
            __isset.disposition = true;
            this._disposition = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool disposition;
          public bool title;
          public bool message;
          public bool log;
        }

        public dispNotice_args()
        {
        }

        public dispNotice_args DeepCopy()
        {
          var tmp1604 = new dispNotice_args();
          if(__isset.p)
          {
            tmp1604.P = this.P;
          }
          tmp1604.__isset.p = this.__isset.p;
          if(__isset.disposition)
          {
            tmp1604.Disposition = this.Disposition;
          }
          tmp1604.__isset.disposition = this.__isset.disposition;
          if((Title != null) && __isset.title)
          {
            tmp1604.Title = this.Title;
          }
          tmp1604.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1604.Message = this.Message;
          }
          tmp1604.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1604.Log = this.Log;
          }
          tmp1604.__isset.log = this.__isset.log;
          return tmp1604;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Disposition = (global::Yaskawa.Ext.API.Disposition)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1605 = new TStruct("dispNotice_args");
            await oprot.WriteStructBeginAsync(tmp1605, cancellationToken);
            var tmp1606 = new TField();
            if(__isset.p)
            {
              tmp1606.Name = "p";
              tmp1606.Type = TType.I64;
              tmp1606.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1606, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.disposition)
            {
              tmp1606.Name = "disposition";
              tmp1606.Type = TType.I32;
              tmp1606.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1606, cancellationToken);
              await oprot.WriteI32Async((int)Disposition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1606.Name = "title";
              tmp1606.Type = TType.String;
              tmp1606.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1606, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1606.Name = "message";
              tmp1606.Type = TType.String;
              tmp1606.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1606, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1606.Name = "log";
              tmp1606.Type = TType.String;
              tmp1606.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1606, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dispNotice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.disposition == other.__isset.disposition) && ((!__isset.disposition) || (global::System.Object.Equals(Disposition, other.Disposition))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.disposition)
            {
              hashcode = (hashcode * 397) + Disposition.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1607 = new StringBuilder("dispNotice_args(");
          int tmp1608 = 0;
          if(__isset.p)
          {
            if(0 < tmp1608++) { tmp1607.Append(", "); }
            tmp1607.Append("P: ");
            P.ToString(tmp1607);
          }
          if(__isset.disposition)
          {
            if(0 < tmp1608++) { tmp1607.Append(", "); }
            tmp1607.Append("Disposition: ");
            Disposition.ToString(tmp1607);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1608++) { tmp1607.Append(", "); }
            tmp1607.Append("Title: ");
            Title.ToString(tmp1607);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1608++) { tmp1607.Append(", "); }
            tmp1607.Append("Message: ");
            Message.ToString(tmp1607);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1608++) { tmp1607.Append(", "); }
            tmp1607.Append("Log: ");
            Log.ToString(tmp1607);
          }
          tmp1607.Append(')');
          return tmp1607.ToString();
        }
      }


      public partial class error_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public error_args()
        {
        }

        public error_args DeepCopy()
        {
          var tmp1609 = new error_args();
          if(__isset.p)
          {
            tmp1609.P = this.P;
          }
          tmp1609.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1609.Title = this.Title;
          }
          tmp1609.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1609.Message = this.Message;
          }
          tmp1609.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1609.Log = this.Log;
          }
          tmp1609.__isset.log = this.__isset.log;
          return tmp1609;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1610 = new TStruct("error_args");
            await oprot.WriteStructBeginAsync(tmp1610, cancellationToken);
            var tmp1611 = new TField();
            if(__isset.p)
            {
              tmp1611.Name = "p";
              tmp1611.Type = TType.I64;
              tmp1611.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1611, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1611.Name = "title";
              tmp1611.Type = TType.String;
              tmp1611.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1611, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1611.Name = "message";
              tmp1611.Type = TType.String;
              tmp1611.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1611, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1611.Name = "log";
              tmp1611.Type = TType.String;
              tmp1611.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1611, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is error_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1612 = new StringBuilder("error_args(");
          int tmp1613 = 0;
          if(__isset.p)
          {
            if(0 < tmp1613++) { tmp1612.Append(", "); }
            tmp1612.Append("P: ");
            P.ToString(tmp1612);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1613++) { tmp1612.Append(", "); }
            tmp1612.Append("Title: ");
            Title.ToString(tmp1612);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1613++) { tmp1612.Append(", "); }
            tmp1612.Append("Message: ");
            Message.ToString(tmp1612);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1613++) { tmp1612.Append(", "); }
            tmp1612.Append("Log: ");
            Log.ToString(tmp1612);
          }
          tmp1612.Append(')');
          return tmp1612.ToString();
        }
      }


      public partial class popupDialog_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _title;
        private string _message;
        private string _positiveOption;
        private string _negativeOption;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string PositiveOption
        {
          get
          {
            return _positiveOption;
          }
          set
          {
            __isset.positiveOption = true;
            this._positiveOption = value;
          }
        }

        public string NegativeOption
        {
          get
          {
            return _negativeOption;
          }
          set
          {
            __isset.negativeOption = true;
            this._negativeOption = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool title;
          public bool message;
          public bool positiveOption;
          public bool negativeOption;
        }

        public popupDialog_args()
        {
        }

        public popupDialog_args DeepCopy()
        {
          var tmp1614 = new popupDialog_args();
          if(__isset.p)
          {
            tmp1614.P = this.P;
          }
          tmp1614.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1614.Identifier = this.Identifier;
          }
          tmp1614.__isset.identifier = this.__isset.identifier;
          if((Title != null) && __isset.title)
          {
            tmp1614.Title = this.Title;
          }
          tmp1614.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1614.Message = this.Message;
          }
          tmp1614.__isset.message = this.__isset.message;
          if((PositiveOption != null) && __isset.positiveOption)
          {
            tmp1614.PositiveOption = this.PositiveOption;
          }
          tmp1614.__isset.positiveOption = this.__isset.positiveOption;
          if((NegativeOption != null) && __isset.negativeOption)
          {
            tmp1614.NegativeOption = this.NegativeOption;
          }
          tmp1614.__isset.negativeOption = this.__isset.negativeOption;
          return tmp1614;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    PositiveOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    NegativeOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1615 = new TStruct("popupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1615, cancellationToken);
            var tmp1616 = new TField();
            if(__isset.p)
            {
              tmp1616.Name = "p";
              tmp1616.Type = TType.I64;
              tmp1616.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1616, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1616.Name = "identifier";
              tmp1616.Type = TType.String;
              tmp1616.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1616, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1616.Name = "title";
              tmp1616.Type = TType.String;
              tmp1616.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1616, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1616.Name = "message";
              tmp1616.Type = TType.String;
              tmp1616.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1616, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              tmp1616.Name = "positiveOption";
              tmp1616.Type = TType.String;
              tmp1616.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1616, cancellationToken);
              await oprot.WriteStringAsync(PositiveOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              tmp1616.Name = "negativeOption";
              tmp1616.Type = TType.String;
              tmp1616.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1616, cancellationToken);
              await oprot.WriteStringAsync(NegativeOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.positiveOption == other.__isset.positiveOption) && ((!__isset.positiveOption) || (global::System.Object.Equals(PositiveOption, other.PositiveOption))))
            && ((__isset.negativeOption == other.__isset.negativeOption) && ((!__isset.negativeOption) || (global::System.Object.Equals(NegativeOption, other.NegativeOption))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              hashcode = (hashcode * 397) + PositiveOption.GetHashCode();
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              hashcode = (hashcode * 397) + NegativeOption.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1617 = new StringBuilder("popupDialog_args(");
          int tmp1618 = 0;
          if(__isset.p)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("P: ");
            P.ToString(tmp1617);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("Identifier: ");
            Identifier.ToString(tmp1617);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("Title: ");
            Title.ToString(tmp1617);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("Message: ");
            Message.ToString(tmp1617);
          }
          if((PositiveOption != null) && __isset.positiveOption)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("PositiveOption: ");
            PositiveOption.ToString(tmp1617);
          }
          if((NegativeOption != null) && __isset.negativeOption)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("NegativeOption: ");
            NegativeOption.ToString(tmp1617);
          }
          tmp1617.Append(')');
          return tmp1617.ToString();
        }
      }


      public partial class popupDialog_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public popupDialog_result()
        {
        }

        public popupDialog_result DeepCopy()
        {
          var tmp1619 = new popupDialog_result();
          if((E != null) && __isset.e)
          {
            tmp1619.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1619.__isset.e = this.__isset.e;
          return tmp1619;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1620 = new TStruct("popupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1620, cancellationToken);
            var tmp1621 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1621.Name = "E";
                tmp1621.Type = TType.Struct;
                tmp1621.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1621, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1622 = new StringBuilder("popupDialog_result(");
          int tmp1623 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1623++) { tmp1622.Append(", "); }
            tmp1622.Append("E: ");
            E.ToString(tmp1622);
          }
          tmp1622.Append(')');
          return tmp1622.ToString();
        }
      }


      public partial class cancelPopupDialog_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public cancelPopupDialog_args()
        {
        }

        public cancelPopupDialog_args DeepCopy()
        {
          var tmp1624 = new cancelPopupDialog_args();
          if(__isset.p)
          {
            tmp1624.P = this.P;
          }
          tmp1624.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1624.Identifier = this.Identifier;
          }
          tmp1624.__isset.identifier = this.__isset.identifier;
          return tmp1624;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1625 = new TStruct("cancelPopupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1625, cancellationToken);
            var tmp1626 = new TField();
            if(__isset.p)
            {
              tmp1626.Name = "p";
              tmp1626.Type = TType.I64;
              tmp1626.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1626.Name = "identifier";
              tmp1626.Type = TType.String;
              tmp1626.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1627 = new StringBuilder("cancelPopupDialog_args(");
          int tmp1628 = 0;
          if(__isset.p)
          {
            if(0 < tmp1628++) { tmp1627.Append(", "); }
            tmp1627.Append("P: ");
            P.ToString(tmp1627);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1628++) { tmp1627.Append(", "); }
            tmp1627.Append("Identifier: ");
            Identifier.ToString(tmp1627);
          }
          tmp1627.Append(')');
          return tmp1627.ToString();
        }
      }


      public partial class cancelPopupDialog_result : TBase
      {

        public cancelPopupDialog_result()
        {
        }

        public cancelPopupDialog_result DeepCopy()
        {
          var tmp1629 = new cancelPopupDialog_result();
          return tmp1629;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1630 = new TStruct("cancelPopupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1630, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1631 = new StringBuilder("cancelPopupDialog_result(");
          tmp1631.Append(')');
          return tmp1631.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_args : TBase
      {
        private long _p;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instruction;
        }

        public insertInstructionAtSelectedLine_args()
        {
        }

        public insertInstructionAtSelectedLine_args DeepCopy()
        {
          var tmp1633 = new insertInstructionAtSelectedLine_args();
          if(__isset.p)
          {
            tmp1633.P = this.P;
          }
          tmp1633.__isset.p = this.__isset.p;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1633.Instruction = this.Instruction;
          }
          tmp1633.__isset.instruction = this.__isset.instruction;
          return tmp1633;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1634 = new TStruct("insertInstructionAtSelectedLine_args");
            await oprot.WriteStructBeginAsync(tmp1634, cancellationToken);
            var tmp1635 = new TField();
            if(__isset.p)
            {
              tmp1635.Name = "p";
              tmp1635.Type = TType.I64;
              tmp1635.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1635, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1635.Name = "instruction";
              tmp1635.Type = TType.String;
              tmp1635.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1635, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1636 = new StringBuilder("insertInstructionAtSelectedLine_args(");
          int tmp1637 = 0;
          if(__isset.p)
          {
            if(0 < tmp1637++) { tmp1636.Append(", "); }
            tmp1636.Append("P: ");
            P.ToString(tmp1636);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1637++) { tmp1636.Append(", "); }
            tmp1636.Append("Instruction: ");
            Instruction.ToString(tmp1636);
          }
          tmp1636.Append(')');
          return tmp1636.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public insertInstructionAtSelectedLine_result()
        {
        }

        public insertInstructionAtSelectedLine_result DeepCopy()
        {
          var tmp1638 = new insertInstructionAtSelectedLine_result();
          if((Success != null) && __isset.success)
          {
            tmp1638.Success = this.Success;
          }
          tmp1638.__isset.success = this.__isset.success;
          return tmp1638;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1639 = new TStruct("insertInstructionAtSelectedLine_result");
            await oprot.WriteStructBeginAsync(tmp1639, cancellationToken);
            var tmp1640 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1640.Name = "Success";
                tmp1640.Type = TType.String;
                tmp1640.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1640, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1641 = new StringBuilder("insertInstructionAtSelectedLine_result(");
          int tmp1642 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1642++) { tmp1641.Append(", "); }
            tmp1641.Append("Success: ");
            Success.ToString(tmp1641);
          }
          tmp1641.Append(')');
          return tmp1641.ToString();
        }
      }


      public partial class displayScreen_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public displayScreen_args()
        {
        }

        public displayScreen_args DeepCopy()
        {
          var tmp1643 = new displayScreen_args();
          if(__isset.p)
          {
            tmp1643.P = this.P;
          }
          tmp1643.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1643.Identifier = this.Identifier;
          }
          tmp1643.__isset.identifier = this.__isset.identifier;
          return tmp1643;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1644 = new TStruct("displayScreen_args");
            await oprot.WriteStructBeginAsync(tmp1644, cancellationToken);
            var tmp1645 = new TField();
            if(__isset.p)
            {
              tmp1645.Name = "p";
              tmp1645.Type = TType.I64;
              tmp1645.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1645, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1645.Name = "identifier";
              tmp1645.Type = TType.String;
              tmp1645.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1645, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1646 = new StringBuilder("displayScreen_args(");
          int tmp1647 = 0;
          if(__isset.p)
          {
            if(0 < tmp1647++) { tmp1646.Append(", "); }
            tmp1646.Append("P: ");
            P.ToString(tmp1646);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1647++) { tmp1646.Append(", "); }
            tmp1646.Append("Identifier: ");
            Identifier.ToString(tmp1646);
          }
          tmp1646.Append(')');
          return tmp1646.ToString();
        }
      }


      public partial class displayScreen_result : TBase
      {

        public displayScreen_result()
        {
        }

        public displayScreen_result DeepCopy()
        {
          var tmp1648 = new displayScreen_result();
          return tmp1648;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1649 = new TStruct("displayScreen_result");
            await oprot.WriteStructBeginAsync(tmp1649, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1650 = new StringBuilder("displayScreen_result(");
          tmp1650.Append(')');
          return tmp1650.ToString();
        }
      }


      public partial class displayHelp_args : TBase
      {
        private long _p;
        private string _title;
        private string _htmlContentFile;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string HtmlContentFile
        {
          get
          {
            return _htmlContentFile;
          }
          set
          {
            __isset.htmlContentFile = true;
            this._htmlContentFile = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool htmlContentFile;
        }

        public displayHelp_args()
        {
        }

        public displayHelp_args DeepCopy()
        {
          var tmp1652 = new displayHelp_args();
          if(__isset.p)
          {
            tmp1652.P = this.P;
          }
          tmp1652.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1652.Title = this.Title;
          }
          tmp1652.__isset.title = this.__isset.title;
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            tmp1652.HtmlContentFile = this.HtmlContentFile;
          }
          tmp1652.__isset.htmlContentFile = this.__isset.htmlContentFile;
          return tmp1652;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlContentFile = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1653 = new TStruct("displayHelp_args");
            await oprot.WriteStructBeginAsync(tmp1653, cancellationToken);
            var tmp1654 = new TField();
            if(__isset.p)
            {
              tmp1654.Name = "p";
              tmp1654.Type = TType.I64;
              tmp1654.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1654.Name = "title";
              tmp1654.Type = TType.String;
              tmp1654.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              tmp1654.Name = "htmlContentFile";
              tmp1654.Type = TType.String;
              tmp1654.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1654, cancellationToken);
              await oprot.WriteStringAsync(HtmlContentFile, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.htmlContentFile == other.__isset.htmlContentFile) && ((!__isset.htmlContentFile) || (global::System.Object.Equals(HtmlContentFile, other.HtmlContentFile))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              hashcode = (hashcode * 397) + HtmlContentFile.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1655 = new StringBuilder("displayHelp_args(");
          int tmp1656 = 0;
          if(__isset.p)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("P: ");
            P.ToString(tmp1655);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("Title: ");
            Title.ToString(tmp1655);
          }
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            if(0 < tmp1656++) { tmp1655.Append(", "); }
            tmp1655.Append("HtmlContentFile: ");
            HtmlContentFile.ToString(tmp1655);
          }
          tmp1655.Append(')');
          return tmp1655.ToString();
        }
      }


      public partial class displayHelp_result : TBase
      {

        public displayHelp_result()
        {
        }

        public displayHelp_result DeepCopy()
        {
          var tmp1657 = new displayHelp_result();
          return tmp1657;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1658 = new TStruct("displayHelp_result");
            await oprot.WriteStructBeginAsync(tmp1658, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1659 = new StringBuilder("displayHelp_result(");
          tmp1659.Append(')');
          return tmp1659.ToString();
        }
      }

    }

  }
}
