/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Pendant
  {
    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of the Smart Pendant itself
      /// (avoid using this for conditional feature use - use the Extension apiVersion() instead)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service events.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of Pendant service events that have occured since last call
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query the current UI language of the pendant interface.
      /// Returns IETF language codes (RFCs 5646, 5645, 4647) of languages
      /// (typically ISO 693-1 code when region insignificant)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// The UI screen currently shown to the pendant user
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an Item type described using a YML source code string
      /// Returns a list of parsing errors (0 on success)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ymlSource"></param>
      global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image file for later reference by filename (must be uniquely named, with .jpg or .png).
      /// If file cannot be accessed by service, it will be locally read and registerImageData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image for later reference by name (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageData"></param>
      /// <param name="imageName"></param>
      global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a HTML file for later reference by filename (must be uniquely named, with .html).
      /// If file cannot be accessed by service, it will be locally read and registerHTMLData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlFileName"></param>
      global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register HTML for later reference by name (must be uniquely named, with .html extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlData"></param>
      /// <param name="htmlName"></param>
      global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a translation file (e.g. a Java properties file for a language); extension is used to determine format
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationFileName"></param>
      global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register translation file data (translationName typically filename-like; extension is used to determine format)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationData"></param>
      /// <param name="translationName"></param>
      global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Utility window with the UI.
      /// The itemType references a previously registered YML item instantiated for the window
      /// UI content.
      /// A main menu entry will automatically be added to the pendant UI, for opening the utility window.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="itemType"></param>
      /// <param name="menuItemName"></param>
      /// <param name="windowTitle"></param>
      global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open (make visible) previously registered Utility Window
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close a visible Utility Window (make invisible - state is maintained)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Collapse previously registered Utility Window, if in expanded state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Expand previously registered Utility Window, if in collapsed state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register UI content at the specified integration point in the pendant UI.
      /// The itemType should reference a YML item previouslt registered via registerYML().
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="itemType"></param>
      /// <param name="buttonLabel"></param>
      /// <param name="buttonImage"></param>
      global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// get property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set several properties (potentially for different items) at once.  This is more
      /// efficient that many repeated calls to setProperty().  Note it is async so no
      /// errors/exceptions are thrown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="propValuesList"></param>
      global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the configuration of a chart by ID.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="config"></param>
      global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the configuration of a chart by ID
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="dataset"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to access the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Add a new key to the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="data"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to remove from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Hides an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to hide a key from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="hidden"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append new data points to a specified key in the data of a chart by ID.
      /// This function will only have an effect on line/scatter charts. Set
      /// 'right' to true to pass the dataset for a secondary scale on the right
      /// hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="points"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Increments a category value by `val`.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="val"></param>
      global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to the specified filename (must be uniquely named, with .jpg or .png).
      /// Calls exportChartImageData if the extension is unable to access the file.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to a binary blob (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user.
      /// Notices are automaticlly hidden after a short display period.
      /// Notice messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user with specified disposition.
      /// As for notice() but displayed in a way that connotes the specified disposition.
      /// For example, a Positive disposition may be shown in green.
      /// (API version 2.1 and later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="disposition"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show error to user.
      /// Errors should only indicate important situations that the user must be aware of and for which deliberate
      /// acknowledgement is required before proceeding.  Typically, some action will be required to correct the situation.
      /// Errors are displayed until dismissed by the user.
      /// Error messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Display modal pop-up dialog.  Typically, Yes/No, although negativeOption can be omitted
      /// The identifier can be used to associate the corresponding PopupOpened & PopupClosed events triggered by
      /// user positive/negative selection or automatic dismissal/cancellation - for example is screen switched, alarm etc.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="positiveOption"></param>
      /// <param name="negativeOption"></param>
      global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default);

      /// <summary>
      /// Cancel an open popup dialog.  If the dialog has a negative option, behaves as if user selected it, otherwise
      /// no event is generated
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Inserts an instruction, returns a string:
      /// Success,
      /// UnsupportedCommand,
      /// InvalidFormat,
      /// ProgrammingViewClosed,
      /// JobDoesNotExist,
      /// CallingJobFromSameJob,
      /// ExceededMaxArguments,
      /// JobNotEditable,
      /// MultiSelectActive,
      /// TimedOut,
      /// Unknown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays a standard pendant UI screen by passing a string with the screen identifier. (Only available from SDK API 2.2 onward)
      /// Refer to the YML - URI Links documentation for the list of supported screens and settings.
      /// Do not include the URI "&lt;a href&gt; screen:" portion in the identifier.  For example to display the jogging panel use:
      /// pendant.displayScreen("programmingView?panel=jogging");
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await send_pendantVersion(p, cancellationToken);
        return await recv_pendantVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp474 = new InternalStructs.pendantVersion_args() {
          P = p,
        };
        
        await tmp474.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_pendantVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp475 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp475.Type == TMessageType.Exception)
        {
          var tmp476 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp476;
        }

        var tmp477 = new InternalStructs.pendantVersion_result();
        await tmp477.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp477.__isset.success)
        {
          return tmp477.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendantVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(p, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp478 = new InternalStructs.subscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp478.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp479 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp479.Type == TMessageType.Exception)
        {
          var tmp480 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp480;
        }

        var tmp481 = new InternalStructs.subscribeEventTypes_result();
        await tmp481.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(p, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp482 = new InternalStructs.unsubscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp482.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp483 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp483.Type == TMessageType.Exception)
        {
          var tmp484 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp484;
        }

        var tmp485 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp485.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default)
      {
        await send_events(p, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp486 = new InternalStructs.events_args() {
          P = p,
        };
        
        await tmp486.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp487 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp487.Type == TMessageType.Exception)
        {
          var tmp488 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp488;
        }

        var tmp489 = new InternalStructs.events_result();
        await tmp489.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp489.__isset.success)
        {
          return tmp489.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLanguage(p, cancellationToken);
        return await recv_currentLanguage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp490 = new InternalStructs.currentLanguage_args() {
          P = p,
        };
        
        await tmp490.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLanguage(CancellationToken cancellationToken = default)
      {
        
        var tmp491 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp491.Type == TMessageType.Exception)
        {
          var tmp492 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp492;
        }

        var tmp493 = new InternalStructs.currentLanguage_result();
        await tmp493.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp493.__isset.success)
        {
          return tmp493.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLanguage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLocale(p, cancellationToken);
        return await recv_currentLocale(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp494 = new InternalStructs.currentLocale_args() {
          P = p,
        };
        
        await tmp494.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLocale(CancellationToken cancellationToken = default)
      {
        
        var tmp495 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp495.Type == TMessageType.Exception)
        {
          var tmp496 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp496;
        }

        var tmp497 = new InternalStructs.currentLocale_result();
        await tmp497.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp497.__isset.success)
        {
          return tmp497.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLocale failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await send_currentScreenName(p, cancellationToken);
        return await recv_currentScreenName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp498 = new InternalStructs.currentScreenName_args() {
          P = p,
        };
        
        await tmp498.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentScreenName(CancellationToken cancellationToken = default)
      {
        
        var tmp499 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp499.Type == TMessageType.Exception)
        {
          var tmp500 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp500;
        }

        var tmp501 = new InternalStructs.currentScreenName_result();
        await tmp501.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp501.__isset.success)
        {
          return tmp501.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentScreenName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await send_registerYML(p, ymlSource, cancellationToken);
        return await recv_registerYML(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp502 = new InternalStructs.registerYML_args() {
          P = p,
          YmlSource = ymlSource,
        };
        
        await tmp502.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_registerYML(CancellationToken cancellationToken = default)
      {
        
        var tmp503 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp503.Type == TMessageType.Exception)
        {
          var tmp504 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp504;
        }

        var tmp505 = new InternalStructs.registerYML_result();
        await tmp505.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp505.__isset.success)
        {
          return tmp505.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerYML failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_registerImageFile(p, imageFileName, cancellationToken);
        await recv_registerImageFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp506 = new InternalStructs.registerImageFile_args() {
          P = p,
          ImageFileName = imageFileName,
        };
        
        await tmp506.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageFile(CancellationToken cancellationToken = default)
      {
        
        var tmp507 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp507.Type == TMessageType.Exception)
        {
          var tmp508 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp508;
        }

        var tmp509 = new InternalStructs.registerImageFile_result();
        await tmp509.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp509.__isset.e)
        {
          throw tmp509.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await send_registerImageData(p, imageData, imageName, cancellationToken);
        await recv_registerImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp510 = new InternalStructs.registerImageData_args() {
          P = p,
          ImageData = imageData,
          ImageName = imageName,
        };
        
        await tmp510.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp511 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp511.Type == TMessageType.Exception)
        {
          var tmp512 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp512;
        }

        var tmp513 = new InternalStructs.registerImageData_result();
        await tmp513.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp513.__isset.e)
        {
          throw tmp513.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLFile(p, htmlFileName, cancellationToken);
        await recv_registerHTMLFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp514 = new InternalStructs.registerHTMLFile_args() {
          P = p,
          HtmlFileName = htmlFileName,
        };
        
        await tmp514.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLFile(CancellationToken cancellationToken = default)
      {
        
        var tmp515 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp515.Type == TMessageType.Exception)
        {
          var tmp516 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp516;
        }

        var tmp517 = new InternalStructs.registerHTMLFile_result();
        await tmp517.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp517.__isset.e)
        {
          throw tmp517.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLData(p, htmlData, htmlName, cancellationToken);
        await recv_registerHTMLData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp518 = new InternalStructs.registerHTMLData_args() {
          P = p,
          HtmlData = htmlData,
          HtmlName = htmlName,
        };
        
        await tmp518.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLData(CancellationToken cancellationToken = default)
      {
        
        var tmp519 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp519.Type == TMessageType.Exception)
        {
          var tmp520 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp520;
        }

        var tmp521 = new InternalStructs.registerHTMLData_result();
        await tmp521.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp521.__isset.e)
        {
          throw tmp521.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationFile(p, locale, translationFileName, cancellationToken);
        await recv_registerTranslationFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp522 = new InternalStructs.registerTranslationFile_args() {
          P = p,
          Locale = locale,
          TranslationFileName = translationFileName,
        };
        
        await tmp522.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationFile(CancellationToken cancellationToken = default)
      {
        
        var tmp523 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp523.Type == TMessageType.Exception)
        {
          var tmp524 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp524;
        }

        var tmp525 = new InternalStructs.registerTranslationFile_result();
        await tmp525.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp525.__isset.e)
        {
          throw tmp525.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationData(p, locale, translationData, translationName, cancellationToken);
        await recv_registerTranslationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp526 = new InternalStructs.registerTranslationData_args() {
          P = p,
          Locale = locale,
          TranslationData = translationData,
          TranslationName = translationName,
        };
        
        await tmp526.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationData(CancellationToken cancellationToken = default)
      {
        
        var tmp527 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp527.Type == TMessageType.Exception)
        {
          var tmp528 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp528;
        }

        var tmp529 = new InternalStructs.registerTranslationData_result();
        await tmp529.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp529.__isset.e)
        {
          throw tmp529.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindow(p, identifier, itemType, menuItemName, windowTitle, cancellationToken);
        await recv_registerUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp530 = new InternalStructs.registerUtilityWindow_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
        };
        
        await tmp530.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp531 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp531.Type == TMessageType.Exception)
        {
          var tmp532 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp532;
        }

        var tmp533 = new InternalStructs.registerUtilityWindow_result();
        await tmp533.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp533.__isset.e)
        {
          throw tmp533.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityWindow(p, identifier, cancellationToken);
        await recv_unregisterUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp534 = new InternalStructs.unregisterUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp534.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp535 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp535.Type == TMessageType.Exception)
        {
          var tmp536 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp536;
        }

        var tmp537 = new InternalStructs.unregisterUtilityWindow_result();
        await tmp537.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp537.__isset.e)
        {
          throw tmp537.E;
        }
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_openUtilityWindow(p, identifier, cancellationToken);
        await recv_openUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp538 = new InternalStructs.openUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp538.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_openUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp539 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp539.Type == TMessageType.Exception)
        {
          var tmp540 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp540;
        }

        var tmp541 = new InternalStructs.openUtilityWindow_result();
        await tmp541.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_closeUtilityWindow(p, identifier, cancellationToken);
        await recv_closeUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp542 = new InternalStructs.closeUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp542.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp543 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp543.Type == TMessageType.Exception)
        {
          var tmp544 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp544;
        }

        var tmp545 = new InternalStructs.closeUtilityWindow_result();
        await tmp545.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_collapseUtilityWindow(p, identifier, cancellationToken);
        await recv_collapseUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp546 = new InternalStructs.collapseUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp546.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_collapseUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp547 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp547.Type == TMessageType.Exception)
        {
          var tmp548 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp548;
        }

        var tmp549 = new InternalStructs.collapseUtilityWindow_result();
        await tmp549.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_expandUtilityWindow(p, identifier, cancellationToken);
        await recv_expandUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp550 = new InternalStructs.expandUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp550.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_expandUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp551 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp551.Type == TMessageType.Exception)
        {
          var tmp552 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp552;
        }

        var tmp553 = new InternalStructs.expandUtilityWindow_result();
        await tmp553.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await send_registerIntegration(p, identifier, integrationPoint, itemType, buttonLabel, buttonImage, cancellationToken);
        await recv_registerIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp554 = new InternalStructs.registerIntegration_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          ItemType = itemType,
          ButtonLabel = buttonLabel,
          ButtonImage = buttonImage,
        };
        
        await tmp554.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp555 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp555.Type == TMessageType.Exception)
        {
          var tmp556 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp556;
        }

        var tmp557 = new InternalStructs.registerIntegration_result();
        await tmp557.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp557.__isset.e)
        {
          throw tmp557.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterIntegration(p, identifier, cancellationToken);
        await recv_unregisterIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp558 = new InternalStructs.unregisterIntegration_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp558.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp559 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp559.Type == TMessageType.Exception)
        {
          var tmp560 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp560;
        }

        var tmp561 = new InternalStructs.unregisterIntegration_result();
        await tmp561.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp561.__isset.e)
        {
          throw tmp561.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await send_property(p, itemID, name, cancellationToken);
        return await recv_property(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("property", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp562 = new InternalStructs.property_args() {
          P = p,
          ItemID = itemID,
          Name = name,
        };
        
        await tmp562.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_property(CancellationToken cancellationToken = default)
      {
        
        var tmp563 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp563.Type == TMessageType.Exception)
        {
          var tmp564 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp564;
        }

        var tmp565 = new InternalStructs.property_result();
        await tmp565.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp565.__isset.success)
        {
          return tmp565.Success;
        }
        if (tmp565.__isset.e)
        {
          throw tmp565.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "property failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setProperty(p, itemID, name, @value, cancellationToken);
        await recv_setProperty(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp566 = new InternalStructs.setProperty_args() {
          P = p,
          ItemID = itemID,
          Name = name,
          Value = @value,
        };
        
        await tmp566.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setProperty(CancellationToken cancellationToken = default)
      {
        
        var tmp567 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp567.Type == TMessageType.Exception)
        {
          var tmp568 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp568;
        }

        var tmp569 = new InternalStructs.setProperty_result();
        await tmp569.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp569.__isset.e)
        {
          throw tmp569.E;
        }
      }

      public async global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await send_setProperties(p, propValuesList, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperties", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp570 = new InternalStructs.setProperties_args() {
          P = p,
          PropValuesList = propValuesList,
        };
        
        await tmp570.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await send_setChartConfig(p, chartID, config, cancellationToken);
        await recv_setChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp571 = new InternalStructs.setChartConfig_args() {
          P = p,
          ChartID = chartID,
          Config = config,
        };
        
        await tmp571.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp572 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp572.Type == TMessageType.Exception)
        {
          var tmp573 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp573;
        }

        var tmp574 = new InternalStructs.setChartConfig_result();
        await tmp574.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp574.__isset.e)
        {
          throw tmp574.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await send_getChartConfig(p, chartID, cancellationToken);
        return await recv_getChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp575 = new InternalStructs.getChartConfig_args() {
          P = p,
          ChartID = chartID,
        };
        
        await tmp575.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_getChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp576 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp576.Type == TMessageType.Exception)
        {
          var tmp577 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp577;
        }

        var tmp578 = new InternalStructs.getChartConfig_result();
        await tmp578.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp578.__isset.success)
        {
          return tmp578.Success;
        }
        if (tmp578.__isset.e)
        {
          throw tmp578.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await send_setChartData(p, chartID, dataset, right, cancellationToken);
        await recv_setChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp579 = new InternalStructs.setChartData_args() {
          P = p,
          ChartID = chartID,
          Dataset = dataset,
          Right = right,
        };
        
        await tmp579.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp580 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp580.Type == TMessageType.Exception)
        {
          var tmp581 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp581;
        }

        var tmp582 = new InternalStructs.setChartData_result();
        await tmp582.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp582.__isset.e)
        {
          throw tmp582.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await send_getChartData(p, chartID, right, cancellationToken);
        return await recv_getChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp583 = new InternalStructs.getChartData_args() {
          P = p,
          ChartID = chartID,
          Right = right,
        };
        
        await tmp583.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> recv_getChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp584 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp584.Type == TMessageType.Exception)
        {
          var tmp585 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp585;
        }

        var tmp586 = new InternalStructs.getChartData_result();
        await tmp586.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp586.__isset.success)
        {
          return tmp586.Success;
        }
        if (tmp586.__isset.e)
        {
          throw tmp586.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await send_addChartKey(p, chartID, key, data, right, cancellationToken);
        await recv_addChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp587 = new InternalStructs.addChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Data = data,
          Right = right,
        };
        
        await tmp587.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_addChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp588 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp588.Type == TMessageType.Exception)
        {
          var tmp589 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp589;
        }

        var tmp590 = new InternalStructs.addChartKey_result();
        await tmp590.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp590.__isset.e)
        {
          throw tmp590.E;
        }
      }

      public async global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await send_removeChartKey(p, chartID, key, right, cancellationToken);
        await recv_removeChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp591 = new InternalStructs.removeChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Right = right,
        };
        
        await tmp591.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp592 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp592.Type == TMessageType.Exception)
        {
          var tmp593 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp593;
        }

        var tmp594 = new InternalStructs.removeChartKey_result();
        await tmp594.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp594.__isset.e)
        {
          throw tmp594.E;
        }
      }

      public async global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await send_hideChartKey(p, chartID, key, hidden, right, cancellationToken);
        await recv_hideChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp595 = new InternalStructs.hideChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Hidden = hidden,
          Right = right,
        };
        
        await tmp595.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_hideChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp596 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp596.Type == TMessageType.Exception)
        {
          var tmp597 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp597;
        }

        var tmp598 = new InternalStructs.hideChartKey_result();
        await tmp598.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp598.__isset.e)
        {
          throw tmp598.E;
        }
      }

      public async global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await send_appendChartPoints(p, chartID, key, points, right, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendChartPoints", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp599 = new InternalStructs.appendChartPoints_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Points = points,
          Right = right,
        };
        
        await tmp599.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await send_incrementChartKey(p, chartID, key, val, cancellationToken);
        await recv_incrementChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp600 = new InternalStructs.incrementChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Val = val,
        };
        
        await tmp600.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_incrementChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp601 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp601.Type == TMessageType.Exception)
        {
          var tmp602 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp602;
        }

        var tmp603 = new InternalStructs.incrementChartKey_result();
        await tmp603.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp603.__isset.e)
        {
          throw tmp603.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImage(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp604 = new InternalStructs.exportChartImage_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp604.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_exportChartImage(CancellationToken cancellationToken = default)
      {
        
        var tmp605 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp605.Type == TMessageType.Exception)
        {
          var tmp606 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp606;
        }

        var tmp607 = new InternalStructs.exportChartImage_result();
        await tmp607.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp607.__isset.success)
        {
          return tmp607.Success;
        }
        if (tmp607.__isset.e)
        {
          throw tmp607.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImageData(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp608 = new InternalStructs.exportChartImageData_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp608.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_exportChartImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp609 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp609.Type == TMessageType.Exception)
        {
          var tmp610 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp610;
        }

        var tmp611 = new InternalStructs.exportChartImageData_result();
        await tmp611.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp611.__isset.success)
        {
          return tmp611.Success;
        }
        if (tmp611.__isset.e)
        {
          throw tmp611.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImageData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_notice(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp612 = new InternalStructs.notice_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp612.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_dispNotice(p, disposition, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dispNotice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp613 = new InternalStructs.dispNotice_args() {
          P = p,
          Disposition = disposition,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp613.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_error(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("error", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp614 = new InternalStructs.error_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp614.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await send_popupDialog(p, identifier, title, message, positiveOption, negativeOption, cancellationToken);
        await recv_popupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp615 = new InternalStructs.popupDialog_args() {
          P = p,
          Identifier = identifier,
          Title = title,
          Message = message,
          PositiveOption = positiveOption,
          NegativeOption = negativeOption,
        };
        
        await tmp615.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_popupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp616.Type == TMessageType.Exception)
        {
          var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp617;
        }

        var tmp618 = new InternalStructs.popupDialog_result();
        await tmp618.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp618.__isset.e)
        {
          throw tmp618.E;
        }
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_cancelPopupDialog(p, identifier, cancellationToken);
        await recv_cancelPopupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp619 = new InternalStructs.cancelPopupDialog_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp619.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelPopupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp620 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp620.Type == TMessageType.Exception)
        {
          var tmp621 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp621;
        }

        var tmp622 = new InternalStructs.cancelPopupDialog_result();
        await tmp622.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await send_insertInstructionAtSelectedLine(p, instruction, cancellationToken);
        return await recv_insertInstructionAtSelectedLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp623 = new InternalStructs.insertInstructionAtSelectedLine_args() {
          P = p,
          Instruction = instruction,
        };
        
        await tmp623.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_insertInstructionAtSelectedLine(CancellationToken cancellationToken = default)
      {
        
        var tmp624 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp624.Type == TMessageType.Exception)
        {
          var tmp625 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp625;
        }

        var tmp626 = new InternalStructs.insertInstructionAtSelectedLine_result();
        await tmp626.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp626.__isset.success)
        {
          return tmp626.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInstructionAtSelectedLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_displayScreen(p, identifier, cancellationToken);
        await recv_displayScreen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp627 = new InternalStructs.displayScreen_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp627.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayScreen(CancellationToken cancellationToken = default)
      {
        
        var tmp628 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp628.Type == TMessageType.Exception)
        {
          var tmp629 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp629;
        }

        var tmp630 = new InternalStructs.displayScreen_result();
        await tmp630.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["pendantVersion"] = pendantVersion_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["currentLanguage"] = currentLanguage_ProcessAsync;
        processMap_["currentLocale"] = currentLocale_ProcessAsync;
        processMap_["currentScreenName"] = currentScreenName_ProcessAsync;
        processMap_["registerYML"] = registerYML_ProcessAsync;
        processMap_["registerImageFile"] = registerImageFile_ProcessAsync;
        processMap_["registerImageData"] = registerImageData_ProcessAsync;
        processMap_["registerHTMLFile"] = registerHTMLFile_ProcessAsync;
        processMap_["registerHTMLData"] = registerHTMLData_ProcessAsync;
        processMap_["registerTranslationFile"] = registerTranslationFile_ProcessAsync;
        processMap_["registerTranslationData"] = registerTranslationData_ProcessAsync;
        processMap_["registerUtilityWindow"] = registerUtilityWindow_ProcessAsync;
        processMap_["unregisterUtilityWindow"] = unregisterUtilityWindow_ProcessAsync;
        processMap_["openUtilityWindow"] = openUtilityWindow_ProcessAsync;
        processMap_["closeUtilityWindow"] = closeUtilityWindow_ProcessAsync;
        processMap_["collapseUtilityWindow"] = collapseUtilityWindow_ProcessAsync;
        processMap_["expandUtilityWindow"] = expandUtilityWindow_ProcessAsync;
        processMap_["registerIntegration"] = registerIntegration_ProcessAsync;
        processMap_["unregisterIntegration"] = unregisterIntegration_ProcessAsync;
        processMap_["property"] = property_ProcessAsync;
        processMap_["setProperty"] = setProperty_ProcessAsync;
        processMap_["setProperties"] = setProperties_ProcessAsync;
        processMap_["setChartConfig"] = setChartConfig_ProcessAsync;
        processMap_["getChartConfig"] = getChartConfig_ProcessAsync;
        processMap_["setChartData"] = setChartData_ProcessAsync;
        processMap_["getChartData"] = getChartData_ProcessAsync;
        processMap_["addChartKey"] = addChartKey_ProcessAsync;
        processMap_["removeChartKey"] = removeChartKey_ProcessAsync;
        processMap_["hideChartKey"] = hideChartKey_ProcessAsync;
        processMap_["appendChartPoints"] = appendChartPoints_ProcessAsync;
        processMap_["incrementChartKey"] = incrementChartKey_ProcessAsync;
        processMap_["exportChartImage"] = exportChartImage_ProcessAsync;
        processMap_["exportChartImageData"] = exportChartImageData_ProcessAsync;
        processMap_["notice"] = notice_ProcessAsync;
        processMap_["dispNotice"] = dispNotice_ProcessAsync;
        processMap_["error"] = error_ProcessAsync;
        processMap_["popupDialog"] = popupDialog_ProcessAsync;
        processMap_["cancelPopupDialog"] = cancelPopupDialog_ProcessAsync;
        processMap_["insertInstructionAtSelectedLine"] = insertInstructionAtSelectedLine_ProcessAsync;
        processMap_["displayScreen"] = displayScreen_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task pendantVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp631 = new InternalStructs.pendantVersion_args();
        await tmp631.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp632 = new InternalStructs.pendantVersion_result();
        try
        {
          tmp632.Success = await _iAsync.pendantVersion(tmp631.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp632.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp633)
        {
          var tmp634 = $"Error occurred in {GetType().FullName}: {tmp633.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp633, tmp634);
          else
            Console.Error.WriteLine(tmp634);
          var tmp635 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp635.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp636 = new InternalStructs.subscribeEventTypes_args();
        await tmp636.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp637 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp636.P, tmp636.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp637.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp638)
        {
          var tmp639 = $"Error occurred in {GetType().FullName}: {tmp638.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp638, tmp639);
          else
            Console.Error.WriteLine(tmp639);
          var tmp640 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp640.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp641 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp641.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp642 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp641.P, tmp641.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp642.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp643)
        {
          var tmp644 = $"Error occurred in {GetType().FullName}: {tmp643.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp643, tmp644);
          else
            Console.Error.WriteLine(tmp644);
          var tmp645 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp645.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp646 = new InternalStructs.events_args();
        await tmp646.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp647 = new InternalStructs.events_result();
        try
        {
          tmp647.Success = await _iAsync.events(tmp646.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp647.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp648)
        {
          var tmp649 = $"Error occurred in {GetType().FullName}: {tmp648.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp648, tmp649);
          else
            Console.Error.WriteLine(tmp649);
          var tmp650 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp650.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLanguage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp651 = new InternalStructs.currentLanguage_args();
        await tmp651.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp652 = new InternalStructs.currentLanguage_result();
        try
        {
          tmp652.Success = await _iAsync.currentLanguage(tmp651.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp652.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp653)
        {
          var tmp654 = $"Error occurred in {GetType().FullName}: {tmp653.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp653, tmp654);
          else
            Console.Error.WriteLine(tmp654);
          var tmp655 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Exception, seqid), cancellationToken);
          await tmp655.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLocale_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp656 = new InternalStructs.currentLocale_args();
        await tmp656.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp657 = new InternalStructs.currentLocale_result();
        try
        {
          tmp657.Success = await _iAsync.currentLocale(tmp656.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Reply, seqid), cancellationToken); 
          await tmp657.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp658)
        {
          var tmp659 = $"Error occurred in {GetType().FullName}: {tmp658.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp658, tmp659);
          else
            Console.Error.WriteLine(tmp659);
          var tmp660 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Exception, seqid), cancellationToken);
          await tmp660.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentScreenName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp661 = new InternalStructs.currentScreenName_args();
        await tmp661.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp662 = new InternalStructs.currentScreenName_result();
        try
        {
          tmp662.Success = await _iAsync.currentScreenName(tmp661.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp662.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp663)
        {
          var tmp664 = $"Error occurred in {GetType().FullName}: {tmp663.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp663, tmp664);
          else
            Console.Error.WriteLine(tmp664);
          var tmp665 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Exception, seqid), cancellationToken);
          await tmp665.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerYML_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp666 = new InternalStructs.registerYML_args();
        await tmp666.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp667 = new InternalStructs.registerYML_result();
        try
        {
          tmp667.Success = await _iAsync.registerYML(tmp666.P, tmp666.YmlSource, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Reply, seqid), cancellationToken); 
          await tmp667.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp668)
        {
          var tmp669 = $"Error occurred in {GetType().FullName}: {tmp668.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp668, tmp669);
          else
            Console.Error.WriteLine(tmp669);
          var tmp670 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Exception, seqid), cancellationToken);
          await tmp670.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp671 = new InternalStructs.registerImageFile_args();
        await tmp671.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp672 = new InternalStructs.registerImageFile_result();
        try
        {
          try
          {
            await _iAsync.registerImageFile(tmp671.P, tmp671.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp673)
          {
            tmp672.E = tmp673;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp672.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp674)
        {
          var tmp675 = $"Error occurred in {GetType().FullName}: {tmp674.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp674, tmp675);
          else
            Console.Error.WriteLine(tmp675);
          var tmp676 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp676.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp677 = new InternalStructs.registerImageData_args();
        await tmp677.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp678 = new InternalStructs.registerImageData_result();
        try
        {
          try
          {
            await _iAsync.registerImageData(tmp677.P, tmp677.ImageData, tmp677.ImageName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp679)
          {
            tmp678.E = tmp679;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp678.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp680)
        {
          var tmp681 = $"Error occurred in {GetType().FullName}: {tmp680.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp680, tmp681);
          else
            Console.Error.WriteLine(tmp681);
          var tmp682 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp682.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp683 = new InternalStructs.registerHTMLFile_args();
        await tmp683.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp684 = new InternalStructs.registerHTMLFile_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLFile(tmp683.P, tmp683.HtmlFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp685)
          {
            tmp684.E = tmp685;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp684.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp686)
        {
          var tmp687 = $"Error occurred in {GetType().FullName}: {tmp686.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp686, tmp687);
          else
            Console.Error.WriteLine(tmp687);
          var tmp688 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp688.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp689 = new InternalStructs.registerHTMLData_args();
        await tmp689.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp690 = new InternalStructs.registerHTMLData_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLData(tmp689.P, tmp689.HtmlData, tmp689.HtmlName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp691)
          {
            tmp690.E = tmp691;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp690.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp692)
        {
          var tmp693 = $"Error occurred in {GetType().FullName}: {tmp692.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp692, tmp693);
          else
            Console.Error.WriteLine(tmp693);
          var tmp694 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Exception, seqid), cancellationToken);
          await tmp694.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp695 = new InternalStructs.registerTranslationFile_args();
        await tmp695.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp696 = new InternalStructs.registerTranslationFile_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationFile(tmp695.P, tmp695.Locale, tmp695.TranslationFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp697)
          {
            tmp696.E = tmp697;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp696.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp698)
        {
          var tmp699 = $"Error occurred in {GetType().FullName}: {tmp698.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp698, tmp699);
          else
            Console.Error.WriteLine(tmp699);
          var tmp700 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp700.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp701 = new InternalStructs.registerTranslationData_args();
        await tmp701.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp702 = new InternalStructs.registerTranslationData_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationData(tmp701.P, tmp701.Locale, tmp701.TranslationData, tmp701.TranslationName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp703)
          {
            tmp702.E = tmp703;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp702.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp704)
        {
          var tmp705 = $"Error occurred in {GetType().FullName}: {tmp704.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp704, tmp705);
          else
            Console.Error.WriteLine(tmp705);
          var tmp706 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp706.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp707 = new InternalStructs.registerUtilityWindow_args();
        await tmp707.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp708 = new InternalStructs.registerUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindow(tmp707.P, tmp707.Identifier, tmp707.ItemType, tmp707.MenuItemName, tmp707.WindowTitle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp709)
          {
            tmp708.E = tmp709;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp708.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp710)
        {
          var tmp711 = $"Error occurred in {GetType().FullName}: {tmp710.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp710, tmp711);
          else
            Console.Error.WriteLine(tmp711);
          var tmp712 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp712.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp713 = new InternalStructs.unregisterUtilityWindow_args();
        await tmp713.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp714 = new InternalStructs.unregisterUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityWindow(tmp713.P, tmp713.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp715)
          {
            tmp714.E = tmp715;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp714.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp716)
        {
          var tmp717 = $"Error occurred in {GetType().FullName}: {tmp716.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp716, tmp717);
          else
            Console.Error.WriteLine(tmp717);
          var tmp718 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp718.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp719 = new InternalStructs.openUtilityWindow_args();
        await tmp719.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp720 = new InternalStructs.openUtilityWindow_result();
        try
        {
          await _iAsync.openUtilityWindow(tmp719.P, tmp719.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp720.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp721)
        {
          var tmp722 = $"Error occurred in {GetType().FullName}: {tmp721.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp721, tmp722);
          else
            Console.Error.WriteLine(tmp722);
          var tmp723 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp723.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp724 = new InternalStructs.closeUtilityWindow_args();
        await tmp724.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp725 = new InternalStructs.closeUtilityWindow_result();
        try
        {
          await _iAsync.closeUtilityWindow(tmp724.P, tmp724.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp725.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp726)
        {
          var tmp727 = $"Error occurred in {GetType().FullName}: {tmp726.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp726, tmp727);
          else
            Console.Error.WriteLine(tmp727);
          var tmp728 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp728.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp729 = new InternalStructs.collapseUtilityWindow_args();
        await tmp729.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp730 = new InternalStructs.collapseUtilityWindow_result();
        try
        {
          await _iAsync.collapseUtilityWindow(tmp729.P, tmp729.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp730.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp731)
        {
          var tmp732 = $"Error occurred in {GetType().FullName}: {tmp731.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp731, tmp732);
          else
            Console.Error.WriteLine(tmp732);
          var tmp733 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp733.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp734 = new InternalStructs.expandUtilityWindow_args();
        await tmp734.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp735 = new InternalStructs.expandUtilityWindow_result();
        try
        {
          await _iAsync.expandUtilityWindow(tmp734.P, tmp734.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp735.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp736)
        {
          var tmp737 = $"Error occurred in {GetType().FullName}: {tmp736.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp736, tmp737);
          else
            Console.Error.WriteLine(tmp737);
          var tmp738 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp738.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp739 = new InternalStructs.registerIntegration_args();
        await tmp739.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp740 = new InternalStructs.registerIntegration_result();
        try
        {
          try
          {
            await _iAsync.registerIntegration(tmp739.P, tmp739.Identifier, tmp739.IntegrationPoint, tmp739.ItemType, tmp739.ButtonLabel, tmp739.ButtonImage, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp741)
          {
            tmp740.E = tmp741;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp740.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp742)
        {
          var tmp743 = $"Error occurred in {GetType().FullName}: {tmp742.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp742, tmp743);
          else
            Console.Error.WriteLine(tmp743);
          var tmp744 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp744.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp745 = new InternalStructs.unregisterIntegration_args();
        await tmp745.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp746 = new InternalStructs.unregisterIntegration_result();
        try
        {
          try
          {
            await _iAsync.unregisterIntegration(tmp745.P, tmp745.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp747)
          {
            tmp746.E = tmp747;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp746.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp748)
        {
          var tmp749 = $"Error occurred in {GetType().FullName}: {tmp748.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp748, tmp749);
          else
            Console.Error.WriteLine(tmp749);
          var tmp750 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp750.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task property_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp751 = new InternalStructs.property_args();
        await tmp751.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp752 = new InternalStructs.property_result();
        try
        {
          try
          {
            tmp752.Success = await _iAsync.property(tmp751.P, tmp751.ItemID, tmp751.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp753)
          {
            tmp752.E = tmp753;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Reply, seqid), cancellationToken); 
          await tmp752.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp754)
        {
          var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp754, tmp755);
          else
            Console.Error.WriteLine(tmp755);
          var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Exception, seqid), cancellationToken);
          await tmp756.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp757 = new InternalStructs.setProperty_args();
        await tmp757.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp758 = new InternalStructs.setProperty_result();
        try
        {
          try
          {
            await _iAsync.setProperty(tmp757.P, tmp757.ItemID, tmp757.Name, tmp757.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp759)
          {
            tmp758.E = tmp759;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Reply, seqid), cancellationToken); 
          await tmp758.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp760)
        {
          var tmp761 = $"Error occurred in {GetType().FullName}: {tmp760.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp760, tmp761);
          else
            Console.Error.WriteLine(tmp761);
          var tmp762 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Exception, seqid), cancellationToken);
          await tmp762.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp763 = new InternalStructs.setProperties_args();
        await tmp763.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setProperties(tmp763.P, tmp763.PropValuesList, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp765)
        {
          var tmp766 = $"Error occurred in {GetType().FullName}: {tmp765.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp765, tmp766);
          else
            Console.Error.WriteLine(tmp766);
        }
      }

      public async global::System.Threading.Tasks.Task setChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp767 = new InternalStructs.setChartConfig_args();
        await tmp767.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp768 = new InternalStructs.setChartConfig_result();
        try
        {
          try
          {
            await _iAsync.setChartConfig(tmp767.P, tmp767.ChartID, tmp767.Config, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp769)
          {
            tmp768.E = tmp769;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp768.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp770)
        {
          var tmp771 = $"Error occurred in {GetType().FullName}: {tmp770.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp770, tmp771);
          else
            Console.Error.WriteLine(tmp771);
          var tmp772 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp772.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp773 = new InternalStructs.getChartConfig_args();
        await tmp773.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp774 = new InternalStructs.getChartConfig_result();
        try
        {
          try
          {
            tmp774.Success = await _iAsync.getChartConfig(tmp773.P, tmp773.ChartID, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp775)
          {
            tmp774.E = tmp775;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp774.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp776)
        {
          var tmp777 = $"Error occurred in {GetType().FullName}: {tmp776.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp776, tmp777);
          else
            Console.Error.WriteLine(tmp777);
          var tmp778 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp778.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp779 = new InternalStructs.setChartData_args();
        await tmp779.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp780 = new InternalStructs.setChartData_result();
        try
        {
          try
          {
            await _iAsync.setChartData(tmp779.P, tmp779.ChartID, tmp779.Dataset, tmp779.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp781)
          {
            tmp780.E = tmp781;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp780.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp782)
        {
          var tmp783 = $"Error occurred in {GetType().FullName}: {tmp782.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp782, tmp783);
          else
            Console.Error.WriteLine(tmp783);
          var tmp784 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp784.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp785 = new InternalStructs.getChartData_args();
        await tmp785.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp786 = new InternalStructs.getChartData_result();
        try
        {
          try
          {
            tmp786.Success = await _iAsync.getChartData(tmp785.P, tmp785.ChartID, tmp785.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp787)
          {
            tmp786.E = tmp787;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp786.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp788)
        {
          var tmp789 = $"Error occurred in {GetType().FullName}: {tmp788.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp788, tmp789);
          else
            Console.Error.WriteLine(tmp789);
          var tmp790 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp790.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp791 = new InternalStructs.addChartKey_args();
        await tmp791.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp792 = new InternalStructs.addChartKey_result();
        try
        {
          try
          {
            await _iAsync.addChartKey(tmp791.P, tmp791.ChartID, tmp791.Key, tmp791.Data, tmp791.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp793)
          {
            tmp792.E = tmp793;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp792.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp794)
        {
          var tmp795 = $"Error occurred in {GetType().FullName}: {tmp794.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp794, tmp795);
          else
            Console.Error.WriteLine(tmp795);
          var tmp796 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp796.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp797 = new InternalStructs.removeChartKey_args();
        await tmp797.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp798 = new InternalStructs.removeChartKey_result();
        try
        {
          try
          {
            await _iAsync.removeChartKey(tmp797.P, tmp797.ChartID, tmp797.Key, tmp797.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp799)
          {
            tmp798.E = tmp799;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp798.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp800)
        {
          var tmp801 = $"Error occurred in {GetType().FullName}: {tmp800.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp800, tmp801);
          else
            Console.Error.WriteLine(tmp801);
          var tmp802 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp802.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task hideChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp803 = new InternalStructs.hideChartKey_args();
        await tmp803.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp804 = new InternalStructs.hideChartKey_result();
        try
        {
          try
          {
            await _iAsync.hideChartKey(tmp803.P, tmp803.ChartID, tmp803.Key, tmp803.Hidden, tmp803.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp805)
          {
            tmp804.E = tmp805;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp804.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp806)
        {
          var tmp807 = $"Error occurred in {GetType().FullName}: {tmp806.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp806, tmp807);
          else
            Console.Error.WriteLine(tmp807);
          var tmp808 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp808.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendChartPoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp809 = new InternalStructs.appendChartPoints_args();
        await tmp809.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.appendChartPoints(tmp809.P, tmp809.ChartID, tmp809.Key, tmp809.Points, tmp809.Right, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp811)
        {
          var tmp812 = $"Error occurred in {GetType().FullName}: {tmp811.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp811, tmp812);
          else
            Console.Error.WriteLine(tmp812);
        }
      }

      public async global::System.Threading.Tasks.Task incrementChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp813 = new InternalStructs.incrementChartKey_args();
        await tmp813.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp814 = new InternalStructs.incrementChartKey_result();
        try
        {
          try
          {
            await _iAsync.incrementChartKey(tmp813.P, tmp813.ChartID, tmp813.Key, tmp813.Val, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp815)
          {
            tmp814.E = tmp815;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp814.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp816)
        {
          var tmp817 = $"Error occurred in {GetType().FullName}: {tmp816.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp816, tmp817);
          else
            Console.Error.WriteLine(tmp817);
          var tmp818 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp818.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp819 = new InternalStructs.exportChartImage_args();
        await tmp819.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp820 = new InternalStructs.exportChartImage_result();
        try
        {
          try
          {
            tmp820.Success = await _iAsync.exportChartImage(tmp819.P, tmp819.ChartID, tmp819.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp821)
          {
            tmp820.E = tmp821;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp820.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp822)
        {
          var tmp823 = $"Error occurred in {GetType().FullName}: {tmp822.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp822, tmp823);
          else
            Console.Error.WriteLine(tmp823);
          var tmp824 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Exception, seqid), cancellationToken);
          await tmp824.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp825 = new InternalStructs.exportChartImageData_args();
        await tmp825.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp826 = new InternalStructs.exportChartImageData_result();
        try
        {
          try
          {
            tmp826.Success = await _iAsync.exportChartImageData(tmp825.P, tmp825.ChartID, tmp825.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp827)
          {
            tmp826.E = tmp827;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp826.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp828)
        {
          var tmp829 = $"Error occurred in {GetType().FullName}: {tmp828.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp828, tmp829);
          else
            Console.Error.WriteLine(tmp829);
          var tmp830 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp830.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp831 = new InternalStructs.notice_args();
        await tmp831.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.notice(tmp831.P, tmp831.Title, tmp831.Message, tmp831.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp833)
        {
          var tmp834 = $"Error occurred in {GetType().FullName}: {tmp833.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp833, tmp834);
          else
            Console.Error.WriteLine(tmp834);
        }
      }

      public async global::System.Threading.Tasks.Task dispNotice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp835 = new InternalStructs.dispNotice_args();
        await tmp835.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.dispNotice(tmp835.P, tmp835.Disposition, tmp835.Title, tmp835.Message, tmp835.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp837)
        {
          var tmp838 = $"Error occurred in {GetType().FullName}: {tmp837.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp837, tmp838);
          else
            Console.Error.WriteLine(tmp838);
        }
      }

      public async global::System.Threading.Tasks.Task error_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp839 = new InternalStructs.error_args();
        await tmp839.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.error(tmp839.P, tmp839.Title, tmp839.Message, tmp839.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp841)
        {
          var tmp842 = $"Error occurred in {GetType().FullName}: {tmp841.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp841, tmp842);
          else
            Console.Error.WriteLine(tmp842);
        }
      }

      public async global::System.Threading.Tasks.Task popupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp843 = new InternalStructs.popupDialog_args();
        await tmp843.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp844 = new InternalStructs.popupDialog_result();
        try
        {
          try
          {
            await _iAsync.popupDialog(tmp843.P, tmp843.Identifier, tmp843.Title, tmp843.Message, tmp843.PositiveOption, tmp843.NegativeOption, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp845)
          {
            tmp844.E = tmp845;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp844.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp846)
        {
          var tmp847 = $"Error occurred in {GetType().FullName}: {tmp846.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp846, tmp847);
          else
            Console.Error.WriteLine(tmp847);
          var tmp848 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp848.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp849 = new InternalStructs.cancelPopupDialog_args();
        await tmp849.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp850 = new InternalStructs.cancelPopupDialog_result();
        try
        {
          await _iAsync.cancelPopupDialog(tmp849.P, tmp849.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp850.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp851)
        {
          var tmp852 = $"Error occurred in {GetType().FullName}: {tmp851.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp851, tmp852);
          else
            Console.Error.WriteLine(tmp852);
          var tmp853 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp853.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertInstructionAtSelectedLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp854 = new InternalStructs.insertInstructionAtSelectedLine_args();
        await tmp854.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp855 = new InternalStructs.insertInstructionAtSelectedLine_result();
        try
        {
          tmp855.Success = await _iAsync.insertInstructionAtSelectedLine(tmp854.P, tmp854.Instruction, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp855.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp856)
        {
          var tmp857 = $"Error occurred in {GetType().FullName}: {tmp856.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp856, tmp857);
          else
            Console.Error.WriteLine(tmp857);
          var tmp858 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp858.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayScreen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp859 = new InternalStructs.displayScreen_args();
        await tmp859.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp860 = new InternalStructs.displayScreen_result();
        try
        {
          await _iAsync.displayScreen(tmp859.P, tmp859.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp860.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp861)
        {
          var tmp862 = $"Error occurred in {GetType().FullName}: {tmp861.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp861, tmp862);
          else
            Console.Error.WriteLine(tmp862);
          var tmp863 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Exception, seqid), cancellationToken);
          await tmp863.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class pendantVersion_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public pendantVersion_args()
        {
        }

        public pendantVersion_args DeepCopy()
        {
          var tmp864 = new pendantVersion_args();
          if(__isset.p)
          {
            tmp864.P = this.P;
          }
          tmp864.__isset.p = this.__isset.p;
          return tmp864;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp865 = new TStruct("pendantVersion_args");
            await oprot.WriteStructBeginAsync(tmp865, cancellationToken);
            var tmp866 = new TField();
            if(__isset.p)
            {
              tmp866.Name = "p";
              tmp866.Type = TType.I64;
              tmp866.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp866, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp867 = new StringBuilder("pendantVersion_args(");
          int tmp868 = 0;
          if(__isset.p)
          {
            if(0 < tmp868++) { tmp867.Append(", "); }
            tmp867.Append("P: ");
            P.ToString(tmp867);
          }
          tmp867.Append(')');
          return tmp867.ToString();
        }
      }


      public partial class pendantVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public pendantVersion_result()
        {
        }

        public pendantVersion_result DeepCopy()
        {
          var tmp869 = new pendantVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp869.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp869.__isset.success = this.__isset.success;
          return tmp869;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp870 = new TStruct("pendantVersion_result");
            await oprot.WriteStructBeginAsync(tmp870, cancellationToken);
            var tmp871 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp871.Name = "Success";
                tmp871.Type = TType.Struct;
                tmp871.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp871, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp872 = new StringBuilder("pendantVersion_result(");
          int tmp873 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp873++) { tmp872.Append(", "); }
            tmp872.Append("Success: ");
            Success.ToString(tmp872);
          }
          tmp872.Append(')');
          return tmp872.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp874 = new subscribeEventTypes_args();
          if(__isset.p)
          {
            tmp874.P = this.P;
          }
          tmp874.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp874.Types = this.Types.DeepCopy();
          }
          tmp874.__isset.types = this.__isset.types;
          return tmp874;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set875 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set875.Count);
                      for(int _i876 = 0; _i876 < _set875.Count; ++_i876)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem877;
                        _elem877 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem877);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp878 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp878, cancellationToken);
            var tmp879 = new TField();
            if(__isset.p)
            {
              tmp879.Name = "p";
              tmp879.Type = TType.I64;
              tmp879.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp879, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp879.Name = "types";
              tmp879.Type = TType.Set;
              tmp879.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp879, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter880 in Types)
              {
                await oprot.WriteI32Async((int)_iter880, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp881 = new StringBuilder("subscribeEventTypes_args(");
          int tmp882 = 0;
          if(__isset.p)
          {
            if(0 < tmp882++) { tmp881.Append(", "); }
            tmp881.Append("P: ");
            P.ToString(tmp881);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp882++) { tmp881.Append(", "); }
            tmp881.Append("Types: ");
            Types.ToString(tmp881);
          }
          tmp881.Append(')');
          return tmp881.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp883 = new subscribeEventTypes_result();
          return tmp883;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp884 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp884, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp885 = new StringBuilder("subscribeEventTypes_result(");
          tmp885.Append(')');
          return tmp885.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp887 = new unsubscribeEventTypes_args();
          if(__isset.p)
          {
            tmp887.P = this.P;
          }
          tmp887.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp887.Types = this.Types.DeepCopy();
          }
          tmp887.__isset.types = this.__isset.types;
          return tmp887;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set888 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set888.Count);
                      for(int _i889 = 0; _i889 < _set888.Count; ++_i889)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem890;
                        _elem890 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem890);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp891 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp891, cancellationToken);
            var tmp892 = new TField();
            if(__isset.p)
            {
              tmp892.Name = "p";
              tmp892.Type = TType.I64;
              tmp892.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp892, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp892.Name = "types";
              tmp892.Type = TType.Set;
              tmp892.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp892, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter893 in Types)
              {
                await oprot.WriteI32Async((int)_iter893, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp894 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp895 = 0;
          if(__isset.p)
          {
            if(0 < tmp895++) { tmp894.Append(", "); }
            tmp894.Append("P: ");
            P.ToString(tmp894);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp895++) { tmp894.Append(", "); }
            tmp894.Append("Types: ");
            Types.ToString(tmp894);
          }
          tmp894.Append(')');
          return tmp894.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp896 = new unsubscribeEventTypes_result();
          return tmp896;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp897 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp897, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp898 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp898.Append(')');
          return tmp898.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp900 = new events_args();
          if(__isset.p)
          {
            tmp900.P = this.P;
          }
          tmp900.__isset.p = this.__isset.p;
          return tmp900;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp901 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp901, cancellationToken);
            var tmp902 = new TField();
            if(__isset.p)
            {
              tmp902.Name = "p";
              tmp902.Type = TType.I64;
              tmp902.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp902, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp903 = new StringBuilder("events_args(");
          int tmp904 = 0;
          if(__isset.p)
          {
            if(0 < tmp904++) { tmp903.Append(", "); }
            tmp903.Append("P: ");
            P.ToString(tmp903);
          }
          tmp903.Append(')');
          return tmp903.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.PendantEvent> _success;

        public List<global::Yaskawa.Ext.API.PendantEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp905 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp905.Success = this.Success.DeepCopy();
          }
          tmp905.__isset.success = this.__isset.success;
          return tmp905;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list906 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.PendantEvent>(_list906.Count);
                      for(int _i907 = 0; _i907 < _list906.Count; ++_i907)
                      {
                        global::Yaskawa.Ext.API.PendantEvent _elem908;
                        _elem908 = new global::Yaskawa.Ext.API.PendantEvent();
                        await _elem908.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem908);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp909 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp909, cancellationToken);
            var tmp910 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp910.Name = "Success";
                tmp910.Type = TType.List;
                tmp910.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp910, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.PendantEvent _iter911 in Success)
                {
                  await _iter911.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp912 = new StringBuilder("events_result(");
          int tmp913 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp913++) { tmp912.Append(", "); }
            tmp912.Append("Success: ");
            Success.ToString(tmp912);
          }
          tmp912.Append(')');
          return tmp912.ToString();
        }
      }


      public partial class currentLanguage_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLanguage_args()
        {
        }

        public currentLanguage_args DeepCopy()
        {
          var tmp914 = new currentLanguage_args();
          if(__isset.p)
          {
            tmp914.P = this.P;
          }
          tmp914.__isset.p = this.__isset.p;
          return tmp914;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp915 = new TStruct("currentLanguage_args");
            await oprot.WriteStructBeginAsync(tmp915, cancellationToken);
            var tmp916 = new TField();
            if(__isset.p)
            {
              tmp916.Name = "p";
              tmp916.Type = TType.I64;
              tmp916.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp916, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp917 = new StringBuilder("currentLanguage_args(");
          int tmp918 = 0;
          if(__isset.p)
          {
            if(0 < tmp918++) { tmp917.Append(", "); }
            tmp917.Append("P: ");
            P.ToString(tmp917);
          }
          tmp917.Append(')');
          return tmp917.ToString();
        }
      }


      public partial class currentLanguage_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLanguage_result()
        {
        }

        public currentLanguage_result DeepCopy()
        {
          var tmp919 = new currentLanguage_result();
          if((Success != null) && __isset.success)
          {
            tmp919.Success = this.Success;
          }
          tmp919.__isset.success = this.__isset.success;
          return tmp919;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp920 = new TStruct("currentLanguage_result");
            await oprot.WriteStructBeginAsync(tmp920, cancellationToken);
            var tmp921 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp921.Name = "Success";
                tmp921.Type = TType.String;
                tmp921.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp921, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp922 = new StringBuilder("currentLanguage_result(");
          int tmp923 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp923++) { tmp922.Append(", "); }
            tmp922.Append("Success: ");
            Success.ToString(tmp922);
          }
          tmp922.Append(')');
          return tmp922.ToString();
        }
      }


      public partial class currentLocale_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLocale_args()
        {
        }

        public currentLocale_args DeepCopy()
        {
          var tmp924 = new currentLocale_args();
          if(__isset.p)
          {
            tmp924.P = this.P;
          }
          tmp924.__isset.p = this.__isset.p;
          return tmp924;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp925 = new TStruct("currentLocale_args");
            await oprot.WriteStructBeginAsync(tmp925, cancellationToken);
            var tmp926 = new TField();
            if(__isset.p)
            {
              tmp926.Name = "p";
              tmp926.Type = TType.I64;
              tmp926.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp926, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp927 = new StringBuilder("currentLocale_args(");
          int tmp928 = 0;
          if(__isset.p)
          {
            if(0 < tmp928++) { tmp927.Append(", "); }
            tmp927.Append("P: ");
            P.ToString(tmp927);
          }
          tmp927.Append(')');
          return tmp927.ToString();
        }
      }


      public partial class currentLocale_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLocale_result()
        {
        }

        public currentLocale_result DeepCopy()
        {
          var tmp929 = new currentLocale_result();
          if((Success != null) && __isset.success)
          {
            tmp929.Success = this.Success;
          }
          tmp929.__isset.success = this.__isset.success;
          return tmp929;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp930 = new TStruct("currentLocale_result");
            await oprot.WriteStructBeginAsync(tmp930, cancellationToken);
            var tmp931 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp931.Name = "Success";
                tmp931.Type = TType.String;
                tmp931.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp931, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp932 = new StringBuilder("currentLocale_result(");
          int tmp933 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp933++) { tmp932.Append(", "); }
            tmp932.Append("Success: ");
            Success.ToString(tmp932);
          }
          tmp932.Append(')');
          return tmp932.ToString();
        }
      }


      public partial class currentScreenName_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentScreenName_args()
        {
        }

        public currentScreenName_args DeepCopy()
        {
          var tmp934 = new currentScreenName_args();
          if(__isset.p)
          {
            tmp934.P = this.P;
          }
          tmp934.__isset.p = this.__isset.p;
          return tmp934;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp935 = new TStruct("currentScreenName_args");
            await oprot.WriteStructBeginAsync(tmp935, cancellationToken);
            var tmp936 = new TField();
            if(__isset.p)
            {
              tmp936.Name = "p";
              tmp936.Type = TType.I64;
              tmp936.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp936, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp937 = new StringBuilder("currentScreenName_args(");
          int tmp938 = 0;
          if(__isset.p)
          {
            if(0 < tmp938++) { tmp937.Append(", "); }
            tmp937.Append("P: ");
            P.ToString(tmp937);
          }
          tmp937.Append(')');
          return tmp937.ToString();
        }
      }


      public partial class currentScreenName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentScreenName_result()
        {
        }

        public currentScreenName_result DeepCopy()
        {
          var tmp939 = new currentScreenName_result();
          if((Success != null) && __isset.success)
          {
            tmp939.Success = this.Success;
          }
          tmp939.__isset.success = this.__isset.success;
          return tmp939;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp940 = new TStruct("currentScreenName_result");
            await oprot.WriteStructBeginAsync(tmp940, cancellationToken);
            var tmp941 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp941.Name = "Success";
                tmp941.Type = TType.String;
                tmp941.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp941, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp942 = new StringBuilder("currentScreenName_result(");
          int tmp943 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp943++) { tmp942.Append(", "); }
            tmp942.Append("Success: ");
            Success.ToString(tmp942);
          }
          tmp942.Append(')');
          return tmp942.ToString();
        }
      }


      public partial class registerYML_args : TBase
      {
        private long _p;
        private string _ymlSource;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string YmlSource
        {
          get
          {
            return _ymlSource;
          }
          set
          {
            __isset.ymlSource = true;
            this._ymlSource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ymlSource;
        }

        public registerYML_args()
        {
        }

        public registerYML_args DeepCopy()
        {
          var tmp944 = new registerYML_args();
          if(__isset.p)
          {
            tmp944.P = this.P;
          }
          tmp944.__isset.p = this.__isset.p;
          if((YmlSource != null) && __isset.ymlSource)
          {
            tmp944.YmlSource = this.YmlSource;
          }
          tmp944.__isset.ymlSource = this.__isset.ymlSource;
          return tmp944;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    YmlSource = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp945 = new TStruct("registerYML_args");
            await oprot.WriteStructBeginAsync(tmp945, cancellationToken);
            var tmp946 = new TField();
            if(__isset.p)
            {
              tmp946.Name = "p";
              tmp946.Type = TType.I64;
              tmp946.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp946, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              tmp946.Name = "ymlSource";
              tmp946.Type = TType.String;
              tmp946.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp946, cancellationToken);
              await oprot.WriteStringAsync(YmlSource, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ymlSource == other.__isset.ymlSource) && ((!__isset.ymlSource) || (global::System.Object.Equals(YmlSource, other.YmlSource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              hashcode = (hashcode * 397) + YmlSource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp947 = new StringBuilder("registerYML_args(");
          int tmp948 = 0;
          if(__isset.p)
          {
            if(0 < tmp948++) { tmp947.Append(", "); }
            tmp947.Append("P: ");
            P.ToString(tmp947);
          }
          if((YmlSource != null) && __isset.ymlSource)
          {
            if(0 < tmp948++) { tmp947.Append(", "); }
            tmp947.Append("YmlSource: ");
            YmlSource.ToString(tmp947);
          }
          tmp947.Append(')');
          return tmp947.ToString();
        }
      }


      public partial class registerYML_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public registerYML_result()
        {
        }

        public registerYML_result DeepCopy()
        {
          var tmp949 = new registerYML_result();
          if((Success != null) && __isset.success)
          {
            tmp949.Success = this.Success.DeepCopy();
          }
          tmp949.__isset.success = this.__isset.success;
          return tmp949;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list950 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list950.Count);
                      for(int _i951 = 0; _i951 < _list950.Count; ++_i951)
                      {
                        string _elem952;
                        _elem952 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem952);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp953 = new TStruct("registerYML_result");
            await oprot.WriteStructBeginAsync(tmp953, cancellationToken);
            var tmp954 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp954.Name = "Success";
                tmp954.Type = TType.List;
                tmp954.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp954, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter955 in Success)
                {
                  await oprot.WriteStringAsync(_iter955, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp956 = new StringBuilder("registerYML_result(");
          int tmp957 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp957++) { tmp956.Append(", "); }
            tmp956.Append("Success: ");
            Success.ToString(tmp956);
          }
          tmp956.Append(')');
          return tmp956.ToString();
        }
      }


      public partial class registerImageFile_args : TBase
      {
        private long _p;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageFileName;
        }

        public registerImageFile_args()
        {
        }

        public registerImageFile_args DeepCopy()
        {
          var tmp958 = new registerImageFile_args();
          if(__isset.p)
          {
            tmp958.P = this.P;
          }
          tmp958.__isset.p = this.__isset.p;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp958.ImageFileName = this.ImageFileName;
          }
          tmp958.__isset.imageFileName = this.__isset.imageFileName;
          return tmp958;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp959 = new TStruct("registerImageFile_args");
            await oprot.WriteStructBeginAsync(tmp959, cancellationToken);
            var tmp960 = new TField();
            if(__isset.p)
            {
              tmp960.Name = "p";
              tmp960.Type = TType.I64;
              tmp960.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp960, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp960.Name = "imageFileName";
              tmp960.Type = TType.String;
              tmp960.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp960, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp961 = new StringBuilder("registerImageFile_args(");
          int tmp962 = 0;
          if(__isset.p)
          {
            if(0 < tmp962++) { tmp961.Append(", "); }
            tmp961.Append("P: ");
            P.ToString(tmp961);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp962++) { tmp961.Append(", "); }
            tmp961.Append("ImageFileName: ");
            ImageFileName.ToString(tmp961);
          }
          tmp961.Append(')');
          return tmp961.ToString();
        }
      }


      public partial class registerImageFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageFile_result()
        {
        }

        public registerImageFile_result DeepCopy()
        {
          var tmp963 = new registerImageFile_result();
          if((E != null) && __isset.e)
          {
            tmp963.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp963.__isset.e = this.__isset.e;
          return tmp963;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp964 = new TStruct("registerImageFile_result");
            await oprot.WriteStructBeginAsync(tmp964, cancellationToken);
            var tmp965 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp965.Name = "E";
                tmp965.Type = TType.Struct;
                tmp965.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp965, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp966 = new StringBuilder("registerImageFile_result(");
          int tmp967 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp967++) { tmp966.Append(", "); }
            tmp966.Append("E: ");
            E.ToString(tmp966);
          }
          tmp966.Append(')');
          return tmp966.ToString();
        }
      }


      public partial class registerImageData_args : TBase
      {
        private long _p;
        private byte[] _imageData;
        private string _imageName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] ImageData
        {
          get
          {
            return _imageData;
          }
          set
          {
            __isset.imageData = true;
            this._imageData = value;
          }
        }

        public string ImageName
        {
          get
          {
            return _imageName;
          }
          set
          {
            __isset.imageName = true;
            this._imageName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageData;
          public bool imageName;
        }

        public registerImageData_args()
        {
        }

        public registerImageData_args DeepCopy()
        {
          var tmp968 = new registerImageData_args();
          if(__isset.p)
          {
            tmp968.P = this.P;
          }
          tmp968.__isset.p = this.__isset.p;
          if((ImageData != null) && __isset.imageData)
          {
            tmp968.ImageData = this.ImageData.ToArray();
          }
          tmp968.__isset.imageData = this.__isset.imageData;
          if((ImageName != null) && __isset.imageName)
          {
            tmp968.ImageName = this.ImageName;
          }
          tmp968.__isset.imageName = this.__isset.imageName;
          return tmp968;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp969 = new TStruct("registerImageData_args");
            await oprot.WriteStructBeginAsync(tmp969, cancellationToken);
            var tmp970 = new TField();
            if(__isset.p)
            {
              tmp970.Name = "p";
              tmp970.Type = TType.I64;
              tmp970.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp970, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageData != null) && __isset.imageData)
            {
              tmp970.Name = "imageData";
              tmp970.Type = TType.String;
              tmp970.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp970, cancellationToken);
              await oprot.WriteBinaryAsync(ImageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageName != null) && __isset.imageName)
            {
              tmp970.Name = "imageName";
              tmp970.Type = TType.String;
              tmp970.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp970, cancellationToken);
              await oprot.WriteStringAsync(ImageName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageData == other.__isset.imageData) && ((!__isset.imageData) || (TCollections.Equals(ImageData, other.ImageData))))
            && ((__isset.imageName == other.__isset.imageName) && ((!__isset.imageName) || (global::System.Object.Equals(ImageName, other.ImageName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageData != null) && __isset.imageData)
            {
              hashcode = (hashcode * 397) + ImageData.GetHashCode();
            }
            if((ImageName != null) && __isset.imageName)
            {
              hashcode = (hashcode * 397) + ImageName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp971 = new StringBuilder("registerImageData_args(");
          int tmp972 = 0;
          if(__isset.p)
          {
            if(0 < tmp972++) { tmp971.Append(", "); }
            tmp971.Append("P: ");
            P.ToString(tmp971);
          }
          if((ImageData != null) && __isset.imageData)
          {
            if(0 < tmp972++) { tmp971.Append(", "); }
            tmp971.Append("ImageData: ");
            ImageData.ToString(tmp971);
          }
          if((ImageName != null) && __isset.imageName)
          {
            if(0 < tmp972++) { tmp971.Append(", "); }
            tmp971.Append("ImageName: ");
            ImageName.ToString(tmp971);
          }
          tmp971.Append(')');
          return tmp971.ToString();
        }
      }


      public partial class registerImageData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageData_result()
        {
        }

        public registerImageData_result DeepCopy()
        {
          var tmp973 = new registerImageData_result();
          if((E != null) && __isset.e)
          {
            tmp973.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp973.__isset.e = this.__isset.e;
          return tmp973;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp974 = new TStruct("registerImageData_result");
            await oprot.WriteStructBeginAsync(tmp974, cancellationToken);
            var tmp975 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp975.Name = "E";
                tmp975.Type = TType.Struct;
                tmp975.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp975, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp976 = new StringBuilder("registerImageData_result(");
          int tmp977 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp977++) { tmp976.Append(", "); }
            tmp976.Append("E: ");
            E.ToString(tmp976);
          }
          tmp976.Append(')');
          return tmp976.ToString();
        }
      }


      public partial class registerHTMLFile_args : TBase
      {
        private long _p;
        private string _htmlFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string HtmlFileName
        {
          get
          {
            return _htmlFileName;
          }
          set
          {
            __isset.htmlFileName = true;
            this._htmlFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlFileName;
        }

        public registerHTMLFile_args()
        {
        }

        public registerHTMLFile_args DeepCopy()
        {
          var tmp978 = new registerHTMLFile_args();
          if(__isset.p)
          {
            tmp978.P = this.P;
          }
          tmp978.__isset.p = this.__isset.p;
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            tmp978.HtmlFileName = this.HtmlFileName;
          }
          tmp978.__isset.htmlFileName = this.__isset.htmlFileName;
          return tmp978;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp979 = new TStruct("registerHTMLFile_args");
            await oprot.WriteStructBeginAsync(tmp979, cancellationToken);
            var tmp980 = new TField();
            if(__isset.p)
            {
              tmp980.Name = "p";
              tmp980.Type = TType.I64;
              tmp980.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp980, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              tmp980.Name = "htmlFileName";
              tmp980.Type = TType.String;
              tmp980.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp980, cancellationToken);
              await oprot.WriteStringAsync(HtmlFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlFileName == other.__isset.htmlFileName) && ((!__isset.htmlFileName) || (global::System.Object.Equals(HtmlFileName, other.HtmlFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              hashcode = (hashcode * 397) + HtmlFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp981 = new StringBuilder("registerHTMLFile_args(");
          int tmp982 = 0;
          if(__isset.p)
          {
            if(0 < tmp982++) { tmp981.Append(", "); }
            tmp981.Append("P: ");
            P.ToString(tmp981);
          }
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            if(0 < tmp982++) { tmp981.Append(", "); }
            tmp981.Append("HtmlFileName: ");
            HtmlFileName.ToString(tmp981);
          }
          tmp981.Append(')');
          return tmp981.ToString();
        }
      }


      public partial class registerHTMLFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLFile_result()
        {
        }

        public registerHTMLFile_result DeepCopy()
        {
          var tmp983 = new registerHTMLFile_result();
          if((E != null) && __isset.e)
          {
            tmp983.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp983.__isset.e = this.__isset.e;
          return tmp983;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp984 = new TStruct("registerHTMLFile_result");
            await oprot.WriteStructBeginAsync(tmp984, cancellationToken);
            var tmp985 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp985.Name = "E";
                tmp985.Type = TType.Struct;
                tmp985.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp985, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp986 = new StringBuilder("registerHTMLFile_result(");
          int tmp987 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp987++) { tmp986.Append(", "); }
            tmp986.Append("E: ");
            E.ToString(tmp986);
          }
          tmp986.Append(')');
          return tmp986.ToString();
        }
      }


      public partial class registerHTMLData_args : TBase
      {
        private long _p;
        private byte[] _htmlData;
        private string _htmlName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] HtmlData
        {
          get
          {
            return _htmlData;
          }
          set
          {
            __isset.htmlData = true;
            this._htmlData = value;
          }
        }

        public string HtmlName
        {
          get
          {
            return _htmlName;
          }
          set
          {
            __isset.htmlName = true;
            this._htmlName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlData;
          public bool htmlName;
        }

        public registerHTMLData_args()
        {
        }

        public registerHTMLData_args DeepCopy()
        {
          var tmp988 = new registerHTMLData_args();
          if(__isset.p)
          {
            tmp988.P = this.P;
          }
          tmp988.__isset.p = this.__isset.p;
          if((HtmlData != null) && __isset.htmlData)
          {
            tmp988.HtmlData = this.HtmlData.ToArray();
          }
          tmp988.__isset.htmlData = this.__isset.htmlData;
          if((HtmlName != null) && __isset.htmlName)
          {
            tmp988.HtmlName = this.HtmlName;
          }
          tmp988.__isset.htmlName = this.__isset.htmlName;
          return tmp988;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp989 = new TStruct("registerHTMLData_args");
            await oprot.WriteStructBeginAsync(tmp989, cancellationToken);
            var tmp990 = new TField();
            if(__isset.p)
            {
              tmp990.Name = "p";
              tmp990.Type = TType.I64;
              tmp990.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp990, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              tmp990.Name = "htmlData";
              tmp990.Type = TType.String;
              tmp990.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp990, cancellationToken);
              await oprot.WriteBinaryAsync(HtmlData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              tmp990.Name = "htmlName";
              tmp990.Type = TType.String;
              tmp990.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp990, cancellationToken);
              await oprot.WriteStringAsync(HtmlName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlData == other.__isset.htmlData) && ((!__isset.htmlData) || (TCollections.Equals(HtmlData, other.HtmlData))))
            && ((__isset.htmlName == other.__isset.htmlName) && ((!__isset.htmlName) || (global::System.Object.Equals(HtmlName, other.HtmlName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              hashcode = (hashcode * 397) + HtmlData.GetHashCode();
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              hashcode = (hashcode * 397) + HtmlName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp991 = new StringBuilder("registerHTMLData_args(");
          int tmp992 = 0;
          if(__isset.p)
          {
            if(0 < tmp992++) { tmp991.Append(", "); }
            tmp991.Append("P: ");
            P.ToString(tmp991);
          }
          if((HtmlData != null) && __isset.htmlData)
          {
            if(0 < tmp992++) { tmp991.Append(", "); }
            tmp991.Append("HtmlData: ");
            HtmlData.ToString(tmp991);
          }
          if((HtmlName != null) && __isset.htmlName)
          {
            if(0 < tmp992++) { tmp991.Append(", "); }
            tmp991.Append("HtmlName: ");
            HtmlName.ToString(tmp991);
          }
          tmp991.Append(')');
          return tmp991.ToString();
        }
      }


      public partial class registerHTMLData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLData_result()
        {
        }

        public registerHTMLData_result DeepCopy()
        {
          var tmp993 = new registerHTMLData_result();
          if((E != null) && __isset.e)
          {
            tmp993.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp993.__isset.e = this.__isset.e;
          return tmp993;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp994 = new TStruct("registerHTMLData_result");
            await oprot.WriteStructBeginAsync(tmp994, cancellationToken);
            var tmp995 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp995.Name = "E";
                tmp995.Type = TType.Struct;
                tmp995.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp996 = new StringBuilder("registerHTMLData_result(");
          int tmp997 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp997++) { tmp996.Append(", "); }
            tmp996.Append("E: ");
            E.ToString(tmp996);
          }
          tmp996.Append(')');
          return tmp996.ToString();
        }
      }


      public partial class registerTranslationFile_args : TBase
      {
        private long _p;
        private string _locale;
        private string _translationFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public string TranslationFileName
        {
          get
          {
            return _translationFileName;
          }
          set
          {
            __isset.translationFileName = true;
            this._translationFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationFileName;
        }

        public registerTranslationFile_args()
        {
        }

        public registerTranslationFile_args DeepCopy()
        {
          var tmp998 = new registerTranslationFile_args();
          if(__isset.p)
          {
            tmp998.P = this.P;
          }
          tmp998.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp998.Locale = this.Locale;
          }
          tmp998.__isset.locale = this.__isset.locale;
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            tmp998.TranslationFileName = this.TranslationFileName;
          }
          tmp998.__isset.translationFileName = this.__isset.translationFileName;
          return tmp998;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp999 = new TStruct("registerTranslationFile_args");
            await oprot.WriteStructBeginAsync(tmp999, cancellationToken);
            var tmp1000 = new TField();
            if(__isset.p)
            {
              tmp1000.Name = "p";
              tmp1000.Type = TType.I64;
              tmp1000.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1000, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1000.Name = "locale";
              tmp1000.Type = TType.String;
              tmp1000.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1000, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              tmp1000.Name = "translationFileName";
              tmp1000.Type = TType.String;
              tmp1000.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1000, cancellationToken);
              await oprot.WriteStringAsync(TranslationFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationFileName == other.__isset.translationFileName) && ((!__isset.translationFileName) || (global::System.Object.Equals(TranslationFileName, other.TranslationFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              hashcode = (hashcode * 397) + TranslationFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1001 = new StringBuilder("registerTranslationFile_args(");
          int tmp1002 = 0;
          if(__isset.p)
          {
            if(0 < tmp1002++) { tmp1001.Append(", "); }
            tmp1001.Append("P: ");
            P.ToString(tmp1001);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1002++) { tmp1001.Append(", "); }
            tmp1001.Append("Locale: ");
            Locale.ToString(tmp1001);
          }
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            if(0 < tmp1002++) { tmp1001.Append(", "); }
            tmp1001.Append("TranslationFileName: ");
            TranslationFileName.ToString(tmp1001);
          }
          tmp1001.Append(')');
          return tmp1001.ToString();
        }
      }


      public partial class registerTranslationFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationFile_result()
        {
        }

        public registerTranslationFile_result DeepCopy()
        {
          var tmp1003 = new registerTranslationFile_result();
          if((E != null) && __isset.e)
          {
            tmp1003.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1003.__isset.e = this.__isset.e;
          return tmp1003;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1004 = new TStruct("registerTranslationFile_result");
            await oprot.WriteStructBeginAsync(tmp1004, cancellationToken);
            var tmp1005 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1005.Name = "E";
                tmp1005.Type = TType.Struct;
                tmp1005.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1005, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1006 = new StringBuilder("registerTranslationFile_result(");
          int tmp1007 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1007++) { tmp1006.Append(", "); }
            tmp1006.Append("E: ");
            E.ToString(tmp1006);
          }
          tmp1006.Append(')');
          return tmp1006.ToString();
        }
      }


      public partial class registerTranslationData_args : TBase
      {
        private long _p;
        private string _locale;
        private byte[] _translationData;
        private string _translationName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public byte[] TranslationData
        {
          get
          {
            return _translationData;
          }
          set
          {
            __isset.translationData = true;
            this._translationData = value;
          }
        }

        public string TranslationName
        {
          get
          {
            return _translationName;
          }
          set
          {
            __isset.translationName = true;
            this._translationName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationData;
          public bool translationName;
        }

        public registerTranslationData_args()
        {
        }

        public registerTranslationData_args DeepCopy()
        {
          var tmp1008 = new registerTranslationData_args();
          if(__isset.p)
          {
            tmp1008.P = this.P;
          }
          tmp1008.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1008.Locale = this.Locale;
          }
          tmp1008.__isset.locale = this.__isset.locale;
          if((TranslationData != null) && __isset.translationData)
          {
            tmp1008.TranslationData = this.TranslationData.ToArray();
          }
          tmp1008.__isset.translationData = this.__isset.translationData;
          if((TranslationName != null) && __isset.translationName)
          {
            tmp1008.TranslationName = this.TranslationName;
          }
          tmp1008.__isset.translationName = this.__isset.translationName;
          return tmp1008;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    TranslationName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1009 = new TStruct("registerTranslationData_args");
            await oprot.WriteStructBeginAsync(tmp1009, cancellationToken);
            var tmp1010 = new TField();
            if(__isset.p)
            {
              tmp1010.Name = "p";
              tmp1010.Type = TType.I64;
              tmp1010.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1010, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1010.Name = "locale";
              tmp1010.Type = TType.String;
              tmp1010.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1010, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationData != null) && __isset.translationData)
            {
              tmp1010.Name = "translationData";
              tmp1010.Type = TType.String;
              tmp1010.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1010, cancellationToken);
              await oprot.WriteBinaryAsync(TranslationData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationName != null) && __isset.translationName)
            {
              tmp1010.Name = "translationName";
              tmp1010.Type = TType.String;
              tmp1010.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1010, cancellationToken);
              await oprot.WriteStringAsync(TranslationName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationData == other.__isset.translationData) && ((!__isset.translationData) || (TCollections.Equals(TranslationData, other.TranslationData))))
            && ((__isset.translationName == other.__isset.translationName) && ((!__isset.translationName) || (global::System.Object.Equals(TranslationName, other.TranslationName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationData != null) && __isset.translationData)
            {
              hashcode = (hashcode * 397) + TranslationData.GetHashCode();
            }
            if((TranslationName != null) && __isset.translationName)
            {
              hashcode = (hashcode * 397) + TranslationName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1011 = new StringBuilder("registerTranslationData_args(");
          int tmp1012 = 0;
          if(__isset.p)
          {
            if(0 < tmp1012++) { tmp1011.Append(", "); }
            tmp1011.Append("P: ");
            P.ToString(tmp1011);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1012++) { tmp1011.Append(", "); }
            tmp1011.Append("Locale: ");
            Locale.ToString(tmp1011);
          }
          if((TranslationData != null) && __isset.translationData)
          {
            if(0 < tmp1012++) { tmp1011.Append(", "); }
            tmp1011.Append("TranslationData: ");
            TranslationData.ToString(tmp1011);
          }
          if((TranslationName != null) && __isset.translationName)
          {
            if(0 < tmp1012++) { tmp1011.Append(", "); }
            tmp1011.Append("TranslationName: ");
            TranslationName.ToString(tmp1011);
          }
          tmp1011.Append(')');
          return tmp1011.ToString();
        }
      }


      public partial class registerTranslationData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationData_result()
        {
        }

        public registerTranslationData_result DeepCopy()
        {
          var tmp1013 = new registerTranslationData_result();
          if((E != null) && __isset.e)
          {
            tmp1013.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1013.__isset.e = this.__isset.e;
          return tmp1013;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1014 = new TStruct("registerTranslationData_result");
            await oprot.WriteStructBeginAsync(tmp1014, cancellationToken);
            var tmp1015 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1015.Name = "E";
                tmp1015.Type = TType.Struct;
                tmp1015.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1015, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1016 = new StringBuilder("registerTranslationData_result(");
          int tmp1017 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1017++) { tmp1016.Append(", "); }
            tmp1016.Append("E: ");
            E.ToString(tmp1016);
          }
          tmp1016.Append(')');
          return tmp1016.ToString();
        }
      }


      public partial class registerUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
        }

        public registerUtilityWindow_args()
        {
        }

        public registerUtilityWindow_args DeepCopy()
        {
          var tmp1018 = new registerUtilityWindow_args();
          if(__isset.p)
          {
            tmp1018.P = this.P;
          }
          tmp1018.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1018.Identifier = this.Identifier;
          }
          tmp1018.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1018.ItemType = this.ItemType;
          }
          tmp1018.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1018.MenuItemName = this.MenuItemName;
          }
          tmp1018.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1018.WindowTitle = this.WindowTitle;
          }
          tmp1018.__isset.windowTitle = this.__isset.windowTitle;
          return tmp1018;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1019 = new TStruct("registerUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1019, cancellationToken);
            var tmp1020 = new TField();
            if(__isset.p)
            {
              tmp1020.Name = "p";
              tmp1020.Type = TType.I64;
              tmp1020.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1020, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1020.Name = "identifier";
              tmp1020.Type = TType.String;
              tmp1020.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1020, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1020.Name = "itemType";
              tmp1020.Type = TType.String;
              tmp1020.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1020, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1020.Name = "menuItemName";
              tmp1020.Type = TType.String;
              tmp1020.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1020, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1020.Name = "windowTitle";
              tmp1020.Type = TType.String;
              tmp1020.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1020, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1021 = new StringBuilder("registerUtilityWindow_args(");
          int tmp1022 = 0;
          if(__isset.p)
          {
            if(0 < tmp1022++) { tmp1021.Append(", "); }
            tmp1021.Append("P: ");
            P.ToString(tmp1021);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1022++) { tmp1021.Append(", "); }
            tmp1021.Append("Identifier: ");
            Identifier.ToString(tmp1021);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1022++) { tmp1021.Append(", "); }
            tmp1021.Append("ItemType: ");
            ItemType.ToString(tmp1021);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1022++) { tmp1021.Append(", "); }
            tmp1021.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1021);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1022++) { tmp1021.Append(", "); }
            tmp1021.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1021);
          }
          tmp1021.Append(')');
          return tmp1021.ToString();
        }
      }


      public partial class registerUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindow_result()
        {
        }

        public registerUtilityWindow_result DeepCopy()
        {
          var tmp1023 = new registerUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1023.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1023.__isset.e = this.__isset.e;
          return tmp1023;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1024 = new TStruct("registerUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1024, cancellationToken);
            var tmp1025 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1025.Name = "E";
                tmp1025.Type = TType.Struct;
                tmp1025.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1025, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1026 = new StringBuilder("registerUtilityWindow_result(");
          int tmp1027 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1027++) { tmp1026.Append(", "); }
            tmp1026.Append("E: ");
            E.ToString(tmp1026);
          }
          tmp1026.Append(')');
          return tmp1026.ToString();
        }
      }


      public partial class unregisterUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterUtilityWindow_args()
        {
        }

        public unregisterUtilityWindow_args DeepCopy()
        {
          var tmp1028 = new unregisterUtilityWindow_args();
          if(__isset.p)
          {
            tmp1028.P = this.P;
          }
          tmp1028.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1028.Identifier = this.Identifier;
          }
          tmp1028.__isset.identifier = this.__isset.identifier;
          return tmp1028;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1029 = new TStruct("unregisterUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1029, cancellationToken);
            var tmp1030 = new TField();
            if(__isset.p)
            {
              tmp1030.Name = "p";
              tmp1030.Type = TType.I64;
              tmp1030.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1030, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1030.Name = "identifier";
              tmp1030.Type = TType.String;
              tmp1030.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1030, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1031 = new StringBuilder("unregisterUtilityWindow_args(");
          int tmp1032 = 0;
          if(__isset.p)
          {
            if(0 < tmp1032++) { tmp1031.Append(", "); }
            tmp1031.Append("P: ");
            P.ToString(tmp1031);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1032++) { tmp1031.Append(", "); }
            tmp1031.Append("Identifier: ");
            Identifier.ToString(tmp1031);
          }
          tmp1031.Append(')');
          return tmp1031.ToString();
        }
      }


      public partial class unregisterUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityWindow_result()
        {
        }

        public unregisterUtilityWindow_result DeepCopy()
        {
          var tmp1033 = new unregisterUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1033.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1033.__isset.e = this.__isset.e;
          return tmp1033;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1034 = new TStruct("unregisterUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1034, cancellationToken);
            var tmp1035 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1035.Name = "E";
                tmp1035.Type = TType.Struct;
                tmp1035.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1035, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1036 = new StringBuilder("unregisterUtilityWindow_result(");
          int tmp1037 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1037++) { tmp1036.Append(", "); }
            tmp1036.Append("E: ");
            E.ToString(tmp1036);
          }
          tmp1036.Append(')');
          return tmp1036.ToString();
        }
      }


      public partial class openUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public openUtilityWindow_args()
        {
        }

        public openUtilityWindow_args DeepCopy()
        {
          var tmp1038 = new openUtilityWindow_args();
          if(__isset.p)
          {
            tmp1038.P = this.P;
          }
          tmp1038.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1038.Identifier = this.Identifier;
          }
          tmp1038.__isset.identifier = this.__isset.identifier;
          return tmp1038;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1039 = new TStruct("openUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1039, cancellationToken);
            var tmp1040 = new TField();
            if(__isset.p)
            {
              tmp1040.Name = "p";
              tmp1040.Type = TType.I64;
              tmp1040.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1040, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1040.Name = "identifier";
              tmp1040.Type = TType.String;
              tmp1040.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1040, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1041 = new StringBuilder("openUtilityWindow_args(");
          int tmp1042 = 0;
          if(__isset.p)
          {
            if(0 < tmp1042++) { tmp1041.Append(", "); }
            tmp1041.Append("P: ");
            P.ToString(tmp1041);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1042++) { tmp1041.Append(", "); }
            tmp1041.Append("Identifier: ");
            Identifier.ToString(tmp1041);
          }
          tmp1041.Append(')');
          return tmp1041.ToString();
        }
      }


      public partial class openUtilityWindow_result : TBase
      {

        public openUtilityWindow_result()
        {
        }

        public openUtilityWindow_result DeepCopy()
        {
          var tmp1043 = new openUtilityWindow_result();
          return tmp1043;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1044 = new TStruct("openUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1044, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1045 = new StringBuilder("openUtilityWindow_result(");
          tmp1045.Append(')');
          return tmp1045.ToString();
        }
      }


      public partial class closeUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public closeUtilityWindow_args()
        {
        }

        public closeUtilityWindow_args DeepCopy()
        {
          var tmp1047 = new closeUtilityWindow_args();
          if(__isset.p)
          {
            tmp1047.P = this.P;
          }
          tmp1047.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1047.Identifier = this.Identifier;
          }
          tmp1047.__isset.identifier = this.__isset.identifier;
          return tmp1047;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1048 = new TStruct("closeUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1048, cancellationToken);
            var tmp1049 = new TField();
            if(__isset.p)
            {
              tmp1049.Name = "p";
              tmp1049.Type = TType.I64;
              tmp1049.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1049, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1049.Name = "identifier";
              tmp1049.Type = TType.String;
              tmp1049.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1049, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1050 = new StringBuilder("closeUtilityWindow_args(");
          int tmp1051 = 0;
          if(__isset.p)
          {
            if(0 < tmp1051++) { tmp1050.Append(", "); }
            tmp1050.Append("P: ");
            P.ToString(tmp1050);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1051++) { tmp1050.Append(", "); }
            tmp1050.Append("Identifier: ");
            Identifier.ToString(tmp1050);
          }
          tmp1050.Append(')');
          return tmp1050.ToString();
        }
      }


      public partial class closeUtilityWindow_result : TBase
      {

        public closeUtilityWindow_result()
        {
        }

        public closeUtilityWindow_result DeepCopy()
        {
          var tmp1052 = new closeUtilityWindow_result();
          return tmp1052;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1053 = new TStruct("closeUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1053, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1054 = new StringBuilder("closeUtilityWindow_result(");
          tmp1054.Append(')');
          return tmp1054.ToString();
        }
      }


      public partial class collapseUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public collapseUtilityWindow_args()
        {
        }

        public collapseUtilityWindow_args DeepCopy()
        {
          var tmp1056 = new collapseUtilityWindow_args();
          if(__isset.p)
          {
            tmp1056.P = this.P;
          }
          tmp1056.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1056.Identifier = this.Identifier;
          }
          tmp1056.__isset.identifier = this.__isset.identifier;
          return tmp1056;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1057 = new TStruct("collapseUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1057, cancellationToken);
            var tmp1058 = new TField();
            if(__isset.p)
            {
              tmp1058.Name = "p";
              tmp1058.Type = TType.I64;
              tmp1058.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1058, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1058.Name = "identifier";
              tmp1058.Type = TType.String;
              tmp1058.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1058, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1059 = new StringBuilder("collapseUtilityWindow_args(");
          int tmp1060 = 0;
          if(__isset.p)
          {
            if(0 < tmp1060++) { tmp1059.Append(", "); }
            tmp1059.Append("P: ");
            P.ToString(tmp1059);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1060++) { tmp1059.Append(", "); }
            tmp1059.Append("Identifier: ");
            Identifier.ToString(tmp1059);
          }
          tmp1059.Append(')');
          return tmp1059.ToString();
        }
      }


      public partial class collapseUtilityWindow_result : TBase
      {

        public collapseUtilityWindow_result()
        {
        }

        public collapseUtilityWindow_result DeepCopy()
        {
          var tmp1061 = new collapseUtilityWindow_result();
          return tmp1061;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1062 = new TStruct("collapseUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1062, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1063 = new StringBuilder("collapseUtilityWindow_result(");
          tmp1063.Append(')');
          return tmp1063.ToString();
        }
      }


      public partial class expandUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public expandUtilityWindow_args()
        {
        }

        public expandUtilityWindow_args DeepCopy()
        {
          var tmp1065 = new expandUtilityWindow_args();
          if(__isset.p)
          {
            tmp1065.P = this.P;
          }
          tmp1065.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1065.Identifier = this.Identifier;
          }
          tmp1065.__isset.identifier = this.__isset.identifier;
          return tmp1065;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1066 = new TStruct("expandUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1066, cancellationToken);
            var tmp1067 = new TField();
            if(__isset.p)
            {
              tmp1067.Name = "p";
              tmp1067.Type = TType.I64;
              tmp1067.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1067, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1067.Name = "identifier";
              tmp1067.Type = TType.String;
              tmp1067.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1067, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1068 = new StringBuilder("expandUtilityWindow_args(");
          int tmp1069 = 0;
          if(__isset.p)
          {
            if(0 < tmp1069++) { tmp1068.Append(", "); }
            tmp1068.Append("P: ");
            P.ToString(tmp1068);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1069++) { tmp1068.Append(", "); }
            tmp1068.Append("Identifier: ");
            Identifier.ToString(tmp1068);
          }
          tmp1068.Append(')');
          return tmp1068.ToString();
        }
      }


      public partial class expandUtilityWindow_result : TBase
      {

        public expandUtilityWindow_result()
        {
        }

        public expandUtilityWindow_result DeepCopy()
        {
          var tmp1070 = new expandUtilityWindow_result();
          return tmp1070;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1071 = new TStruct("expandUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1071, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1072 = new StringBuilder("expandUtilityWindow_result(");
          tmp1072.Append(')');
          return tmp1072.ToString();
        }
      }


      public partial class registerIntegration_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _itemType;
        private string _buttonLabel;
        private string _buttonImage;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string ButtonLabel
        {
          get
          {
            return _buttonLabel;
          }
          set
          {
            __isset.buttonLabel = true;
            this._buttonLabel = value;
          }
        }

        public string ButtonImage
        {
          get
          {
            return _buttonImage;
          }
          set
          {
            __isset.buttonImage = true;
            this._buttonImage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool itemType;
          public bool buttonLabel;
          public bool buttonImage;
        }

        public registerIntegration_args()
        {
        }

        public registerIntegration_args DeepCopy()
        {
          var tmp1074 = new registerIntegration_args();
          if(__isset.p)
          {
            tmp1074.P = this.P;
          }
          tmp1074.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1074.Identifier = this.Identifier;
          }
          tmp1074.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1074.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1074.__isset.integrationPoint = this.__isset.integrationPoint;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1074.ItemType = this.ItemType;
          }
          tmp1074.__isset.itemType = this.__isset.itemType;
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            tmp1074.ButtonLabel = this.ButtonLabel;
          }
          tmp1074.__isset.buttonLabel = this.__isset.buttonLabel;
          if((ButtonImage != null) && __isset.buttonImage)
          {
            tmp1074.ButtonImage = this.ButtonImage;
          }
          tmp1074.__isset.buttonImage = this.__isset.buttonImage;
          return tmp1074;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    ButtonLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    ButtonImage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1075 = new TStruct("registerIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1075, cancellationToken);
            var tmp1076 = new TField();
            if(__isset.p)
            {
              tmp1076.Name = "p";
              tmp1076.Type = TType.I64;
              tmp1076.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1076, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1076.Name = "identifier";
              tmp1076.Type = TType.String;
              tmp1076.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1076, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1076.Name = "integrationPoint";
              tmp1076.Type = TType.I32;
              tmp1076.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1076, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1076.Name = "itemType";
              tmp1076.Type = TType.String;
              tmp1076.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1076, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              tmp1076.Name = "buttonLabel";
              tmp1076.Type = TType.String;
              tmp1076.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1076, cancellationToken);
              await oprot.WriteStringAsync(ButtonLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              tmp1076.Name = "buttonImage";
              tmp1076.Type = TType.String;
              tmp1076.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1076, cancellationToken);
              await oprot.WriteStringAsync(ButtonImage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.buttonLabel == other.__isset.buttonLabel) && ((!__isset.buttonLabel) || (global::System.Object.Equals(ButtonLabel, other.ButtonLabel))))
            && ((__isset.buttonImage == other.__isset.buttonImage) && ((!__isset.buttonImage) || (global::System.Object.Equals(ButtonImage, other.ButtonImage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              hashcode = (hashcode * 397) + ButtonLabel.GetHashCode();
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              hashcode = (hashcode * 397) + ButtonImage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1077 = new StringBuilder("registerIntegration_args(");
          int tmp1078 = 0;
          if(__isset.p)
          {
            if(0 < tmp1078++) { tmp1077.Append(", "); }
            tmp1077.Append("P: ");
            P.ToString(tmp1077);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1078++) { tmp1077.Append(", "); }
            tmp1077.Append("Identifier: ");
            Identifier.ToString(tmp1077);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1078++) { tmp1077.Append(", "); }
            tmp1077.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1077);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1078++) { tmp1077.Append(", "); }
            tmp1077.Append("ItemType: ");
            ItemType.ToString(tmp1077);
          }
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            if(0 < tmp1078++) { tmp1077.Append(", "); }
            tmp1077.Append("ButtonLabel: ");
            ButtonLabel.ToString(tmp1077);
          }
          if((ButtonImage != null) && __isset.buttonImage)
          {
            if(0 < tmp1078++) { tmp1077.Append(", "); }
            tmp1077.Append("ButtonImage: ");
            ButtonImage.ToString(tmp1077);
          }
          tmp1077.Append(')');
          return tmp1077.ToString();
        }
      }


      public partial class registerIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerIntegration_result()
        {
        }

        public registerIntegration_result DeepCopy()
        {
          var tmp1079 = new registerIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1079.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1079.__isset.e = this.__isset.e;
          return tmp1079;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1080 = new TStruct("registerIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1080, cancellationToken);
            var tmp1081 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1081.Name = "E";
                tmp1081.Type = TType.Struct;
                tmp1081.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1081, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1082 = new StringBuilder("registerIntegration_result(");
          int tmp1083 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1083++) { tmp1082.Append(", "); }
            tmp1082.Append("E: ");
            E.ToString(tmp1082);
          }
          tmp1082.Append(')');
          return tmp1082.ToString();
        }
      }


      public partial class unregisterIntegration_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterIntegration_args()
        {
        }

        public unregisterIntegration_args DeepCopy()
        {
          var tmp1084 = new unregisterIntegration_args();
          if(__isset.p)
          {
            tmp1084.P = this.P;
          }
          tmp1084.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1084.Identifier = this.Identifier;
          }
          tmp1084.__isset.identifier = this.__isset.identifier;
          return tmp1084;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1085 = new TStruct("unregisterIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1085, cancellationToken);
            var tmp1086 = new TField();
            if(__isset.p)
            {
              tmp1086.Name = "p";
              tmp1086.Type = TType.I64;
              tmp1086.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1086, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1086.Name = "identifier";
              tmp1086.Type = TType.String;
              tmp1086.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1086, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1087 = new StringBuilder("unregisterIntegration_args(");
          int tmp1088 = 0;
          if(__isset.p)
          {
            if(0 < tmp1088++) { tmp1087.Append(", "); }
            tmp1087.Append("P: ");
            P.ToString(tmp1087);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1088++) { tmp1087.Append(", "); }
            tmp1087.Append("Identifier: ");
            Identifier.ToString(tmp1087);
          }
          tmp1087.Append(')');
          return tmp1087.ToString();
        }
      }


      public partial class unregisterIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterIntegration_result()
        {
        }

        public unregisterIntegration_result DeepCopy()
        {
          var tmp1089 = new unregisterIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1089.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1089.__isset.e = this.__isset.e;
          return tmp1089;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1090 = new TStruct("unregisterIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1090, cancellationToken);
            var tmp1091 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1091.Name = "E";
                tmp1091.Type = TType.Struct;
                tmp1091.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1091, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1092 = new StringBuilder("unregisterIntegration_result(");
          int tmp1093 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1093++) { tmp1092.Append(", "); }
            tmp1092.Append("E: ");
            E.ToString(tmp1092);
          }
          tmp1092.Append(')');
          return tmp1092.ToString();
        }
      }


      public partial class property_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
        }

        public property_args()
        {
        }

        public property_args DeepCopy()
        {
          var tmp1094 = new property_args();
          if(__isset.p)
          {
            tmp1094.P = this.P;
          }
          tmp1094.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1094.ItemID = this.ItemID;
          }
          tmp1094.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1094.Name = this.Name;
          }
          tmp1094.__isset.name = this.__isset.name;
          return tmp1094;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1095 = new TStruct("property_args");
            await oprot.WriteStructBeginAsync(tmp1095, cancellationToken);
            var tmp1096 = new TField();
            if(__isset.p)
            {
              tmp1096.Name = "p";
              tmp1096.Type = TType.I64;
              tmp1096.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1096, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1096.Name = "itemID";
              tmp1096.Type = TType.String;
              tmp1096.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1096, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1096.Name = "name";
              tmp1096.Type = TType.String;
              tmp1096.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1096, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1097 = new StringBuilder("property_args(");
          int tmp1098 = 0;
          if(__isset.p)
          {
            if(0 < tmp1098++) { tmp1097.Append(", "); }
            tmp1097.Append("P: ");
            P.ToString(tmp1097);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1098++) { tmp1097.Append(", "); }
            tmp1097.Append("ItemID: ");
            ItemID.ToString(tmp1097);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1098++) { tmp1097.Append(", "); }
            tmp1097.Append("Name: ");
            Name.ToString(tmp1097);
          }
          tmp1097.Append(')');
          return tmp1097.ToString();
        }
      }


      public partial class property_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public property_result()
        {
        }

        public property_result DeepCopy()
        {
          var tmp1099 = new property_result();
          if((Success != null) && __isset.success)
          {
            tmp1099.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1099.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1099.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1099.__isset.e = this.__isset.e;
          return tmp1099;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1100 = new TStruct("property_result");
            await oprot.WriteStructBeginAsync(tmp1100, cancellationToken);
            var tmp1101 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1101.Name = "Success";
                tmp1101.Type = TType.Struct;
                tmp1101.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1101, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1101.Name = "E";
                tmp1101.Type = TType.Struct;
                tmp1101.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1101, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1102 = new StringBuilder("property_result(");
          int tmp1103 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1103++) { tmp1102.Append(", "); }
            tmp1102.Append("Success: ");
            Success.ToString(tmp1102);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1103++) { tmp1102.Append(", "); }
            tmp1102.Append("E: ");
            E.ToString(tmp1102);
          }
          tmp1102.Append(')');
          return tmp1102.ToString();
        }
      }


      public partial class setProperty_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
          public bool @value;
        }

        public setProperty_args()
        {
        }

        public setProperty_args DeepCopy()
        {
          var tmp1104 = new setProperty_args();
          if(__isset.p)
          {
            tmp1104.P = this.P;
          }
          tmp1104.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1104.ItemID = this.ItemID;
          }
          tmp1104.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1104.Name = this.Name;
          }
          tmp1104.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp1104.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp1104.__isset.@value = this.__isset.@value;
          return tmp1104;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1105 = new TStruct("setProperty_args");
            await oprot.WriteStructBeginAsync(tmp1105, cancellationToken);
            var tmp1106 = new TField();
            if(__isset.p)
            {
              tmp1106.Name = "p";
              tmp1106.Type = TType.I64;
              tmp1106.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1106, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1106.Name = "itemID";
              tmp1106.Type = TType.String;
              tmp1106.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1106, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1106.Name = "name";
              tmp1106.Type = TType.String;
              tmp1106.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1106, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1106.Name = "value";
              tmp1106.Type = TType.Struct;
              tmp1106.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1106, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1107 = new StringBuilder("setProperty_args(");
          int tmp1108 = 0;
          if(__isset.p)
          {
            if(0 < tmp1108++) { tmp1107.Append(", "); }
            tmp1107.Append("P: ");
            P.ToString(tmp1107);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1108++) { tmp1107.Append(", "); }
            tmp1107.Append("ItemID: ");
            ItemID.ToString(tmp1107);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1108++) { tmp1107.Append(", "); }
            tmp1107.Append("Name: ");
            Name.ToString(tmp1107);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1108++) { tmp1107.Append(", "); }
            tmp1107.Append("Value: ");
            Value.ToString(tmp1107);
          }
          tmp1107.Append(')');
          return tmp1107.ToString();
        }
      }


      public partial class setProperty_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setProperty_result()
        {
        }

        public setProperty_result DeepCopy()
        {
          var tmp1109 = new setProperty_result();
          if((E != null) && __isset.e)
          {
            tmp1109.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1109.__isset.e = this.__isset.e;
          return tmp1109;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1110 = new TStruct("setProperty_result");
            await oprot.WriteStructBeginAsync(tmp1110, cancellationToken);
            var tmp1111 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1111.Name = "E";
                tmp1111.Type = TType.Struct;
                tmp1111.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1111, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1112 = new StringBuilder("setProperty_result(");
          int tmp1113 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1113++) { tmp1112.Append(", "); }
            tmp1112.Append("E: ");
            E.ToString(tmp1112);
          }
          tmp1112.Append(')');
          return tmp1112.ToString();
        }
      }


      public partial class setProperties_args : TBase
      {
        private long _p;
        private List<global::Yaskawa.Ext.API.PropValues> _propValuesList;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public List<global::Yaskawa.Ext.API.PropValues> PropValuesList
        {
          get
          {
            return _propValuesList;
          }
          set
          {
            __isset.propValuesList = true;
            this._propValuesList = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool propValuesList;
        }

        public setProperties_args()
        {
        }

        public setProperties_args DeepCopy()
        {
          var tmp1114 = new setProperties_args();
          if(__isset.p)
          {
            tmp1114.P = this.P;
          }
          tmp1114.__isset.p = this.__isset.p;
          if((PropValuesList != null) && __isset.propValuesList)
          {
            tmp1114.PropValuesList = this.PropValuesList.DeepCopy();
          }
          tmp1114.__isset.propValuesList = this.__isset.propValuesList;
          return tmp1114;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1115 = await iprot.ReadListBeginAsync(cancellationToken);
                      PropValuesList = new List<global::Yaskawa.Ext.API.PropValues>(_list1115.Count);
                      for(int _i1116 = 0; _i1116 < _list1115.Count; ++_i1116)
                      {
                        global::Yaskawa.Ext.API.PropValues _elem1117;
                        _elem1117 = new global::Yaskawa.Ext.API.PropValues();
                        await _elem1117.ReadAsync(iprot, cancellationToken);
                        PropValuesList.Add(_elem1117);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1118 = new TStruct("setProperties_args");
            await oprot.WriteStructBeginAsync(tmp1118, cancellationToken);
            var tmp1119 = new TField();
            if(__isset.p)
            {
              tmp1119.Name = "p";
              tmp1119.Type = TType.I64;
              tmp1119.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              tmp1119.Name = "propValuesList";
              tmp1119.Type = TType.List;
              tmp1119.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, PropValuesList.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PropValues _iter1120 in PropValuesList)
              {
                await _iter1120.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperties_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.propValuesList == other.__isset.propValuesList) && ((!__isset.propValuesList) || (TCollections.Equals(PropValuesList, other.PropValuesList))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(PropValuesList);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1121 = new StringBuilder("setProperties_args(");
          int tmp1122 = 0;
          if(__isset.p)
          {
            if(0 < tmp1122++) { tmp1121.Append(", "); }
            tmp1121.Append("P: ");
            P.ToString(tmp1121);
          }
          if((PropValuesList != null) && __isset.propValuesList)
          {
            if(0 < tmp1122++) { tmp1121.Append(", "); }
            tmp1121.Append("PropValuesList: ");
            PropValuesList.ToString(tmp1121);
          }
          tmp1121.Append(')');
          return tmp1121.ToString();
        }
      }


      public partial class setChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;
        private global::Yaskawa.Ext.API.Any _config;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool config;
        }

        public setChartConfig_args()
        {
        }

        public setChartConfig_args DeepCopy()
        {
          var tmp1123 = new setChartConfig_args();
          if(__isset.p)
          {
            tmp1123.P = this.P;
          }
          tmp1123.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1123.ChartID = this.ChartID;
          }
          tmp1123.__isset.chartID = this.__isset.chartID;
          if((Config != null) && __isset.config)
          {
            tmp1123.Config = (global::Yaskawa.Ext.API.Any)this.Config.DeepCopy();
          }
          tmp1123.__isset.config = this.__isset.config;
          return tmp1123;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::Yaskawa.Ext.API.Any();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1124 = new TStruct("setChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1124, cancellationToken);
            var tmp1125 = new TField();
            if(__isset.p)
            {
              tmp1125.Name = "p";
              tmp1125.Type = TType.I64;
              tmp1125.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1125, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1125.Name = "chartID";
              tmp1125.Type = TType.String;
              tmp1125.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1125, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1125.Name = "config";
              tmp1125.Type = TType.Struct;
              tmp1125.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1125, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1126 = new StringBuilder("setChartConfig_args(");
          int tmp1127 = 0;
          if(__isset.p)
          {
            if(0 < tmp1127++) { tmp1126.Append(", "); }
            tmp1126.Append("P: ");
            P.ToString(tmp1126);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1127++) { tmp1126.Append(", "); }
            tmp1126.Append("ChartID: ");
            ChartID.ToString(tmp1126);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1127++) { tmp1126.Append(", "); }
            tmp1126.Append("Config: ");
            Config.ToString(tmp1126);
          }
          tmp1126.Append(')');
          return tmp1126.ToString();
        }
      }


      public partial class setChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartConfig_result()
        {
        }

        public setChartConfig_result DeepCopy()
        {
          var tmp1128 = new setChartConfig_result();
          if((E != null) && __isset.e)
          {
            tmp1128.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1128.__isset.e = this.__isset.e;
          return tmp1128;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1129 = new TStruct("setChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1129, cancellationToken);
            var tmp1130 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1130.Name = "E";
                tmp1130.Type = TType.Struct;
                tmp1130.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1130, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1131 = new StringBuilder("setChartConfig_result(");
          int tmp1132 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1132++) { tmp1131.Append(", "); }
            tmp1131.Append("E: ");
            E.ToString(tmp1131);
          }
          tmp1131.Append(')');
          return tmp1131.ToString();
        }
      }


      public partial class getChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
        }

        public getChartConfig_args()
        {
        }

        public getChartConfig_args DeepCopy()
        {
          var tmp1133 = new getChartConfig_args();
          if(__isset.p)
          {
            tmp1133.P = this.P;
          }
          tmp1133.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1133.ChartID = this.ChartID;
          }
          tmp1133.__isset.chartID = this.__isset.chartID;
          return tmp1133;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1134 = new TStruct("getChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1134, cancellationToken);
            var tmp1135 = new TField();
            if(__isset.p)
            {
              tmp1135.Name = "p";
              tmp1135.Type = TType.I64;
              tmp1135.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1135, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1135.Name = "chartID";
              tmp1135.Type = TType.String;
              tmp1135.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1135, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1136 = new StringBuilder("getChartConfig_args(");
          int tmp1137 = 0;
          if(__isset.p)
          {
            if(0 < tmp1137++) { tmp1136.Append(", "); }
            tmp1136.Append("P: ");
            P.ToString(tmp1136);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1137++) { tmp1136.Append(", "); }
            tmp1136.Append("ChartID: ");
            ChartID.ToString(tmp1136);
          }
          tmp1136.Append(')');
          return tmp1136.ToString();
        }
      }


      public partial class getChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartConfig_result()
        {
        }

        public getChartConfig_result DeepCopy()
        {
          var tmp1138 = new getChartConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1138.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1138.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1138.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1138.__isset.e = this.__isset.e;
          return tmp1138;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1139 = new TStruct("getChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1139, cancellationToken);
            var tmp1140 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1140.Name = "Success";
                tmp1140.Type = TType.Struct;
                tmp1140.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1140, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1140.Name = "E";
                tmp1140.Type = TType.Struct;
                tmp1140.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1140, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1141 = new StringBuilder("getChartConfig_result(");
          int tmp1142 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1142++) { tmp1141.Append(", "); }
            tmp1141.Append("Success: ");
            Success.ToString(tmp1141);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1142++) { tmp1141.Append(", "); }
            tmp1141.Append("E: ");
            E.ToString(tmp1141);
          }
          tmp1141.Append(')');
          return tmp1141.ToString();
        }
      }


      public partial class setChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _dataset;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Dataset
        {
          get
          {
            return _dataset;
          }
          set
          {
            __isset.dataset = true;
            this._dataset = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool dataset;
          public bool right;
        }

        public setChartData_args()
        {
        }

        public setChartData_args DeepCopy()
        {
          var tmp1143 = new setChartData_args();
          if(__isset.p)
          {
            tmp1143.P = this.P;
          }
          tmp1143.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1143.ChartID = this.ChartID;
          }
          tmp1143.__isset.chartID = this.__isset.chartID;
          if((Dataset != null) && __isset.dataset)
          {
            tmp1143.Dataset = this.Dataset.DeepCopy();
          }
          tmp1143.__isset.dataset = this.__isset.dataset;
          if(__isset.right)
          {
            tmp1143.Right = this.Right;
          }
          tmp1143.__isset.right = this.__isset.right;
          return tmp1143;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1144 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dataset = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1144.Count);
                      for(int _i1145 = 0; _i1145 < _map1144.Count; ++_i1145)
                      {
                        string _key1146;
                        global::Yaskawa.Ext.API.Data _val1147;
                        _key1146 = await iprot.ReadStringAsync(cancellationToken);
                        _val1147 = new global::Yaskawa.Ext.API.Data();
                        await _val1147.ReadAsync(iprot, cancellationToken);
                        Dataset[_key1146] = _val1147;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1148 = new TStruct("setChartData_args");
            await oprot.WriteStructBeginAsync(tmp1148, cancellationToken);
            var tmp1149 = new TField();
            if(__isset.p)
            {
              tmp1149.Name = "p";
              tmp1149.Type = TType.I64;
              tmp1149.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1149, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1149.Name = "chartID";
              tmp1149.Type = TType.String;
              tmp1149.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1149, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dataset != null) && __isset.dataset)
            {
              tmp1149.Name = "dataset";
              tmp1149.Type = TType.Map;
              tmp1149.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1149, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dataset.Count), cancellationToken);
              foreach (string _iter1150 in Dataset.Keys)
              {
                await oprot.WriteStringAsync(_iter1150, cancellationToken);
                await Dataset[_iter1150].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1149.Name = "right";
              tmp1149.Type = TType.Bool;
              tmp1149.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1149, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.dataset == other.__isset.dataset) && ((!__isset.dataset) || (global::System.Object.Equals(Dataset, other.Dataset))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Dataset != null) && __isset.dataset)
            {
              hashcode = (hashcode * 397) + Dataset.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1151 = new StringBuilder("setChartData_args(");
          int tmp1152 = 0;
          if(__isset.p)
          {
            if(0 < tmp1152++) { tmp1151.Append(", "); }
            tmp1151.Append("P: ");
            P.ToString(tmp1151);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1152++) { tmp1151.Append(", "); }
            tmp1151.Append("ChartID: ");
            ChartID.ToString(tmp1151);
          }
          if((Dataset != null) && __isset.dataset)
          {
            if(0 < tmp1152++) { tmp1151.Append(", "); }
            tmp1151.Append("Dataset: ");
            Dataset.ToString(tmp1151);
          }
          if(__isset.right)
          {
            if(0 < tmp1152++) { tmp1151.Append(", "); }
            tmp1151.Append("Right: ");
            Right.ToString(tmp1151);
          }
          tmp1151.Append(')');
          return tmp1151.ToString();
        }
      }


      public partial class setChartData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartData_result()
        {
        }

        public setChartData_result DeepCopy()
        {
          var tmp1153 = new setChartData_result();
          if((E != null) && __isset.e)
          {
            tmp1153.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1153.__isset.e = this.__isset.e;
          return tmp1153;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1154 = new TStruct("setChartData_result");
            await oprot.WriteStructBeginAsync(tmp1154, cancellationToken);
            var tmp1155 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1155.Name = "E";
                tmp1155.Type = TType.Struct;
                tmp1155.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1155, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1156 = new StringBuilder("setChartData_result(");
          int tmp1157 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1157++) { tmp1156.Append(", "); }
            tmp1156.Append("E: ");
            E.ToString(tmp1156);
          }
          tmp1156.Append(')');
          return tmp1156.ToString();
        }
      }


      public partial class getChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool right;
        }

        public getChartData_args()
        {
        }

        public getChartData_args DeepCopy()
        {
          var tmp1158 = new getChartData_args();
          if(__isset.p)
          {
            tmp1158.P = this.P;
          }
          tmp1158.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1158.ChartID = this.ChartID;
          }
          tmp1158.__isset.chartID = this.__isset.chartID;
          if(__isset.right)
          {
            tmp1158.Right = this.Right;
          }
          tmp1158.__isset.right = this.__isset.right;
          return tmp1158;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1159 = new TStruct("getChartData_args");
            await oprot.WriteStructBeginAsync(tmp1159, cancellationToken);
            var tmp1160 = new TField();
            if(__isset.p)
            {
              tmp1160.Name = "p";
              tmp1160.Type = TType.I64;
              tmp1160.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1160, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1160.Name = "chartID";
              tmp1160.Type = TType.String;
              tmp1160.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1160, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1160.Name = "right";
              tmp1160.Type = TType.Bool;
              tmp1160.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1160, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1161 = new StringBuilder("getChartData_args(");
          int tmp1162 = 0;
          if(__isset.p)
          {
            if(0 < tmp1162++) { tmp1161.Append(", "); }
            tmp1161.Append("P: ");
            P.ToString(tmp1161);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1162++) { tmp1161.Append(", "); }
            tmp1161.Append("ChartID: ");
            ChartID.ToString(tmp1161);
          }
          if(__isset.right)
          {
            if(0 < tmp1162++) { tmp1161.Append(", "); }
            tmp1161.Append("Right: ");
            Right.ToString(tmp1161);
          }
          tmp1161.Append(')');
          return tmp1161.ToString();
        }
      }


      public partial class getChartData_result : TBase
      {
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartData_result()
        {
        }

        public getChartData_result DeepCopy()
        {
          var tmp1163 = new getChartData_result();
          if((Success != null) && __isset.success)
          {
            tmp1163.Success = this.Success.DeepCopy();
          }
          tmp1163.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1163.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1163.__isset.e = this.__isset.e;
          return tmp1163;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1164 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1164.Count);
                      for(int _i1165 = 0; _i1165 < _map1164.Count; ++_i1165)
                      {
                        string _key1166;
                        global::Yaskawa.Ext.API.Data _val1167;
                        _key1166 = await iprot.ReadStringAsync(cancellationToken);
                        _val1167 = new global::Yaskawa.Ext.API.Data();
                        await _val1167.ReadAsync(iprot, cancellationToken);
                        Success[_key1166] = _val1167;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1168 = new TStruct("getChartData_result");
            await oprot.WriteStructBeginAsync(tmp1168, cancellationToken);
            var tmp1169 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1169.Name = "Success";
                tmp1169.Type = TType.Map;
                tmp1169.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1169, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter1170 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter1170, cancellationToken);
                  await Success[_iter1170].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1169.Name = "E";
                tmp1169.Type = TType.Struct;
                tmp1169.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1169, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1171 = new StringBuilder("getChartData_result(");
          int tmp1172 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1172++) { tmp1171.Append(", "); }
            tmp1171.Append("Success: ");
            Success.ToString(tmp1171);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1172++) { tmp1171.Append(", "); }
            tmp1171.Append("E: ");
            E.ToString(tmp1171);
          }
          tmp1171.Append(')');
          return tmp1171.ToString();
        }
      }


      public partial class addChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private global::Yaskawa.Ext.API.Data _data;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::Yaskawa.Ext.API.Data Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool data;
          public bool right;
        }

        public addChartKey_args()
        {
        }

        public addChartKey_args DeepCopy()
        {
          var tmp1173 = new addChartKey_args();
          if(__isset.p)
          {
            tmp1173.P = this.P;
          }
          tmp1173.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1173.ChartID = this.ChartID;
          }
          tmp1173.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1173.Key = this.Key;
          }
          tmp1173.__isset.key = this.__isset.key;
          if((Data != null) && __isset.data)
          {
            tmp1173.Data = (global::Yaskawa.Ext.API.Data)this.Data.DeepCopy();
          }
          tmp1173.__isset.data = this.__isset.data;
          if(__isset.right)
          {
            tmp1173.Right = this.Right;
          }
          tmp1173.__isset.right = this.__isset.right;
          return tmp1173;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Data = new global::Yaskawa.Ext.API.Data();
                    await Data.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1174 = new TStruct("addChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1174, cancellationToken);
            var tmp1175 = new TField();
            if(__isset.p)
            {
              tmp1175.Name = "p";
              tmp1175.Type = TType.I64;
              tmp1175.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1175.Name = "chartID";
              tmp1175.Type = TType.String;
              tmp1175.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1175.Name = "key";
              tmp1175.Type = TType.String;
              tmp1175.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp1175.Name = "data";
              tmp1175.Type = TType.Struct;
              tmp1175.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await Data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1175.Name = "right";
              tmp1175.Type = TType.Bool;
              tmp1175.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1176 = new StringBuilder("addChartKey_args(");
          int tmp1177 = 0;
          if(__isset.p)
          {
            if(0 < tmp1177++) { tmp1176.Append(", "); }
            tmp1176.Append("P: ");
            P.ToString(tmp1176);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1177++) { tmp1176.Append(", "); }
            tmp1176.Append("ChartID: ");
            ChartID.ToString(tmp1176);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1177++) { tmp1176.Append(", "); }
            tmp1176.Append("Key: ");
            Key.ToString(tmp1176);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp1177++) { tmp1176.Append(", "); }
            tmp1176.Append("Data: ");
            Data.ToString(tmp1176);
          }
          if(__isset.right)
          {
            if(0 < tmp1177++) { tmp1176.Append(", "); }
            tmp1176.Append("Right: ");
            Right.ToString(tmp1176);
          }
          tmp1176.Append(')');
          return tmp1176.ToString();
        }
      }


      public partial class addChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public addChartKey_result()
        {
        }

        public addChartKey_result DeepCopy()
        {
          var tmp1178 = new addChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1178.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1178.__isset.e = this.__isset.e;
          return tmp1178;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1179 = new TStruct("addChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1179, cancellationToken);
            var tmp1180 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1180.Name = "E";
                tmp1180.Type = TType.Struct;
                tmp1180.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1180, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1181 = new StringBuilder("addChartKey_result(");
          int tmp1182 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1182++) { tmp1181.Append(", "); }
            tmp1181.Append("E: ");
            E.ToString(tmp1181);
          }
          tmp1181.Append(')');
          return tmp1181.ToString();
        }
      }


      public partial class removeChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool right;
        }

        public removeChartKey_args()
        {
        }

        public removeChartKey_args DeepCopy()
        {
          var tmp1183 = new removeChartKey_args();
          if(__isset.p)
          {
            tmp1183.P = this.P;
          }
          tmp1183.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1183.ChartID = this.ChartID;
          }
          tmp1183.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1183.Key = this.Key;
          }
          tmp1183.__isset.key = this.__isset.key;
          if(__isset.right)
          {
            tmp1183.Right = this.Right;
          }
          tmp1183.__isset.right = this.__isset.right;
          return tmp1183;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1184 = new TStruct("removeChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1184, cancellationToken);
            var tmp1185 = new TField();
            if(__isset.p)
            {
              tmp1185.Name = "p";
              tmp1185.Type = TType.I64;
              tmp1185.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1185, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1185.Name = "chartID";
              tmp1185.Type = TType.String;
              tmp1185.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1185, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1185.Name = "key";
              tmp1185.Type = TType.String;
              tmp1185.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1185, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1185.Name = "right";
              tmp1185.Type = TType.Bool;
              tmp1185.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1185, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1186 = new StringBuilder("removeChartKey_args(");
          int tmp1187 = 0;
          if(__isset.p)
          {
            if(0 < tmp1187++) { tmp1186.Append(", "); }
            tmp1186.Append("P: ");
            P.ToString(tmp1186);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1187++) { tmp1186.Append(", "); }
            tmp1186.Append("ChartID: ");
            ChartID.ToString(tmp1186);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1187++) { tmp1186.Append(", "); }
            tmp1186.Append("Key: ");
            Key.ToString(tmp1186);
          }
          if(__isset.right)
          {
            if(0 < tmp1187++) { tmp1186.Append(", "); }
            tmp1186.Append("Right: ");
            Right.ToString(tmp1186);
          }
          tmp1186.Append(')');
          return tmp1186.ToString();
        }
      }


      public partial class removeChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeChartKey_result()
        {
        }

        public removeChartKey_result DeepCopy()
        {
          var tmp1188 = new removeChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1188.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1188.__isset.e = this.__isset.e;
          return tmp1188;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1189 = new TStruct("removeChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1189, cancellationToken);
            var tmp1190 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1190.Name = "E";
                tmp1190.Type = TType.Struct;
                tmp1190.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1190, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1191 = new StringBuilder("removeChartKey_result(");
          int tmp1192 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1192++) { tmp1191.Append(", "); }
            tmp1191.Append("E: ");
            E.ToString(tmp1191);
          }
          tmp1191.Append(')');
          return tmp1191.ToString();
        }
      }


      public partial class hideChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _hidden;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Hidden
        {
          get
          {
            return _hidden;
          }
          set
          {
            __isset.hidden = true;
            this._hidden = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool hidden;
          public bool right;
        }

        public hideChartKey_args()
        {
        }

        public hideChartKey_args DeepCopy()
        {
          var tmp1193 = new hideChartKey_args();
          if(__isset.p)
          {
            tmp1193.P = this.P;
          }
          tmp1193.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1193.ChartID = this.ChartID;
          }
          tmp1193.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1193.Key = this.Key;
          }
          tmp1193.__isset.key = this.__isset.key;
          if(__isset.hidden)
          {
            tmp1193.Hidden = this.Hidden;
          }
          tmp1193.__isset.hidden = this.__isset.hidden;
          if(__isset.right)
          {
            tmp1193.Right = this.Right;
          }
          tmp1193.__isset.right = this.__isset.right;
          return tmp1193;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Hidden = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1194 = new TStruct("hideChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1194, cancellationToken);
            var tmp1195 = new TField();
            if(__isset.p)
            {
              tmp1195.Name = "p";
              tmp1195.Type = TType.I64;
              tmp1195.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1195.Name = "chartID";
              tmp1195.Type = TType.String;
              tmp1195.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1195.Name = "key";
              tmp1195.Type = TType.String;
              tmp1195.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.hidden)
            {
              tmp1195.Name = "hidden";
              tmp1195.Type = TType.Bool;
              tmp1195.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteBoolAsync(Hidden, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1195.Name = "right";
              tmp1195.Type = TType.Bool;
              tmp1195.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.hidden)
            {
              hashcode = (hashcode * 397) + Hidden.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1196 = new StringBuilder("hideChartKey_args(");
          int tmp1197 = 0;
          if(__isset.p)
          {
            if(0 < tmp1197++) { tmp1196.Append(", "); }
            tmp1196.Append("P: ");
            P.ToString(tmp1196);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1197++) { tmp1196.Append(", "); }
            tmp1196.Append("ChartID: ");
            ChartID.ToString(tmp1196);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1197++) { tmp1196.Append(", "); }
            tmp1196.Append("Key: ");
            Key.ToString(tmp1196);
          }
          if(__isset.hidden)
          {
            if(0 < tmp1197++) { tmp1196.Append(", "); }
            tmp1196.Append("Hidden: ");
            Hidden.ToString(tmp1196);
          }
          if(__isset.right)
          {
            if(0 < tmp1197++) { tmp1196.Append(", "); }
            tmp1196.Append("Right: ");
            Right.ToString(tmp1196);
          }
          tmp1196.Append(')');
          return tmp1196.ToString();
        }
      }


      public partial class hideChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public hideChartKey_result()
        {
        }

        public hideChartKey_result DeepCopy()
        {
          var tmp1198 = new hideChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1198.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1198.__isset.e = this.__isset.e;
          return tmp1198;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1199 = new TStruct("hideChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1199, cancellationToken);
            var tmp1200 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1200.Name = "E";
                tmp1200.Type = TType.Struct;
                tmp1200.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1200, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1201 = new StringBuilder("hideChartKey_result(");
          int tmp1202 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1202++) { tmp1201.Append(", "); }
            tmp1201.Append("E: ");
            E.ToString(tmp1201);
          }
          tmp1201.Append(')');
          return tmp1201.ToString();
        }
      }


      public partial class appendChartPoints_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private List<global::Yaskawa.Ext.API.DataPoint> _points;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public List<global::Yaskawa.Ext.API.DataPoint> Points
        {
          get
          {
            return _points;
          }
          set
          {
            __isset.points = true;
            this._points = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool points;
          public bool right;
        }

        public appendChartPoints_args()
        {
        }

        public appendChartPoints_args DeepCopy()
        {
          var tmp1203 = new appendChartPoints_args();
          if(__isset.p)
          {
            tmp1203.P = this.P;
          }
          tmp1203.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1203.ChartID = this.ChartID;
          }
          tmp1203.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1203.Key = this.Key;
          }
          tmp1203.__isset.key = this.__isset.key;
          if((Points != null) && __isset.points)
          {
            tmp1203.Points = this.Points.DeepCopy();
          }
          tmp1203.__isset.points = this.__isset.points;
          if(__isset.right)
          {
            tmp1203.Right = this.Right;
          }
          tmp1203.__isset.right = this.__isset.right;
          return tmp1203;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1204 = await iprot.ReadListBeginAsync(cancellationToken);
                      Points = new List<global::Yaskawa.Ext.API.DataPoint>(_list1204.Count);
                      for(int _i1205 = 0; _i1205 < _list1204.Count; ++_i1205)
                      {
                        global::Yaskawa.Ext.API.DataPoint _elem1206;
                        _elem1206 = new global::Yaskawa.Ext.API.DataPoint();
                        await _elem1206.ReadAsync(iprot, cancellationToken);
                        Points.Add(_elem1206);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1207 = new TStruct("appendChartPoints_args");
            await oprot.WriteStructBeginAsync(tmp1207, cancellationToken);
            var tmp1208 = new TField();
            if(__isset.p)
            {
              tmp1208.Name = "p";
              tmp1208.Type = TType.I64;
              tmp1208.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1208.Name = "chartID";
              tmp1208.Type = TType.String;
              tmp1208.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1208.Name = "key";
              tmp1208.Type = TType.String;
              tmp1208.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Points != null) && __isset.points)
            {
              tmp1208.Name = "points";
              tmp1208.Type = TType.List;
              tmp1208.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Points.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.DataPoint _iter1209 in Points)
              {
                await _iter1209.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1208.Name = "right";
              tmp1208.Type = TType.Bool;
              tmp1208.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendChartPoints_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.points == other.__isset.points) && ((!__isset.points) || (TCollections.Equals(Points, other.Points))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Points != null) && __isset.points)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Points);
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1210 = new StringBuilder("appendChartPoints_args(");
          int tmp1211 = 0;
          if(__isset.p)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("P: ");
            P.ToString(tmp1210);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("ChartID: ");
            ChartID.ToString(tmp1210);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("Key: ");
            Key.ToString(tmp1210);
          }
          if((Points != null) && __isset.points)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("Points: ");
            Points.ToString(tmp1210);
          }
          if(__isset.right)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("Right: ");
            Right.ToString(tmp1210);
          }
          tmp1210.Append(')');
          return tmp1210.ToString();
        }
      }


      public partial class incrementChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private double _val;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public double Val
        {
          get
          {
            return _val;
          }
          set
          {
            __isset.val = true;
            this._val = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool val;
        }

        public incrementChartKey_args()
        {
        }

        public incrementChartKey_args DeepCopy()
        {
          var tmp1212 = new incrementChartKey_args();
          if(__isset.p)
          {
            tmp1212.P = this.P;
          }
          tmp1212.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1212.ChartID = this.ChartID;
          }
          tmp1212.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1212.Key = this.Key;
          }
          tmp1212.__isset.key = this.__isset.key;
          if(__isset.val)
          {
            tmp1212.Val = this.Val;
          }
          tmp1212.__isset.val = this.__isset.val;
          return tmp1212;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    Val = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1213 = new TStruct("incrementChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1213, cancellationToken);
            var tmp1214 = new TField();
            if(__isset.p)
            {
              tmp1214.Name = "p";
              tmp1214.Type = TType.I64;
              tmp1214.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1214, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1214.Name = "chartID";
              tmp1214.Type = TType.String;
              tmp1214.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1214, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1214.Name = "key";
              tmp1214.Type = TType.String;
              tmp1214.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1214, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.val)
            {
              tmp1214.Name = "val";
              tmp1214.Type = TType.Double;
              tmp1214.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1214, cancellationToken);
              await oprot.WriteDoubleAsync(Val, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.val == other.__isset.val) && ((!__isset.val) || (global::System.Object.Equals(Val, other.Val))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.val)
            {
              hashcode = (hashcode * 397) + Val.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1215 = new StringBuilder("incrementChartKey_args(");
          int tmp1216 = 0;
          if(__isset.p)
          {
            if(0 < tmp1216++) { tmp1215.Append(", "); }
            tmp1215.Append("P: ");
            P.ToString(tmp1215);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1216++) { tmp1215.Append(", "); }
            tmp1215.Append("ChartID: ");
            ChartID.ToString(tmp1215);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1216++) { tmp1215.Append(", "); }
            tmp1215.Append("Key: ");
            Key.ToString(tmp1215);
          }
          if(__isset.val)
          {
            if(0 < tmp1216++) { tmp1215.Append(", "); }
            tmp1215.Append("Val: ");
            Val.ToString(tmp1215);
          }
          tmp1215.Append(')');
          return tmp1215.ToString();
        }
      }


      public partial class incrementChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public incrementChartKey_result()
        {
        }

        public incrementChartKey_result DeepCopy()
        {
          var tmp1217 = new incrementChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1217.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1217.__isset.e = this.__isset.e;
          return tmp1217;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1218 = new TStruct("incrementChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1218, cancellationToken);
            var tmp1219 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1219.Name = "E";
                tmp1219.Type = TType.Struct;
                tmp1219.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1219, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1220 = new StringBuilder("incrementChartKey_result(");
          int tmp1221 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1221++) { tmp1220.Append(", "); }
            tmp1220.Append("E: ");
            E.ToString(tmp1220);
          }
          tmp1220.Append(')');
          return tmp1220.ToString();
        }
      }


      public partial class exportChartImage_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImage_args()
        {
        }

        public exportChartImage_args DeepCopy()
        {
          var tmp1222 = new exportChartImage_args();
          if(__isset.p)
          {
            tmp1222.P = this.P;
          }
          tmp1222.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1222.ChartID = this.ChartID;
          }
          tmp1222.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1222.ImageFileName = this.ImageFileName;
          }
          tmp1222.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1222;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1223 = new TStruct("exportChartImage_args");
            await oprot.WriteStructBeginAsync(tmp1223, cancellationToken);
            var tmp1224 = new TField();
            if(__isset.p)
            {
              tmp1224.Name = "p";
              tmp1224.Type = TType.I64;
              tmp1224.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1224.Name = "chartID";
              tmp1224.Type = TType.String;
              tmp1224.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1224.Name = "imageFileName";
              tmp1224.Type = TType.String;
              tmp1224.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1225 = new StringBuilder("exportChartImage_args(");
          int tmp1226 = 0;
          if(__isset.p)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("P: ");
            P.ToString(tmp1225);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("ChartID: ");
            ChartID.ToString(tmp1225);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1225);
          }
          tmp1225.Append(')');
          return tmp1225.ToString();
        }
      }


      public partial class exportChartImage_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImage_result()
        {
        }

        public exportChartImage_result DeepCopy()
        {
          var tmp1227 = new exportChartImage_result();
          if((Success != null) && __isset.success)
          {
            tmp1227.Success = this.Success;
          }
          tmp1227.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1227.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1227.__isset.e = this.__isset.e;
          return tmp1227;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1228 = new TStruct("exportChartImage_result");
            await oprot.WriteStructBeginAsync(tmp1228, cancellationToken);
            var tmp1229 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1229.Name = "Success";
                tmp1229.Type = TType.String;
                tmp1229.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1229, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1229.Name = "E";
                tmp1229.Type = TType.Struct;
                tmp1229.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1229, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1230 = new StringBuilder("exportChartImage_result(");
          int tmp1231 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1231++) { tmp1230.Append(", "); }
            tmp1230.Append("Success: ");
            Success.ToString(tmp1230);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1231++) { tmp1230.Append(", "); }
            tmp1230.Append("E: ");
            E.ToString(tmp1230);
          }
          tmp1230.Append(')');
          return tmp1230.ToString();
        }
      }


      public partial class exportChartImageData_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImageData_args()
        {
        }

        public exportChartImageData_args DeepCopy()
        {
          var tmp1232 = new exportChartImageData_args();
          if(__isset.p)
          {
            tmp1232.P = this.P;
          }
          tmp1232.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1232.ChartID = this.ChartID;
          }
          tmp1232.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1232.ImageFileName = this.ImageFileName;
          }
          tmp1232.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1232;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1233 = new TStruct("exportChartImageData_args");
            await oprot.WriteStructBeginAsync(tmp1233, cancellationToken);
            var tmp1234 = new TField();
            if(__isset.p)
            {
              tmp1234.Name = "p";
              tmp1234.Type = TType.I64;
              tmp1234.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1234, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1234.Name = "chartID";
              tmp1234.Type = TType.String;
              tmp1234.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1234, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1234.Name = "imageFileName";
              tmp1234.Type = TType.String;
              tmp1234.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1234, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1235 = new StringBuilder("exportChartImageData_args(");
          int tmp1236 = 0;
          if(__isset.p)
          {
            if(0 < tmp1236++) { tmp1235.Append(", "); }
            tmp1235.Append("P: ");
            P.ToString(tmp1235);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1236++) { tmp1235.Append(", "); }
            tmp1235.Append("ChartID: ");
            ChartID.ToString(tmp1235);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1236++) { tmp1235.Append(", "); }
            tmp1235.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1235);
          }
          tmp1235.Append(')');
          return tmp1235.ToString();
        }
      }


      public partial class exportChartImageData_result : TBase
      {
        private byte[] _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImageData_result()
        {
        }

        public exportChartImageData_result DeepCopy()
        {
          var tmp1237 = new exportChartImageData_result();
          if((Success != null) && __isset.success)
          {
            tmp1237.Success = this.Success.ToArray();
          }
          tmp1237.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1237.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1237.__isset.e = this.__isset.e;
          return tmp1237;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1238 = new TStruct("exportChartImageData_result");
            await oprot.WriteStructBeginAsync(tmp1238, cancellationToken);
            var tmp1239 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1239.Name = "Success";
                tmp1239.Type = TType.String;
                tmp1239.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1239, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1239.Name = "E";
                tmp1239.Type = TType.Struct;
                tmp1239.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1239, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1240 = new StringBuilder("exportChartImageData_result(");
          int tmp1241 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1241++) { tmp1240.Append(", "); }
            tmp1240.Append("Success: ");
            Success.ToString(tmp1240);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1241++) { tmp1240.Append(", "); }
            tmp1240.Append("E: ");
            E.ToString(tmp1240);
          }
          tmp1240.Append(')');
          return tmp1240.ToString();
        }
      }


      public partial class notice_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public notice_args()
        {
        }

        public notice_args DeepCopy()
        {
          var tmp1242 = new notice_args();
          if(__isset.p)
          {
            tmp1242.P = this.P;
          }
          tmp1242.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1242.Title = this.Title;
          }
          tmp1242.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1242.Message = this.Message;
          }
          tmp1242.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1242.Log = this.Log;
          }
          tmp1242.__isset.log = this.__isset.log;
          return tmp1242;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1243 = new TStruct("notice_args");
            await oprot.WriteStructBeginAsync(tmp1243, cancellationToken);
            var tmp1244 = new TField();
            if(__isset.p)
            {
              tmp1244.Name = "p";
              tmp1244.Type = TType.I64;
              tmp1244.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1244.Name = "title";
              tmp1244.Type = TType.String;
              tmp1244.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1244.Name = "message";
              tmp1244.Type = TType.String;
              tmp1244.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1244.Name = "log";
              tmp1244.Type = TType.String;
              tmp1244.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1245 = new StringBuilder("notice_args(");
          int tmp1246 = 0;
          if(__isset.p)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("P: ");
            P.ToString(tmp1245);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("Title: ");
            Title.ToString(tmp1245);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("Message: ");
            Message.ToString(tmp1245);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("Log: ");
            Log.ToString(tmp1245);
          }
          tmp1245.Append(')');
          return tmp1245.ToString();
        }
      }


      public partial class dispNotice_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.Disposition _disposition;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.Disposition"/>
        /// </summary>
        public global::Yaskawa.Ext.API.Disposition Disposition
        {
          get
          {
            return _disposition;
          }
          set
          {
            __isset.disposition = true;
            this._disposition = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool disposition;
          public bool title;
          public bool message;
          public bool log;
        }

        public dispNotice_args()
        {
        }

        public dispNotice_args DeepCopy()
        {
          var tmp1247 = new dispNotice_args();
          if(__isset.p)
          {
            tmp1247.P = this.P;
          }
          tmp1247.__isset.p = this.__isset.p;
          if(__isset.disposition)
          {
            tmp1247.Disposition = this.Disposition;
          }
          tmp1247.__isset.disposition = this.__isset.disposition;
          if((Title != null) && __isset.title)
          {
            tmp1247.Title = this.Title;
          }
          tmp1247.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1247.Message = this.Message;
          }
          tmp1247.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1247.Log = this.Log;
          }
          tmp1247.__isset.log = this.__isset.log;
          return tmp1247;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Disposition = (global::Yaskawa.Ext.API.Disposition)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1248 = new TStruct("dispNotice_args");
            await oprot.WriteStructBeginAsync(tmp1248, cancellationToken);
            var tmp1249 = new TField();
            if(__isset.p)
            {
              tmp1249.Name = "p";
              tmp1249.Type = TType.I64;
              tmp1249.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.disposition)
            {
              tmp1249.Name = "disposition";
              tmp1249.Type = TType.I32;
              tmp1249.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
              await oprot.WriteI32Async((int)Disposition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1249.Name = "title";
              tmp1249.Type = TType.String;
              tmp1249.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1249.Name = "message";
              tmp1249.Type = TType.String;
              tmp1249.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1249.Name = "log";
              tmp1249.Type = TType.String;
              tmp1249.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dispNotice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.disposition == other.__isset.disposition) && ((!__isset.disposition) || (global::System.Object.Equals(Disposition, other.Disposition))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.disposition)
            {
              hashcode = (hashcode * 397) + Disposition.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1250 = new StringBuilder("dispNotice_args(");
          int tmp1251 = 0;
          if(__isset.p)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("P: ");
            P.ToString(tmp1250);
          }
          if(__isset.disposition)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("Disposition: ");
            Disposition.ToString(tmp1250);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("Title: ");
            Title.ToString(tmp1250);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("Message: ");
            Message.ToString(tmp1250);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("Log: ");
            Log.ToString(tmp1250);
          }
          tmp1250.Append(')');
          return tmp1250.ToString();
        }
      }


      public partial class error_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public error_args()
        {
        }

        public error_args DeepCopy()
        {
          var tmp1252 = new error_args();
          if(__isset.p)
          {
            tmp1252.P = this.P;
          }
          tmp1252.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1252.Title = this.Title;
          }
          tmp1252.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1252.Message = this.Message;
          }
          tmp1252.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1252.Log = this.Log;
          }
          tmp1252.__isset.log = this.__isset.log;
          return tmp1252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1253 = new TStruct("error_args");
            await oprot.WriteStructBeginAsync(tmp1253, cancellationToken);
            var tmp1254 = new TField();
            if(__isset.p)
            {
              tmp1254.Name = "p";
              tmp1254.Type = TType.I64;
              tmp1254.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1254.Name = "title";
              tmp1254.Type = TType.String;
              tmp1254.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1254.Name = "message";
              tmp1254.Type = TType.String;
              tmp1254.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1254.Name = "log";
              tmp1254.Type = TType.String;
              tmp1254.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is error_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1255 = new StringBuilder("error_args(");
          int tmp1256 = 0;
          if(__isset.p)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("P: ");
            P.ToString(tmp1255);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("Title: ");
            Title.ToString(tmp1255);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("Message: ");
            Message.ToString(tmp1255);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("Log: ");
            Log.ToString(tmp1255);
          }
          tmp1255.Append(')');
          return tmp1255.ToString();
        }
      }


      public partial class popupDialog_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _title;
        private string _message;
        private string _positiveOption;
        private string _negativeOption;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string PositiveOption
        {
          get
          {
            return _positiveOption;
          }
          set
          {
            __isset.positiveOption = true;
            this._positiveOption = value;
          }
        }

        public string NegativeOption
        {
          get
          {
            return _negativeOption;
          }
          set
          {
            __isset.negativeOption = true;
            this._negativeOption = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool title;
          public bool message;
          public bool positiveOption;
          public bool negativeOption;
        }

        public popupDialog_args()
        {
        }

        public popupDialog_args DeepCopy()
        {
          var tmp1257 = new popupDialog_args();
          if(__isset.p)
          {
            tmp1257.P = this.P;
          }
          tmp1257.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1257.Identifier = this.Identifier;
          }
          tmp1257.__isset.identifier = this.__isset.identifier;
          if((Title != null) && __isset.title)
          {
            tmp1257.Title = this.Title;
          }
          tmp1257.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1257.Message = this.Message;
          }
          tmp1257.__isset.message = this.__isset.message;
          if((PositiveOption != null) && __isset.positiveOption)
          {
            tmp1257.PositiveOption = this.PositiveOption;
          }
          tmp1257.__isset.positiveOption = this.__isset.positiveOption;
          if((NegativeOption != null) && __isset.negativeOption)
          {
            tmp1257.NegativeOption = this.NegativeOption;
          }
          tmp1257.__isset.negativeOption = this.__isset.negativeOption;
          return tmp1257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    PositiveOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    NegativeOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1258 = new TStruct("popupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1258, cancellationToken);
            var tmp1259 = new TField();
            if(__isset.p)
            {
              tmp1259.Name = "p";
              tmp1259.Type = TType.I64;
              tmp1259.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1259.Name = "identifier";
              tmp1259.Type = TType.String;
              tmp1259.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1259.Name = "title";
              tmp1259.Type = TType.String;
              tmp1259.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1259.Name = "message";
              tmp1259.Type = TType.String;
              tmp1259.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              tmp1259.Name = "positiveOption";
              tmp1259.Type = TType.String;
              tmp1259.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
              await oprot.WriteStringAsync(PositiveOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              tmp1259.Name = "negativeOption";
              tmp1259.Type = TType.String;
              tmp1259.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
              await oprot.WriteStringAsync(NegativeOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.positiveOption == other.__isset.positiveOption) && ((!__isset.positiveOption) || (global::System.Object.Equals(PositiveOption, other.PositiveOption))))
            && ((__isset.negativeOption == other.__isset.negativeOption) && ((!__isset.negativeOption) || (global::System.Object.Equals(NegativeOption, other.NegativeOption))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              hashcode = (hashcode * 397) + PositiveOption.GetHashCode();
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              hashcode = (hashcode * 397) + NegativeOption.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1260 = new StringBuilder("popupDialog_args(");
          int tmp1261 = 0;
          if(__isset.p)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("P: ");
            P.ToString(tmp1260);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("Identifier: ");
            Identifier.ToString(tmp1260);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("Title: ");
            Title.ToString(tmp1260);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("Message: ");
            Message.ToString(tmp1260);
          }
          if((PositiveOption != null) && __isset.positiveOption)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("PositiveOption: ");
            PositiveOption.ToString(tmp1260);
          }
          if((NegativeOption != null) && __isset.negativeOption)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("NegativeOption: ");
            NegativeOption.ToString(tmp1260);
          }
          tmp1260.Append(')');
          return tmp1260.ToString();
        }
      }


      public partial class popupDialog_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public popupDialog_result()
        {
        }

        public popupDialog_result DeepCopy()
        {
          var tmp1262 = new popupDialog_result();
          if((E != null) && __isset.e)
          {
            tmp1262.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1262.__isset.e = this.__isset.e;
          return tmp1262;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1263 = new TStruct("popupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1263, cancellationToken);
            var tmp1264 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1264.Name = "E";
                tmp1264.Type = TType.Struct;
                tmp1264.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1265 = new StringBuilder("popupDialog_result(");
          int tmp1266 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1266++) { tmp1265.Append(", "); }
            tmp1265.Append("E: ");
            E.ToString(tmp1265);
          }
          tmp1265.Append(')');
          return tmp1265.ToString();
        }
      }


      public partial class cancelPopupDialog_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public cancelPopupDialog_args()
        {
        }

        public cancelPopupDialog_args DeepCopy()
        {
          var tmp1267 = new cancelPopupDialog_args();
          if(__isset.p)
          {
            tmp1267.P = this.P;
          }
          tmp1267.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1267.Identifier = this.Identifier;
          }
          tmp1267.__isset.identifier = this.__isset.identifier;
          return tmp1267;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1268 = new TStruct("cancelPopupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1268, cancellationToken);
            var tmp1269 = new TField();
            if(__isset.p)
            {
              tmp1269.Name = "p";
              tmp1269.Type = TType.I64;
              tmp1269.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1269, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1269.Name = "identifier";
              tmp1269.Type = TType.String;
              tmp1269.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1269, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1270 = new StringBuilder("cancelPopupDialog_args(");
          int tmp1271 = 0;
          if(__isset.p)
          {
            if(0 < tmp1271++) { tmp1270.Append(", "); }
            tmp1270.Append("P: ");
            P.ToString(tmp1270);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1271++) { tmp1270.Append(", "); }
            tmp1270.Append("Identifier: ");
            Identifier.ToString(tmp1270);
          }
          tmp1270.Append(')');
          return tmp1270.ToString();
        }
      }


      public partial class cancelPopupDialog_result : TBase
      {

        public cancelPopupDialog_result()
        {
        }

        public cancelPopupDialog_result DeepCopy()
        {
          var tmp1272 = new cancelPopupDialog_result();
          return tmp1272;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1273 = new TStruct("cancelPopupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1273, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1274 = new StringBuilder("cancelPopupDialog_result(");
          tmp1274.Append(')');
          return tmp1274.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_args : TBase
      {
        private long _p;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instruction;
        }

        public insertInstructionAtSelectedLine_args()
        {
        }

        public insertInstructionAtSelectedLine_args DeepCopy()
        {
          var tmp1276 = new insertInstructionAtSelectedLine_args();
          if(__isset.p)
          {
            tmp1276.P = this.P;
          }
          tmp1276.__isset.p = this.__isset.p;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1276.Instruction = this.Instruction;
          }
          tmp1276.__isset.instruction = this.__isset.instruction;
          return tmp1276;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1277 = new TStruct("insertInstructionAtSelectedLine_args");
            await oprot.WriteStructBeginAsync(tmp1277, cancellationToken);
            var tmp1278 = new TField();
            if(__isset.p)
            {
              tmp1278.Name = "p";
              tmp1278.Type = TType.I64;
              tmp1278.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1278, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1278.Name = "instruction";
              tmp1278.Type = TType.String;
              tmp1278.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1278, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1279 = new StringBuilder("insertInstructionAtSelectedLine_args(");
          int tmp1280 = 0;
          if(__isset.p)
          {
            if(0 < tmp1280++) { tmp1279.Append(", "); }
            tmp1279.Append("P: ");
            P.ToString(tmp1279);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1280++) { tmp1279.Append(", "); }
            tmp1279.Append("Instruction: ");
            Instruction.ToString(tmp1279);
          }
          tmp1279.Append(')');
          return tmp1279.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public insertInstructionAtSelectedLine_result()
        {
        }

        public insertInstructionAtSelectedLine_result DeepCopy()
        {
          var tmp1281 = new insertInstructionAtSelectedLine_result();
          if((Success != null) && __isset.success)
          {
            tmp1281.Success = this.Success;
          }
          tmp1281.__isset.success = this.__isset.success;
          return tmp1281;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1282 = new TStruct("insertInstructionAtSelectedLine_result");
            await oprot.WriteStructBeginAsync(tmp1282, cancellationToken);
            var tmp1283 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1283.Name = "Success";
                tmp1283.Type = TType.String;
                tmp1283.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1283, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1284 = new StringBuilder("insertInstructionAtSelectedLine_result(");
          int tmp1285 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1285++) { tmp1284.Append(", "); }
            tmp1284.Append("Success: ");
            Success.ToString(tmp1284);
          }
          tmp1284.Append(')');
          return tmp1284.ToString();
        }
      }


      public partial class displayScreen_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public displayScreen_args()
        {
        }

        public displayScreen_args DeepCopy()
        {
          var tmp1286 = new displayScreen_args();
          if(__isset.p)
          {
            tmp1286.P = this.P;
          }
          tmp1286.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1286.Identifier = this.Identifier;
          }
          tmp1286.__isset.identifier = this.__isset.identifier;
          return tmp1286;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1287 = new TStruct("displayScreen_args");
            await oprot.WriteStructBeginAsync(tmp1287, cancellationToken);
            var tmp1288 = new TField();
            if(__isset.p)
            {
              tmp1288.Name = "p";
              tmp1288.Type = TType.I64;
              tmp1288.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1288, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1288.Name = "identifier";
              tmp1288.Type = TType.String;
              tmp1288.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1288, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1289 = new StringBuilder("displayScreen_args(");
          int tmp1290 = 0;
          if(__isset.p)
          {
            if(0 < tmp1290++) { tmp1289.Append(", "); }
            tmp1289.Append("P: ");
            P.ToString(tmp1289);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1290++) { tmp1289.Append(", "); }
            tmp1289.Append("Identifier: ");
            Identifier.ToString(tmp1289);
          }
          tmp1289.Append(')');
          return tmp1289.ToString();
        }
      }


      public partial class displayScreen_result : TBase
      {

        public displayScreen_result()
        {
        }

        public displayScreen_result DeepCopy()
        {
          var tmp1291 = new displayScreen_result();
          return tmp1291;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1292 = new TStruct("displayScreen_result");
            await oprot.WriteStructBeginAsync(tmp1292, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1293 = new StringBuilder("displayScreen_result(");
          tmp1293.Append(')');
          return tmp1293.ToString();
        }
      }

    }

  }
}
