/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Pendant
  {
    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of the Smart Pendant itself
      /// (avoid using this for conditional feature use - use the Extension apiVersion() instead)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service events.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to specified set of Pendant service YML Item-specific events.
      /// Specified events will be sent for all specified items.  May be called multiple times to add to subscription.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Unsubscribe from specified set of Pendant service YML Item-specific events.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemIDs"></param>
      /// <param name="types"></param>
      global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of Pendant service events that have occured since last call
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Query the current UI language of the pendant interface.
      /// Returns IETF language codes (RFCs 5646, 5645, 4647) of languages
      /// (typically ISO 693-1 code when region insignificant)
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// The UI screen currently shown to the pendant user
      /// </summary>
      /// <param name="p"></param>
      global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an Item type described using a YML source code string
      /// Returns a list of parsing errors (0 on success)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="ymlSource"></param>
      global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image file for later reference by filename (must be uniquely named, with .jpg or .png).
      /// If file cannot be accessed by service, it will be locally read and registerImageData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register an image for later reference by name (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="imageData"></param>
      /// <param name="imageName"></param>
      global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a HTML file for later reference by filename (must be uniquely named, with .html).
      /// If file cannot be accessed by service, it will be locally read and registerHTMLData called instead.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlFileName"></param>
      global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register HTML for later reference by name (must be uniquely named, with .html extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="htmlData"></param>
      /// <param name="htmlName"></param>
      global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a translation file (e.g. a Java properties file for a language); extension is used to determine format
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationFileName"></param>
      global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register translation file data (translationName typically filename-like; extension is used to determine format)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="locale"></param>
      /// <param name="translationData"></param>
      /// <param name="translationName"></param>
      global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register a Utility window with the UI.
      /// The itemType references a previously registered YML item instantiated for the window
      /// UI content.
      /// A main menu entry will automatically be added to the pendant UI, for opening the utility window.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="itemType"></param>
      /// <param name="menuItemName"></param>
      /// <param name="windowTitle"></param>
      global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open (make visible) previously registered Utility Window
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close a visible Utility Window (make invisible - state is maintained)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Collapse previously registered Utility Window, if in expanded state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Expand previously registered Utility Window, if in collapsed state (and expandCollapseResize true)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Register UI content at the specified integration point in the pendant UI.
      /// The itemType should reference a YML item previouslt registered via registerYML().
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="integrationPoint"></param>
      /// <param name="itemType"></param>
      /// <param name="buttonLabel"></param>
      /// <param name="buttonImage"></param>
      global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// get property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set property of an item by id
      /// </summary>
      /// <param name="p"></param>
      /// <param name="itemID"></param>
      /// <param name="name"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set several properties (potentially for different items) at once.  This is more
      /// efficient that many repeated calls to setProperty().
      /// Note it is asynchronous so no errors/exceptions are thrown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="propValuesList"></param>
      global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the configuration of a chart by ID.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="config"></param>
      global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the configuration of a chart by ID
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="dataset"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to access the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Add a new key to the dataset of a chart by ID. In line and scatter charts,
      /// you can set 'right' to true to pass the dataset for a secondary
      /// scale on the right hand side.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="data"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to remove from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Hides an existing key from the dataset of a chart by ID. In line and
      /// scatter charts, you can set 'right' to true to hide a key from the
      /// secondary dataset.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="hidden"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Append new data points to a specified key in the data of a chart by ID.
      /// This function will only have an effect on line/scatter charts. Set
      /// 'right' to true to pass the dataset for a secondary scale on the right
      /// hand side.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="points"></param>
      /// <param name="right"></param>
      global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default);

      /// <summary>
      /// Increments a category value by `val`.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="key"></param>
      /// <param name="val"></param>
      global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to the specified filename (must be uniquely named, with .jpg or .png).
      /// Calls exportChartImageData if the extension is unable to access the file.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Export the current chart contents to a binary blob (must be uniquely named, with .jpg or .png extension)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="chartID"></param>
      /// <param name="imageFileName"></param>
      global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user.
      /// Notices are automaticlly hidden after a short display period.
      /// Notice messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show notice to user with specified disposition.
      /// As for notice() but displayed in a way that connotes the specified disposition.
      /// For example, a Positive disposition may be shown in green.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// (API version 2.1 and later)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="disposition"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Show error to user.
      /// Errors should only indicate important situations that the user must be aware of and for which deliberate
      /// acknowledgement is required before proceeding.  Typically, some action will be required to correct the situation.
      /// Errors are displayed until dismissed by the user.
      /// Error messages are logged, if log parameter if provided, that will be logged instead of title & message.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="log"></param>
      global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default);

      /// <summary>
      /// Display modal pop-up dialog.  Typically, Yes/No, although negativeOption can be omitted
      /// The identifier can be used to associate the corresponding PopupOpened & PopupClosed events triggered by
      /// user positive/negative selection or automatic dismissal/cancellation - for example is screen switched, alarm etc.
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      /// <param name="title"></param>
      /// <param name="message"></param>
      /// <param name="positiveOption"></param>
      /// <param name="negativeOption"></param>
      global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default);

      /// <summary>
      /// Cancel an open popup dialog.  If the dialog has a negative option, behaves as if user selected it, otherwise
      /// no event is generated
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Inserts an instruction, returns a string:
      /// Success,
      /// UnsupportedCommand,
      /// InvalidFormat,
      /// ProgrammingViewClosed,
      /// JobDoesNotExist,
      /// CallingJobFromSameJob,
      /// ExceededMaxArguments,
      /// JobNotEditable,
      /// MultiSelectActive,
      /// TimedOut,
      /// Unknown
      /// </summary>
      /// <param name="p"></param>
      /// <param name="instruction"></param>
      global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays a standard pendant UI screen by passing a string with the screen identifier. (Only available from SDK API 2.2 onward)
      /// Refer to the YML - URI Links documentation for the list of supported screens and settings.
      /// Do not include the URI "&lt;a href&gt; screen:" portion in the identifier.  For example to display the jogging panel use:
      /// pendant.displayScreen("programmingView?panel=jogging");
      /// </summary>
      /// <param name="p"></param>
      /// <param name="identifier"></param>
      global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default);

      /// <summary>
      /// Displays an html file in a standard Smart Pendant help dialog. (Only available from SDK API 3.0 onward)
      /// </summary>
      /// <param name="p"></param>
      /// <param name="title"></param>
      /// <param name="htmlContentFile"></param>
      global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Pendant API provides functions for interacting with and
    /// integrating the main Smart Pendant user-interface.
    /// 
    /// (Extensions are not required to have a user-interface)
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await send_pendantVersion(p, cancellationToken);
        return await recv_pendantVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendantVersion(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp667 = new InternalStructs.pendantVersion_args() {
          P = p,
        };
        
        await tmp667.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_pendantVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp668 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp668.Type == TMessageType.Exception)
        {
          var tmp669 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp669;
        }

        var tmp670 = new InternalStructs.pendantVersion_result();
        await tmp670.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp670.__isset.success)
        {
          return tmp670.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendantVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeEventTypes(p, types, cancellationToken);
        await recv_subscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp671 = new InternalStructs.subscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp671.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp672 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp672.Type == TMessageType.Exception)
        {
          var tmp673 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp673;
        }

        var tmp674 = new InternalStructs.subscribeEventTypes_result();
        await tmp674.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeEventTypes(p, types, cancellationToken);
        await recv_unsubscribeEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeEventTypes(long p, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp675 = new InternalStructs.unsubscribeEventTypes_args() {
          P = p,
          Types = types,
        };
        
        await tmp675.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp676 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp676.Type == TMessageType.Exception)
        {
          var tmp677 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp677;
        }

        var tmp678 = new InternalStructs.unsubscribeEventTypes_result();
        await tmp678.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_subscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_subscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp679 = new InternalStructs.subscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp679.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp680 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp680.Type == TMessageType.Exception)
        {
          var tmp681 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp681;
        }

        var tmp682 = new InternalStructs.subscribeItemEventTypes_result();
        await tmp682.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeItemEventTypes(p, itemIDs, types, cancellationToken);
        await recv_unsubscribeItemEventTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeItemEventTypes(long p, HashSet<string> itemIDs, HashSet<global::Yaskawa.Ext.API.PendantEventType> types, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp683 = new InternalStructs.unsubscribeItemEventTypes_args() {
          P = p,
          ItemIDs = itemIDs,
          Types = types,
        };
        
        await tmp683.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeItemEventTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp684 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp684.Type == TMessageType.Exception)
        {
          var tmp685 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp685;
        }

        var tmp686 = new InternalStructs.unsubscribeItemEventTypes_result();
        await tmp686.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> events(long p, CancellationToken cancellationToken = default)
      {
        await send_events(p, cancellationToken);
        return await recv_events(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_events(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("events", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp687 = new InternalStructs.events_args() {
          P = p,
        };
        
        await tmp687.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.PendantEvent>> recv_events(CancellationToken cancellationToken = default)
      {
        
        var tmp688 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp688.Type == TMessageType.Exception)
        {
          var tmp689 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp689;
        }

        var tmp690 = new InternalStructs.events_result();
        await tmp690.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp690.__isset.success)
        {
          return tmp690.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "events failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLanguage(p, cancellationToken);
        return await recv_currentLanguage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLanguage(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp691 = new InternalStructs.currentLanguage_args() {
          P = p,
        };
        
        await tmp691.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLanguage(CancellationToken cancellationToken = default)
      {
        
        var tmp692 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp692.Type == TMessageType.Exception)
        {
          var tmp693 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp693;
        }

        var tmp694 = new InternalStructs.currentLanguage_result();
        await tmp694.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp694.__isset.success)
        {
          return tmp694.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLanguage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await send_currentLocale(p, cancellationToken);
        return await recv_currentLocale(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentLocale(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp695 = new InternalStructs.currentLocale_args() {
          P = p,
        };
        
        await tmp695.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentLocale(CancellationToken cancellationToken = default)
      {
        
        var tmp696 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp696.Type == TMessageType.Exception)
        {
          var tmp697 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp697;
        }

        var tmp698 = new InternalStructs.currentLocale_result();
        await tmp698.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp698.__isset.success)
        {
          return tmp698.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentLocale failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await send_currentScreenName(p, cancellationToken);
        return await recv_currentScreenName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_currentScreenName(long p, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp699 = new InternalStructs.currentScreenName_args() {
          P = p,
        };
        
        await tmp699.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_currentScreenName(CancellationToken cancellationToken = default)
      {
        
        var tmp700 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp700.Type == TMessageType.Exception)
        {
          var tmp701 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp701;
        }

        var tmp702 = new InternalStructs.currentScreenName_result();
        await tmp702.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp702.__isset.success)
        {
          return tmp702.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "currentScreenName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await send_registerYML(p, ymlSource, cancellationToken);
        return await recv_registerYML(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerYML(long p, string ymlSource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp703 = new InternalStructs.registerYML_args() {
          P = p,
          YmlSource = ymlSource,
        };
        
        await tmp703.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_registerYML(CancellationToken cancellationToken = default)
      {
        
        var tmp704 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp704.Type == TMessageType.Exception)
        {
          var tmp705 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp705;
        }

        var tmp706 = new InternalStructs.registerYML_result();
        await tmp706.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp706.__isset.success)
        {
          return tmp706.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerYML failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_registerImageFile(p, imageFileName, cancellationToken);
        await recv_registerImageFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageFile(long p, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp707 = new InternalStructs.registerImageFile_args() {
          P = p,
          ImageFileName = imageFileName,
        };
        
        await tmp707.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageFile(CancellationToken cancellationToken = default)
      {
        
        var tmp708 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp708.Type == TMessageType.Exception)
        {
          var tmp709 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp709;
        }

        var tmp710 = new InternalStructs.registerImageFile_result();
        await tmp710.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp710.__isset.e)
        {
          throw tmp710.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await send_registerImageData(p, imageData, imageName, cancellationToken);
        await recv_registerImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerImageData(long p, byte[] imageData, string imageName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp711 = new InternalStructs.registerImageData_args() {
          P = p,
          ImageData = imageData,
          ImageName = imageName,
        };
        
        await tmp711.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp712 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp712.Type == TMessageType.Exception)
        {
          var tmp713 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp713;
        }

        var tmp714 = new InternalStructs.registerImageData_result();
        await tmp714.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp714.__isset.e)
        {
          throw tmp714.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLFile(p, htmlFileName, cancellationToken);
        await recv_registerHTMLFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLFile(long p, string htmlFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp715 = new InternalStructs.registerHTMLFile_args() {
          P = p,
          HtmlFileName = htmlFileName,
        };
        
        await tmp715.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLFile(CancellationToken cancellationToken = default)
      {
        
        var tmp716 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp716.Type == TMessageType.Exception)
        {
          var tmp717 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp717;
        }

        var tmp718 = new InternalStructs.registerHTMLFile_result();
        await tmp718.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp718.__isset.e)
        {
          throw tmp718.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await send_registerHTMLData(p, htmlData, htmlName, cancellationToken);
        await recv_registerHTMLData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerHTMLData(long p, byte[] htmlData, string htmlName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp719 = new InternalStructs.registerHTMLData_args() {
          P = p,
          HtmlData = htmlData,
          HtmlName = htmlName,
        };
        
        await tmp719.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerHTMLData(CancellationToken cancellationToken = default)
      {
        
        var tmp720 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp720.Type == TMessageType.Exception)
        {
          var tmp721 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp721;
        }

        var tmp722 = new InternalStructs.registerHTMLData_result();
        await tmp722.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp722.__isset.e)
        {
          throw tmp722.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationFile(p, locale, translationFileName, cancellationToken);
        await recv_registerTranslationFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationFile(long p, string locale, string translationFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp723 = new InternalStructs.registerTranslationFile_args() {
          P = p,
          Locale = locale,
          TranslationFileName = translationFileName,
        };
        
        await tmp723.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationFile(CancellationToken cancellationToken = default)
      {
        
        var tmp724 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp724.Type == TMessageType.Exception)
        {
          var tmp725 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp725;
        }

        var tmp726 = new InternalStructs.registerTranslationFile_result();
        await tmp726.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp726.__isset.e)
        {
          throw tmp726.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await send_registerTranslationData(p, locale, translationData, translationName, cancellationToken);
        await recv_registerTranslationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerTranslationData(long p, string locale, byte[] translationData, string translationName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp727 = new InternalStructs.registerTranslationData_args() {
          P = p,
          Locale = locale,
          TranslationData = translationData,
          TranslationName = translationName,
        };
        
        await tmp727.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerTranslationData(CancellationToken cancellationToken = default)
      {
        
        var tmp728 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp728.Type == TMessageType.Exception)
        {
          var tmp729 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp729;
        }

        var tmp730 = new InternalStructs.registerTranslationData_result();
        await tmp730.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp730.__isset.e)
        {
          throw tmp730.E;
        }
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await send_registerUtilityWindow(p, identifier, itemType, menuItemName, windowTitle, cancellationToken);
        await recv_registerUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerUtilityWindow(long p, string identifier, string itemType, string menuItemName, string windowTitle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp731 = new InternalStructs.registerUtilityWindow_args() {
          P = p,
          Identifier = identifier,
          ItemType = itemType,
          MenuItemName = menuItemName,
          WindowTitle = windowTitle,
        };
        
        await tmp731.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp732 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp732.Type == TMessageType.Exception)
        {
          var tmp733 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp733;
        }

        var tmp734 = new InternalStructs.registerUtilityWindow_result();
        await tmp734.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp734.__isset.e)
        {
          throw tmp734.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterUtilityWindow(p, identifier, cancellationToken);
        await recv_unregisterUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp735 = new InternalStructs.unregisterUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp735.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp736 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp736.Type == TMessageType.Exception)
        {
          var tmp737 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp737;
        }

        var tmp738 = new InternalStructs.unregisterUtilityWindow_result();
        await tmp738.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp738.__isset.e)
        {
          throw tmp738.E;
        }
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_openUtilityWindow(p, identifier, cancellationToken);
        await recv_openUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp739 = new InternalStructs.openUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp739.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_openUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp740 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp740.Type == TMessageType.Exception)
        {
          var tmp741 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp741;
        }

        var tmp742 = new InternalStructs.openUtilityWindow_result();
        await tmp742.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_closeUtilityWindow(p, identifier, cancellationToken);
        await recv_closeUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp743 = new InternalStructs.closeUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp743.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp744 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp744.Type == TMessageType.Exception)
        {
          var tmp745 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp745;
        }

        var tmp746 = new InternalStructs.closeUtilityWindow_result();
        await tmp746.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_collapseUtilityWindow(p, identifier, cancellationToken);
        await recv_collapseUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_collapseUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp747 = new InternalStructs.collapseUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp747.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_collapseUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp748 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp748.Type == TMessageType.Exception)
        {
          var tmp749 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp749;
        }

        var tmp750 = new InternalStructs.collapseUtilityWindow_result();
        await tmp750.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_expandUtilityWindow(p, identifier, cancellationToken);
        await recv_expandUtilityWindow(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expandUtilityWindow(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp751 = new InternalStructs.expandUtilityWindow_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp751.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_expandUtilityWindow(CancellationToken cancellationToken = default)
      {
        
        var tmp752 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp752.Type == TMessageType.Exception)
        {
          var tmp753 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp753;
        }

        var tmp754 = new InternalStructs.expandUtilityWindow_result();
        await tmp754.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await send_registerIntegration(p, identifier, integrationPoint, itemType, buttonLabel, buttonImage, cancellationToken);
        await recv_registerIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerIntegration(long p, string identifier, global::Yaskawa.Ext.API.IntegrationPoint integrationPoint, string itemType, string buttonLabel, string buttonImage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp755 = new InternalStructs.registerIntegration_args() {
          P = p,
          Identifier = identifier,
          IntegrationPoint = integrationPoint,
          ItemType = itemType,
          ButtonLabel = buttonLabel,
          ButtonImage = buttonImage,
        };
        
        await tmp755.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_registerIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp756 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp756.Type == TMessageType.Exception)
        {
          var tmp757 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp757;
        }

        var tmp758 = new InternalStructs.registerIntegration_result();
        await tmp758.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp758.__isset.e)
        {
          throw tmp758.E;
        }
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_unregisterIntegration(p, identifier, cancellationToken);
        await recv_unregisterIntegration(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterIntegration(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp759 = new InternalStructs.unregisterIntegration_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp759.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterIntegration(CancellationToken cancellationToken = default)
      {
        
        var tmp760 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp760.Type == TMessageType.Exception)
        {
          var tmp761 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp761;
        }

        var tmp762 = new InternalStructs.unregisterIntegration_result();
        await tmp762.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp762.__isset.e)
        {
          throw tmp762.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await send_property(p, itemID, name, cancellationToken);
        return await recv_property(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_property(long p, string itemID, string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("property", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp763 = new InternalStructs.property_args() {
          P = p,
          ItemID = itemID,
          Name = name,
        };
        
        await tmp763.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_property(CancellationToken cancellationToken = default)
      {
        
        var tmp764 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp764.Type == TMessageType.Exception)
        {
          var tmp765 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp765;
        }

        var tmp766 = new InternalStructs.property_result();
        await tmp766.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp766.__isset.success)
        {
          return tmp766.Success;
        }
        if (tmp766.__isset.e)
        {
          throw tmp766.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "property failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await send_setProperty(p, itemID, name, @value, cancellationToken);
        await recv_setProperty(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperty(long p, string itemID, string name, global::Yaskawa.Ext.API.Any @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp767 = new InternalStructs.setProperty_args() {
          P = p,
          ItemID = itemID,
          Name = name,
          Value = @value,
        };
        
        await tmp767.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setProperty(CancellationToken cancellationToken = default)
      {
        
        var tmp768 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp768.Type == TMessageType.Exception)
        {
          var tmp769 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp769;
        }

        var tmp770 = new InternalStructs.setProperty_result();
        await tmp770.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp770.__isset.e)
        {
          throw tmp770.E;
        }
      }

      public async global::System.Threading.Tasks.Task setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await send_setProperties(p, propValuesList, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setProperties(long p, List<global::Yaskawa.Ext.API.PropValues> propValuesList, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setProperties", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp771 = new InternalStructs.setProperties_args() {
          P = p,
          PropValuesList = propValuesList,
        };
        
        await tmp771.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await send_setChartConfig(p, chartID, config, cancellationToken);
        await recv_setChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartConfig(long p, string chartID, global::Yaskawa.Ext.API.Any config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp772 = new InternalStructs.setChartConfig_args() {
          P = p,
          ChartID = chartID,
          Config = config,
        };
        
        await tmp772.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp773 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp773.Type == TMessageType.Exception)
        {
          var tmp774 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp774;
        }

        var tmp775 = new InternalStructs.setChartConfig_result();
        await tmp775.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp775.__isset.e)
        {
          throw tmp775.E;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await send_getChartConfig(p, chartID, cancellationToken);
        return await recv_getChartConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartConfig(long p, string chartID, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp776 = new InternalStructs.getChartConfig_args() {
          P = p,
          ChartID = chartID,
        };
        
        await tmp776.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Any> recv_getChartConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp777 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp777.Type == TMessageType.Exception)
        {
          var tmp778 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp778;
        }

        var tmp779 = new InternalStructs.getChartConfig_result();
        await tmp779.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp779.__isset.success)
        {
          return tmp779.Success;
        }
        if (tmp779.__isset.e)
        {
          throw tmp779.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await send_setChartData(p, chartID, dataset, right, cancellationToken);
        await recv_setChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setChartData(long p, string chartID, Dictionary<string, global::Yaskawa.Ext.API.Data> dataset, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp780 = new InternalStructs.setChartData_args() {
          P = p,
          ChartID = chartID,
          Dataset = dataset,
          Right = right,
        };
        
        await tmp780.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp781 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp781.Type == TMessageType.Exception)
        {
          var tmp782 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp782;
        }

        var tmp783 = new InternalStructs.setChartData_result();
        await tmp783.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp783.__isset.e)
        {
          throw tmp783.E;
        }
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await send_getChartData(p, chartID, right, cancellationToken);
        return await recv_getChartData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getChartData(long p, string chartID, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp784 = new InternalStructs.getChartData_args() {
          P = p,
          ChartID = chartID,
          Right = right,
        };
        
        await tmp784.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<Dictionary<string, global::Yaskawa.Ext.API.Data>> recv_getChartData(CancellationToken cancellationToken = default)
      {
        
        var tmp785 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp785.Type == TMessageType.Exception)
        {
          var tmp786 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp786;
        }

        var tmp787 = new InternalStructs.getChartData_result();
        await tmp787.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp787.__isset.success)
        {
          return tmp787.Success;
        }
        if (tmp787.__isset.e)
        {
          throw tmp787.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChartData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await send_addChartKey(p, chartID, key, data, right, cancellationToken);
        await recv_addChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addChartKey(long p, string chartID, string key, global::Yaskawa.Ext.API.Data data, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp788 = new InternalStructs.addChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Data = data,
          Right = right,
        };
        
        await tmp788.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_addChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp789 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp789.Type == TMessageType.Exception)
        {
          var tmp790 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp790;
        }

        var tmp791 = new InternalStructs.addChartKey_result();
        await tmp791.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp791.__isset.e)
        {
          throw tmp791.E;
        }
      }

      public async global::System.Threading.Tasks.Task removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await send_removeChartKey(p, chartID, key, right, cancellationToken);
        await recv_removeChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeChartKey(long p, string chartID, string key, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp792 = new InternalStructs.removeChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Right = right,
        };
        
        await tmp792.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp793 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp793.Type == TMessageType.Exception)
        {
          var tmp794 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp794;
        }

        var tmp795 = new InternalStructs.removeChartKey_result();
        await tmp795.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp795.__isset.e)
        {
          throw tmp795.E;
        }
      }

      public async global::System.Threading.Tasks.Task hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await send_hideChartKey(p, chartID, key, hidden, right, cancellationToken);
        await recv_hideChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_hideChartKey(long p, string chartID, string key, bool hidden, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp796 = new InternalStructs.hideChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Hidden = hidden,
          Right = right,
        };
        
        await tmp796.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_hideChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp797 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp797.Type == TMessageType.Exception)
        {
          var tmp798 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp798;
        }

        var tmp799 = new InternalStructs.hideChartKey_result();
        await tmp799.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp799.__isset.e)
        {
          throw tmp799.E;
        }
      }

      public async global::System.Threading.Tasks.Task appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await send_appendChartPoints(p, chartID, key, points, right, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendChartPoints(long p, string chartID, string key, List<global::Yaskawa.Ext.API.DataPoint> points, bool right, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendChartPoints", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp800 = new InternalStructs.appendChartPoints_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Points = points,
          Right = right,
        };
        
        await tmp800.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await send_incrementChartKey(p, chartID, key, val, cancellationToken);
        await recv_incrementChartKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_incrementChartKey(long p, string chartID, string key, double val, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp801 = new InternalStructs.incrementChartKey_args() {
          P = p,
          ChartID = chartID,
          Key = key,
          Val = val,
        };
        
        await tmp801.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_incrementChartKey(CancellationToken cancellationToken = default)
      {
        
        var tmp802 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp802.Type == TMessageType.Exception)
        {
          var tmp803 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp803;
        }

        var tmp804 = new InternalStructs.incrementChartKey_result();
        await tmp804.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp804.__isset.e)
        {
          throw tmp804.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImage(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImage(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp805 = new InternalStructs.exportChartImage_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp805.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_exportChartImage(CancellationToken cancellationToken = default)
      {
        
        var tmp806 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp806.Type == TMessageType.Exception)
        {
          var tmp807 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp807;
        }

        var tmp808 = new InternalStructs.exportChartImage_result();
        await tmp808.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp808.__isset.success)
        {
          return tmp808.Success;
        }
        if (tmp808.__isset.e)
        {
          throw tmp808.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await send_exportChartImageData(p, chartID, imageFileName, cancellationToken);
        return await recv_exportChartImageData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exportChartImageData(long p, string chartID, string imageFileName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp809 = new InternalStructs.exportChartImageData_args() {
          P = p,
          ChartID = chartID,
          ImageFileName = imageFileName,
        };
        
        await tmp809.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_exportChartImageData(CancellationToken cancellationToken = default)
      {
        
        var tmp810 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp810.Type == TMessageType.Exception)
        {
          var tmp811 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp811;
        }

        var tmp812 = new InternalStructs.exportChartImageData_result();
        await tmp812.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp812.__isset.success)
        {
          return tmp812.Success;
        }
        if (tmp812.__isset.e)
        {
          throw tmp812.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exportChartImageData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_notice(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notice(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp813 = new InternalStructs.notice_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp813.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_dispNotice(p, disposition, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dispNotice(long p, global::Yaskawa.Ext.API.Disposition disposition, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dispNotice", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp814 = new InternalStructs.dispNotice_args() {
          P = p,
          Disposition = disposition,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp814.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await send_error(p, title, message, log, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_error(long p, string title, string message, string log, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("error", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp815 = new InternalStructs.error_args() {
          P = p,
          Title = title,
          Message = message,
          Log = log,
        };
        
        await tmp815.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await send_popupDialog(p, identifier, title, message, positiveOption, negativeOption, cancellationToken);
        await recv_popupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_popupDialog(long p, string identifier, string title, string message, string positiveOption, string negativeOption, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp816 = new InternalStructs.popupDialog_args() {
          P = p,
          Identifier = identifier,
          Title = title,
          Message = message,
          PositiveOption = positiveOption,
          NegativeOption = negativeOption,
        };
        
        await tmp816.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_popupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp817 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp817.Type == TMessageType.Exception)
        {
          var tmp818 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp818;
        }

        var tmp819 = new InternalStructs.popupDialog_result();
        await tmp819.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp819.__isset.e)
        {
          throw tmp819.E;
        }
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_cancelPopupDialog(p, identifier, cancellationToken);
        await recv_cancelPopupDialog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelPopupDialog(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp820 = new InternalStructs.cancelPopupDialog_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp820.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelPopupDialog(CancellationToken cancellationToken = default)
      {
        
        var tmp821 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp821.Type == TMessageType.Exception)
        {
          var tmp822 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp822;
        }

        var tmp823 = new InternalStructs.cancelPopupDialog_result();
        await tmp823.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await send_insertInstructionAtSelectedLine(p, instruction, cancellationToken);
        return await recv_insertInstructionAtSelectedLine(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_insertInstructionAtSelectedLine(long p, string instruction, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp824 = new InternalStructs.insertInstructionAtSelectedLine_args() {
          P = p,
          Instruction = instruction,
        };
        
        await tmp824.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_insertInstructionAtSelectedLine(CancellationToken cancellationToken = default)
      {
        
        var tmp825 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp825.Type == TMessageType.Exception)
        {
          var tmp826 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp826;
        }

        var tmp827 = new InternalStructs.insertInstructionAtSelectedLine_result();
        await tmp827.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp827.__isset.success)
        {
          return tmp827.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insertInstructionAtSelectedLine failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await send_displayScreen(p, identifier, cancellationToken);
        await recv_displayScreen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayScreen(long p, string identifier, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp828 = new InternalStructs.displayScreen_args() {
          P = p,
          Identifier = identifier,
        };
        
        await tmp828.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayScreen(CancellationToken cancellationToken = default)
      {
        
        var tmp829 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp829.Type == TMessageType.Exception)
        {
          var tmp830 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp830;
        }

        var tmp831 = new InternalStructs.displayScreen_result();
        await tmp831.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await send_displayHelp(p, title, htmlContentFile, cancellationToken);
        await recv_displayHelp(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_displayHelp(long p, string title, string htmlContentFile, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp832 = new InternalStructs.displayHelp_args() {
          P = p,
          Title = title,
          HtmlContentFile = htmlContentFile,
        };
        
        await tmp832.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_displayHelp(CancellationToken cancellationToken = default)
      {
        
        var tmp833 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp833.Type == TMessageType.Exception)
        {
          var tmp834 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp834;
        }

        var tmp835 = new InternalStructs.displayHelp_result();
        await tmp835.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["pendantVersion"] = pendantVersion_ProcessAsync;
        processMap_["subscribeEventTypes"] = subscribeEventTypes_ProcessAsync;
        processMap_["unsubscribeEventTypes"] = unsubscribeEventTypes_ProcessAsync;
        processMap_["subscribeItemEventTypes"] = subscribeItemEventTypes_ProcessAsync;
        processMap_["unsubscribeItemEventTypes"] = unsubscribeItemEventTypes_ProcessAsync;
        processMap_["events"] = events_ProcessAsync;
        processMap_["currentLanguage"] = currentLanguage_ProcessAsync;
        processMap_["currentLocale"] = currentLocale_ProcessAsync;
        processMap_["currentScreenName"] = currentScreenName_ProcessAsync;
        processMap_["registerYML"] = registerYML_ProcessAsync;
        processMap_["registerImageFile"] = registerImageFile_ProcessAsync;
        processMap_["registerImageData"] = registerImageData_ProcessAsync;
        processMap_["registerHTMLFile"] = registerHTMLFile_ProcessAsync;
        processMap_["registerHTMLData"] = registerHTMLData_ProcessAsync;
        processMap_["registerTranslationFile"] = registerTranslationFile_ProcessAsync;
        processMap_["registerTranslationData"] = registerTranslationData_ProcessAsync;
        processMap_["registerUtilityWindow"] = registerUtilityWindow_ProcessAsync;
        processMap_["unregisterUtilityWindow"] = unregisterUtilityWindow_ProcessAsync;
        processMap_["openUtilityWindow"] = openUtilityWindow_ProcessAsync;
        processMap_["closeUtilityWindow"] = closeUtilityWindow_ProcessAsync;
        processMap_["collapseUtilityWindow"] = collapseUtilityWindow_ProcessAsync;
        processMap_["expandUtilityWindow"] = expandUtilityWindow_ProcessAsync;
        processMap_["registerIntegration"] = registerIntegration_ProcessAsync;
        processMap_["unregisterIntegration"] = unregisterIntegration_ProcessAsync;
        processMap_["property"] = property_ProcessAsync;
        processMap_["setProperty"] = setProperty_ProcessAsync;
        processMap_["setProperties"] = setProperties_ProcessAsync;
        processMap_["setChartConfig"] = setChartConfig_ProcessAsync;
        processMap_["getChartConfig"] = getChartConfig_ProcessAsync;
        processMap_["setChartData"] = setChartData_ProcessAsync;
        processMap_["getChartData"] = getChartData_ProcessAsync;
        processMap_["addChartKey"] = addChartKey_ProcessAsync;
        processMap_["removeChartKey"] = removeChartKey_ProcessAsync;
        processMap_["hideChartKey"] = hideChartKey_ProcessAsync;
        processMap_["appendChartPoints"] = appendChartPoints_ProcessAsync;
        processMap_["incrementChartKey"] = incrementChartKey_ProcessAsync;
        processMap_["exportChartImage"] = exportChartImage_ProcessAsync;
        processMap_["exportChartImageData"] = exportChartImageData_ProcessAsync;
        processMap_["notice"] = notice_ProcessAsync;
        processMap_["dispNotice"] = dispNotice_ProcessAsync;
        processMap_["error"] = error_ProcessAsync;
        processMap_["popupDialog"] = popupDialog_ProcessAsync;
        processMap_["cancelPopupDialog"] = cancelPopupDialog_ProcessAsync;
        processMap_["insertInstructionAtSelectedLine"] = insertInstructionAtSelectedLine_ProcessAsync;
        processMap_["displayScreen"] = displayScreen_ProcessAsync;
        processMap_["displayHelp"] = displayHelp_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task pendantVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp836 = new InternalStructs.pendantVersion_args();
        await tmp836.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp837 = new InternalStructs.pendantVersion_result();
        try
        {
          tmp837.Success = await _iAsync.pendantVersion(tmp836.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp837.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp838)
        {
          var tmp839 = $"Error occurred in {GetType().FullName}: {tmp838.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp838, tmp839);
          else
            Console.Error.WriteLine(tmp839);
          var tmp840 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendantVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp840.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp841 = new InternalStructs.subscribeEventTypes_args();
        await tmp841.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp842 = new InternalStructs.subscribeEventTypes_result();
        try
        {
          await _iAsync.subscribeEventTypes(tmp841.P, tmp841.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp842.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp843)
        {
          var tmp844 = $"Error occurred in {GetType().FullName}: {tmp843.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp843, tmp844);
          else
            Console.Error.WriteLine(tmp844);
          var tmp845 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp845.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp846 = new InternalStructs.unsubscribeEventTypes_args();
        await tmp846.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp847 = new InternalStructs.unsubscribeEventTypes_result();
        try
        {
          await _iAsync.unsubscribeEventTypes(tmp846.P, tmp846.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp847.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp848)
        {
          var tmp849 = $"Error occurred in {GetType().FullName}: {tmp848.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp848, tmp849);
          else
            Console.Error.WriteLine(tmp849);
          var tmp850 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp850.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp851 = new InternalStructs.subscribeItemEventTypes_args();
        await tmp851.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp852 = new InternalStructs.subscribeItemEventTypes_result();
        try
        {
          await _iAsync.subscribeItemEventTypes(tmp851.P, tmp851.ItemIDs, tmp851.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp852.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp853)
        {
          var tmp854 = $"Error occurred in {GetType().FullName}: {tmp853.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp853, tmp854);
          else
            Console.Error.WriteLine(tmp854);
          var tmp855 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp855.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeItemEventTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp856 = new InternalStructs.unsubscribeItemEventTypes_args();
        await tmp856.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp857 = new InternalStructs.unsubscribeItemEventTypes_result();
        try
        {
          await _iAsync.unsubscribeItemEventTypes(tmp856.P, tmp856.ItemIDs, tmp856.Types, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp857.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp858)
        {
          var tmp859 = $"Error occurred in {GetType().FullName}: {tmp858.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp858, tmp859);
          else
            Console.Error.WriteLine(tmp859);
          var tmp860 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeItemEventTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp860.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task events_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp861 = new InternalStructs.events_args();
        await tmp861.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp862 = new InternalStructs.events_result();
        try
        {
          tmp862.Success = await _iAsync.events(tmp861.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Reply, seqid), cancellationToken); 
          await tmp862.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp863)
        {
          var tmp864 = $"Error occurred in {GetType().FullName}: {tmp863.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp863, tmp864);
          else
            Console.Error.WriteLine(tmp864);
          var tmp865 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("events", TMessageType.Exception, seqid), cancellationToken);
          await tmp865.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLanguage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp866 = new InternalStructs.currentLanguage_args();
        await tmp866.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp867 = new InternalStructs.currentLanguage_result();
        try
        {
          tmp867.Success = await _iAsync.currentLanguage(tmp866.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp867.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp868)
        {
          var tmp869 = $"Error occurred in {GetType().FullName}: {tmp868.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp868, tmp869);
          else
            Console.Error.WriteLine(tmp869);
          var tmp870 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLanguage", TMessageType.Exception, seqid), cancellationToken);
          await tmp870.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentLocale_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp871 = new InternalStructs.currentLocale_args();
        await tmp871.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp872 = new InternalStructs.currentLocale_result();
        try
        {
          tmp872.Success = await _iAsync.currentLocale(tmp871.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Reply, seqid), cancellationToken); 
          await tmp872.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp873)
        {
          var tmp874 = $"Error occurred in {GetType().FullName}: {tmp873.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp873, tmp874);
          else
            Console.Error.WriteLine(tmp874);
          var tmp875 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentLocale", TMessageType.Exception, seqid), cancellationToken);
          await tmp875.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task currentScreenName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp876 = new InternalStructs.currentScreenName_args();
        await tmp876.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp877 = new InternalStructs.currentScreenName_result();
        try
        {
          tmp877.Success = await _iAsync.currentScreenName(tmp876.P, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp877.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp878)
        {
          var tmp879 = $"Error occurred in {GetType().FullName}: {tmp878.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp878, tmp879);
          else
            Console.Error.WriteLine(tmp879);
          var tmp880 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("currentScreenName", TMessageType.Exception, seqid), cancellationToken);
          await tmp880.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerYML_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp881 = new InternalStructs.registerYML_args();
        await tmp881.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp882 = new InternalStructs.registerYML_result();
        try
        {
          tmp882.Success = await _iAsync.registerYML(tmp881.P, tmp881.YmlSource, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Reply, seqid), cancellationToken); 
          await tmp882.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp883)
        {
          var tmp884 = $"Error occurred in {GetType().FullName}: {tmp883.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp883, tmp884);
          else
            Console.Error.WriteLine(tmp884);
          var tmp885 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerYML", TMessageType.Exception, seqid), cancellationToken);
          await tmp885.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp886 = new InternalStructs.registerImageFile_args();
        await tmp886.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp887 = new InternalStructs.registerImageFile_result();
        try
        {
          try
          {
            await _iAsync.registerImageFile(tmp886.P, tmp886.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp888)
          {
            tmp887.E = tmp888;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp887.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp889)
        {
          var tmp890 = $"Error occurred in {GetType().FullName}: {tmp889.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp889, tmp890);
          else
            Console.Error.WriteLine(tmp890);
          var tmp891 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp891.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp892 = new InternalStructs.registerImageData_args();
        await tmp892.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp893 = new InternalStructs.registerImageData_result();
        try
        {
          try
          {
            await _iAsync.registerImageData(tmp892.P, tmp892.ImageData, tmp892.ImageName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp894)
          {
            tmp893.E = tmp894;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp893.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp895)
        {
          var tmp896 = $"Error occurred in {GetType().FullName}: {tmp895.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp895, tmp896);
          else
            Console.Error.WriteLine(tmp896);
          var tmp897 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp897.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp898 = new InternalStructs.registerHTMLFile_args();
        await tmp898.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp899 = new InternalStructs.registerHTMLFile_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLFile(tmp898.P, tmp898.HtmlFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp900)
          {
            tmp899.E = tmp900;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp899.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp901)
        {
          var tmp902 = $"Error occurred in {GetType().FullName}: {tmp901.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp901, tmp902);
          else
            Console.Error.WriteLine(tmp902);
          var tmp903 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp903.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerHTMLData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp904 = new InternalStructs.registerHTMLData_args();
        await tmp904.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp905 = new InternalStructs.registerHTMLData_result();
        try
        {
          try
          {
            await _iAsync.registerHTMLData(tmp904.P, tmp904.HtmlData, tmp904.HtmlName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp906)
          {
            tmp905.E = tmp906;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp905.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp907)
        {
          var tmp908 = $"Error occurred in {GetType().FullName}: {tmp907.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp907, tmp908);
          else
            Console.Error.WriteLine(tmp908);
          var tmp909 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerHTMLData", TMessageType.Exception, seqid), cancellationToken);
          await tmp909.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp910 = new InternalStructs.registerTranslationFile_args();
        await tmp910.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp911 = new InternalStructs.registerTranslationFile_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationFile(tmp910.P, tmp910.Locale, tmp910.TranslationFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp912)
          {
            tmp911.E = tmp912;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp911.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp913)
        {
          var tmp914 = $"Error occurred in {GetType().FullName}: {tmp913.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp913, tmp914);
          else
            Console.Error.WriteLine(tmp914);
          var tmp915 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp915.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerTranslationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp916 = new InternalStructs.registerTranslationData_args();
        await tmp916.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp917 = new InternalStructs.registerTranslationData_result();
        try
        {
          try
          {
            await _iAsync.registerTranslationData(tmp916.P, tmp916.Locale, tmp916.TranslationData, tmp916.TranslationName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp918)
          {
            tmp917.E = tmp918;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp917.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp919)
        {
          var tmp920 = $"Error occurred in {GetType().FullName}: {tmp919.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp919, tmp920);
          else
            Console.Error.WriteLine(tmp920);
          var tmp921 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerTranslationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp921.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp922 = new InternalStructs.registerUtilityWindow_args();
        await tmp922.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp923 = new InternalStructs.registerUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.registerUtilityWindow(tmp922.P, tmp922.Identifier, tmp922.ItemType, tmp922.MenuItemName, tmp922.WindowTitle, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp924)
          {
            tmp923.E = tmp924;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp923.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp925)
        {
          var tmp926 = $"Error occurred in {GetType().FullName}: {tmp925.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp925, tmp926);
          else
            Console.Error.WriteLine(tmp926);
          var tmp927 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp927.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp928 = new InternalStructs.unregisterUtilityWindow_args();
        await tmp928.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp929 = new InternalStructs.unregisterUtilityWindow_result();
        try
        {
          try
          {
            await _iAsync.unregisterUtilityWindow(tmp928.P, tmp928.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp930)
          {
            tmp929.E = tmp930;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp929.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp931)
        {
          var tmp932 = $"Error occurred in {GetType().FullName}: {tmp931.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp931, tmp932);
          else
            Console.Error.WriteLine(tmp932);
          var tmp933 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp933.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp934 = new InternalStructs.openUtilityWindow_args();
        await tmp934.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp935 = new InternalStructs.openUtilityWindow_result();
        try
        {
          await _iAsync.openUtilityWindow(tmp934.P, tmp934.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp935.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp936)
        {
          var tmp937 = $"Error occurred in {GetType().FullName}: {tmp936.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp936, tmp937);
          else
            Console.Error.WriteLine(tmp937);
          var tmp938 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp938.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp939 = new InternalStructs.closeUtilityWindow_args();
        await tmp939.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp940 = new InternalStructs.closeUtilityWindow_result();
        try
        {
          await _iAsync.closeUtilityWindow(tmp939.P, tmp939.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp940.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp941)
        {
          var tmp942 = $"Error occurred in {GetType().FullName}: {tmp941.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp941, tmp942);
          else
            Console.Error.WriteLine(tmp942);
          var tmp943 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp943.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task collapseUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp944 = new InternalStructs.collapseUtilityWindow_args();
        await tmp944.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp945 = new InternalStructs.collapseUtilityWindow_result();
        try
        {
          await _iAsync.collapseUtilityWindow(tmp944.P, tmp944.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp945.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp946)
        {
          var tmp947 = $"Error occurred in {GetType().FullName}: {tmp946.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp946, tmp947);
          else
            Console.Error.WriteLine(tmp947);
          var tmp948 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("collapseUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp948.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expandUtilityWindow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp949 = new InternalStructs.expandUtilityWindow_args();
        await tmp949.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp950 = new InternalStructs.expandUtilityWindow_result();
        try
        {
          await _iAsync.expandUtilityWindow(tmp949.P, tmp949.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp950.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp951)
        {
          var tmp952 = $"Error occurred in {GetType().FullName}: {tmp951.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp951, tmp952);
          else
            Console.Error.WriteLine(tmp952);
          var tmp953 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expandUtilityWindow", TMessageType.Exception, seqid), cancellationToken);
          await tmp953.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp954 = new InternalStructs.registerIntegration_args();
        await tmp954.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp955 = new InternalStructs.registerIntegration_result();
        try
        {
          try
          {
            await _iAsync.registerIntegration(tmp954.P, tmp954.Identifier, tmp954.IntegrationPoint, tmp954.ItemType, tmp954.ButtonLabel, tmp954.ButtonImage, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp956)
          {
            tmp955.E = tmp956;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp955.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp957)
        {
          var tmp958 = $"Error occurred in {GetType().FullName}: {tmp957.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp957, tmp958);
          else
            Console.Error.WriteLine(tmp958);
          var tmp959 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp959.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterIntegration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp960 = new InternalStructs.unregisterIntegration_args();
        await tmp960.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp961 = new InternalStructs.unregisterIntegration_result();
        try
        {
          try
          {
            await _iAsync.unregisterIntegration(tmp960.P, tmp960.Identifier, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp962)
          {
            tmp961.E = tmp962;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Reply, seqid), cancellationToken); 
          await tmp961.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp963)
        {
          var tmp964 = $"Error occurred in {GetType().FullName}: {tmp963.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp963, tmp964);
          else
            Console.Error.WriteLine(tmp964);
          var tmp965 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterIntegration", TMessageType.Exception, seqid), cancellationToken);
          await tmp965.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task property_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp966 = new InternalStructs.property_args();
        await tmp966.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp967 = new InternalStructs.property_result();
        try
        {
          try
          {
            tmp967.Success = await _iAsync.property(tmp966.P, tmp966.ItemID, tmp966.Name, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp968)
          {
            tmp967.E = tmp968;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Reply, seqid), cancellationToken); 
          await tmp967.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp969)
        {
          var tmp970 = $"Error occurred in {GetType().FullName}: {tmp969.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp969, tmp970);
          else
            Console.Error.WriteLine(tmp970);
          var tmp971 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("property", TMessageType.Exception, seqid), cancellationToken);
          await tmp971.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp972 = new InternalStructs.setProperty_args();
        await tmp972.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp973 = new InternalStructs.setProperty_result();
        try
        {
          try
          {
            await _iAsync.setProperty(tmp972.P, tmp972.ItemID, tmp972.Name, tmp972.Value, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp974)
          {
            tmp973.E = tmp974;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Reply, seqid), cancellationToken); 
          await tmp973.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp975)
        {
          var tmp976 = $"Error occurred in {GetType().FullName}: {tmp975.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp975, tmp976);
          else
            Console.Error.WriteLine(tmp976);
          var tmp977 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setProperty", TMessageType.Exception, seqid), cancellationToken);
          await tmp977.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp978 = new InternalStructs.setProperties_args();
        await tmp978.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.setProperties(tmp978.P, tmp978.PropValuesList, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp980)
        {
          var tmp981 = $"Error occurred in {GetType().FullName}: {tmp980.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp980, tmp981);
          else
            Console.Error.WriteLine(tmp981);
        }
      }

      public async global::System.Threading.Tasks.Task setChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp982 = new InternalStructs.setChartConfig_args();
        await tmp982.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp983 = new InternalStructs.setChartConfig_result();
        try
        {
          try
          {
            await _iAsync.setChartConfig(tmp982.P, tmp982.ChartID, tmp982.Config, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp984)
          {
            tmp983.E = tmp984;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp983.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp985)
        {
          var tmp986 = $"Error occurred in {GetType().FullName}: {tmp985.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp985, tmp986);
          else
            Console.Error.WriteLine(tmp986);
          var tmp987 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp987.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp988 = new InternalStructs.getChartConfig_args();
        await tmp988.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp989 = new InternalStructs.getChartConfig_result();
        try
        {
          try
          {
            tmp989.Success = await _iAsync.getChartConfig(tmp988.P, tmp988.ChartID, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp990)
          {
            tmp989.E = tmp990;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp989.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp991)
        {
          var tmp992 = $"Error occurred in {GetType().FullName}: {tmp991.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp991, tmp992);
          else
            Console.Error.WriteLine(tmp992);
          var tmp993 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp993.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp994 = new InternalStructs.setChartData_args();
        await tmp994.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp995 = new InternalStructs.setChartData_result();
        try
        {
          try
          {
            await _iAsync.setChartData(tmp994.P, tmp994.ChartID, tmp994.Dataset, tmp994.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp996)
          {
            tmp995.E = tmp996;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp995.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp997)
        {
          var tmp998 = $"Error occurred in {GetType().FullName}: {tmp997.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp997, tmp998);
          else
            Console.Error.WriteLine(tmp998);
          var tmp999 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp999.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getChartData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1000 = new InternalStructs.getChartData_args();
        await tmp1000.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1001 = new InternalStructs.getChartData_result();
        try
        {
          try
          {
            tmp1001.Success = await _iAsync.getChartData(tmp1000.P, tmp1000.ChartID, tmp1000.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1002)
          {
            tmp1001.E = tmp1002;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1001.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1003)
        {
          var tmp1004 = $"Error occurred in {GetType().FullName}: {tmp1003.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1003, tmp1004);
          else
            Console.Error.WriteLine(tmp1004);
          var tmp1005 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getChartData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1005.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1006 = new InternalStructs.addChartKey_args();
        await tmp1006.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1007 = new InternalStructs.addChartKey_result();
        try
        {
          try
          {
            await _iAsync.addChartKey(tmp1006.P, tmp1006.ChartID, tmp1006.Key, tmp1006.Data, tmp1006.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1008)
          {
            tmp1007.E = tmp1008;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1007.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1009)
        {
          var tmp1010 = $"Error occurred in {GetType().FullName}: {tmp1009.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1009, tmp1010);
          else
            Console.Error.WriteLine(tmp1010);
          var tmp1011 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1011.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1012 = new InternalStructs.removeChartKey_args();
        await tmp1012.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1013 = new InternalStructs.removeChartKey_result();
        try
        {
          try
          {
            await _iAsync.removeChartKey(tmp1012.P, tmp1012.ChartID, tmp1012.Key, tmp1012.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1014)
          {
            tmp1013.E = tmp1014;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1013.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1015)
        {
          var tmp1016 = $"Error occurred in {GetType().FullName}: {tmp1015.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1015, tmp1016);
          else
            Console.Error.WriteLine(tmp1016);
          var tmp1017 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1017.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task hideChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1018 = new InternalStructs.hideChartKey_args();
        await tmp1018.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1019 = new InternalStructs.hideChartKey_result();
        try
        {
          try
          {
            await _iAsync.hideChartKey(tmp1018.P, tmp1018.ChartID, tmp1018.Key, tmp1018.Hidden, tmp1018.Right, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1020)
          {
            tmp1019.E = tmp1020;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1019.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1021)
        {
          var tmp1022 = $"Error occurred in {GetType().FullName}: {tmp1021.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1021, tmp1022);
          else
            Console.Error.WriteLine(tmp1022);
          var tmp1023 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("hideChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1023.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendChartPoints_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1024 = new InternalStructs.appendChartPoints_args();
        await tmp1024.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.appendChartPoints(tmp1024.P, tmp1024.ChartID, tmp1024.Key, tmp1024.Points, tmp1024.Right, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1026)
        {
          var tmp1027 = $"Error occurred in {GetType().FullName}: {tmp1026.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1026, tmp1027);
          else
            Console.Error.WriteLine(tmp1027);
        }
      }

      public async global::System.Threading.Tasks.Task incrementChartKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1028 = new InternalStructs.incrementChartKey_args();
        await tmp1028.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1029 = new InternalStructs.incrementChartKey_result();
        try
        {
          try
          {
            await _iAsync.incrementChartKey(tmp1028.P, tmp1028.ChartID, tmp1028.Key, tmp1028.Val, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1030)
          {
            tmp1029.E = tmp1030;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1029.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1031)
        {
          var tmp1032 = $"Error occurred in {GetType().FullName}: {tmp1031.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1031, tmp1032);
          else
            Console.Error.WriteLine(tmp1032);
          var tmp1033 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("incrementChartKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp1033.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1034 = new InternalStructs.exportChartImage_args();
        await tmp1034.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1035 = new InternalStructs.exportChartImage_result();
        try
        {
          try
          {
            tmp1035.Success = await _iAsync.exportChartImage(tmp1034.P, tmp1034.ChartID, tmp1034.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1036)
          {
            tmp1035.E = tmp1036;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1035.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1037)
        {
          var tmp1038 = $"Error occurred in {GetType().FullName}: {tmp1037.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1037, tmp1038);
          else
            Console.Error.WriteLine(tmp1038);
          var tmp1039 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImage", TMessageType.Exception, seqid), cancellationToken);
          await tmp1039.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exportChartImageData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1040 = new InternalStructs.exportChartImageData_args();
        await tmp1040.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1041 = new InternalStructs.exportChartImageData_result();
        try
        {
          try
          {
            tmp1041.Success = await _iAsync.exportChartImageData(tmp1040.P, tmp1040.ChartID, tmp1040.ImageFileName, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1042)
          {
            tmp1041.E = tmp1042;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1041.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1043)
        {
          var tmp1044 = $"Error occurred in {GetType().FullName}: {tmp1043.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1043, tmp1044);
          else
            Console.Error.WriteLine(tmp1044);
          var tmp1045 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exportChartImageData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1045.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1046 = new InternalStructs.notice_args();
        await tmp1046.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.notice(tmp1046.P, tmp1046.Title, tmp1046.Message, tmp1046.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1048)
        {
          var tmp1049 = $"Error occurred in {GetType().FullName}: {tmp1048.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1048, tmp1049);
          else
            Console.Error.WriteLine(tmp1049);
        }
      }

      public async global::System.Threading.Tasks.Task dispNotice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1050 = new InternalStructs.dispNotice_args();
        await tmp1050.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.dispNotice(tmp1050.P, tmp1050.Disposition, tmp1050.Title, tmp1050.Message, tmp1050.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1052)
        {
          var tmp1053 = $"Error occurred in {GetType().FullName}: {tmp1052.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1052, tmp1053);
          else
            Console.Error.WriteLine(tmp1053);
        }
      }

      public async global::System.Threading.Tasks.Task error_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1054 = new InternalStructs.error_args();
        await tmp1054.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.error(tmp1054.P, tmp1054.Title, tmp1054.Message, tmp1054.Log, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1056)
        {
          var tmp1057 = $"Error occurred in {GetType().FullName}: {tmp1056.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1056, tmp1057);
          else
            Console.Error.WriteLine(tmp1057);
        }
      }

      public async global::System.Threading.Tasks.Task popupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1058 = new InternalStructs.popupDialog_args();
        await tmp1058.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1059 = new InternalStructs.popupDialog_result();
        try
        {
          try
          {
            await _iAsync.popupDialog(tmp1058.P, tmp1058.Identifier, tmp1058.Title, tmp1058.Message, tmp1058.PositiveOption, tmp1058.NegativeOption, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp1060)
          {
            tmp1059.E = tmp1060;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1059.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1061)
        {
          var tmp1062 = $"Error occurred in {GetType().FullName}: {tmp1061.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1061, tmp1062);
          else
            Console.Error.WriteLine(tmp1062);
          var tmp1063 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("popupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1063.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelPopupDialog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1064 = new InternalStructs.cancelPopupDialog_args();
        await tmp1064.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1065 = new InternalStructs.cancelPopupDialog_result();
        try
        {
          await _iAsync.cancelPopupDialog(tmp1064.P, tmp1064.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1065.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1066)
        {
          var tmp1067 = $"Error occurred in {GetType().FullName}: {tmp1066.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1066, tmp1067);
          else
            Console.Error.WriteLine(tmp1067);
          var tmp1068 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelPopupDialog", TMessageType.Exception, seqid), cancellationToken);
          await tmp1068.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task insertInstructionAtSelectedLine_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1069 = new InternalStructs.insertInstructionAtSelectedLine_args();
        await tmp1069.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1070 = new InternalStructs.insertInstructionAtSelectedLine_result();
        try
        {
          tmp1070.Success = await _iAsync.insertInstructionAtSelectedLine(tmp1069.P, tmp1069.Instruction, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1070.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1071)
        {
          var tmp1072 = $"Error occurred in {GetType().FullName}: {tmp1071.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1071, tmp1072);
          else
            Console.Error.WriteLine(tmp1072);
          var tmp1073 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("insertInstructionAtSelectedLine", TMessageType.Exception, seqid), cancellationToken);
          await tmp1073.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayScreen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1074 = new InternalStructs.displayScreen_args();
        await tmp1074.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1075 = new InternalStructs.displayScreen_result();
        try
        {
          await _iAsync.displayScreen(tmp1074.P, tmp1074.Identifier, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1075.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1076)
        {
          var tmp1077 = $"Error occurred in {GetType().FullName}: {tmp1076.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1076, tmp1077);
          else
            Console.Error.WriteLine(tmp1077);
          var tmp1078 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayScreen", TMessageType.Exception, seqid), cancellationToken);
          await tmp1078.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task displayHelp_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1079 = new InternalStructs.displayHelp_args();
        await tmp1079.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1080 = new InternalStructs.displayHelp_result();
        try
        {
          await _iAsync.displayHelp(tmp1079.P, tmp1079.Title, tmp1079.HtmlContentFile, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1080.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1081)
        {
          var tmp1082 = $"Error occurred in {GetType().FullName}: {tmp1081.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1081, tmp1082);
          else
            Console.Error.WriteLine(tmp1082);
          var tmp1083 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("displayHelp", TMessageType.Exception, seqid), cancellationToken);
          await tmp1083.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class pendantVersion_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public pendantVersion_args()
        {
        }

        public pendantVersion_args DeepCopy()
        {
          var tmp1084 = new pendantVersion_args();
          if(__isset.p)
          {
            tmp1084.P = this.P;
          }
          tmp1084.__isset.p = this.__isset.p;
          return tmp1084;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1085 = new TStruct("pendantVersion_args");
            await oprot.WriteStructBeginAsync(tmp1085, cancellationToken);
            var tmp1086 = new TField();
            if(__isset.p)
            {
              tmp1086.Name = "p";
              tmp1086.Type = TType.I64;
              tmp1086.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1086, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1087 = new StringBuilder("pendantVersion_args(");
          int tmp1088 = 0;
          if(__isset.p)
          {
            if(0 < tmp1088++) { tmp1087.Append(", "); }
            tmp1087.Append("P: ");
            P.ToString(tmp1087);
          }
          tmp1087.Append(')');
          return tmp1087.ToString();
        }
      }


      public partial class pendantVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public pendantVersion_result()
        {
        }

        public pendantVersion_result DeepCopy()
        {
          var tmp1089 = new pendantVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp1089.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp1089.__isset.success = this.__isset.success;
          return tmp1089;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1090 = new TStruct("pendantVersion_result");
            await oprot.WriteStructBeginAsync(tmp1090, cancellationToken);
            var tmp1091 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1091.Name = "Success";
                tmp1091.Type = TType.Struct;
                tmp1091.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1091, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendantVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1092 = new StringBuilder("pendantVersion_result(");
          int tmp1093 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1093++) { tmp1092.Append(", "); }
            tmp1092.Append("Success: ");
            Success.ToString(tmp1092);
          }
          tmp1092.Append(')');
          return tmp1092.ToString();
        }
      }


      public partial class subscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public subscribeEventTypes_args()
        {
        }

        public subscribeEventTypes_args DeepCopy()
        {
          var tmp1094 = new subscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1094.P = this.P;
          }
          tmp1094.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1094.Types = this.Types.DeepCopy();
          }
          tmp1094.__isset.types = this.__isset.types;
          return tmp1094;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1095 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1095.Count);
                      for(int _i1096 = 0; _i1096 < _set1095.Count; ++_i1096)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1097;
                        _elem1097 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1097);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1098 = new TStruct("subscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1098, cancellationToken);
            var tmp1099 = new TField();
            if(__isset.p)
            {
              tmp1099.Name = "p";
              tmp1099.Type = TType.I64;
              tmp1099.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1099, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1099.Name = "types";
              tmp1099.Type = TType.Set;
              tmp1099.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1099, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1100 in Types)
              {
                await oprot.WriteI32Async((int)_iter1100, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1101 = new StringBuilder("subscribeEventTypes_args(");
          int tmp1102 = 0;
          if(__isset.p)
          {
            if(0 < tmp1102++) { tmp1101.Append(", "); }
            tmp1101.Append("P: ");
            P.ToString(tmp1101);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1102++) { tmp1101.Append(", "); }
            tmp1101.Append("Types: ");
            Types.ToString(tmp1101);
          }
          tmp1101.Append(')');
          return tmp1101.ToString();
        }
      }


      public partial class subscribeEventTypes_result : TBase
      {

        public subscribeEventTypes_result()
        {
        }

        public subscribeEventTypes_result DeepCopy()
        {
          var tmp1103 = new subscribeEventTypes_result();
          return tmp1103;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1104 = new TStruct("subscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1104, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1105 = new StringBuilder("subscribeEventTypes_result(");
          tmp1105.Append(')');
          return tmp1105.ToString();
        }
      }


      public partial class unsubscribeEventTypes_args : TBase
      {
        private long _p;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool types;
        }

        public unsubscribeEventTypes_args()
        {
        }

        public unsubscribeEventTypes_args DeepCopy()
        {
          var tmp1107 = new unsubscribeEventTypes_args();
          if(__isset.p)
          {
            tmp1107.P = this.P;
          }
          tmp1107.__isset.p = this.__isset.p;
          if((Types != null) && __isset.types)
          {
            tmp1107.Types = this.Types.DeepCopy();
          }
          tmp1107.__isset.types = this.__isset.types;
          return tmp1107;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1108 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1108.Count);
                      for(int _i1109 = 0; _i1109 < _set1108.Count; ++_i1109)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1110;
                        _elem1110 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1110);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1111 = new TStruct("unsubscribeEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1111, cancellationToken);
            var tmp1112 = new TField();
            if(__isset.p)
            {
              tmp1112.Name = "p";
              tmp1112.Type = TType.I64;
              tmp1112.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1112, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1112.Name = "types";
              tmp1112.Type = TType.Set;
              tmp1112.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1112, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1113 in Types)
              {
                await oprot.WriteI32Async((int)_iter1113, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1114 = new StringBuilder("unsubscribeEventTypes_args(");
          int tmp1115 = 0;
          if(__isset.p)
          {
            if(0 < tmp1115++) { tmp1114.Append(", "); }
            tmp1114.Append("P: ");
            P.ToString(tmp1114);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1115++) { tmp1114.Append(", "); }
            tmp1114.Append("Types: ");
            Types.ToString(tmp1114);
          }
          tmp1114.Append(')');
          return tmp1114.ToString();
        }
      }


      public partial class unsubscribeEventTypes_result : TBase
      {

        public unsubscribeEventTypes_result()
        {
        }

        public unsubscribeEventTypes_result DeepCopy()
        {
          var tmp1116 = new unsubscribeEventTypes_result();
          return tmp1116;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1117 = new TStruct("unsubscribeEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1117, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1118 = new StringBuilder("unsubscribeEventTypes_result(");
          tmp1118.Append(')');
          return tmp1118.ToString();
        }
      }


      public partial class subscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public subscribeItemEventTypes_args()
        {
        }

        public subscribeItemEventTypes_args DeepCopy()
        {
          var tmp1120 = new subscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1120.P = this.P;
          }
          tmp1120.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1120.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1120.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1120.Types = this.Types.DeepCopy();
          }
          tmp1120.__isset.types = this.__isset.types;
          return tmp1120;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1121 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1121.Count);
                      for(int _i1122 = 0; _i1122 < _set1121.Count; ++_i1122)
                      {
                        string _elem1123;
                        _elem1123 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1123);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1124 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1124.Count);
                      for(int _i1125 = 0; _i1125 < _set1124.Count; ++_i1125)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1126;
                        _elem1126 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1126);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1127 = new TStruct("subscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1127, cancellationToken);
            var tmp1128 = new TField();
            if(__isset.p)
            {
              tmp1128.Name = "p";
              tmp1128.Type = TType.I64;
              tmp1128.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1128, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1128.Name = "itemIDs";
              tmp1128.Type = TType.Set;
              tmp1128.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1128, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1129 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1129, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1128.Name = "types";
              tmp1128.Type = TType.Set;
              tmp1128.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1128, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1130 in Types)
              {
                await oprot.WriteI32Async((int)_iter1130, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1131 = new StringBuilder("subscribeItemEventTypes_args(");
          int tmp1132 = 0;
          if(__isset.p)
          {
            if(0 < tmp1132++) { tmp1131.Append(", "); }
            tmp1131.Append("P: ");
            P.ToString(tmp1131);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1132++) { tmp1131.Append(", "); }
            tmp1131.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1131);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1132++) { tmp1131.Append(", "); }
            tmp1131.Append("Types: ");
            Types.ToString(tmp1131);
          }
          tmp1131.Append(')');
          return tmp1131.ToString();
        }
      }


      public partial class subscribeItemEventTypes_result : TBase
      {

        public subscribeItemEventTypes_result()
        {
        }

        public subscribeItemEventTypes_result DeepCopy()
        {
          var tmp1133 = new subscribeItemEventTypes_result();
          return tmp1133;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1134 = new TStruct("subscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1134, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1135 = new StringBuilder("subscribeItemEventTypes_result(");
          tmp1135.Append(')');
          return tmp1135.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_args : TBase
      {
        private long _p;
        private HashSet<string> _itemIDs;
        private HashSet<global::Yaskawa.Ext.API.PendantEventType> _types;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public HashSet<string> ItemIDs
        {
          get
          {
            return _itemIDs;
          }
          set
          {
            __isset.itemIDs = true;
            this._itemIDs = value;
          }
        }

        public HashSet<global::Yaskawa.Ext.API.PendantEventType> Types
        {
          get
          {
            return _types;
          }
          set
          {
            __isset.types = true;
            this._types = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemIDs;
          public bool types;
        }

        public unsubscribeItemEventTypes_args()
        {
        }

        public unsubscribeItemEventTypes_args DeepCopy()
        {
          var tmp1137 = new unsubscribeItemEventTypes_args();
          if(__isset.p)
          {
            tmp1137.P = this.P;
          }
          tmp1137.__isset.p = this.__isset.p;
          if((ItemIDs != null) && __isset.itemIDs)
          {
            tmp1137.ItemIDs = this.ItemIDs.DeepCopy();
          }
          tmp1137.__isset.itemIDs = this.__isset.itemIDs;
          if((Types != null) && __isset.types)
          {
            tmp1137.Types = this.Types.DeepCopy();
          }
          tmp1137.__isset.types = this.__isset.types;
          return tmp1137;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1138 = await iprot.ReadSetBeginAsync(cancellationToken);
                      ItemIDs = new HashSet<string>(_set1138.Count);
                      for(int _i1139 = 0; _i1139 < _set1138.Count; ++_i1139)
                      {
                        string _elem1140;
                        _elem1140 = await iprot.ReadStringAsync(cancellationToken);
                        ItemIDs.Add(_elem1140);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set1141 = await iprot.ReadSetBeginAsync(cancellationToken);
                      Types = new HashSet<global::Yaskawa.Ext.API.PendantEventType>(_set1141.Count);
                      for(int _i1142 = 0; _i1142 < _set1141.Count; ++_i1142)
                      {
                        global::Yaskawa.Ext.API.PendantEventType _elem1143;
                        _elem1143 = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                        Types.Add(_elem1143);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1144 = new TStruct("unsubscribeItemEventTypes_args");
            await oprot.WriteStructBeginAsync(tmp1144, cancellationToken);
            var tmp1145 = new TField();
            if(__isset.p)
            {
              tmp1145.Name = "p";
              tmp1145.Type = TType.I64;
              tmp1145.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1145, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              tmp1145.Name = "itemIDs";
              tmp1145.Type = TType.Set;
              tmp1145.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1145, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, ItemIDs.Count), cancellationToken);
              foreach (string _iter1146 in ItemIDs)
              {
                await oprot.WriteStringAsync(_iter1146, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Types != null) && __isset.types)
            {
              tmp1145.Name = "types";
              tmp1145.Type = TType.Set;
              tmp1145.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1145, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.I32, Types.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PendantEventType _iter1147 in Types)
              {
                await oprot.WriteI32Async((int)_iter1147, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemIDs == other.__isset.itemIDs) && ((!__isset.itemIDs) || (TCollections.Equals(ItemIDs, other.ItemIDs))))
            && ((__isset.types == other.__isset.types) && ((!__isset.types) || (TCollections.Equals(Types, other.Types))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemIDs != null) && __isset.itemIDs)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ItemIDs);
            }
            if((Types != null) && __isset.types)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Types);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1148 = new StringBuilder("unsubscribeItemEventTypes_args(");
          int tmp1149 = 0;
          if(__isset.p)
          {
            if(0 < tmp1149++) { tmp1148.Append(", "); }
            tmp1148.Append("P: ");
            P.ToString(tmp1148);
          }
          if((ItemIDs != null) && __isset.itemIDs)
          {
            if(0 < tmp1149++) { tmp1148.Append(", "); }
            tmp1148.Append("ItemIDs: ");
            ItemIDs.ToString(tmp1148);
          }
          if((Types != null) && __isset.types)
          {
            if(0 < tmp1149++) { tmp1148.Append(", "); }
            tmp1148.Append("Types: ");
            Types.ToString(tmp1148);
          }
          tmp1148.Append(')');
          return tmp1148.ToString();
        }
      }


      public partial class unsubscribeItemEventTypes_result : TBase
      {

        public unsubscribeItemEventTypes_result()
        {
        }

        public unsubscribeItemEventTypes_result DeepCopy()
        {
          var tmp1150 = new unsubscribeItemEventTypes_result();
          return tmp1150;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1151 = new TStruct("unsubscribeItemEventTypes_result");
            await oprot.WriteStructBeginAsync(tmp1151, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeItemEventTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1152 = new StringBuilder("unsubscribeItemEventTypes_result(");
          tmp1152.Append(')');
          return tmp1152.ToString();
        }
      }


      public partial class events_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public events_args()
        {
        }

        public events_args DeepCopy()
        {
          var tmp1154 = new events_args();
          if(__isset.p)
          {
            tmp1154.P = this.P;
          }
          tmp1154.__isset.p = this.__isset.p;
          return tmp1154;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1155 = new TStruct("events_args");
            await oprot.WriteStructBeginAsync(tmp1155, cancellationToken);
            var tmp1156 = new TField();
            if(__isset.p)
            {
              tmp1156.Name = "p";
              tmp1156.Type = TType.I64;
              tmp1156.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1156, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1157 = new StringBuilder("events_args(");
          int tmp1158 = 0;
          if(__isset.p)
          {
            if(0 < tmp1158++) { tmp1157.Append(", "); }
            tmp1157.Append("P: ");
            P.ToString(tmp1157);
          }
          tmp1157.Append(')');
          return tmp1157.ToString();
        }
      }


      public partial class events_result : TBase
      {
        private List<global::Yaskawa.Ext.API.PendantEvent> _success;

        public List<global::Yaskawa.Ext.API.PendantEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public events_result()
        {
        }

        public events_result DeepCopy()
        {
          var tmp1159 = new events_result();
          if((Success != null) && __isset.success)
          {
            tmp1159.Success = this.Success.DeepCopy();
          }
          tmp1159.__isset.success = this.__isset.success;
          return tmp1159;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1160 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.PendantEvent>(_list1160.Count);
                      for(int _i1161 = 0; _i1161 < _list1160.Count; ++_i1161)
                      {
                        global::Yaskawa.Ext.API.PendantEvent _elem1162;
                        _elem1162 = new global::Yaskawa.Ext.API.PendantEvent();
                        await _elem1162.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1162);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1163 = new TStruct("events_result");
            await oprot.WriteStructBeginAsync(tmp1163, cancellationToken);
            var tmp1164 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1164.Name = "Success";
                tmp1164.Type = TType.List;
                tmp1164.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1164, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.PendantEvent _iter1165 in Success)
                {
                  await _iter1165.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is events_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1166 = new StringBuilder("events_result(");
          int tmp1167 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1167++) { tmp1166.Append(", "); }
            tmp1166.Append("Success: ");
            Success.ToString(tmp1166);
          }
          tmp1166.Append(')');
          return tmp1166.ToString();
        }
      }


      public partial class currentLanguage_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLanguage_args()
        {
        }

        public currentLanguage_args DeepCopy()
        {
          var tmp1168 = new currentLanguage_args();
          if(__isset.p)
          {
            tmp1168.P = this.P;
          }
          tmp1168.__isset.p = this.__isset.p;
          return tmp1168;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1169 = new TStruct("currentLanguage_args");
            await oprot.WriteStructBeginAsync(tmp1169, cancellationToken);
            var tmp1170 = new TField();
            if(__isset.p)
            {
              tmp1170.Name = "p";
              tmp1170.Type = TType.I64;
              tmp1170.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1170, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1171 = new StringBuilder("currentLanguage_args(");
          int tmp1172 = 0;
          if(__isset.p)
          {
            if(0 < tmp1172++) { tmp1171.Append(", "); }
            tmp1171.Append("P: ");
            P.ToString(tmp1171);
          }
          tmp1171.Append(')');
          return tmp1171.ToString();
        }
      }


      public partial class currentLanguage_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLanguage_result()
        {
        }

        public currentLanguage_result DeepCopy()
        {
          var tmp1173 = new currentLanguage_result();
          if((Success != null) && __isset.success)
          {
            tmp1173.Success = this.Success;
          }
          tmp1173.__isset.success = this.__isset.success;
          return tmp1173;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1174 = new TStruct("currentLanguage_result");
            await oprot.WriteStructBeginAsync(tmp1174, cancellationToken);
            var tmp1175 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1175.Name = "Success";
                tmp1175.Type = TType.String;
                tmp1175.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLanguage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1176 = new StringBuilder("currentLanguage_result(");
          int tmp1177 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1177++) { tmp1176.Append(", "); }
            tmp1176.Append("Success: ");
            Success.ToString(tmp1176);
          }
          tmp1176.Append(')');
          return tmp1176.ToString();
        }
      }


      public partial class currentLocale_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentLocale_args()
        {
        }

        public currentLocale_args DeepCopy()
        {
          var tmp1178 = new currentLocale_args();
          if(__isset.p)
          {
            tmp1178.P = this.P;
          }
          tmp1178.__isset.p = this.__isset.p;
          return tmp1178;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1179 = new TStruct("currentLocale_args");
            await oprot.WriteStructBeginAsync(tmp1179, cancellationToken);
            var tmp1180 = new TField();
            if(__isset.p)
            {
              tmp1180.Name = "p";
              tmp1180.Type = TType.I64;
              tmp1180.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1180, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1181 = new StringBuilder("currentLocale_args(");
          int tmp1182 = 0;
          if(__isset.p)
          {
            if(0 < tmp1182++) { tmp1181.Append(", "); }
            tmp1181.Append("P: ");
            P.ToString(tmp1181);
          }
          tmp1181.Append(')');
          return tmp1181.ToString();
        }
      }


      public partial class currentLocale_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentLocale_result()
        {
        }

        public currentLocale_result DeepCopy()
        {
          var tmp1183 = new currentLocale_result();
          if((Success != null) && __isset.success)
          {
            tmp1183.Success = this.Success;
          }
          tmp1183.__isset.success = this.__isset.success;
          return tmp1183;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1184 = new TStruct("currentLocale_result");
            await oprot.WriteStructBeginAsync(tmp1184, cancellationToken);
            var tmp1185 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1185.Name = "Success";
                tmp1185.Type = TType.String;
                tmp1185.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1185, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentLocale_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1186 = new StringBuilder("currentLocale_result(");
          int tmp1187 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1187++) { tmp1186.Append(", "); }
            tmp1186.Append("Success: ");
            Success.ToString(tmp1186);
          }
          tmp1186.Append(')');
          return tmp1186.ToString();
        }
      }


      public partial class currentScreenName_args : TBase
      {
        private long _p;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
        }

        public currentScreenName_args()
        {
        }

        public currentScreenName_args DeepCopy()
        {
          var tmp1188 = new currentScreenName_args();
          if(__isset.p)
          {
            tmp1188.P = this.P;
          }
          tmp1188.__isset.p = this.__isset.p;
          return tmp1188;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1189 = new TStruct("currentScreenName_args");
            await oprot.WriteStructBeginAsync(tmp1189, cancellationToken);
            var tmp1190 = new TField();
            if(__isset.p)
            {
              tmp1190.Name = "p";
              tmp1190.Type = TType.I64;
              tmp1190.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1190, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1191 = new StringBuilder("currentScreenName_args(");
          int tmp1192 = 0;
          if(__isset.p)
          {
            if(0 < tmp1192++) { tmp1191.Append(", "); }
            tmp1191.Append("P: ");
            P.ToString(tmp1191);
          }
          tmp1191.Append(')');
          return tmp1191.ToString();
        }
      }


      public partial class currentScreenName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public currentScreenName_result()
        {
        }

        public currentScreenName_result DeepCopy()
        {
          var tmp1193 = new currentScreenName_result();
          if((Success != null) && __isset.success)
          {
            tmp1193.Success = this.Success;
          }
          tmp1193.__isset.success = this.__isset.success;
          return tmp1193;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1194 = new TStruct("currentScreenName_result");
            await oprot.WriteStructBeginAsync(tmp1194, cancellationToken);
            var tmp1195 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1195.Name = "Success";
                tmp1195.Type = TType.String;
                tmp1195.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1195, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is currentScreenName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1196 = new StringBuilder("currentScreenName_result(");
          int tmp1197 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1197++) { tmp1196.Append(", "); }
            tmp1196.Append("Success: ");
            Success.ToString(tmp1196);
          }
          tmp1196.Append(')');
          return tmp1196.ToString();
        }
      }


      public partial class registerYML_args : TBase
      {
        private long _p;
        private string _ymlSource;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string YmlSource
        {
          get
          {
            return _ymlSource;
          }
          set
          {
            __isset.ymlSource = true;
            this._ymlSource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool ymlSource;
        }

        public registerYML_args()
        {
        }

        public registerYML_args DeepCopy()
        {
          var tmp1198 = new registerYML_args();
          if(__isset.p)
          {
            tmp1198.P = this.P;
          }
          tmp1198.__isset.p = this.__isset.p;
          if((YmlSource != null) && __isset.ymlSource)
          {
            tmp1198.YmlSource = this.YmlSource;
          }
          tmp1198.__isset.ymlSource = this.__isset.ymlSource;
          return tmp1198;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    YmlSource = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1199 = new TStruct("registerYML_args");
            await oprot.WriteStructBeginAsync(tmp1199, cancellationToken);
            var tmp1200 = new TField();
            if(__isset.p)
            {
              tmp1200.Name = "p";
              tmp1200.Type = TType.I64;
              tmp1200.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1200, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              tmp1200.Name = "ymlSource";
              tmp1200.Type = TType.String;
              tmp1200.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1200, cancellationToken);
              await oprot.WriteStringAsync(YmlSource, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.ymlSource == other.__isset.ymlSource) && ((!__isset.ymlSource) || (global::System.Object.Equals(YmlSource, other.YmlSource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((YmlSource != null) && __isset.ymlSource)
            {
              hashcode = (hashcode * 397) + YmlSource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1201 = new StringBuilder("registerYML_args(");
          int tmp1202 = 0;
          if(__isset.p)
          {
            if(0 < tmp1202++) { tmp1201.Append(", "); }
            tmp1201.Append("P: ");
            P.ToString(tmp1201);
          }
          if((YmlSource != null) && __isset.ymlSource)
          {
            if(0 < tmp1202++) { tmp1201.Append(", "); }
            tmp1201.Append("YmlSource: ");
            YmlSource.ToString(tmp1201);
          }
          tmp1201.Append(')');
          return tmp1201.ToString();
        }
      }


      public partial class registerYML_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public registerYML_result()
        {
        }

        public registerYML_result DeepCopy()
        {
          var tmp1203 = new registerYML_result();
          if((Success != null) && __isset.success)
          {
            tmp1203.Success = this.Success.DeepCopy();
          }
          tmp1203.__isset.success = this.__isset.success;
          return tmp1203;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1204 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list1204.Count);
                      for(int _i1205 = 0; _i1205 < _list1204.Count; ++_i1205)
                      {
                        string _elem1206;
                        _elem1206 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem1206);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1207 = new TStruct("registerYML_result");
            await oprot.WriteStructBeginAsync(tmp1207, cancellationToken);
            var tmp1208 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1208.Name = "Success";
                tmp1208.Type = TType.List;
                tmp1208.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter1209 in Success)
                {
                  await oprot.WriteStringAsync(_iter1209, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerYML_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1210 = new StringBuilder("registerYML_result(");
          int tmp1211 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1211++) { tmp1210.Append(", "); }
            tmp1210.Append("Success: ");
            Success.ToString(tmp1210);
          }
          tmp1210.Append(')');
          return tmp1210.ToString();
        }
      }


      public partial class registerImageFile_args : TBase
      {
        private long _p;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageFileName;
        }

        public registerImageFile_args()
        {
        }

        public registerImageFile_args DeepCopy()
        {
          var tmp1212 = new registerImageFile_args();
          if(__isset.p)
          {
            tmp1212.P = this.P;
          }
          tmp1212.__isset.p = this.__isset.p;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1212.ImageFileName = this.ImageFileName;
          }
          tmp1212.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1212;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1213 = new TStruct("registerImageFile_args");
            await oprot.WriteStructBeginAsync(tmp1213, cancellationToken);
            var tmp1214 = new TField();
            if(__isset.p)
            {
              tmp1214.Name = "p";
              tmp1214.Type = TType.I64;
              tmp1214.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1214, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1214.Name = "imageFileName";
              tmp1214.Type = TType.String;
              tmp1214.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1214, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1215 = new StringBuilder("registerImageFile_args(");
          int tmp1216 = 0;
          if(__isset.p)
          {
            if(0 < tmp1216++) { tmp1215.Append(", "); }
            tmp1215.Append("P: ");
            P.ToString(tmp1215);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1216++) { tmp1215.Append(", "); }
            tmp1215.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1215);
          }
          tmp1215.Append(')');
          return tmp1215.ToString();
        }
      }


      public partial class registerImageFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageFile_result()
        {
        }

        public registerImageFile_result DeepCopy()
        {
          var tmp1217 = new registerImageFile_result();
          if((E != null) && __isset.e)
          {
            tmp1217.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1217.__isset.e = this.__isset.e;
          return tmp1217;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1218 = new TStruct("registerImageFile_result");
            await oprot.WriteStructBeginAsync(tmp1218, cancellationToken);
            var tmp1219 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1219.Name = "E";
                tmp1219.Type = TType.Struct;
                tmp1219.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1219, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1220 = new StringBuilder("registerImageFile_result(");
          int tmp1221 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1221++) { tmp1220.Append(", "); }
            tmp1220.Append("E: ");
            E.ToString(tmp1220);
          }
          tmp1220.Append(')');
          return tmp1220.ToString();
        }
      }


      public partial class registerImageData_args : TBase
      {
        private long _p;
        private byte[] _imageData;
        private string _imageName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] ImageData
        {
          get
          {
            return _imageData;
          }
          set
          {
            __isset.imageData = true;
            this._imageData = value;
          }
        }

        public string ImageName
        {
          get
          {
            return _imageName;
          }
          set
          {
            __isset.imageName = true;
            this._imageName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool imageData;
          public bool imageName;
        }

        public registerImageData_args()
        {
        }

        public registerImageData_args DeepCopy()
        {
          var tmp1222 = new registerImageData_args();
          if(__isset.p)
          {
            tmp1222.P = this.P;
          }
          tmp1222.__isset.p = this.__isset.p;
          if((ImageData != null) && __isset.imageData)
          {
            tmp1222.ImageData = this.ImageData.ToArray();
          }
          tmp1222.__isset.imageData = this.__isset.imageData;
          if((ImageName != null) && __isset.imageName)
          {
            tmp1222.ImageName = this.ImageName;
          }
          tmp1222.__isset.imageName = this.__isset.imageName;
          return tmp1222;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ImageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1223 = new TStruct("registerImageData_args");
            await oprot.WriteStructBeginAsync(tmp1223, cancellationToken);
            var tmp1224 = new TField();
            if(__isset.p)
            {
              tmp1224.Name = "p";
              tmp1224.Type = TType.I64;
              tmp1224.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageData != null) && __isset.imageData)
            {
              tmp1224.Name = "imageData";
              tmp1224.Type = TType.String;
              tmp1224.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteBinaryAsync(ImageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageName != null) && __isset.imageName)
            {
              tmp1224.Name = "imageName";
              tmp1224.Type = TType.String;
              tmp1224.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1224, cancellationToken);
              await oprot.WriteStringAsync(ImageName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.imageData == other.__isset.imageData) && ((!__isset.imageData) || (TCollections.Equals(ImageData, other.ImageData))))
            && ((__isset.imageName == other.__isset.imageName) && ((!__isset.imageName) || (global::System.Object.Equals(ImageName, other.ImageName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ImageData != null) && __isset.imageData)
            {
              hashcode = (hashcode * 397) + ImageData.GetHashCode();
            }
            if((ImageName != null) && __isset.imageName)
            {
              hashcode = (hashcode * 397) + ImageName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1225 = new StringBuilder("registerImageData_args(");
          int tmp1226 = 0;
          if(__isset.p)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("P: ");
            P.ToString(tmp1225);
          }
          if((ImageData != null) && __isset.imageData)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("ImageData: ");
            ImageData.ToString(tmp1225);
          }
          if((ImageName != null) && __isset.imageName)
          {
            if(0 < tmp1226++) { tmp1225.Append(", "); }
            tmp1225.Append("ImageName: ");
            ImageName.ToString(tmp1225);
          }
          tmp1225.Append(')');
          return tmp1225.ToString();
        }
      }


      public partial class registerImageData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerImageData_result()
        {
        }

        public registerImageData_result DeepCopy()
        {
          var tmp1227 = new registerImageData_result();
          if((E != null) && __isset.e)
          {
            tmp1227.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1227.__isset.e = this.__isset.e;
          return tmp1227;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1228 = new TStruct("registerImageData_result");
            await oprot.WriteStructBeginAsync(tmp1228, cancellationToken);
            var tmp1229 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1229.Name = "E";
                tmp1229.Type = TType.Struct;
                tmp1229.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1229, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1230 = new StringBuilder("registerImageData_result(");
          int tmp1231 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1231++) { tmp1230.Append(", "); }
            tmp1230.Append("E: ");
            E.ToString(tmp1230);
          }
          tmp1230.Append(')');
          return tmp1230.ToString();
        }
      }


      public partial class registerHTMLFile_args : TBase
      {
        private long _p;
        private string _htmlFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string HtmlFileName
        {
          get
          {
            return _htmlFileName;
          }
          set
          {
            __isset.htmlFileName = true;
            this._htmlFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlFileName;
        }

        public registerHTMLFile_args()
        {
        }

        public registerHTMLFile_args DeepCopy()
        {
          var tmp1232 = new registerHTMLFile_args();
          if(__isset.p)
          {
            tmp1232.P = this.P;
          }
          tmp1232.__isset.p = this.__isset.p;
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            tmp1232.HtmlFileName = this.HtmlFileName;
          }
          tmp1232.__isset.htmlFileName = this.__isset.htmlFileName;
          return tmp1232;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1233 = new TStruct("registerHTMLFile_args");
            await oprot.WriteStructBeginAsync(tmp1233, cancellationToken);
            var tmp1234 = new TField();
            if(__isset.p)
            {
              tmp1234.Name = "p";
              tmp1234.Type = TType.I64;
              tmp1234.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1234, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              tmp1234.Name = "htmlFileName";
              tmp1234.Type = TType.String;
              tmp1234.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1234, cancellationToken);
              await oprot.WriteStringAsync(HtmlFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlFileName == other.__isset.htmlFileName) && ((!__isset.htmlFileName) || (global::System.Object.Equals(HtmlFileName, other.HtmlFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlFileName != null) && __isset.htmlFileName)
            {
              hashcode = (hashcode * 397) + HtmlFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1235 = new StringBuilder("registerHTMLFile_args(");
          int tmp1236 = 0;
          if(__isset.p)
          {
            if(0 < tmp1236++) { tmp1235.Append(", "); }
            tmp1235.Append("P: ");
            P.ToString(tmp1235);
          }
          if((HtmlFileName != null) && __isset.htmlFileName)
          {
            if(0 < tmp1236++) { tmp1235.Append(", "); }
            tmp1235.Append("HtmlFileName: ");
            HtmlFileName.ToString(tmp1235);
          }
          tmp1235.Append(')');
          return tmp1235.ToString();
        }
      }


      public partial class registerHTMLFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLFile_result()
        {
        }

        public registerHTMLFile_result DeepCopy()
        {
          var tmp1237 = new registerHTMLFile_result();
          if((E != null) && __isset.e)
          {
            tmp1237.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1237.__isset.e = this.__isset.e;
          return tmp1237;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1238 = new TStruct("registerHTMLFile_result");
            await oprot.WriteStructBeginAsync(tmp1238, cancellationToken);
            var tmp1239 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1239.Name = "E";
                tmp1239.Type = TType.Struct;
                tmp1239.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1239, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1240 = new StringBuilder("registerHTMLFile_result(");
          int tmp1241 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1241++) { tmp1240.Append(", "); }
            tmp1240.Append("E: ");
            E.ToString(tmp1240);
          }
          tmp1240.Append(')');
          return tmp1240.ToString();
        }
      }


      public partial class registerHTMLData_args : TBase
      {
        private long _p;
        private byte[] _htmlData;
        private string _htmlName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public byte[] HtmlData
        {
          get
          {
            return _htmlData;
          }
          set
          {
            __isset.htmlData = true;
            this._htmlData = value;
          }
        }

        public string HtmlName
        {
          get
          {
            return _htmlName;
          }
          set
          {
            __isset.htmlName = true;
            this._htmlName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool htmlData;
          public bool htmlName;
        }

        public registerHTMLData_args()
        {
        }

        public registerHTMLData_args DeepCopy()
        {
          var tmp1242 = new registerHTMLData_args();
          if(__isset.p)
          {
            tmp1242.P = this.P;
          }
          tmp1242.__isset.p = this.__isset.p;
          if((HtmlData != null) && __isset.htmlData)
          {
            tmp1242.HtmlData = this.HtmlData.ToArray();
          }
          tmp1242.__isset.htmlData = this.__isset.htmlData;
          if((HtmlName != null) && __isset.htmlName)
          {
            tmp1242.HtmlName = this.HtmlName;
          }
          tmp1242.__isset.htmlName = this.__isset.htmlName;
          return tmp1242;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HtmlData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1243 = new TStruct("registerHTMLData_args");
            await oprot.WriteStructBeginAsync(tmp1243, cancellationToken);
            var tmp1244 = new TField();
            if(__isset.p)
            {
              tmp1244.Name = "p";
              tmp1244.Type = TType.I64;
              tmp1244.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              tmp1244.Name = "htmlData";
              tmp1244.Type = TType.String;
              tmp1244.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteBinaryAsync(HtmlData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              tmp1244.Name = "htmlName";
              tmp1244.Type = TType.String;
              tmp1244.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1244, cancellationToken);
              await oprot.WriteStringAsync(HtmlName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.htmlData == other.__isset.htmlData) && ((!__isset.htmlData) || (TCollections.Equals(HtmlData, other.HtmlData))))
            && ((__isset.htmlName == other.__isset.htmlName) && ((!__isset.htmlName) || (global::System.Object.Equals(HtmlName, other.HtmlName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((HtmlData != null) && __isset.htmlData)
            {
              hashcode = (hashcode * 397) + HtmlData.GetHashCode();
            }
            if((HtmlName != null) && __isset.htmlName)
            {
              hashcode = (hashcode * 397) + HtmlName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1245 = new StringBuilder("registerHTMLData_args(");
          int tmp1246 = 0;
          if(__isset.p)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("P: ");
            P.ToString(tmp1245);
          }
          if((HtmlData != null) && __isset.htmlData)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("HtmlData: ");
            HtmlData.ToString(tmp1245);
          }
          if((HtmlName != null) && __isset.htmlName)
          {
            if(0 < tmp1246++) { tmp1245.Append(", "); }
            tmp1245.Append("HtmlName: ");
            HtmlName.ToString(tmp1245);
          }
          tmp1245.Append(')');
          return tmp1245.ToString();
        }
      }


      public partial class registerHTMLData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerHTMLData_result()
        {
        }

        public registerHTMLData_result DeepCopy()
        {
          var tmp1247 = new registerHTMLData_result();
          if((E != null) && __isset.e)
          {
            tmp1247.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1247.__isset.e = this.__isset.e;
          return tmp1247;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1248 = new TStruct("registerHTMLData_result");
            await oprot.WriteStructBeginAsync(tmp1248, cancellationToken);
            var tmp1249 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1249.Name = "E";
                tmp1249.Type = TType.Struct;
                tmp1249.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1249, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerHTMLData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1250 = new StringBuilder("registerHTMLData_result(");
          int tmp1251 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1251++) { tmp1250.Append(", "); }
            tmp1250.Append("E: ");
            E.ToString(tmp1250);
          }
          tmp1250.Append(')');
          return tmp1250.ToString();
        }
      }


      public partial class registerTranslationFile_args : TBase
      {
        private long _p;
        private string _locale;
        private string _translationFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public string TranslationFileName
        {
          get
          {
            return _translationFileName;
          }
          set
          {
            __isset.translationFileName = true;
            this._translationFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationFileName;
        }

        public registerTranslationFile_args()
        {
        }

        public registerTranslationFile_args DeepCopy()
        {
          var tmp1252 = new registerTranslationFile_args();
          if(__isset.p)
          {
            tmp1252.P = this.P;
          }
          tmp1252.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1252.Locale = this.Locale;
          }
          tmp1252.__isset.locale = this.__isset.locale;
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            tmp1252.TranslationFileName = this.TranslationFileName;
          }
          tmp1252.__isset.translationFileName = this.__isset.translationFileName;
          return tmp1252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1253 = new TStruct("registerTranslationFile_args");
            await oprot.WriteStructBeginAsync(tmp1253, cancellationToken);
            var tmp1254 = new TField();
            if(__isset.p)
            {
              tmp1254.Name = "p";
              tmp1254.Type = TType.I64;
              tmp1254.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1254.Name = "locale";
              tmp1254.Type = TType.String;
              tmp1254.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              tmp1254.Name = "translationFileName";
              tmp1254.Type = TType.String;
              tmp1254.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1254, cancellationToken);
              await oprot.WriteStringAsync(TranslationFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationFileName == other.__isset.translationFileName) && ((!__isset.translationFileName) || (global::System.Object.Equals(TranslationFileName, other.TranslationFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationFileName != null) && __isset.translationFileName)
            {
              hashcode = (hashcode * 397) + TranslationFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1255 = new StringBuilder("registerTranslationFile_args(");
          int tmp1256 = 0;
          if(__isset.p)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("P: ");
            P.ToString(tmp1255);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("Locale: ");
            Locale.ToString(tmp1255);
          }
          if((TranslationFileName != null) && __isset.translationFileName)
          {
            if(0 < tmp1256++) { tmp1255.Append(", "); }
            tmp1255.Append("TranslationFileName: ");
            TranslationFileName.ToString(tmp1255);
          }
          tmp1255.Append(')');
          return tmp1255.ToString();
        }
      }


      public partial class registerTranslationFile_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationFile_result()
        {
        }

        public registerTranslationFile_result DeepCopy()
        {
          var tmp1257 = new registerTranslationFile_result();
          if((E != null) && __isset.e)
          {
            tmp1257.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1257.__isset.e = this.__isset.e;
          return tmp1257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1258 = new TStruct("registerTranslationFile_result");
            await oprot.WriteStructBeginAsync(tmp1258, cancellationToken);
            var tmp1259 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1259.Name = "E";
                tmp1259.Type = TType.Struct;
                tmp1259.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1259, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1260 = new StringBuilder("registerTranslationFile_result(");
          int tmp1261 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1261++) { tmp1260.Append(", "); }
            tmp1260.Append("E: ");
            E.ToString(tmp1260);
          }
          tmp1260.Append(')');
          return tmp1260.ToString();
        }
      }


      public partial class registerTranslationData_args : TBase
      {
        private long _p;
        private string _locale;
        private byte[] _translationData;
        private string _translationName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }

        public byte[] TranslationData
        {
          get
          {
            return _translationData;
          }
          set
          {
            __isset.translationData = true;
            this._translationData = value;
          }
        }

        public string TranslationName
        {
          get
          {
            return _translationName;
          }
          set
          {
            __isset.translationName = true;
            this._translationName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool locale;
          public bool translationData;
          public bool translationName;
        }

        public registerTranslationData_args()
        {
        }

        public registerTranslationData_args DeepCopy()
        {
          var tmp1262 = new registerTranslationData_args();
          if(__isset.p)
          {
            tmp1262.P = this.P;
          }
          tmp1262.__isset.p = this.__isset.p;
          if((Locale != null) && __isset.locale)
          {
            tmp1262.Locale = this.Locale;
          }
          tmp1262.__isset.locale = this.__isset.locale;
          if((TranslationData != null) && __isset.translationData)
          {
            tmp1262.TranslationData = this.TranslationData.ToArray();
          }
          tmp1262.__isset.translationData = this.__isset.translationData;
          if((TranslationName != null) && __isset.translationName)
          {
            tmp1262.TranslationName = this.TranslationName;
          }
          tmp1262.__isset.translationName = this.__isset.translationName;
          return tmp1262;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    TranslationData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    TranslationName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1263 = new TStruct("registerTranslationData_args");
            await oprot.WriteStructBeginAsync(tmp1263, cancellationToken);
            var tmp1264 = new TField();
            if(__isset.p)
            {
              tmp1264.Name = "p";
              tmp1264.Type = TType.I64;
              tmp1264.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Locale != null) && __isset.locale)
            {
              tmp1264.Name = "locale";
              tmp1264.Type = TType.String;
              tmp1264.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationData != null) && __isset.translationData)
            {
              tmp1264.Name = "translationData";
              tmp1264.Type = TType.String;
              tmp1264.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteBinaryAsync(TranslationData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((TranslationName != null) && __isset.translationName)
            {
              tmp1264.Name = "translationName";
              tmp1264.Type = TType.String;
              tmp1264.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1264, cancellationToken);
              await oprot.WriteStringAsync(TranslationName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))))
            && ((__isset.translationData == other.__isset.translationData) && ((!__isset.translationData) || (TCollections.Equals(TranslationData, other.TranslationData))))
            && ((__isset.translationName == other.__isset.translationName) && ((!__isset.translationName) || (global::System.Object.Equals(TranslationName, other.TranslationName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
            if((TranslationData != null) && __isset.translationData)
            {
              hashcode = (hashcode * 397) + TranslationData.GetHashCode();
            }
            if((TranslationName != null) && __isset.translationName)
            {
              hashcode = (hashcode * 397) + TranslationName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1265 = new StringBuilder("registerTranslationData_args(");
          int tmp1266 = 0;
          if(__isset.p)
          {
            if(0 < tmp1266++) { tmp1265.Append(", "); }
            tmp1265.Append("P: ");
            P.ToString(tmp1265);
          }
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp1266++) { tmp1265.Append(", "); }
            tmp1265.Append("Locale: ");
            Locale.ToString(tmp1265);
          }
          if((TranslationData != null) && __isset.translationData)
          {
            if(0 < tmp1266++) { tmp1265.Append(", "); }
            tmp1265.Append("TranslationData: ");
            TranslationData.ToString(tmp1265);
          }
          if((TranslationName != null) && __isset.translationName)
          {
            if(0 < tmp1266++) { tmp1265.Append(", "); }
            tmp1265.Append("TranslationName: ");
            TranslationName.ToString(tmp1265);
          }
          tmp1265.Append(')');
          return tmp1265.ToString();
        }
      }


      public partial class registerTranslationData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerTranslationData_result()
        {
        }

        public registerTranslationData_result DeepCopy()
        {
          var tmp1267 = new registerTranslationData_result();
          if((E != null) && __isset.e)
          {
            tmp1267.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1267.__isset.e = this.__isset.e;
          return tmp1267;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1268 = new TStruct("registerTranslationData_result");
            await oprot.WriteStructBeginAsync(tmp1268, cancellationToken);
            var tmp1269 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1269.Name = "E";
                tmp1269.Type = TType.Struct;
                tmp1269.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1269, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerTranslationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1270 = new StringBuilder("registerTranslationData_result(");
          int tmp1271 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1271++) { tmp1270.Append(", "); }
            tmp1270.Append("E: ");
            E.ToString(tmp1270);
          }
          tmp1270.Append(')');
          return tmp1270.ToString();
        }
      }


      public partial class registerUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _itemType;
        private string _menuItemName;
        private string _windowTitle;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string MenuItemName
        {
          get
          {
            return _menuItemName;
          }
          set
          {
            __isset.menuItemName = true;
            this._menuItemName = value;
          }
        }

        public string WindowTitle
        {
          get
          {
            return _windowTitle;
          }
          set
          {
            __isset.windowTitle = true;
            this._windowTitle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool itemType;
          public bool menuItemName;
          public bool windowTitle;
        }

        public registerUtilityWindow_args()
        {
        }

        public registerUtilityWindow_args DeepCopy()
        {
          var tmp1272 = new registerUtilityWindow_args();
          if(__isset.p)
          {
            tmp1272.P = this.P;
          }
          tmp1272.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1272.Identifier = this.Identifier;
          }
          tmp1272.__isset.identifier = this.__isset.identifier;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1272.ItemType = this.ItemType;
          }
          tmp1272.__isset.itemType = this.__isset.itemType;
          if((MenuItemName != null) && __isset.menuItemName)
          {
            tmp1272.MenuItemName = this.MenuItemName;
          }
          tmp1272.__isset.menuItemName = this.__isset.menuItemName;
          if((WindowTitle != null) && __isset.windowTitle)
          {
            tmp1272.WindowTitle = this.WindowTitle;
          }
          tmp1272.__isset.windowTitle = this.__isset.windowTitle;
          return tmp1272;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    MenuItemName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    WindowTitle = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1273 = new TStruct("registerUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1273, cancellationToken);
            var tmp1274 = new TField();
            if(__isset.p)
            {
              tmp1274.Name = "p";
              tmp1274.Type = TType.I64;
              tmp1274.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1274, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1274.Name = "identifier";
              tmp1274.Type = TType.String;
              tmp1274.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1274, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1274.Name = "itemType";
              tmp1274.Type = TType.String;
              tmp1274.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1274, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              tmp1274.Name = "menuItemName";
              tmp1274.Type = TType.String;
              tmp1274.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1274, cancellationToken);
              await oprot.WriteStringAsync(MenuItemName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              tmp1274.Name = "windowTitle";
              tmp1274.Type = TType.String;
              tmp1274.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1274, cancellationToken);
              await oprot.WriteStringAsync(WindowTitle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.menuItemName == other.__isset.menuItemName) && ((!__isset.menuItemName) || (global::System.Object.Equals(MenuItemName, other.MenuItemName))))
            && ((__isset.windowTitle == other.__isset.windowTitle) && ((!__isset.windowTitle) || (global::System.Object.Equals(WindowTitle, other.WindowTitle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((MenuItemName != null) && __isset.menuItemName)
            {
              hashcode = (hashcode * 397) + MenuItemName.GetHashCode();
            }
            if((WindowTitle != null) && __isset.windowTitle)
            {
              hashcode = (hashcode * 397) + WindowTitle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1275 = new StringBuilder("registerUtilityWindow_args(");
          int tmp1276 = 0;
          if(__isset.p)
          {
            if(0 < tmp1276++) { tmp1275.Append(", "); }
            tmp1275.Append("P: ");
            P.ToString(tmp1275);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1276++) { tmp1275.Append(", "); }
            tmp1275.Append("Identifier: ");
            Identifier.ToString(tmp1275);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1276++) { tmp1275.Append(", "); }
            tmp1275.Append("ItemType: ");
            ItemType.ToString(tmp1275);
          }
          if((MenuItemName != null) && __isset.menuItemName)
          {
            if(0 < tmp1276++) { tmp1275.Append(", "); }
            tmp1275.Append("MenuItemName: ");
            MenuItemName.ToString(tmp1275);
          }
          if((WindowTitle != null) && __isset.windowTitle)
          {
            if(0 < tmp1276++) { tmp1275.Append(", "); }
            tmp1275.Append("WindowTitle: ");
            WindowTitle.ToString(tmp1275);
          }
          tmp1275.Append(')');
          return tmp1275.ToString();
        }
      }


      public partial class registerUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerUtilityWindow_result()
        {
        }

        public registerUtilityWindow_result DeepCopy()
        {
          var tmp1277 = new registerUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1277.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1277.__isset.e = this.__isset.e;
          return tmp1277;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1278 = new TStruct("registerUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1278, cancellationToken);
            var tmp1279 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1279.Name = "E";
                tmp1279.Type = TType.Struct;
                tmp1279.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1279, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1280 = new StringBuilder("registerUtilityWindow_result(");
          int tmp1281 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1281++) { tmp1280.Append(", "); }
            tmp1280.Append("E: ");
            E.ToString(tmp1280);
          }
          tmp1280.Append(')');
          return tmp1280.ToString();
        }
      }


      public partial class unregisterUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterUtilityWindow_args()
        {
        }

        public unregisterUtilityWindow_args DeepCopy()
        {
          var tmp1282 = new unregisterUtilityWindow_args();
          if(__isset.p)
          {
            tmp1282.P = this.P;
          }
          tmp1282.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1282.Identifier = this.Identifier;
          }
          tmp1282.__isset.identifier = this.__isset.identifier;
          return tmp1282;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1283 = new TStruct("unregisterUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1283, cancellationToken);
            var tmp1284 = new TField();
            if(__isset.p)
            {
              tmp1284.Name = "p";
              tmp1284.Type = TType.I64;
              tmp1284.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1284, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1284.Name = "identifier";
              tmp1284.Type = TType.String;
              tmp1284.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1284, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1285 = new StringBuilder("unregisterUtilityWindow_args(");
          int tmp1286 = 0;
          if(__isset.p)
          {
            if(0 < tmp1286++) { tmp1285.Append(", "); }
            tmp1285.Append("P: ");
            P.ToString(tmp1285);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1286++) { tmp1285.Append(", "); }
            tmp1285.Append("Identifier: ");
            Identifier.ToString(tmp1285);
          }
          tmp1285.Append(')');
          return tmp1285.ToString();
        }
      }


      public partial class unregisterUtilityWindow_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterUtilityWindow_result()
        {
        }

        public unregisterUtilityWindow_result DeepCopy()
        {
          var tmp1287 = new unregisterUtilityWindow_result();
          if((E != null) && __isset.e)
          {
            tmp1287.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1287.__isset.e = this.__isset.e;
          return tmp1287;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1288 = new TStruct("unregisterUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1288, cancellationToken);
            var tmp1289 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1289.Name = "E";
                tmp1289.Type = TType.Struct;
                tmp1289.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1289, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1290 = new StringBuilder("unregisterUtilityWindow_result(");
          int tmp1291 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1291++) { tmp1290.Append(", "); }
            tmp1290.Append("E: ");
            E.ToString(tmp1290);
          }
          tmp1290.Append(')');
          return tmp1290.ToString();
        }
      }


      public partial class openUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public openUtilityWindow_args()
        {
        }

        public openUtilityWindow_args DeepCopy()
        {
          var tmp1292 = new openUtilityWindow_args();
          if(__isset.p)
          {
            tmp1292.P = this.P;
          }
          tmp1292.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1292.Identifier = this.Identifier;
          }
          tmp1292.__isset.identifier = this.__isset.identifier;
          return tmp1292;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1293 = new TStruct("openUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1293, cancellationToken);
            var tmp1294 = new TField();
            if(__isset.p)
            {
              tmp1294.Name = "p";
              tmp1294.Type = TType.I64;
              tmp1294.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1294, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1294.Name = "identifier";
              tmp1294.Type = TType.String;
              tmp1294.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1294, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1295 = new StringBuilder("openUtilityWindow_args(");
          int tmp1296 = 0;
          if(__isset.p)
          {
            if(0 < tmp1296++) { tmp1295.Append(", "); }
            tmp1295.Append("P: ");
            P.ToString(tmp1295);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1296++) { tmp1295.Append(", "); }
            tmp1295.Append("Identifier: ");
            Identifier.ToString(tmp1295);
          }
          tmp1295.Append(')');
          return tmp1295.ToString();
        }
      }


      public partial class openUtilityWindow_result : TBase
      {

        public openUtilityWindow_result()
        {
        }

        public openUtilityWindow_result DeepCopy()
        {
          var tmp1297 = new openUtilityWindow_result();
          return tmp1297;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1298 = new TStruct("openUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1298, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1299 = new StringBuilder("openUtilityWindow_result(");
          tmp1299.Append(')');
          return tmp1299.ToString();
        }
      }


      public partial class closeUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public closeUtilityWindow_args()
        {
        }

        public closeUtilityWindow_args DeepCopy()
        {
          var tmp1301 = new closeUtilityWindow_args();
          if(__isset.p)
          {
            tmp1301.P = this.P;
          }
          tmp1301.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1301.Identifier = this.Identifier;
          }
          tmp1301.__isset.identifier = this.__isset.identifier;
          return tmp1301;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1302 = new TStruct("closeUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1302, cancellationToken);
            var tmp1303 = new TField();
            if(__isset.p)
            {
              tmp1303.Name = "p";
              tmp1303.Type = TType.I64;
              tmp1303.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1303, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1303.Name = "identifier";
              tmp1303.Type = TType.String;
              tmp1303.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1303, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1304 = new StringBuilder("closeUtilityWindow_args(");
          int tmp1305 = 0;
          if(__isset.p)
          {
            if(0 < tmp1305++) { tmp1304.Append(", "); }
            tmp1304.Append("P: ");
            P.ToString(tmp1304);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1305++) { tmp1304.Append(", "); }
            tmp1304.Append("Identifier: ");
            Identifier.ToString(tmp1304);
          }
          tmp1304.Append(')');
          return tmp1304.ToString();
        }
      }


      public partial class closeUtilityWindow_result : TBase
      {

        public closeUtilityWindow_result()
        {
        }

        public closeUtilityWindow_result DeepCopy()
        {
          var tmp1306 = new closeUtilityWindow_result();
          return tmp1306;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1307 = new TStruct("closeUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1307, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1308 = new StringBuilder("closeUtilityWindow_result(");
          tmp1308.Append(')');
          return tmp1308.ToString();
        }
      }


      public partial class collapseUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public collapseUtilityWindow_args()
        {
        }

        public collapseUtilityWindow_args DeepCopy()
        {
          var tmp1310 = new collapseUtilityWindow_args();
          if(__isset.p)
          {
            tmp1310.P = this.P;
          }
          tmp1310.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1310.Identifier = this.Identifier;
          }
          tmp1310.__isset.identifier = this.__isset.identifier;
          return tmp1310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1311 = new TStruct("collapseUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1311, cancellationToken);
            var tmp1312 = new TField();
            if(__isset.p)
            {
              tmp1312.Name = "p";
              tmp1312.Type = TType.I64;
              tmp1312.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1312, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1312.Name = "identifier";
              tmp1312.Type = TType.String;
              tmp1312.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1312, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1313 = new StringBuilder("collapseUtilityWindow_args(");
          int tmp1314 = 0;
          if(__isset.p)
          {
            if(0 < tmp1314++) { tmp1313.Append(", "); }
            tmp1313.Append("P: ");
            P.ToString(tmp1313);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1314++) { tmp1313.Append(", "); }
            tmp1313.Append("Identifier: ");
            Identifier.ToString(tmp1313);
          }
          tmp1313.Append(')');
          return tmp1313.ToString();
        }
      }


      public partial class collapseUtilityWindow_result : TBase
      {

        public collapseUtilityWindow_result()
        {
        }

        public collapseUtilityWindow_result DeepCopy()
        {
          var tmp1315 = new collapseUtilityWindow_result();
          return tmp1315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1316 = new TStruct("collapseUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1316, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is collapseUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1317 = new StringBuilder("collapseUtilityWindow_result(");
          tmp1317.Append(')');
          return tmp1317.ToString();
        }
      }


      public partial class expandUtilityWindow_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public expandUtilityWindow_args()
        {
        }

        public expandUtilityWindow_args DeepCopy()
        {
          var tmp1319 = new expandUtilityWindow_args();
          if(__isset.p)
          {
            tmp1319.P = this.P;
          }
          tmp1319.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1319.Identifier = this.Identifier;
          }
          tmp1319.__isset.identifier = this.__isset.identifier;
          return tmp1319;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1320 = new TStruct("expandUtilityWindow_args");
            await oprot.WriteStructBeginAsync(tmp1320, cancellationToken);
            var tmp1321 = new TField();
            if(__isset.p)
            {
              tmp1321.Name = "p";
              tmp1321.Type = TType.I64;
              tmp1321.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1321, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1321.Name = "identifier";
              tmp1321.Type = TType.String;
              tmp1321.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1321, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1322 = new StringBuilder("expandUtilityWindow_args(");
          int tmp1323 = 0;
          if(__isset.p)
          {
            if(0 < tmp1323++) { tmp1322.Append(", "); }
            tmp1322.Append("P: ");
            P.ToString(tmp1322);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1323++) { tmp1322.Append(", "); }
            tmp1322.Append("Identifier: ");
            Identifier.ToString(tmp1322);
          }
          tmp1322.Append(')');
          return tmp1322.ToString();
        }
      }


      public partial class expandUtilityWindow_result : TBase
      {

        public expandUtilityWindow_result()
        {
        }

        public expandUtilityWindow_result DeepCopy()
        {
          var tmp1324 = new expandUtilityWindow_result();
          return tmp1324;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1325 = new TStruct("expandUtilityWindow_result");
            await oprot.WriteStructBeginAsync(tmp1325, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expandUtilityWindow_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1326 = new StringBuilder("expandUtilityWindow_result(");
          tmp1326.Append(')');
          return tmp1326.ToString();
        }
      }


      public partial class registerIntegration_args : TBase
      {
        private long _p;
        private string _identifier;
        private global::Yaskawa.Ext.API.IntegrationPoint _integrationPoint;
        private string _itemType;
        private string _buttonLabel;
        private string _buttonImage;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.IntegrationPoint"/>
        /// </summary>
        public global::Yaskawa.Ext.API.IntegrationPoint IntegrationPoint
        {
          get
          {
            return _integrationPoint;
          }
          set
          {
            __isset.integrationPoint = true;
            this._integrationPoint = value;
          }
        }

        public string ItemType
        {
          get
          {
            return _itemType;
          }
          set
          {
            __isset.itemType = true;
            this._itemType = value;
          }
        }

        public string ButtonLabel
        {
          get
          {
            return _buttonLabel;
          }
          set
          {
            __isset.buttonLabel = true;
            this._buttonLabel = value;
          }
        }

        public string ButtonImage
        {
          get
          {
            return _buttonImage;
          }
          set
          {
            __isset.buttonImage = true;
            this._buttonImage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool integrationPoint;
          public bool itemType;
          public bool buttonLabel;
          public bool buttonImage;
        }

        public registerIntegration_args()
        {
        }

        public registerIntegration_args DeepCopy()
        {
          var tmp1328 = new registerIntegration_args();
          if(__isset.p)
          {
            tmp1328.P = this.P;
          }
          tmp1328.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1328.Identifier = this.Identifier;
          }
          tmp1328.__isset.identifier = this.__isset.identifier;
          if(__isset.integrationPoint)
          {
            tmp1328.IntegrationPoint = this.IntegrationPoint;
          }
          tmp1328.__isset.integrationPoint = this.__isset.integrationPoint;
          if((ItemType != null) && __isset.itemType)
          {
            tmp1328.ItemType = this.ItemType;
          }
          tmp1328.__isset.itemType = this.__isset.itemType;
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            tmp1328.ButtonLabel = this.ButtonLabel;
          }
          tmp1328.__isset.buttonLabel = this.__isset.buttonLabel;
          if((ButtonImage != null) && __isset.buttonImage)
          {
            tmp1328.ButtonImage = this.ButtonImage;
          }
          tmp1328.__isset.buttonImage = this.__isset.buttonImage;
          return tmp1328;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    IntegrationPoint = (global::Yaskawa.Ext.API.IntegrationPoint)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ItemType = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    ButtonLabel = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    ButtonImage = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1329 = new TStruct("registerIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1329, cancellationToken);
            var tmp1330 = new TField();
            if(__isset.p)
            {
              tmp1330.Name = "p";
              tmp1330.Type = TType.I64;
              tmp1330.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1330.Name = "identifier";
              tmp1330.Type = TType.String;
              tmp1330.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.integrationPoint)
            {
              tmp1330.Name = "integrationPoint";
              tmp1330.Type = TType.I32;
              tmp1330.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteI32Async((int)IntegrationPoint, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemType != null) && __isset.itemType)
            {
              tmp1330.Name = "itemType";
              tmp1330.Type = TType.String;
              tmp1330.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteStringAsync(ItemType, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              tmp1330.Name = "buttonLabel";
              tmp1330.Type = TType.String;
              tmp1330.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteStringAsync(ButtonLabel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              tmp1330.Name = "buttonImage";
              tmp1330.Type = TType.String;
              tmp1330.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
              await oprot.WriteStringAsync(ButtonImage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.integrationPoint == other.__isset.integrationPoint) && ((!__isset.integrationPoint) || (global::System.Object.Equals(IntegrationPoint, other.IntegrationPoint))))
            && ((__isset.itemType == other.__isset.itemType) && ((!__isset.itemType) || (global::System.Object.Equals(ItemType, other.ItemType))))
            && ((__isset.buttonLabel == other.__isset.buttonLabel) && ((!__isset.buttonLabel) || (global::System.Object.Equals(ButtonLabel, other.ButtonLabel))))
            && ((__isset.buttonImage == other.__isset.buttonImage) && ((!__isset.buttonImage) || (global::System.Object.Equals(ButtonImage, other.ButtonImage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if(__isset.integrationPoint)
            {
              hashcode = (hashcode * 397) + IntegrationPoint.GetHashCode();
            }
            if((ItemType != null) && __isset.itemType)
            {
              hashcode = (hashcode * 397) + ItemType.GetHashCode();
            }
            if((ButtonLabel != null) && __isset.buttonLabel)
            {
              hashcode = (hashcode * 397) + ButtonLabel.GetHashCode();
            }
            if((ButtonImage != null) && __isset.buttonImage)
            {
              hashcode = (hashcode * 397) + ButtonImage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1331 = new StringBuilder("registerIntegration_args(");
          int tmp1332 = 0;
          if(__isset.p)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("P: ");
            P.ToString(tmp1331);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("Identifier: ");
            Identifier.ToString(tmp1331);
          }
          if(__isset.integrationPoint)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("IntegrationPoint: ");
            IntegrationPoint.ToString(tmp1331);
          }
          if((ItemType != null) && __isset.itemType)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("ItemType: ");
            ItemType.ToString(tmp1331);
          }
          if((ButtonLabel != null) && __isset.buttonLabel)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("ButtonLabel: ");
            ButtonLabel.ToString(tmp1331);
          }
          if((ButtonImage != null) && __isset.buttonImage)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("ButtonImage: ");
            ButtonImage.ToString(tmp1331);
          }
          tmp1331.Append(')');
          return tmp1331.ToString();
        }
      }


      public partial class registerIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public registerIntegration_result()
        {
        }

        public registerIntegration_result DeepCopy()
        {
          var tmp1333 = new registerIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1333.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1333.__isset.e = this.__isset.e;
          return tmp1333;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1334 = new TStruct("registerIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1334, cancellationToken);
            var tmp1335 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1335.Name = "E";
                tmp1335.Type = TType.Struct;
                tmp1335.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1335, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1336 = new StringBuilder("registerIntegration_result(");
          int tmp1337 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1337++) { tmp1336.Append(", "); }
            tmp1336.Append("E: ");
            E.ToString(tmp1336);
          }
          tmp1336.Append(')');
          return tmp1336.ToString();
        }
      }


      public partial class unregisterIntegration_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public unregisterIntegration_args()
        {
        }

        public unregisterIntegration_args DeepCopy()
        {
          var tmp1338 = new unregisterIntegration_args();
          if(__isset.p)
          {
            tmp1338.P = this.P;
          }
          tmp1338.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1338.Identifier = this.Identifier;
          }
          tmp1338.__isset.identifier = this.__isset.identifier;
          return tmp1338;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1339 = new TStruct("unregisterIntegration_args");
            await oprot.WriteStructBeginAsync(tmp1339, cancellationToken);
            var tmp1340 = new TField();
            if(__isset.p)
            {
              tmp1340.Name = "p";
              tmp1340.Type = TType.I64;
              tmp1340.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1340.Name = "identifier";
              tmp1340.Type = TType.String;
              tmp1340.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1341 = new StringBuilder("unregisterIntegration_args(");
          int tmp1342 = 0;
          if(__isset.p)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("P: ");
            P.ToString(tmp1341);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("Identifier: ");
            Identifier.ToString(tmp1341);
          }
          tmp1341.Append(')');
          return tmp1341.ToString();
        }
      }


      public partial class unregisterIntegration_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterIntegration_result()
        {
        }

        public unregisterIntegration_result DeepCopy()
        {
          var tmp1343 = new unregisterIntegration_result();
          if((E != null) && __isset.e)
          {
            tmp1343.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1343.__isset.e = this.__isset.e;
          return tmp1343;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1344 = new TStruct("unregisterIntegration_result");
            await oprot.WriteStructBeginAsync(tmp1344, cancellationToken);
            var tmp1345 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1345.Name = "E";
                tmp1345.Type = TType.Struct;
                tmp1345.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1345, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterIntegration_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1346 = new StringBuilder("unregisterIntegration_result(");
          int tmp1347 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1347++) { tmp1346.Append(", "); }
            tmp1346.Append("E: ");
            E.ToString(tmp1346);
          }
          tmp1346.Append(')');
          return tmp1346.ToString();
        }
      }


      public partial class property_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
        }

        public property_args()
        {
        }

        public property_args DeepCopy()
        {
          var tmp1348 = new property_args();
          if(__isset.p)
          {
            tmp1348.P = this.P;
          }
          tmp1348.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1348.ItemID = this.ItemID;
          }
          tmp1348.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1348.Name = this.Name;
          }
          tmp1348.__isset.name = this.__isset.name;
          return tmp1348;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1349 = new TStruct("property_args");
            await oprot.WriteStructBeginAsync(tmp1349, cancellationToken);
            var tmp1350 = new TField();
            if(__isset.p)
            {
              tmp1350.Name = "p";
              tmp1350.Type = TType.I64;
              tmp1350.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1350.Name = "itemID";
              tmp1350.Type = TType.String;
              tmp1350.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1350.Name = "name";
              tmp1350.Type = TType.String;
              tmp1350.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1351 = new StringBuilder("property_args(");
          int tmp1352 = 0;
          if(__isset.p)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("P: ");
            P.ToString(tmp1351);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("ItemID: ");
            ItemID.ToString(tmp1351);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("Name: ");
            Name.ToString(tmp1351);
          }
          tmp1351.Append(')');
          return tmp1351.ToString();
        }
      }


      public partial class property_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public property_result()
        {
        }

        public property_result DeepCopy()
        {
          var tmp1353 = new property_result();
          if((Success != null) && __isset.success)
          {
            tmp1353.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1353.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1353.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1353.__isset.e = this.__isset.e;
          return tmp1353;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1354 = new TStruct("property_result");
            await oprot.WriteStructBeginAsync(tmp1354, cancellationToken);
            var tmp1355 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1355.Name = "Success";
                tmp1355.Type = TType.Struct;
                tmp1355.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1355, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1355.Name = "E";
                tmp1355.Type = TType.Struct;
                tmp1355.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1355, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is property_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1356 = new StringBuilder("property_result(");
          int tmp1357 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1357++) { tmp1356.Append(", "); }
            tmp1356.Append("Success: ");
            Success.ToString(tmp1356);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1357++) { tmp1356.Append(", "); }
            tmp1356.Append("E: ");
            E.ToString(tmp1356);
          }
          tmp1356.Append(')');
          return tmp1356.ToString();
        }
      }


      public partial class setProperty_args : TBase
      {
        private long _p;
        private string _itemID;
        private string _name;
        private global::Yaskawa.Ext.API.Any _value;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ItemID
        {
          get
          {
            return _itemID;
          }
          set
          {
            __isset.itemID = true;
            this._itemID = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool itemID;
          public bool name;
          public bool @value;
        }

        public setProperty_args()
        {
        }

        public setProperty_args DeepCopy()
        {
          var tmp1358 = new setProperty_args();
          if(__isset.p)
          {
            tmp1358.P = this.P;
          }
          tmp1358.__isset.p = this.__isset.p;
          if((ItemID != null) && __isset.itemID)
          {
            tmp1358.ItemID = this.ItemID;
          }
          tmp1358.__isset.itemID = this.__isset.itemID;
          if((Name != null) && __isset.name)
          {
            tmp1358.Name = this.Name;
          }
          tmp1358.__isset.name = this.__isset.name;
          if((Value != null) && __isset.@value)
          {
            tmp1358.Value = (global::Yaskawa.Ext.API.Any)this.Value.DeepCopy();
          }
          tmp1358.__isset.@value = this.__isset.@value;
          return tmp1358;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ItemID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::Yaskawa.Ext.API.Any();
                    await Value.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1359 = new TStruct("setProperty_args");
            await oprot.WriteStructBeginAsync(tmp1359, cancellationToken);
            var tmp1360 = new TField();
            if(__isset.p)
            {
              tmp1360.Name = "p";
              tmp1360.Type = TType.I64;
              tmp1360.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ItemID != null) && __isset.itemID)
            {
              tmp1360.Name = "itemID";
              tmp1360.Type = TType.String;
              tmp1360.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteStringAsync(ItemID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp1360.Name = "name";
              tmp1360.Type = TType.String;
              tmp1360.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1360.Name = "value";
              tmp1360.Type = TType.Struct;
              tmp1360.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1360, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.itemID == other.__isset.itemID) && ((!__isset.itemID) || (global::System.Object.Equals(ItemID, other.ItemID))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ItemID != null) && __isset.itemID)
            {
              hashcode = (hashcode * 397) + ItemID.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1361 = new StringBuilder("setProperty_args(");
          int tmp1362 = 0;
          if(__isset.p)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("P: ");
            P.ToString(tmp1361);
          }
          if((ItemID != null) && __isset.itemID)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("ItemID: ");
            ItemID.ToString(tmp1361);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("Name: ");
            Name.ToString(tmp1361);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1362++) { tmp1361.Append(", "); }
            tmp1361.Append("Value: ");
            Value.ToString(tmp1361);
          }
          tmp1361.Append(')');
          return tmp1361.ToString();
        }
      }


      public partial class setProperty_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setProperty_result()
        {
        }

        public setProperty_result DeepCopy()
        {
          var tmp1363 = new setProperty_result();
          if((E != null) && __isset.e)
          {
            tmp1363.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1363.__isset.e = this.__isset.e;
          return tmp1363;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1364 = new TStruct("setProperty_result");
            await oprot.WriteStructBeginAsync(tmp1364, cancellationToken);
            var tmp1365 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1365.Name = "E";
                tmp1365.Type = TType.Struct;
                tmp1365.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1365, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperty_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1366 = new StringBuilder("setProperty_result(");
          int tmp1367 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1367++) { tmp1366.Append(", "); }
            tmp1366.Append("E: ");
            E.ToString(tmp1366);
          }
          tmp1366.Append(')');
          return tmp1366.ToString();
        }
      }


      public partial class setProperties_args : TBase
      {
        private long _p;
        private List<global::Yaskawa.Ext.API.PropValues> _propValuesList;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public List<global::Yaskawa.Ext.API.PropValues> PropValuesList
        {
          get
          {
            return _propValuesList;
          }
          set
          {
            __isset.propValuesList = true;
            this._propValuesList = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool propValuesList;
        }

        public setProperties_args()
        {
        }

        public setProperties_args DeepCopy()
        {
          var tmp1368 = new setProperties_args();
          if(__isset.p)
          {
            tmp1368.P = this.P;
          }
          tmp1368.__isset.p = this.__isset.p;
          if((PropValuesList != null) && __isset.propValuesList)
          {
            tmp1368.PropValuesList = this.PropValuesList.DeepCopy();
          }
          tmp1368.__isset.propValuesList = this.__isset.propValuesList;
          return tmp1368;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1369 = await iprot.ReadListBeginAsync(cancellationToken);
                      PropValuesList = new List<global::Yaskawa.Ext.API.PropValues>(_list1369.Count);
                      for(int _i1370 = 0; _i1370 < _list1369.Count; ++_i1370)
                      {
                        global::Yaskawa.Ext.API.PropValues _elem1371;
                        _elem1371 = new global::Yaskawa.Ext.API.PropValues();
                        await _elem1371.ReadAsync(iprot, cancellationToken);
                        PropValuesList.Add(_elem1371);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1372 = new TStruct("setProperties_args");
            await oprot.WriteStructBeginAsync(tmp1372, cancellationToken);
            var tmp1373 = new TField();
            if(__isset.p)
            {
              tmp1373.Name = "p";
              tmp1373.Type = TType.I64;
              tmp1373.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1373, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              tmp1373.Name = "propValuesList";
              tmp1373.Type = TType.List;
              tmp1373.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1373, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, PropValuesList.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.PropValues _iter1374 in PropValuesList)
              {
                await _iter1374.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setProperties_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.propValuesList == other.__isset.propValuesList) && ((!__isset.propValuesList) || (TCollections.Equals(PropValuesList, other.PropValuesList))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((PropValuesList != null) && __isset.propValuesList)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(PropValuesList);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1375 = new StringBuilder("setProperties_args(");
          int tmp1376 = 0;
          if(__isset.p)
          {
            if(0 < tmp1376++) { tmp1375.Append(", "); }
            tmp1375.Append("P: ");
            P.ToString(tmp1375);
          }
          if((PropValuesList != null) && __isset.propValuesList)
          {
            if(0 < tmp1376++) { tmp1375.Append(", "); }
            tmp1375.Append("PropValuesList: ");
            PropValuesList.ToString(tmp1375);
          }
          tmp1375.Append(')');
          return tmp1375.ToString();
        }
      }


      public partial class setChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;
        private global::Yaskawa.Ext.API.Any _config;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public global::Yaskawa.Ext.API.Any Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool config;
        }

        public setChartConfig_args()
        {
        }

        public setChartConfig_args DeepCopy()
        {
          var tmp1377 = new setChartConfig_args();
          if(__isset.p)
          {
            tmp1377.P = this.P;
          }
          tmp1377.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1377.ChartID = this.ChartID;
          }
          tmp1377.__isset.chartID = this.__isset.chartID;
          if((Config != null) && __isset.config)
          {
            tmp1377.Config = (global::Yaskawa.Ext.API.Any)this.Config.DeepCopy();
          }
          tmp1377.__isset.config = this.__isset.config;
          return tmp1377;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::Yaskawa.Ext.API.Any();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1378 = new TStruct("setChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1378, cancellationToken);
            var tmp1379 = new TField();
            if(__isset.p)
            {
              tmp1379.Name = "p";
              tmp1379.Type = TType.I64;
              tmp1379.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1379, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1379.Name = "chartID";
              tmp1379.Type = TType.String;
              tmp1379.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1379, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1379.Name = "config";
              tmp1379.Type = TType.Struct;
              tmp1379.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1379, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1380 = new StringBuilder("setChartConfig_args(");
          int tmp1381 = 0;
          if(__isset.p)
          {
            if(0 < tmp1381++) { tmp1380.Append(", "); }
            tmp1380.Append("P: ");
            P.ToString(tmp1380);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1381++) { tmp1380.Append(", "); }
            tmp1380.Append("ChartID: ");
            ChartID.ToString(tmp1380);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1381++) { tmp1380.Append(", "); }
            tmp1380.Append("Config: ");
            Config.ToString(tmp1380);
          }
          tmp1380.Append(')');
          return tmp1380.ToString();
        }
      }


      public partial class setChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartConfig_result()
        {
        }

        public setChartConfig_result DeepCopy()
        {
          var tmp1382 = new setChartConfig_result();
          if((E != null) && __isset.e)
          {
            tmp1382.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1382.__isset.e = this.__isset.e;
          return tmp1382;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1383 = new TStruct("setChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1383, cancellationToken);
            var tmp1384 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1384.Name = "E";
                tmp1384.Type = TType.Struct;
                tmp1384.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1384, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1385 = new StringBuilder("setChartConfig_result(");
          int tmp1386 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1386++) { tmp1385.Append(", "); }
            tmp1385.Append("E: ");
            E.ToString(tmp1385);
          }
          tmp1385.Append(')');
          return tmp1385.ToString();
        }
      }


      public partial class getChartConfig_args : TBase
      {
        private long _p;
        private string _chartID;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
        }

        public getChartConfig_args()
        {
        }

        public getChartConfig_args DeepCopy()
        {
          var tmp1387 = new getChartConfig_args();
          if(__isset.p)
          {
            tmp1387.P = this.P;
          }
          tmp1387.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1387.ChartID = this.ChartID;
          }
          tmp1387.__isset.chartID = this.__isset.chartID;
          return tmp1387;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1388 = new TStruct("getChartConfig_args");
            await oprot.WriteStructBeginAsync(tmp1388, cancellationToken);
            var tmp1389 = new TField();
            if(__isset.p)
            {
              tmp1389.Name = "p";
              tmp1389.Type = TType.I64;
              tmp1389.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1389, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1389.Name = "chartID";
              tmp1389.Type = TType.String;
              tmp1389.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1389, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1390 = new StringBuilder("getChartConfig_args(");
          int tmp1391 = 0;
          if(__isset.p)
          {
            if(0 < tmp1391++) { tmp1390.Append(", "); }
            tmp1390.Append("P: ");
            P.ToString(tmp1390);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1391++) { tmp1390.Append(", "); }
            tmp1390.Append("ChartID: ");
            ChartID.ToString(tmp1390);
          }
          tmp1390.Append(')');
          return tmp1390.ToString();
        }
      }


      public partial class getChartConfig_result : TBase
      {
        private global::Yaskawa.Ext.API.Any _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.Any Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartConfig_result()
        {
        }

        public getChartConfig_result DeepCopy()
        {
          var tmp1392 = new getChartConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1392.Success = (global::Yaskawa.Ext.API.Any)this.Success.DeepCopy();
          }
          tmp1392.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1392.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1392.__isset.e = this.__isset.e;
          return tmp1392;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Any();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1393 = new TStruct("getChartConfig_result");
            await oprot.WriteStructBeginAsync(tmp1393, cancellationToken);
            var tmp1394 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1394.Name = "Success";
                tmp1394.Type = TType.Struct;
                tmp1394.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1394, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1394.Name = "E";
                tmp1394.Type = TType.Struct;
                tmp1394.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1394, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1395 = new StringBuilder("getChartConfig_result(");
          int tmp1396 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1396++) { tmp1395.Append(", "); }
            tmp1395.Append("Success: ");
            Success.ToString(tmp1395);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1396++) { tmp1395.Append(", "); }
            tmp1395.Append("E: ");
            E.ToString(tmp1395);
          }
          tmp1395.Append(')');
          return tmp1395.ToString();
        }
      }


      public partial class setChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _dataset;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Dataset
        {
          get
          {
            return _dataset;
          }
          set
          {
            __isset.dataset = true;
            this._dataset = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool dataset;
          public bool right;
        }

        public setChartData_args()
        {
        }

        public setChartData_args DeepCopy()
        {
          var tmp1397 = new setChartData_args();
          if(__isset.p)
          {
            tmp1397.P = this.P;
          }
          tmp1397.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1397.ChartID = this.ChartID;
          }
          tmp1397.__isset.chartID = this.__isset.chartID;
          if((Dataset != null) && __isset.dataset)
          {
            tmp1397.Dataset = this.Dataset.DeepCopy();
          }
          tmp1397.__isset.dataset = this.__isset.dataset;
          if(__isset.right)
          {
            tmp1397.Right = this.Right;
          }
          tmp1397.__isset.right = this.__isset.right;
          return tmp1397;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1398 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Dataset = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1398.Count);
                      for(int _i1399 = 0; _i1399 < _map1398.Count; ++_i1399)
                      {
                        string _key1400;
                        global::Yaskawa.Ext.API.Data _val1401;
                        _key1400 = await iprot.ReadStringAsync(cancellationToken);
                        _val1401 = new global::Yaskawa.Ext.API.Data();
                        await _val1401.ReadAsync(iprot, cancellationToken);
                        Dataset[_key1400] = _val1401;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1402 = new TStruct("setChartData_args");
            await oprot.WriteStructBeginAsync(tmp1402, cancellationToken);
            var tmp1403 = new TField();
            if(__isset.p)
            {
              tmp1403.Name = "p";
              tmp1403.Type = TType.I64;
              tmp1403.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1403, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1403.Name = "chartID";
              tmp1403.Type = TType.String;
              tmp1403.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1403, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Dataset != null) && __isset.dataset)
            {
              tmp1403.Name = "dataset";
              tmp1403.Type = TType.Map;
              tmp1403.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1403, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Dataset.Count), cancellationToken);
              foreach (string _iter1404 in Dataset.Keys)
              {
                await oprot.WriteStringAsync(_iter1404, cancellationToken);
                await Dataset[_iter1404].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1403.Name = "right";
              tmp1403.Type = TType.Bool;
              tmp1403.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1403, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.dataset == other.__isset.dataset) && ((!__isset.dataset) || (global::System.Object.Equals(Dataset, other.Dataset))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Dataset != null) && __isset.dataset)
            {
              hashcode = (hashcode * 397) + Dataset.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1405 = new StringBuilder("setChartData_args(");
          int tmp1406 = 0;
          if(__isset.p)
          {
            if(0 < tmp1406++) { tmp1405.Append(", "); }
            tmp1405.Append("P: ");
            P.ToString(tmp1405);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1406++) { tmp1405.Append(", "); }
            tmp1405.Append("ChartID: ");
            ChartID.ToString(tmp1405);
          }
          if((Dataset != null) && __isset.dataset)
          {
            if(0 < tmp1406++) { tmp1405.Append(", "); }
            tmp1405.Append("Dataset: ");
            Dataset.ToString(tmp1405);
          }
          if(__isset.right)
          {
            if(0 < tmp1406++) { tmp1405.Append(", "); }
            tmp1405.Append("Right: ");
            Right.ToString(tmp1405);
          }
          tmp1405.Append(')');
          return tmp1405.ToString();
        }
      }


      public partial class setChartData_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public setChartData_result()
        {
        }

        public setChartData_result DeepCopy()
        {
          var tmp1407 = new setChartData_result();
          if((E != null) && __isset.e)
          {
            tmp1407.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1407.__isset.e = this.__isset.e;
          return tmp1407;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1408 = new TStruct("setChartData_result");
            await oprot.WriteStructBeginAsync(tmp1408, cancellationToken);
            var tmp1409 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1409.Name = "E";
                tmp1409.Type = TType.Struct;
                tmp1409.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1409, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1410 = new StringBuilder("setChartData_result(");
          int tmp1411 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1411++) { tmp1410.Append(", "); }
            tmp1410.Append("E: ");
            E.ToString(tmp1410);
          }
          tmp1410.Append(')');
          return tmp1410.ToString();
        }
      }


      public partial class getChartData_args : TBase
      {
        private long _p;
        private string _chartID;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool right;
        }

        public getChartData_args()
        {
        }

        public getChartData_args DeepCopy()
        {
          var tmp1412 = new getChartData_args();
          if(__isset.p)
          {
            tmp1412.P = this.P;
          }
          tmp1412.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1412.ChartID = this.ChartID;
          }
          tmp1412.__isset.chartID = this.__isset.chartID;
          if(__isset.right)
          {
            tmp1412.Right = this.Right;
          }
          tmp1412.__isset.right = this.__isset.right;
          return tmp1412;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1413 = new TStruct("getChartData_args");
            await oprot.WriteStructBeginAsync(tmp1413, cancellationToken);
            var tmp1414 = new TField();
            if(__isset.p)
            {
              tmp1414.Name = "p";
              tmp1414.Type = TType.I64;
              tmp1414.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1414.Name = "chartID";
              tmp1414.Type = TType.String;
              tmp1414.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1414.Name = "right";
              tmp1414.Type = TType.Bool;
              tmp1414.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1415 = new StringBuilder("getChartData_args(");
          int tmp1416 = 0;
          if(__isset.p)
          {
            if(0 < tmp1416++) { tmp1415.Append(", "); }
            tmp1415.Append("P: ");
            P.ToString(tmp1415);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1416++) { tmp1415.Append(", "); }
            tmp1415.Append("ChartID: ");
            ChartID.ToString(tmp1415);
          }
          if(__isset.right)
          {
            if(0 < tmp1416++) { tmp1415.Append(", "); }
            tmp1415.Append("Right: ");
            Right.ToString(tmp1415);
          }
          tmp1415.Append(')');
          return tmp1415.ToString();
        }
      }


      public partial class getChartData_result : TBase
      {
        private Dictionary<string, global::Yaskawa.Ext.API.Data> _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public Dictionary<string, global::Yaskawa.Ext.API.Data> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public getChartData_result()
        {
        }

        public getChartData_result DeepCopy()
        {
          var tmp1417 = new getChartData_result();
          if((Success != null) && __isset.success)
          {
            tmp1417.Success = this.Success.DeepCopy();
          }
          tmp1417.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1417.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1417.__isset.e = this.__isset.e;
          return tmp1417;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map1418 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Success = new Dictionary<string, global::Yaskawa.Ext.API.Data>(_map1418.Count);
                      for(int _i1419 = 0; _i1419 < _map1418.Count; ++_i1419)
                      {
                        string _key1420;
                        global::Yaskawa.Ext.API.Data _val1421;
                        _key1420 = await iprot.ReadStringAsync(cancellationToken);
                        _val1421 = new global::Yaskawa.Ext.API.Data();
                        await _val1421.ReadAsync(iprot, cancellationToken);
                        Success[_key1420] = _val1421;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1422 = new TStruct("getChartData_result");
            await oprot.WriteStructBeginAsync(tmp1422, cancellationToken);
            var tmp1423 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1423.Name = "Success";
                tmp1423.Type = TType.Map;
                tmp1423.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter1424 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter1424, cancellationToken);
                  await Success[_iter1424].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1423.Name = "E";
                tmp1423.Type = TType.Struct;
                tmp1423.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getChartData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1425 = new StringBuilder("getChartData_result(");
          int tmp1426 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1426++) { tmp1425.Append(", "); }
            tmp1425.Append("Success: ");
            Success.ToString(tmp1425);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1426++) { tmp1425.Append(", "); }
            tmp1425.Append("E: ");
            E.ToString(tmp1425);
          }
          tmp1425.Append(')');
          return tmp1425.ToString();
        }
      }


      public partial class addChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private global::Yaskawa.Ext.API.Data _data;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::Yaskawa.Ext.API.Data Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool data;
          public bool right;
        }

        public addChartKey_args()
        {
        }

        public addChartKey_args DeepCopy()
        {
          var tmp1427 = new addChartKey_args();
          if(__isset.p)
          {
            tmp1427.P = this.P;
          }
          tmp1427.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1427.ChartID = this.ChartID;
          }
          tmp1427.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1427.Key = this.Key;
          }
          tmp1427.__isset.key = this.__isset.key;
          if((Data != null) && __isset.data)
          {
            tmp1427.Data = (global::Yaskawa.Ext.API.Data)this.Data.DeepCopy();
          }
          tmp1427.__isset.data = this.__isset.data;
          if(__isset.right)
          {
            tmp1427.Right = this.Right;
          }
          tmp1427.__isset.right = this.__isset.right;
          return tmp1427;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Data = new global::Yaskawa.Ext.API.Data();
                    await Data.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1428 = new TStruct("addChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1428, cancellationToken);
            var tmp1429 = new TField();
            if(__isset.p)
            {
              tmp1429.Name = "p";
              tmp1429.Type = TType.I64;
              tmp1429.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1429.Name = "chartID";
              tmp1429.Type = TType.String;
              tmp1429.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1429.Name = "key";
              tmp1429.Type = TType.String;
              tmp1429.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp1429.Name = "data";
              tmp1429.Type = TType.Struct;
              tmp1429.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await Data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1429.Name = "right";
              tmp1429.Type = TType.Bool;
              tmp1429.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1430 = new StringBuilder("addChartKey_args(");
          int tmp1431 = 0;
          if(__isset.p)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("P: ");
            P.ToString(tmp1430);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("ChartID: ");
            ChartID.ToString(tmp1430);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("Key: ");
            Key.ToString(tmp1430);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("Data: ");
            Data.ToString(tmp1430);
          }
          if(__isset.right)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("Right: ");
            Right.ToString(tmp1430);
          }
          tmp1430.Append(')');
          return tmp1430.ToString();
        }
      }


      public partial class addChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public addChartKey_result()
        {
        }

        public addChartKey_result DeepCopy()
        {
          var tmp1432 = new addChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1432.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1432.__isset.e = this.__isset.e;
          return tmp1432;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1433 = new TStruct("addChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1433, cancellationToken);
            var tmp1434 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1434.Name = "E";
                tmp1434.Type = TType.Struct;
                tmp1434.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1434, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1435 = new StringBuilder("addChartKey_result(");
          int tmp1436 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1436++) { tmp1435.Append(", "); }
            tmp1435.Append("E: ");
            E.ToString(tmp1435);
          }
          tmp1435.Append(')');
          return tmp1435.ToString();
        }
      }


      public partial class removeChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool right;
        }

        public removeChartKey_args()
        {
        }

        public removeChartKey_args DeepCopy()
        {
          var tmp1437 = new removeChartKey_args();
          if(__isset.p)
          {
            tmp1437.P = this.P;
          }
          tmp1437.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1437.ChartID = this.ChartID;
          }
          tmp1437.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1437.Key = this.Key;
          }
          tmp1437.__isset.key = this.__isset.key;
          if(__isset.right)
          {
            tmp1437.Right = this.Right;
          }
          tmp1437.__isset.right = this.__isset.right;
          return tmp1437;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1438 = new TStruct("removeChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1438, cancellationToken);
            var tmp1439 = new TField();
            if(__isset.p)
            {
              tmp1439.Name = "p";
              tmp1439.Type = TType.I64;
              tmp1439.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1439, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1439.Name = "chartID";
              tmp1439.Type = TType.String;
              tmp1439.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1439, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1439.Name = "key";
              tmp1439.Type = TType.String;
              tmp1439.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1439, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1439.Name = "right";
              tmp1439.Type = TType.Bool;
              tmp1439.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1439, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1440 = new StringBuilder("removeChartKey_args(");
          int tmp1441 = 0;
          if(__isset.p)
          {
            if(0 < tmp1441++) { tmp1440.Append(", "); }
            tmp1440.Append("P: ");
            P.ToString(tmp1440);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1441++) { tmp1440.Append(", "); }
            tmp1440.Append("ChartID: ");
            ChartID.ToString(tmp1440);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1441++) { tmp1440.Append(", "); }
            tmp1440.Append("Key: ");
            Key.ToString(tmp1440);
          }
          if(__isset.right)
          {
            if(0 < tmp1441++) { tmp1440.Append(", "); }
            tmp1440.Append("Right: ");
            Right.ToString(tmp1440);
          }
          tmp1440.Append(')');
          return tmp1440.ToString();
        }
      }


      public partial class removeChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public removeChartKey_result()
        {
        }

        public removeChartKey_result DeepCopy()
        {
          var tmp1442 = new removeChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1442.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1442.__isset.e = this.__isset.e;
          return tmp1442;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1443 = new TStruct("removeChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1443, cancellationToken);
            var tmp1444 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1444.Name = "E";
                tmp1444.Type = TType.Struct;
                tmp1444.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1444, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1445 = new StringBuilder("removeChartKey_result(");
          int tmp1446 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1446++) { tmp1445.Append(", "); }
            tmp1445.Append("E: ");
            E.ToString(tmp1445);
          }
          tmp1445.Append(')');
          return tmp1445.ToString();
        }
      }


      public partial class hideChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private bool _hidden;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public bool Hidden
        {
          get
          {
            return _hidden;
          }
          set
          {
            __isset.hidden = true;
            this._hidden = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool hidden;
          public bool right;
        }

        public hideChartKey_args()
        {
        }

        public hideChartKey_args DeepCopy()
        {
          var tmp1447 = new hideChartKey_args();
          if(__isset.p)
          {
            tmp1447.P = this.P;
          }
          tmp1447.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1447.ChartID = this.ChartID;
          }
          tmp1447.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1447.Key = this.Key;
          }
          tmp1447.__isset.key = this.__isset.key;
          if(__isset.hidden)
          {
            tmp1447.Hidden = this.Hidden;
          }
          tmp1447.__isset.hidden = this.__isset.hidden;
          if(__isset.right)
          {
            tmp1447.Right = this.Right;
          }
          tmp1447.__isset.right = this.__isset.right;
          return tmp1447;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Hidden = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1448 = new TStruct("hideChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1448, cancellationToken);
            var tmp1449 = new TField();
            if(__isset.p)
            {
              tmp1449.Name = "p";
              tmp1449.Type = TType.I64;
              tmp1449.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1449, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1449.Name = "chartID";
              tmp1449.Type = TType.String;
              tmp1449.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1449, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1449.Name = "key";
              tmp1449.Type = TType.String;
              tmp1449.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1449, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.hidden)
            {
              tmp1449.Name = "hidden";
              tmp1449.Type = TType.Bool;
              tmp1449.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1449, cancellationToken);
              await oprot.WriteBoolAsync(Hidden, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1449.Name = "right";
              tmp1449.Type = TType.Bool;
              tmp1449.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1449, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.hidden)
            {
              hashcode = (hashcode * 397) + Hidden.GetHashCode();
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1450 = new StringBuilder("hideChartKey_args(");
          int tmp1451 = 0;
          if(__isset.p)
          {
            if(0 < tmp1451++) { tmp1450.Append(", "); }
            tmp1450.Append("P: ");
            P.ToString(tmp1450);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1451++) { tmp1450.Append(", "); }
            tmp1450.Append("ChartID: ");
            ChartID.ToString(tmp1450);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1451++) { tmp1450.Append(", "); }
            tmp1450.Append("Key: ");
            Key.ToString(tmp1450);
          }
          if(__isset.hidden)
          {
            if(0 < tmp1451++) { tmp1450.Append(", "); }
            tmp1450.Append("Hidden: ");
            Hidden.ToString(tmp1450);
          }
          if(__isset.right)
          {
            if(0 < tmp1451++) { tmp1450.Append(", "); }
            tmp1450.Append("Right: ");
            Right.ToString(tmp1450);
          }
          tmp1450.Append(')');
          return tmp1450.ToString();
        }
      }


      public partial class hideChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public hideChartKey_result()
        {
        }

        public hideChartKey_result DeepCopy()
        {
          var tmp1452 = new hideChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1452.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1452.__isset.e = this.__isset.e;
          return tmp1452;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1453 = new TStruct("hideChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1453, cancellationToken);
            var tmp1454 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1454.Name = "E";
                tmp1454.Type = TType.Struct;
                tmp1454.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1454, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is hideChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1455 = new StringBuilder("hideChartKey_result(");
          int tmp1456 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1456++) { tmp1455.Append(", "); }
            tmp1455.Append("E: ");
            E.ToString(tmp1455);
          }
          tmp1455.Append(')');
          return tmp1455.ToString();
        }
      }


      public partial class appendChartPoints_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private List<global::Yaskawa.Ext.API.DataPoint> _points;
        private bool _right;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public List<global::Yaskawa.Ext.API.DataPoint> Points
        {
          get
          {
            return _points;
          }
          set
          {
            __isset.points = true;
            this._points = value;
          }
        }

        public bool Right
        {
          get
          {
            return _right;
          }
          set
          {
            __isset.right = true;
            this._right = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool points;
          public bool right;
        }

        public appendChartPoints_args()
        {
        }

        public appendChartPoints_args DeepCopy()
        {
          var tmp1457 = new appendChartPoints_args();
          if(__isset.p)
          {
            tmp1457.P = this.P;
          }
          tmp1457.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1457.ChartID = this.ChartID;
          }
          tmp1457.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1457.Key = this.Key;
          }
          tmp1457.__isset.key = this.__isset.key;
          if((Points != null) && __isset.points)
          {
            tmp1457.Points = this.Points.DeepCopy();
          }
          tmp1457.__isset.points = this.__isset.points;
          if(__isset.right)
          {
            tmp1457.Right = this.Right;
          }
          tmp1457.__isset.right = this.__isset.right;
          return tmp1457;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list1458 = await iprot.ReadListBeginAsync(cancellationToken);
                      Points = new List<global::Yaskawa.Ext.API.DataPoint>(_list1458.Count);
                      for(int _i1459 = 0; _i1459 < _list1458.Count; ++_i1459)
                      {
                        global::Yaskawa.Ext.API.DataPoint _elem1460;
                        _elem1460 = new global::Yaskawa.Ext.API.DataPoint();
                        await _elem1460.ReadAsync(iprot, cancellationToken);
                        Points.Add(_elem1460);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    Right = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1461 = new TStruct("appendChartPoints_args");
            await oprot.WriteStructBeginAsync(tmp1461, cancellationToken);
            var tmp1462 = new TField();
            if(__isset.p)
            {
              tmp1462.Name = "p";
              tmp1462.Type = TType.I64;
              tmp1462.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1462.Name = "chartID";
              tmp1462.Type = TType.String;
              tmp1462.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1462.Name = "key";
              tmp1462.Type = TType.String;
              tmp1462.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Points != null) && __isset.points)
            {
              tmp1462.Name = "points";
              tmp1462.Type = TType.List;
              tmp1462.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Points.Count), cancellationToken);
              foreach (global::Yaskawa.Ext.API.DataPoint _iter1463 in Points)
              {
                await _iter1463.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.right)
            {
              tmp1462.Name = "right";
              tmp1462.Type = TType.Bool;
              tmp1462.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
              await oprot.WriteBoolAsync(Right, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendChartPoints_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.points == other.__isset.points) && ((!__isset.points) || (TCollections.Equals(Points, other.Points))))
            && ((__isset.right == other.__isset.right) && ((!__isset.right) || (global::System.Object.Equals(Right, other.Right))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Points != null) && __isset.points)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Points);
            }
            if(__isset.right)
            {
              hashcode = (hashcode * 397) + Right.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1464 = new StringBuilder("appendChartPoints_args(");
          int tmp1465 = 0;
          if(__isset.p)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("P: ");
            P.ToString(tmp1464);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("ChartID: ");
            ChartID.ToString(tmp1464);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("Key: ");
            Key.ToString(tmp1464);
          }
          if((Points != null) && __isset.points)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("Points: ");
            Points.ToString(tmp1464);
          }
          if(__isset.right)
          {
            if(0 < tmp1465++) { tmp1464.Append(", "); }
            tmp1464.Append("Right: ");
            Right.ToString(tmp1464);
          }
          tmp1464.Append(')');
          return tmp1464.ToString();
        }
      }


      public partial class incrementChartKey_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _key;
        private double _val;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public double Val
        {
          get
          {
            return _val;
          }
          set
          {
            __isset.val = true;
            this._val = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool key;
          public bool val;
        }

        public incrementChartKey_args()
        {
        }

        public incrementChartKey_args DeepCopy()
        {
          var tmp1466 = new incrementChartKey_args();
          if(__isset.p)
          {
            tmp1466.P = this.P;
          }
          tmp1466.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1466.ChartID = this.ChartID;
          }
          tmp1466.__isset.chartID = this.__isset.chartID;
          if((Key != null) && __isset.key)
          {
            tmp1466.Key = this.Key;
          }
          tmp1466.__isset.key = this.__isset.key;
          if(__isset.val)
          {
            tmp1466.Val = this.Val;
          }
          tmp1466.__isset.val = this.__isset.val;
          return tmp1466;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    Val = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1467 = new TStruct("incrementChartKey_args");
            await oprot.WriteStructBeginAsync(tmp1467, cancellationToken);
            var tmp1468 = new TField();
            if(__isset.p)
            {
              tmp1468.Name = "p";
              tmp1468.Type = TType.I64;
              tmp1468.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1468, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1468.Name = "chartID";
              tmp1468.Type = TType.String;
              tmp1468.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1468, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1468.Name = "key";
              tmp1468.Type = TType.String;
              tmp1468.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1468, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.val)
            {
              tmp1468.Name = "val";
              tmp1468.Type = TType.Double;
              tmp1468.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1468, cancellationToken);
              await oprot.WriteDoubleAsync(Val, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.val == other.__isset.val) && ((!__isset.val) || (global::System.Object.Equals(Val, other.Val))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.val)
            {
              hashcode = (hashcode * 397) + Val.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1469 = new StringBuilder("incrementChartKey_args(");
          int tmp1470 = 0;
          if(__isset.p)
          {
            if(0 < tmp1470++) { tmp1469.Append(", "); }
            tmp1469.Append("P: ");
            P.ToString(tmp1469);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1470++) { tmp1469.Append(", "); }
            tmp1469.Append("ChartID: ");
            ChartID.ToString(tmp1469);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1470++) { tmp1469.Append(", "); }
            tmp1469.Append("Key: ");
            Key.ToString(tmp1469);
          }
          if(__isset.val)
          {
            if(0 < tmp1470++) { tmp1469.Append(", "); }
            tmp1469.Append("Val: ");
            Val.ToString(tmp1469);
          }
          tmp1469.Append(')');
          return tmp1469.ToString();
        }
      }


      public partial class incrementChartKey_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public incrementChartKey_result()
        {
        }

        public incrementChartKey_result DeepCopy()
        {
          var tmp1471 = new incrementChartKey_result();
          if((E != null) && __isset.e)
          {
            tmp1471.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1471.__isset.e = this.__isset.e;
          return tmp1471;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1472 = new TStruct("incrementChartKey_result");
            await oprot.WriteStructBeginAsync(tmp1472, cancellationToken);
            var tmp1473 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1473.Name = "E";
                tmp1473.Type = TType.Struct;
                tmp1473.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1473, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is incrementChartKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1474 = new StringBuilder("incrementChartKey_result(");
          int tmp1475 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1475++) { tmp1474.Append(", "); }
            tmp1474.Append("E: ");
            E.ToString(tmp1474);
          }
          tmp1474.Append(')');
          return tmp1474.ToString();
        }
      }


      public partial class exportChartImage_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImage_args()
        {
        }

        public exportChartImage_args DeepCopy()
        {
          var tmp1476 = new exportChartImage_args();
          if(__isset.p)
          {
            tmp1476.P = this.P;
          }
          tmp1476.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1476.ChartID = this.ChartID;
          }
          tmp1476.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1476.ImageFileName = this.ImageFileName;
          }
          tmp1476.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1476;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1477 = new TStruct("exportChartImage_args");
            await oprot.WriteStructBeginAsync(tmp1477, cancellationToken);
            var tmp1478 = new TField();
            if(__isset.p)
            {
              tmp1478.Name = "p";
              tmp1478.Type = TType.I64;
              tmp1478.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1478, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1478.Name = "chartID";
              tmp1478.Type = TType.String;
              tmp1478.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1478, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1478.Name = "imageFileName";
              tmp1478.Type = TType.String;
              tmp1478.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1478, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1479 = new StringBuilder("exportChartImage_args(");
          int tmp1480 = 0;
          if(__isset.p)
          {
            if(0 < tmp1480++) { tmp1479.Append(", "); }
            tmp1479.Append("P: ");
            P.ToString(tmp1479);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1480++) { tmp1479.Append(", "); }
            tmp1479.Append("ChartID: ");
            ChartID.ToString(tmp1479);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1480++) { tmp1479.Append(", "); }
            tmp1479.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1479);
          }
          tmp1479.Append(')');
          return tmp1479.ToString();
        }
      }


      public partial class exportChartImage_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImage_result()
        {
        }

        public exportChartImage_result DeepCopy()
        {
          var tmp1481 = new exportChartImage_result();
          if((Success != null) && __isset.success)
          {
            tmp1481.Success = this.Success;
          }
          tmp1481.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1481.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1481.__isset.e = this.__isset.e;
          return tmp1481;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1482 = new TStruct("exportChartImage_result");
            await oprot.WriteStructBeginAsync(tmp1482, cancellationToken);
            var tmp1483 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1483.Name = "Success";
                tmp1483.Type = TType.String;
                tmp1483.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1483, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1483.Name = "E";
                tmp1483.Type = TType.Struct;
                tmp1483.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1483, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1484 = new StringBuilder("exportChartImage_result(");
          int tmp1485 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1485++) { tmp1484.Append(", "); }
            tmp1484.Append("Success: ");
            Success.ToString(tmp1484);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1485++) { tmp1484.Append(", "); }
            tmp1484.Append("E: ");
            E.ToString(tmp1484);
          }
          tmp1484.Append(')');
          return tmp1484.ToString();
        }
      }


      public partial class exportChartImageData_args : TBase
      {
        private long _p;
        private string _chartID;
        private string _imageFileName;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string ChartID
        {
          get
          {
            return _chartID;
          }
          set
          {
            __isset.chartID = true;
            this._chartID = value;
          }
        }

        public string ImageFileName
        {
          get
          {
            return _imageFileName;
          }
          set
          {
            __isset.imageFileName = true;
            this._imageFileName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool chartID;
          public bool imageFileName;
        }

        public exportChartImageData_args()
        {
        }

        public exportChartImageData_args DeepCopy()
        {
          var tmp1486 = new exportChartImageData_args();
          if(__isset.p)
          {
            tmp1486.P = this.P;
          }
          tmp1486.__isset.p = this.__isset.p;
          if((ChartID != null) && __isset.chartID)
          {
            tmp1486.ChartID = this.ChartID;
          }
          tmp1486.__isset.chartID = this.__isset.chartID;
          if((ImageFileName != null) && __isset.imageFileName)
          {
            tmp1486.ImageFileName = this.ImageFileName;
          }
          tmp1486.__isset.imageFileName = this.__isset.imageFileName;
          return tmp1486;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ChartID = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ImageFileName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1487 = new TStruct("exportChartImageData_args");
            await oprot.WriteStructBeginAsync(tmp1487, cancellationToken);
            var tmp1488 = new TField();
            if(__isset.p)
            {
              tmp1488.Name = "p";
              tmp1488.Type = TType.I64;
              tmp1488.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1488, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ChartID != null) && __isset.chartID)
            {
              tmp1488.Name = "chartID";
              tmp1488.Type = TType.String;
              tmp1488.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1488, cancellationToken);
              await oprot.WriteStringAsync(ChartID, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              tmp1488.Name = "imageFileName";
              tmp1488.Type = TType.String;
              tmp1488.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1488, cancellationToken);
              await oprot.WriteStringAsync(ImageFileName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.chartID == other.__isset.chartID) && ((!__isset.chartID) || (global::System.Object.Equals(ChartID, other.ChartID))))
            && ((__isset.imageFileName == other.__isset.imageFileName) && ((!__isset.imageFileName) || (global::System.Object.Equals(ImageFileName, other.ImageFileName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((ChartID != null) && __isset.chartID)
            {
              hashcode = (hashcode * 397) + ChartID.GetHashCode();
            }
            if((ImageFileName != null) && __isset.imageFileName)
            {
              hashcode = (hashcode * 397) + ImageFileName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1489 = new StringBuilder("exportChartImageData_args(");
          int tmp1490 = 0;
          if(__isset.p)
          {
            if(0 < tmp1490++) { tmp1489.Append(", "); }
            tmp1489.Append("P: ");
            P.ToString(tmp1489);
          }
          if((ChartID != null) && __isset.chartID)
          {
            if(0 < tmp1490++) { tmp1489.Append(", "); }
            tmp1489.Append("ChartID: ");
            ChartID.ToString(tmp1489);
          }
          if((ImageFileName != null) && __isset.imageFileName)
          {
            if(0 < tmp1490++) { tmp1489.Append(", "); }
            tmp1489.Append("ImageFileName: ");
            ImageFileName.ToString(tmp1489);
          }
          tmp1489.Append(')');
          return tmp1489.ToString();
        }
      }


      public partial class exportChartImageData_result : TBase
      {
        private byte[] _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public exportChartImageData_result()
        {
        }

        public exportChartImageData_result DeepCopy()
        {
          var tmp1491 = new exportChartImageData_result();
          if((Success != null) && __isset.success)
          {
            tmp1491.Success = this.Success.ToArray();
          }
          tmp1491.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1491.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1491.__isset.e = this.__isset.e;
          return tmp1491;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1492 = new TStruct("exportChartImageData_result");
            await oprot.WriteStructBeginAsync(tmp1492, cancellationToken);
            var tmp1493 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1493.Name = "Success";
                tmp1493.Type = TType.String;
                tmp1493.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1493, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1493.Name = "E";
                tmp1493.Type = TType.Struct;
                tmp1493.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1493, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exportChartImageData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1494 = new StringBuilder("exportChartImageData_result(");
          int tmp1495 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1495++) { tmp1494.Append(", "); }
            tmp1494.Append("Success: ");
            Success.ToString(tmp1494);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1495++) { tmp1494.Append(", "); }
            tmp1494.Append("E: ");
            E.ToString(tmp1494);
          }
          tmp1494.Append(')');
          return tmp1494.ToString();
        }
      }


      public partial class notice_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public notice_args()
        {
        }

        public notice_args DeepCopy()
        {
          var tmp1496 = new notice_args();
          if(__isset.p)
          {
            tmp1496.P = this.P;
          }
          tmp1496.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1496.Title = this.Title;
          }
          tmp1496.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1496.Message = this.Message;
          }
          tmp1496.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1496.Log = this.Log;
          }
          tmp1496.__isset.log = this.__isset.log;
          return tmp1496;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1497 = new TStruct("notice_args");
            await oprot.WriteStructBeginAsync(tmp1497, cancellationToken);
            var tmp1498 = new TField();
            if(__isset.p)
            {
              tmp1498.Name = "p";
              tmp1498.Type = TType.I64;
              tmp1498.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1498.Name = "title";
              tmp1498.Type = TType.String;
              tmp1498.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1498.Name = "message";
              tmp1498.Type = TType.String;
              tmp1498.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1498.Name = "log";
              tmp1498.Type = TType.String;
              tmp1498.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1498, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1499 = new StringBuilder("notice_args(");
          int tmp1500 = 0;
          if(__isset.p)
          {
            if(0 < tmp1500++) { tmp1499.Append(", "); }
            tmp1499.Append("P: ");
            P.ToString(tmp1499);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1500++) { tmp1499.Append(", "); }
            tmp1499.Append("Title: ");
            Title.ToString(tmp1499);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1500++) { tmp1499.Append(", "); }
            tmp1499.Append("Message: ");
            Message.ToString(tmp1499);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1500++) { tmp1499.Append(", "); }
            tmp1499.Append("Log: ");
            Log.ToString(tmp1499);
          }
          tmp1499.Append(')');
          return tmp1499.ToString();
        }
      }


      public partial class dispNotice_args : TBase
      {
        private long _p;
        private global::Yaskawa.Ext.API.Disposition _disposition;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.Disposition"/>
        /// </summary>
        public global::Yaskawa.Ext.API.Disposition Disposition
        {
          get
          {
            return _disposition;
          }
          set
          {
            __isset.disposition = true;
            this._disposition = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool disposition;
          public bool title;
          public bool message;
          public bool log;
        }

        public dispNotice_args()
        {
        }

        public dispNotice_args DeepCopy()
        {
          var tmp1501 = new dispNotice_args();
          if(__isset.p)
          {
            tmp1501.P = this.P;
          }
          tmp1501.__isset.p = this.__isset.p;
          if(__isset.disposition)
          {
            tmp1501.Disposition = this.Disposition;
          }
          tmp1501.__isset.disposition = this.__isset.disposition;
          if((Title != null) && __isset.title)
          {
            tmp1501.Title = this.Title;
          }
          tmp1501.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1501.Message = this.Message;
          }
          tmp1501.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1501.Log = this.Log;
          }
          tmp1501.__isset.log = this.__isset.log;
          return tmp1501;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Disposition = (global::Yaskawa.Ext.API.Disposition)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1502 = new TStruct("dispNotice_args");
            await oprot.WriteStructBeginAsync(tmp1502, cancellationToken);
            var tmp1503 = new TField();
            if(__isset.p)
            {
              tmp1503.Name = "p";
              tmp1503.Type = TType.I64;
              tmp1503.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1503, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.disposition)
            {
              tmp1503.Name = "disposition";
              tmp1503.Type = TType.I32;
              tmp1503.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1503, cancellationToken);
              await oprot.WriteI32Async((int)Disposition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1503.Name = "title";
              tmp1503.Type = TType.String;
              tmp1503.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1503, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1503.Name = "message";
              tmp1503.Type = TType.String;
              tmp1503.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1503, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1503.Name = "log";
              tmp1503.Type = TType.String;
              tmp1503.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1503, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dispNotice_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.disposition == other.__isset.disposition) && ((!__isset.disposition) || (global::System.Object.Equals(Disposition, other.Disposition))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if(__isset.disposition)
            {
              hashcode = (hashcode * 397) + Disposition.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1504 = new StringBuilder("dispNotice_args(");
          int tmp1505 = 0;
          if(__isset.p)
          {
            if(0 < tmp1505++) { tmp1504.Append(", "); }
            tmp1504.Append("P: ");
            P.ToString(tmp1504);
          }
          if(__isset.disposition)
          {
            if(0 < tmp1505++) { tmp1504.Append(", "); }
            tmp1504.Append("Disposition: ");
            Disposition.ToString(tmp1504);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1505++) { tmp1504.Append(", "); }
            tmp1504.Append("Title: ");
            Title.ToString(tmp1504);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1505++) { tmp1504.Append(", "); }
            tmp1504.Append("Message: ");
            Message.ToString(tmp1504);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1505++) { tmp1504.Append(", "); }
            tmp1504.Append("Log: ");
            Log.ToString(tmp1504);
          }
          tmp1504.Append(')');
          return tmp1504.ToString();
        }
      }


      public partial class error_args : TBase
      {
        private long _p;
        private string _title;
        private string _message;
        private string _log;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string Log
        {
          get
          {
            return _log;
          }
          set
          {
            __isset.log = true;
            this._log = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool message;
          public bool log;
        }

        public error_args()
        {
        }

        public error_args DeepCopy()
        {
          var tmp1506 = new error_args();
          if(__isset.p)
          {
            tmp1506.P = this.P;
          }
          tmp1506.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1506.Title = this.Title;
          }
          tmp1506.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1506.Message = this.Message;
          }
          tmp1506.__isset.message = this.__isset.message;
          if((Log != null) && __isset.log)
          {
            tmp1506.Log = this.Log;
          }
          tmp1506.__isset.log = this.__isset.log;
          return tmp1506;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Log = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1507 = new TStruct("error_args");
            await oprot.WriteStructBeginAsync(tmp1507, cancellationToken);
            var tmp1508 = new TField();
            if(__isset.p)
            {
              tmp1508.Name = "p";
              tmp1508.Type = TType.I64;
              tmp1508.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1508, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1508.Name = "title";
              tmp1508.Type = TType.String;
              tmp1508.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1508, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1508.Name = "message";
              tmp1508.Type = TType.String;
              tmp1508.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1508, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Log != null) && __isset.log)
            {
              tmp1508.Name = "log";
              tmp1508.Type = TType.String;
              tmp1508.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1508, cancellationToken);
              await oprot.WriteStringAsync(Log, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is error_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.log == other.__isset.log) && ((!__isset.log) || (global::System.Object.Equals(Log, other.Log))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Log != null) && __isset.log)
            {
              hashcode = (hashcode * 397) + Log.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1509 = new StringBuilder("error_args(");
          int tmp1510 = 0;
          if(__isset.p)
          {
            if(0 < tmp1510++) { tmp1509.Append(", "); }
            tmp1509.Append("P: ");
            P.ToString(tmp1509);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1510++) { tmp1509.Append(", "); }
            tmp1509.Append("Title: ");
            Title.ToString(tmp1509);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1510++) { tmp1509.Append(", "); }
            tmp1509.Append("Message: ");
            Message.ToString(tmp1509);
          }
          if((Log != null) && __isset.log)
          {
            if(0 < tmp1510++) { tmp1509.Append(", "); }
            tmp1509.Append("Log: ");
            Log.ToString(tmp1509);
          }
          tmp1509.Append(')');
          return tmp1509.ToString();
        }
      }


      public partial class popupDialog_args : TBase
      {
        private long _p;
        private string _identifier;
        private string _title;
        private string _message;
        private string _positiveOption;
        private string _negativeOption;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }

        public string PositiveOption
        {
          get
          {
            return _positiveOption;
          }
          set
          {
            __isset.positiveOption = true;
            this._positiveOption = value;
          }
        }

        public string NegativeOption
        {
          get
          {
            return _negativeOption;
          }
          set
          {
            __isset.negativeOption = true;
            this._negativeOption = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
          public bool title;
          public bool message;
          public bool positiveOption;
          public bool negativeOption;
        }

        public popupDialog_args()
        {
        }

        public popupDialog_args DeepCopy()
        {
          var tmp1511 = new popupDialog_args();
          if(__isset.p)
          {
            tmp1511.P = this.P;
          }
          tmp1511.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1511.Identifier = this.Identifier;
          }
          tmp1511.__isset.identifier = this.__isset.identifier;
          if((Title != null) && __isset.title)
          {
            tmp1511.Title = this.Title;
          }
          tmp1511.__isset.title = this.__isset.title;
          if((Message != null) && __isset.message)
          {
            tmp1511.Message = this.Message;
          }
          tmp1511.__isset.message = this.__isset.message;
          if((PositiveOption != null) && __isset.positiveOption)
          {
            tmp1511.PositiveOption = this.PositiveOption;
          }
          tmp1511.__isset.positiveOption = this.__isset.positiveOption;
          if((NegativeOption != null) && __isset.negativeOption)
          {
            tmp1511.NegativeOption = this.NegativeOption;
          }
          tmp1511.__isset.negativeOption = this.__isset.negativeOption;
          return tmp1511;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    PositiveOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    NegativeOption = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1512 = new TStruct("popupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1512, cancellationToken);
            var tmp1513 = new TField();
            if(__isset.p)
            {
              tmp1513.Name = "p";
              tmp1513.Type = TType.I64;
              tmp1513.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1513, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1513.Name = "identifier";
              tmp1513.Type = TType.String;
              tmp1513.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1513, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1513.Name = "title";
              tmp1513.Type = TType.String;
              tmp1513.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1513, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1513.Name = "message";
              tmp1513.Type = TType.String;
              tmp1513.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1513, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              tmp1513.Name = "positiveOption";
              tmp1513.Type = TType.String;
              tmp1513.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1513, cancellationToken);
              await oprot.WriteStringAsync(PositiveOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              tmp1513.Name = "negativeOption";
              tmp1513.Type = TType.String;
              tmp1513.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1513, cancellationToken);
              await oprot.WriteStringAsync(NegativeOption, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
            && ((__isset.positiveOption == other.__isset.positiveOption) && ((!__isset.positiveOption) || (global::System.Object.Equals(PositiveOption, other.PositiveOption))))
            && ((__isset.negativeOption == other.__isset.negativeOption) && ((!__isset.negativeOption) || (global::System.Object.Equals(NegativeOption, other.NegativeOption))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((PositiveOption != null) && __isset.positiveOption)
            {
              hashcode = (hashcode * 397) + PositiveOption.GetHashCode();
            }
            if((NegativeOption != null) && __isset.negativeOption)
            {
              hashcode = (hashcode * 397) + NegativeOption.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1514 = new StringBuilder("popupDialog_args(");
          int tmp1515 = 0;
          if(__isset.p)
          {
            if(0 < tmp1515++) { tmp1514.Append(", "); }
            tmp1514.Append("P: ");
            P.ToString(tmp1514);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1515++) { tmp1514.Append(", "); }
            tmp1514.Append("Identifier: ");
            Identifier.ToString(tmp1514);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1515++) { tmp1514.Append(", "); }
            tmp1514.Append("Title: ");
            Title.ToString(tmp1514);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1515++) { tmp1514.Append(", "); }
            tmp1514.Append("Message: ");
            Message.ToString(tmp1514);
          }
          if((PositiveOption != null) && __isset.positiveOption)
          {
            if(0 < tmp1515++) { tmp1514.Append(", "); }
            tmp1514.Append("PositiveOption: ");
            PositiveOption.ToString(tmp1514);
          }
          if((NegativeOption != null) && __isset.negativeOption)
          {
            if(0 < tmp1515++) { tmp1514.Append(", "); }
            tmp1514.Append("NegativeOption: ");
            NegativeOption.ToString(tmp1514);
          }
          tmp1514.Append(')');
          return tmp1514.ToString();
        }
      }


      public partial class popupDialog_result : TBase
      {
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public popupDialog_result()
        {
        }

        public popupDialog_result DeepCopy()
        {
          var tmp1516 = new popupDialog_result();
          if((E != null) && __isset.e)
          {
            tmp1516.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp1516.__isset.e = this.__isset.e;
          return tmp1516;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1517 = new TStruct("popupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1517, cancellationToken);
            var tmp1518 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1518.Name = "E";
                tmp1518.Type = TType.Struct;
                tmp1518.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1518, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is popupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1519 = new StringBuilder("popupDialog_result(");
          int tmp1520 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1520++) { tmp1519.Append(", "); }
            tmp1519.Append("E: ");
            E.ToString(tmp1519);
          }
          tmp1519.Append(')');
          return tmp1519.ToString();
        }
      }


      public partial class cancelPopupDialog_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public cancelPopupDialog_args()
        {
        }

        public cancelPopupDialog_args DeepCopy()
        {
          var tmp1521 = new cancelPopupDialog_args();
          if(__isset.p)
          {
            tmp1521.P = this.P;
          }
          tmp1521.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1521.Identifier = this.Identifier;
          }
          tmp1521.__isset.identifier = this.__isset.identifier;
          return tmp1521;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1522 = new TStruct("cancelPopupDialog_args");
            await oprot.WriteStructBeginAsync(tmp1522, cancellationToken);
            var tmp1523 = new TField();
            if(__isset.p)
            {
              tmp1523.Name = "p";
              tmp1523.Type = TType.I64;
              tmp1523.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1523, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1523.Name = "identifier";
              tmp1523.Type = TType.String;
              tmp1523.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1523, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1524 = new StringBuilder("cancelPopupDialog_args(");
          int tmp1525 = 0;
          if(__isset.p)
          {
            if(0 < tmp1525++) { tmp1524.Append(", "); }
            tmp1524.Append("P: ");
            P.ToString(tmp1524);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1525++) { tmp1524.Append(", "); }
            tmp1524.Append("Identifier: ");
            Identifier.ToString(tmp1524);
          }
          tmp1524.Append(')');
          return tmp1524.ToString();
        }
      }


      public partial class cancelPopupDialog_result : TBase
      {

        public cancelPopupDialog_result()
        {
        }

        public cancelPopupDialog_result DeepCopy()
        {
          var tmp1526 = new cancelPopupDialog_result();
          return tmp1526;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1527 = new TStruct("cancelPopupDialog_result");
            await oprot.WriteStructBeginAsync(tmp1527, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelPopupDialog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1528 = new StringBuilder("cancelPopupDialog_result(");
          tmp1528.Append(')');
          return tmp1528.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_args : TBase
      {
        private long _p;
        private string _instruction;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Instruction
        {
          get
          {
            return _instruction;
          }
          set
          {
            __isset.instruction = true;
            this._instruction = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool instruction;
        }

        public insertInstructionAtSelectedLine_args()
        {
        }

        public insertInstructionAtSelectedLine_args DeepCopy()
        {
          var tmp1530 = new insertInstructionAtSelectedLine_args();
          if(__isset.p)
          {
            tmp1530.P = this.P;
          }
          tmp1530.__isset.p = this.__isset.p;
          if((Instruction != null) && __isset.instruction)
          {
            tmp1530.Instruction = this.Instruction;
          }
          tmp1530.__isset.instruction = this.__isset.instruction;
          return tmp1530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Instruction = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1531 = new TStruct("insertInstructionAtSelectedLine_args");
            await oprot.WriteStructBeginAsync(tmp1531, cancellationToken);
            var tmp1532 = new TField();
            if(__isset.p)
            {
              tmp1532.Name = "p";
              tmp1532.Type = TType.I64;
              tmp1532.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Instruction != null) && __isset.instruction)
            {
              tmp1532.Name = "instruction";
              tmp1532.Type = TType.String;
              tmp1532.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
              await oprot.WriteStringAsync(Instruction, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.instruction == other.__isset.instruction) && ((!__isset.instruction) || (global::System.Object.Equals(Instruction, other.Instruction))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Instruction != null) && __isset.instruction)
            {
              hashcode = (hashcode * 397) + Instruction.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1533 = new StringBuilder("insertInstructionAtSelectedLine_args(");
          int tmp1534 = 0;
          if(__isset.p)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("P: ");
            P.ToString(tmp1533);
          }
          if((Instruction != null) && __isset.instruction)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("Instruction: ");
            Instruction.ToString(tmp1533);
          }
          tmp1533.Append(')');
          return tmp1533.ToString();
        }
      }


      public partial class insertInstructionAtSelectedLine_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public insertInstructionAtSelectedLine_result()
        {
        }

        public insertInstructionAtSelectedLine_result DeepCopy()
        {
          var tmp1535 = new insertInstructionAtSelectedLine_result();
          if((Success != null) && __isset.success)
          {
            tmp1535.Success = this.Success;
          }
          tmp1535.__isset.success = this.__isset.success;
          return tmp1535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1536 = new TStruct("insertInstructionAtSelectedLine_result");
            await oprot.WriteStructBeginAsync(tmp1536, cancellationToken);
            var tmp1537 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1537.Name = "Success";
                tmp1537.Type = TType.String;
                tmp1537.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1537, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is insertInstructionAtSelectedLine_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1538 = new StringBuilder("insertInstructionAtSelectedLine_result(");
          int tmp1539 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1539++) { tmp1538.Append(", "); }
            tmp1538.Append("Success: ");
            Success.ToString(tmp1538);
          }
          tmp1538.Append(')');
          return tmp1538.ToString();
        }
      }


      public partial class displayScreen_args : TBase
      {
        private long _p;
        private string _identifier;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Identifier
        {
          get
          {
            return _identifier;
          }
          set
          {
            __isset.identifier = true;
            this._identifier = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool identifier;
        }

        public displayScreen_args()
        {
        }

        public displayScreen_args DeepCopy()
        {
          var tmp1540 = new displayScreen_args();
          if(__isset.p)
          {
            tmp1540.P = this.P;
          }
          tmp1540.__isset.p = this.__isset.p;
          if((Identifier != null) && __isset.identifier)
          {
            tmp1540.Identifier = this.Identifier;
          }
          tmp1540.__isset.identifier = this.__isset.identifier;
          return tmp1540;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Identifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1541 = new TStruct("displayScreen_args");
            await oprot.WriteStructBeginAsync(tmp1541, cancellationToken);
            var tmp1542 = new TField();
            if(__isset.p)
            {
              tmp1542.Name = "p";
              tmp1542.Type = TType.I64;
              tmp1542.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Identifier != null) && __isset.identifier)
            {
              tmp1542.Name = "identifier";
              tmp1542.Type = TType.String;
              tmp1542.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
              await oprot.WriteStringAsync(Identifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Identifier != null) && __isset.identifier)
            {
              hashcode = (hashcode * 397) + Identifier.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1543 = new StringBuilder("displayScreen_args(");
          int tmp1544 = 0;
          if(__isset.p)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("P: ");
            P.ToString(tmp1543);
          }
          if((Identifier != null) && __isset.identifier)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("Identifier: ");
            Identifier.ToString(tmp1543);
          }
          tmp1543.Append(')');
          return tmp1543.ToString();
        }
      }


      public partial class displayScreen_result : TBase
      {

        public displayScreen_result()
        {
        }

        public displayScreen_result DeepCopy()
        {
          var tmp1545 = new displayScreen_result();
          return tmp1545;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1546 = new TStruct("displayScreen_result");
            await oprot.WriteStructBeginAsync(tmp1546, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayScreen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1547 = new StringBuilder("displayScreen_result(");
          tmp1547.Append(')');
          return tmp1547.ToString();
        }
      }


      public partial class displayHelp_args : TBase
      {
        private long _p;
        private string _title;
        private string _htmlContentFile;

        public long P
        {
          get
          {
            return _p;
          }
          set
          {
            __isset.p = true;
            this._p = value;
          }
        }

        public string Title
        {
          get
          {
            return _title;
          }
          set
          {
            __isset.title = true;
            this._title = value;
          }
        }

        public string HtmlContentFile
        {
          get
          {
            return _htmlContentFile;
          }
          set
          {
            __isset.htmlContentFile = true;
            this._htmlContentFile = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool p;
          public bool title;
          public bool htmlContentFile;
        }

        public displayHelp_args()
        {
        }

        public displayHelp_args DeepCopy()
        {
          var tmp1549 = new displayHelp_args();
          if(__isset.p)
          {
            tmp1549.P = this.P;
          }
          tmp1549.__isset.p = this.__isset.p;
          if((Title != null) && __isset.title)
          {
            tmp1549.Title = this.Title;
          }
          tmp1549.__isset.title = this.__isset.title;
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            tmp1549.HtmlContentFile = this.HtmlContentFile;
          }
          tmp1549.__isset.htmlContentFile = this.__isset.htmlContentFile;
          return tmp1549;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    P = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Title = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    HtmlContentFile = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1550 = new TStruct("displayHelp_args");
            await oprot.WriteStructBeginAsync(tmp1550, cancellationToken);
            var tmp1551 = new TField();
            if(__isset.p)
            {
              tmp1551.Name = "p";
              tmp1551.Type = TType.I64;
              tmp1551.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1551, cancellationToken);
              await oprot.WriteI64Async(P, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Title != null) && __isset.title)
            {
              tmp1551.Name = "title";
              tmp1551.Type = TType.String;
              tmp1551.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1551, cancellationToken);
              await oprot.WriteStringAsync(Title, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              tmp1551.Name = "htmlContentFile";
              tmp1551.Type = TType.String;
              tmp1551.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1551, cancellationToken);
              await oprot.WriteStringAsync(HtmlContentFile, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.p == other.__isset.p) && ((!__isset.p) || (global::System.Object.Equals(P, other.P))))
            && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
            && ((__isset.htmlContentFile == other.__isset.htmlContentFile) && ((!__isset.htmlContentFile) || (global::System.Object.Equals(HtmlContentFile, other.HtmlContentFile))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.p)
            {
              hashcode = (hashcode * 397) + P.GetHashCode();
            }
            if((Title != null) && __isset.title)
            {
              hashcode = (hashcode * 397) + Title.GetHashCode();
            }
            if((HtmlContentFile != null) && __isset.htmlContentFile)
            {
              hashcode = (hashcode * 397) + HtmlContentFile.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1552 = new StringBuilder("displayHelp_args(");
          int tmp1553 = 0;
          if(__isset.p)
          {
            if(0 < tmp1553++) { tmp1552.Append(", "); }
            tmp1552.Append("P: ");
            P.ToString(tmp1552);
          }
          if((Title != null) && __isset.title)
          {
            if(0 < tmp1553++) { tmp1552.Append(", "); }
            tmp1552.Append("Title: ");
            Title.ToString(tmp1552);
          }
          if((HtmlContentFile != null) && __isset.htmlContentFile)
          {
            if(0 < tmp1553++) { tmp1552.Append(", "); }
            tmp1552.Append("HtmlContentFile: ");
            HtmlContentFile.ToString(tmp1552);
          }
          tmp1552.Append(')');
          return tmp1552.ToString();
        }
      }


      public partial class displayHelp_result : TBase
      {

        public displayHelp_result()
        {
        }

        public displayHelp_result DeepCopy()
        {
          var tmp1554 = new displayHelp_result();
          return tmp1554;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1555 = new TStruct("displayHelp_result");
            await oprot.WriteStructBeginAsync(tmp1555, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is displayHelp_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1556 = new StringBuilder("displayHelp_result(");
          tmp1556.Append(')');
          return tmp1556.ToString();
        }
      }

    }

  }
}
