/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// General control group
  /// May be
  /// * simple, such as a single Robot OR
  /// * a combined control group consisting of multiple
  ///   simple control groups.
  /// </summary>
  public partial class ControlGroup : TBase
  {
    private global::Yaskawa.Ext.API.ControlGroupType _type;
    private sbyte _number;
    private global::Yaskawa.Ext.API.SimpleControlGroup _sgroup;
    private global::Yaskawa.Ext.API.CombinedControlGroup _cgroup;

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.ControlGroupType"/>
    /// </summary>
    public global::Yaskawa.Ext.API.ControlGroupType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public sbyte Number
    {
      get
      {
        return _number;
      }
      set
      {
        __isset.number = true;
        this._number = value;
      }
    }

    public global::Yaskawa.Ext.API.SimpleControlGroup Sgroup
    {
      get
      {
        return _sgroup;
      }
      set
      {
        __isset.sgroup = true;
        this._sgroup = value;
      }
    }

    public global::Yaskawa.Ext.API.CombinedControlGroup Cgroup
    {
      get
      {
        return _cgroup;
      }
      set
      {
        __isset.cgroup = true;
        this._cgroup = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool number;
      public bool sgroup;
      public bool cgroup;
    }

    public ControlGroup()
    {
    }

    public ControlGroup DeepCopy()
    {
      var tmp183 = new ControlGroup();
      if(__isset.type)
      {
        tmp183.Type = this.Type;
      }
      tmp183.__isset.type = this.__isset.type;
      if(__isset.number)
      {
        tmp183.Number = this.Number;
      }
      tmp183.__isset.number = this.__isset.number;
      if((Sgroup != null) && __isset.sgroup)
      {
        tmp183.Sgroup = (global::Yaskawa.Ext.API.SimpleControlGroup)this.Sgroup.DeepCopy();
      }
      tmp183.__isset.sgroup = this.__isset.sgroup;
      if((Cgroup != null) && __isset.cgroup)
      {
        tmp183.Cgroup = (global::Yaskawa.Ext.API.CombinedControlGroup)this.Cgroup.DeepCopy();
      }
      tmp183.__isset.cgroup = this.__isset.cgroup;
      return tmp183;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::Yaskawa.Ext.API.ControlGroupType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Byte)
              {
                Number = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Sgroup = new global::Yaskawa.Ext.API.SimpleControlGroup();
                await Sgroup.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Cgroup = new global::Yaskawa.Ext.API.CombinedControlGroup();
                await Cgroup.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp184 = new TStruct("ControlGroup");
        await oprot.WriteStructBeginAsync(tmp184, cancellationToken);
        var tmp185 = new TField();
        if(__isset.type)
        {
          tmp185.Name = "type";
          tmp185.Type = TType.I32;
          tmp185.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp185, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.number)
        {
          tmp185.Name = "number";
          tmp185.Type = TType.Byte;
          tmp185.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp185, cancellationToken);
          await oprot.WriteByteAsync(Number, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Sgroup != null) && __isset.sgroup)
        {
          tmp185.Name = "sgroup";
          tmp185.Type = TType.Struct;
          tmp185.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp185, cancellationToken);
          await Sgroup.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Cgroup != null) && __isset.cgroup)
        {
          tmp185.Name = "cgroup";
          tmp185.Type = TType.Struct;
          tmp185.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp185, cancellationToken);
          await Cgroup.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ControlGroup other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.number == other.__isset.number) && ((!__isset.number) || (global::System.Object.Equals(Number, other.Number))))
        && ((__isset.sgroup == other.__isset.sgroup) && ((!__isset.sgroup) || (global::System.Object.Equals(Sgroup, other.Sgroup))))
        && ((__isset.cgroup == other.__isset.cgroup) && ((!__isset.cgroup) || (global::System.Object.Equals(Cgroup, other.Cgroup))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if(__isset.number)
        {
          hashcode = (hashcode * 397) + Number.GetHashCode();
        }
        if((Sgroup != null) && __isset.sgroup)
        {
          hashcode = (hashcode * 397) + Sgroup.GetHashCode();
        }
        if((Cgroup != null) && __isset.cgroup)
        {
          hashcode = (hashcode * 397) + Cgroup.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp186 = new StringBuilder("ControlGroup(");
      int tmp187 = 0;
      if(__isset.type)
      {
        if(0 < tmp187++) { tmp186.Append(", "); }
        tmp186.Append("Type: ");
        Type.ToString(tmp186);
      }
      if(__isset.number)
      {
        if(0 < tmp187++) { tmp186.Append(", "); }
        tmp186.Append("Number: ");
        Number.ToString(tmp186);
      }
      if((Sgroup != null) && __isset.sgroup)
      {
        if(0 < tmp187++) { tmp186.Append(", "); }
        tmp186.Append("Sgroup: ");
        Sgroup.ToString(tmp186);
      }
      if((Cgroup != null) && __isset.cgroup)
      {
        if(0 < tmp187++) { tmp186.Append(", "); }
        tmp186.Append("Cgroup: ");
        Cgroup.ToString(tmp186);
      }
      tmp186.Append(')');
      return tmp186.ToString();
    }
  }

}
