/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Extension
  {
    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of API the service implements.
      /// Smart Pendant | API version
      /// 2.0           | 2.0.4
      /// 2.1           | 2.1.0
      /// 2.2           | 2.2.0
      /// 2.3           | 2.3.0
      /// 3.0           | 3.0.0
      /// </summary>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default);

      /// <summary>
      /// Register extension with Smart Pendant API service.
      /// Extension must exist in the extension database (i.e. through installation)
      /// </summary>
      /// <param name="canonicalName"></param>
      /// <param name="launchKey"></param>
      /// <param name="version"></param>
      /// <param name="vendor"></param>
      /// <param name="supportedLanguages"></param>
      global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicate liveliness
      /// API service will automatically unregister extensions that are unresponsive for some period.
      /// If extension is not regularly calling events(), call ping() to indicate the extension is operational.
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Robot Conroller API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Pendant UI API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Log message to standard pendant logging facility
      /// Visible to end-users upon plain-text log file export.
      /// Note that Debug level logging is ignored unless in Developer access level.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="id"></param>
      /// <param name="level"></param>
      /// <param name="message"></param>
      global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to receive log message events via events()
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of logging events that have occured since last call
      /// NB: For development troubleshooting only, logging events
      /// only available when development access enabled
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain a list of ExternalStorageDevice structs corresponding to USB storage
      /// available to the pendant/and or controller.  If no storage is available this
      /// list will have no elements.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> listAvailableStorage(long eid, CancellationToken cancellationToken = default);

      /// <summary>
      /// list files/directories in external storage for the specified storage path
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="path"></param>
      global::System.Threading.Tasks.Task<List<string>> listFiles(long eid, string path, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open files for reading and/or writing
      /// the argument path is the full path to the file of interest
      /// the argument flags can be 'r' (read) or 'w' (write w/ append)
      /// (the FileID will return -1 if it failed to open the file)
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="path"></param>
      /// <param name="flags"></param>
      global::System.Threading.Tasks.Task<long> openFile(long eid, string path, string flags, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close files from reading and/or writing
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task closeFile(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check if the file is available for read/write.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<bool> isOpen(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read all data from the file.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<string> read(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read a chunk of data from the file.
      /// the argument offset indicates the number of bytes into the file
      /// the argument len indicates the number of bytes to read
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      /// <param name="offset"></param>
      /// <param name="len"></param>
      global::System.Threading.Tasks.Task<string> readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default);

      /// <summary>
      /// Write a string to a file.  This will create a new file (and or directory)
      /// if missing, but will simply append if the file already exists.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      /// <param name="data"></param>
      global::System.Threading.Tasks.Task write(long eid, long id, string data, CancellationToken cancellationToken = default);

      /// <summary>
      /// Write the file to disk.  For files not local to the pendant this
      /// will FTP them to the controller.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task flush(long eid, long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default)
      {
        await send_apiVersion(cancellationToken);
        return await recv_apiVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_apiVersion(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp234 = new InternalStructs.apiVersion_args() {
        };
        
        await tmp234.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_apiVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp235 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp235.Type == TMessageType.Exception)
        {
          var tmp236 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp236;
        }

        var tmp237 = new InternalStructs.apiVersion_result();
        await tmp237.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp237.__isset.success)
        {
          return tmp237.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apiVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await send_registerExtension(canonicalName, launchKey, version, vendor, supportedLanguages, cancellationToken);
        return await recv_registerExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp238 = new InternalStructs.registerExtension_args() {
          CanonicalName = canonicalName,
          LaunchKey = launchKey,
          Version = version,
          Vendor = vendor,
          SupportedLanguages = supportedLanguages,
        };
        
        await tmp238.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_registerExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp239 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp239.Type == TMessageType.Exception)
        {
          var tmp240 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp240;
        }

        var tmp241 = new InternalStructs.registerExtension_result();
        await tmp241.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp241.__isset.success)
        {
          return tmp241.Success;
        }
        if (tmp241.__isset.e)
        {
          throw tmp241.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerExtension failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await send_unregisterExtension(id, cancellationToken);
        await recv_unregisterExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp242 = new InternalStructs.unregisterExtension_args() {
          Id = id,
        };
        
        await tmp242.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp243 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp243.Type == TMessageType.Exception)
        {
          var tmp244 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp244;
        }

        var tmp245 = new InternalStructs.unregisterExtension_result();
        await tmp245.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp245.__isset.e)
        {
          throw tmp245.E;
        }
      }

      public async global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default)
      {
        await send_ping(id, cancellationToken);
        await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp246 = new InternalStructs.ping_args() {
          Id = id,
        };
        
        await tmp246.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp247 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp247.Type == TMessageType.Exception)
        {
          var tmp248 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp248;
        }

        var tmp249 = new InternalStructs.ping_result();
        await tmp249.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp249.__isset.e)
        {
          throw tmp249.E;
        }
      }

      public async global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default)
      {
        await send_controller(id, cancellationToken);
        return await recv_controller(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controller(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp250 = new InternalStructs.controller_args() {
          Id = id,
        };
        
        await tmp250.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_controller(CancellationToken cancellationToken = default)
      {
        
        var tmp251 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp251.Type == TMessageType.Exception)
        {
          var tmp252 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp252;
        }

        var tmp253 = new InternalStructs.controller_result();
        await tmp253.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp253.__isset.success)
        {
          return tmp253.Success;
        }
        if (tmp253.__isset.e)
        {
          throw tmp253.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controller failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default)
      {
        await send_pendant(id, cancellationToken);
        return await recv_pendant(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendant(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp254 = new InternalStructs.pendant_args() {
          Id = id,
        };
        
        await tmp254.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_pendant(CancellationToken cancellationToken = default)
      {
        
        var tmp255 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp255.Type == TMessageType.Exception)
        {
          var tmp256 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp256;
        }

        var tmp257 = new InternalStructs.pendant_result();
        await tmp257.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp257.__isset.success)
        {
          return tmp257.Success;
        }
        if (tmp257.__isset.e)
        {
          throw tmp257.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendant failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await send_log(id, level, message, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("log", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp258 = new InternalStructs.log_args() {
          Id = id,
          Level = level,
          Message = message,
        };
        
        await tmp258.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_subscribeLoggingEvents(id, cancellationToken);
        await recv_subscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp259 = new InternalStructs.subscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp259.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp260 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp260.Type == TMessageType.Exception)
        {
          var tmp261 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp261;
        }

        var tmp262 = new InternalStructs.subscribeLoggingEvents_result();
        await tmp262.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeLoggingEvents(id, cancellationToken);
        await recv_unsubscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp263 = new InternalStructs.unsubscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp263.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp264 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp264.Type == TMessageType.Exception)
        {
          var tmp265 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp265;
        }

        var tmp266 = new InternalStructs.unsubscribeLoggingEvents_result();
        await tmp266.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_logEvents(id, cancellationToken);
        return await recv_logEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_logEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp267 = new InternalStructs.logEvents_args() {
          Id = id,
        };
        
        await tmp267.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> recv_logEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp268 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp268.Type == TMessageType.Exception)
        {
          var tmp269 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp269;
        }

        var tmp270 = new InternalStructs.logEvents_result();
        await tmp270.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp270.__isset.success)
        {
          return tmp270.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "logEvents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> listAvailableStorage(long eid, CancellationToken cancellationToken = default)
      {
        await send_listAvailableStorage(eid, cancellationToken);
        return await recv_listAvailableStorage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listAvailableStorage(long eid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp271 = new InternalStructs.listAvailableStorage_args() {
          Eid = eid,
        };
        
        await tmp271.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> recv_listAvailableStorage(CancellationToken cancellationToken = default)
      {
        
        var tmp272 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp272.Type == TMessageType.Exception)
        {
          var tmp273 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp273;
        }

        var tmp274 = new InternalStructs.listAvailableStorage_result();
        await tmp274.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp274.__isset.success)
        {
          return tmp274.Success;
        }
        if (tmp274.__isset.e)
        {
          throw tmp274.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listAvailableStorage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> listFiles(long eid, string path, CancellationToken cancellationToken = default)
      {
        await send_listFiles(eid, path, cancellationToken);
        return await recv_listFiles(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listFiles(long eid, string path, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp275 = new InternalStructs.listFiles_args() {
          Eid = eid,
          Path = path,
        };
        
        await tmp275.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_listFiles(CancellationToken cancellationToken = default)
      {
        
        var tmp276 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp276.Type == TMessageType.Exception)
        {
          var tmp277 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp277;
        }

        var tmp278 = new InternalStructs.listFiles_result();
        await tmp278.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp278.__isset.success)
        {
          return tmp278.Success;
        }
        if (tmp278.__isset.e)
        {
          throw tmp278.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listFiles failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> openFile(long eid, string path, string flags, CancellationToken cancellationToken = default)
      {
        await send_openFile(eid, path, flags, cancellationToken);
        return await recv_openFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openFile(long eid, string path, string flags, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp279 = new InternalStructs.openFile_args() {
          Eid = eid,
          Path = path,
          Flags = flags,
        };
        
        await tmp279.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_openFile(CancellationToken cancellationToken = default)
      {
        
        var tmp280 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp280.Type == TMessageType.Exception)
        {
          var tmp281 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp281;
        }

        var tmp282 = new InternalStructs.openFile_result();
        await tmp282.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp282.__isset.success)
        {
          return tmp282.Success;
        }
        if (tmp282.__isset.e)
        {
          throw tmp282.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openFile failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task closeFile(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_closeFile(eid, id, cancellationToken);
        await recv_closeFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeFile(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp283 = new InternalStructs.closeFile_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp283.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeFile(CancellationToken cancellationToken = default)
      {
        
        var tmp284 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp284.Type == TMessageType.Exception)
        {
          var tmp285 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp285;
        }

        var tmp286 = new InternalStructs.closeFile_result();
        await tmp286.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp286.__isset.e)
        {
          throw tmp286.E;
        }
      }

      public async global::System.Threading.Tasks.Task<bool> isOpen(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_isOpen(eid, id, cancellationToken);
        return await recv_isOpen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_isOpen(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp287 = new InternalStructs.isOpen_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp287.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_isOpen(CancellationToken cancellationToken = default)
      {
        
        var tmp288 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp288.Type == TMessageType.Exception)
        {
          var tmp289 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp289;
        }

        var tmp290 = new InternalStructs.isOpen_result();
        await tmp290.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp290.__isset.success)
        {
          return tmp290.Success;
        }
        if (tmp290.__isset.e)
        {
          throw tmp290.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isOpen failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> read(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_read(eid, id, cancellationToken);
        return await recv_read(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_read(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp291 = new InternalStructs.read_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp291.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_read(CancellationToken cancellationToken = default)
      {
        
        var tmp292 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp292.Type == TMessageType.Exception)
        {
          var tmp293 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp293;
        }

        var tmp294 = new InternalStructs.read_result();
        await tmp294.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp294.__isset.success)
        {
          return tmp294.Success;
        }
        if (tmp294.__isset.e)
        {
          throw tmp294.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default)
      {
        await send_readChunk(eid, id, offset, len, cancellationToken);
        return await recv_readChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp295 = new InternalStructs.readChunk_args() {
          Eid = eid,
          Id = id,
          Offset = offset,
          Len = len,
        };
        
        await tmp295.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_readChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp296 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp296.Type == TMessageType.Exception)
        {
          var tmp297 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp297;
        }

        var tmp298 = new InternalStructs.readChunk_result();
        await tmp298.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp298.__isset.success)
        {
          return tmp298.Success;
        }
        if (tmp298.__isset.e)
        {
          throw tmp298.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "readChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task write(long eid, long id, string data, CancellationToken cancellationToken = default)
      {
        await send_write(eid, id, data, cancellationToken);
        await recv_write(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_write(long eid, long id, string data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp299 = new InternalStructs.write_args() {
          Eid = eid,
          Id = id,
          Data = data,
        };
        
        await tmp299.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_write(CancellationToken cancellationToken = default)
      {
        
        var tmp300 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp300.Type == TMessageType.Exception)
        {
          var tmp301 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp301;
        }

        var tmp302 = new InternalStructs.write_result();
        await tmp302.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp302.__isset.e)
        {
          throw tmp302.E;
        }
      }

      public async global::System.Threading.Tasks.Task flush(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_flush(eid, id, cancellationToken);
        await recv_flush(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_flush(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp303 = new InternalStructs.flush_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp303.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_flush(CancellationToken cancellationToken = default)
      {
        
        var tmp304 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp304.Type == TMessageType.Exception)
        {
          var tmp305 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp305;
        }

        var tmp306 = new InternalStructs.flush_result();
        await tmp306.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp306.__isset.e)
        {
          throw tmp306.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default)
      {
        await send_publicKey(id, cancellationToken);
        return await recv_publicKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_publicKey(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp307 = new InternalStructs.publicKey_args() {
          Id = id,
        };
        
        await tmp307.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_publicKey(CancellationToken cancellationToken = default)
      {
        
        var tmp308 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp308.Type == TMessageType.Exception)
        {
          var tmp309 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp309;
        }

        var tmp310 = new InternalStructs.publicKey_result();
        await tmp310.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp310.__isset.success)
        {
          return tmp310.Success;
        }
        if (tmp310.__isset.e)
        {
          throw tmp310.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "publicKey failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await send_oneTimeAuthToken(id, oneTimeSalt, publicKey, cancellationToken);
        return await recv_oneTimeAuthToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp311 = new InternalStructs.oneTimeAuthToken_args() {
          Id = id,
          OneTimeSalt = oneTimeSalt,
          PublicKey = publicKey,
        };
        
        await tmp311.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_oneTimeAuthToken(CancellationToken cancellationToken = default)
      {
        
        var tmp312 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp312.Type == TMessageType.Exception)
        {
          var tmp313 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp313;
        }

        var tmp314 = new InternalStructs.oneTimeAuthToken_result();
        await tmp314.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp314.__isset.success)
        {
          return tmp314.Success;
        }
        if (tmp314.__isset.e)
        {
          throw tmp314.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "oneTimeAuthToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await send_installPackage(id, authToken, packageData, overridePasscodeEnc, cancellationToken);
        return await recv_installPackage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp315 = new InternalStructs.installPackage_args() {
          Id = id,
          AuthToken = authToken,
          PackageData = packageData,
          OverridePasscodeEnc = overridePasscodeEnc,
        };
        
        await tmp315.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_installPackage(CancellationToken cancellationToken = default)
      {
        
        var tmp316 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp316.Type == TMessageType.Exception)
        {
          var tmp317 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp317;
        }

        var tmp318 = new InternalStructs.installPackage_result();
        await tmp318.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp318.__isset.success)
        {
          return tmp318.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "installPackage failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["apiVersion"] = apiVersion_ProcessAsync;
        processMap_["registerExtension"] = registerExtension_ProcessAsync;
        processMap_["unregisterExtension"] = unregisterExtension_ProcessAsync;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["controller"] = controller_ProcessAsync;
        processMap_["pendant"] = pendant_ProcessAsync;
        processMap_["log"] = log_ProcessAsync;
        processMap_["subscribeLoggingEvents"] = subscribeLoggingEvents_ProcessAsync;
        processMap_["unsubscribeLoggingEvents"] = unsubscribeLoggingEvents_ProcessAsync;
        processMap_["logEvents"] = logEvents_ProcessAsync;
        processMap_["listAvailableStorage"] = listAvailableStorage_ProcessAsync;
        processMap_["listFiles"] = listFiles_ProcessAsync;
        processMap_["openFile"] = openFile_ProcessAsync;
        processMap_["closeFile"] = closeFile_ProcessAsync;
        processMap_["isOpen"] = isOpen_ProcessAsync;
        processMap_["read"] = read_ProcessAsync;
        processMap_["readChunk"] = readChunk_ProcessAsync;
        processMap_["write"] = write_ProcessAsync;
        processMap_["flush"] = flush_ProcessAsync;
        processMap_["publicKey"] = publicKey_ProcessAsync;
        processMap_["oneTimeAuthToken"] = oneTimeAuthToken_ProcessAsync;
        processMap_["installPackage"] = installPackage_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task apiVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp319 = new InternalStructs.apiVersion_args();
        await tmp319.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp320 = new InternalStructs.apiVersion_result();
        try
        {
          tmp320.Success = await _iAsync.apiVersion(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp320.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp321)
        {
          var tmp322 = $"Error occurred in {GetType().FullName}: {tmp321.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp321, tmp322);
          else
            Console.Error.WriteLine(tmp322);
          var tmp323 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp323.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp324 = new InternalStructs.registerExtension_args();
        await tmp324.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp325 = new InternalStructs.registerExtension_result();
        try
        {
          try
          {
            tmp325.Success = await _iAsync.registerExtension(tmp324.CanonicalName, tmp324.LaunchKey, tmp324.Version, tmp324.Vendor, tmp324.SupportedLanguages, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp326)
          {
            tmp325.E = tmp326;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp325.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp327)
        {
          var tmp328 = $"Error occurred in {GetType().FullName}: {tmp327.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp327, tmp328);
          else
            Console.Error.WriteLine(tmp328);
          var tmp329 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp329.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp330 = new InternalStructs.unregisterExtension_args();
        await tmp330.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp331 = new InternalStructs.unregisterExtension_result();
        try
        {
          try
          {
            await _iAsync.unregisterExtension(tmp330.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp332)
          {
            tmp331.E = tmp332;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp331.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp333)
        {
          var tmp334 = $"Error occurred in {GetType().FullName}: {tmp333.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp333, tmp334);
          else
            Console.Error.WriteLine(tmp334);
          var tmp335 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp335.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp336 = new InternalStructs.ping_args();
        await tmp336.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp337 = new InternalStructs.ping_result();
        try
        {
          try
          {
            await _iAsync.ping(tmp336.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp338)
          {
            tmp337.E = tmp338;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp337.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp339)
        {
          var tmp340 = $"Error occurred in {GetType().FullName}: {tmp339.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp339, tmp340);
          else
            Console.Error.WriteLine(tmp340);
          var tmp341 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp341.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controller_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp342 = new InternalStructs.controller_args();
        await tmp342.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp343 = new InternalStructs.controller_result();
        try
        {
          try
          {
            tmp343.Success = await _iAsync.controller(tmp342.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp344)
          {
            tmp343.E = tmp344;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Reply, seqid), cancellationToken); 
          await tmp343.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp345)
        {
          var tmp346 = $"Error occurred in {GetType().FullName}: {tmp345.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp345, tmp346);
          else
            Console.Error.WriteLine(tmp346);
          var tmp347 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Exception, seqid), cancellationToken);
          await tmp347.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pendant_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp348 = new InternalStructs.pendant_args();
        await tmp348.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp349 = new InternalStructs.pendant_result();
        try
        {
          try
          {
            tmp349.Success = await _iAsync.pendant(tmp348.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp350)
          {
            tmp349.E = tmp350;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Reply, seqid), cancellationToken); 
          await tmp349.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp351)
        {
          var tmp352 = $"Error occurred in {GetType().FullName}: {tmp351.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp351, tmp352);
          else
            Console.Error.WriteLine(tmp352);
          var tmp353 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Exception, seqid), cancellationToken);
          await tmp353.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp354 = new InternalStructs.log_args();
        await tmp354.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.log(tmp354.Id, tmp354.Level, tmp354.Message, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp356)
        {
          var tmp357 = $"Error occurred in {GetType().FullName}: {tmp356.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp356, tmp357);
          else
            Console.Error.WriteLine(tmp357);
        }
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp358 = new InternalStructs.subscribeLoggingEvents_args();
        await tmp358.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp359 = new InternalStructs.subscribeLoggingEvents_result();
        try
        {
          await _iAsync.subscribeLoggingEvents(tmp358.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp359.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp360)
        {
          var tmp361 = $"Error occurred in {GetType().FullName}: {tmp360.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp360, tmp361);
          else
            Console.Error.WriteLine(tmp361);
          var tmp362 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp362.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp363 = new InternalStructs.unsubscribeLoggingEvents_args();
        await tmp363.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp364 = new InternalStructs.unsubscribeLoggingEvents_result();
        try
        {
          await _iAsync.unsubscribeLoggingEvents(tmp363.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp364.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp365)
        {
          var tmp366 = $"Error occurred in {GetType().FullName}: {tmp365.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp365, tmp366);
          else
            Console.Error.WriteLine(tmp366);
          var tmp367 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp367.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task logEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp368 = new InternalStructs.logEvents_args();
        await tmp368.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp369 = new InternalStructs.logEvents_result();
        try
        {
          tmp369.Success = await _iAsync.logEvents(tmp368.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp369.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp370)
        {
          var tmp371 = $"Error occurred in {GetType().FullName}: {tmp370.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp370, tmp371);
          else
            Console.Error.WriteLine(tmp371);
          var tmp372 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp372.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listAvailableStorage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp373 = new InternalStructs.listAvailableStorage_args();
        await tmp373.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp374 = new InternalStructs.listAvailableStorage_result();
        try
        {
          try
          {
            tmp374.Success = await _iAsync.listAvailableStorage(tmp373.Eid, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp375)
          {
            tmp374.E = tmp375;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp374.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp376)
        {
          var tmp377 = $"Error occurred in {GetType().FullName}: {tmp376.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp376, tmp377);
          else
            Console.Error.WriteLine(tmp377);
          var tmp378 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Exception, seqid), cancellationToken);
          await tmp378.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listFiles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp379 = new InternalStructs.listFiles_args();
        await tmp379.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp380 = new InternalStructs.listFiles_result();
        try
        {
          try
          {
            tmp380.Success = await _iAsync.listFiles(tmp379.Eid, tmp379.Path, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp381)
          {
            tmp380.E = tmp381;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Reply, seqid), cancellationToken); 
          await tmp380.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp382)
        {
          var tmp383 = $"Error occurred in {GetType().FullName}: {tmp382.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp382, tmp383);
          else
            Console.Error.WriteLine(tmp383);
          var tmp384 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Exception, seqid), cancellationToken);
          await tmp384.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp385 = new InternalStructs.openFile_args();
        await tmp385.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp386 = new InternalStructs.openFile_result();
        try
        {
          try
          {
            tmp386.Success = await _iAsync.openFile(tmp385.Eid, tmp385.Path, tmp385.Flags, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp387)
          {
            tmp386.E = tmp387;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp386.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp388)
        {
          var tmp389 = $"Error occurred in {GetType().FullName}: {tmp388.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp388, tmp389);
          else
            Console.Error.WriteLine(tmp389);
          var tmp390 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp390.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp391 = new InternalStructs.closeFile_args();
        await tmp391.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp392 = new InternalStructs.closeFile_result();
        try
        {
          try
          {
            await _iAsync.closeFile(tmp391.Eid, tmp391.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp393)
          {
            tmp392.E = tmp393;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp392.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp394)
        {
          var tmp395 = $"Error occurred in {GetType().FullName}: {tmp394.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp394, tmp395);
          else
            Console.Error.WriteLine(tmp395);
          var tmp396 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp396.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task isOpen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp397 = new InternalStructs.isOpen_args();
        await tmp397.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp398 = new InternalStructs.isOpen_result();
        try
        {
          try
          {
            tmp398.Success = await _iAsync.isOpen(tmp397.Eid, tmp397.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp399)
          {
            tmp398.E = tmp399;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp398.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp400)
        {
          var tmp401 = $"Error occurred in {GetType().FullName}: {tmp400.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp400, tmp401);
          else
            Console.Error.WriteLine(tmp401);
          var tmp402 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Exception, seqid), cancellationToken);
          await tmp402.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp403 = new InternalStructs.read_args();
        await tmp403.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp404 = new InternalStructs.read_result();
        try
        {
          try
          {
            tmp404.Success = await _iAsync.read(tmp403.Eid, tmp403.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp405)
          {
            tmp404.E = tmp405;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp404.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp406)
        {
          var tmp407 = $"Error occurred in {GetType().FullName}: {tmp406.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp406, tmp407);
          else
            Console.Error.WriteLine(tmp407);
          var tmp408 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("read", TMessageType.Exception, seqid), cancellationToken);
          await tmp408.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task readChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp409 = new InternalStructs.readChunk_args();
        await tmp409.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp410 = new InternalStructs.readChunk_result();
        try
        {
          try
          {
            tmp410.Success = await _iAsync.readChunk(tmp409.Eid, tmp409.Id, tmp409.Offset, tmp409.Len, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp411)
          {
            tmp410.E = tmp411;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp410.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp412)
        {
          var tmp413 = $"Error occurred in {GetType().FullName}: {tmp412.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp412, tmp413);
          else
            Console.Error.WriteLine(tmp413);
          var tmp414 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp414.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp415 = new InternalStructs.write_args();
        await tmp415.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp416 = new InternalStructs.write_result();
        try
        {
          try
          {
            await _iAsync.write(tmp415.Eid, tmp415.Id, tmp415.Data, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp417)
          {
            tmp416.E = tmp417;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp416.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp418)
        {
          var tmp419 = $"Error occurred in {GetType().FullName}: {tmp418.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp418, tmp419);
          else
            Console.Error.WriteLine(tmp419);
          var tmp420 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("write", TMessageType.Exception, seqid), cancellationToken);
          await tmp420.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task flush_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp421 = new InternalStructs.flush_args();
        await tmp421.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp422 = new InternalStructs.flush_result();
        try
        {
          try
          {
            await _iAsync.flush(tmp421.Eid, tmp421.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp423)
          {
            tmp422.E = tmp423;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Reply, seqid), cancellationToken); 
          await tmp422.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp424)
        {
          var tmp425 = $"Error occurred in {GetType().FullName}: {tmp424.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp424, tmp425);
          else
            Console.Error.WriteLine(tmp425);
          var tmp426 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Exception, seqid), cancellationToken);
          await tmp426.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task publicKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp427 = new InternalStructs.publicKey_args();
        await tmp427.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp428 = new InternalStructs.publicKey_result();
        try
        {
          try
          {
            tmp428.Success = await _iAsync.publicKey(tmp427.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp429)
          {
            tmp428.E = tmp429;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp428.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp430)
        {
          var tmp431 = $"Error occurred in {GetType().FullName}: {tmp430.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp430, tmp431);
          else
            Console.Error.WriteLine(tmp431);
          var tmp432 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp432.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task oneTimeAuthToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp433 = new InternalStructs.oneTimeAuthToken_args();
        await tmp433.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp434 = new InternalStructs.oneTimeAuthToken_result();
        try
        {
          try
          {
            tmp434.Success = await _iAsync.oneTimeAuthToken(tmp433.Id, tmp433.OneTimeSalt, tmp433.PublicKey, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp435)
          {
            tmp434.E = tmp435;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp434.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp436)
        {
          var tmp437 = $"Error occurred in {GetType().FullName}: {tmp436.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp436, tmp437);
          else
            Console.Error.WriteLine(tmp437);
          var tmp438 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp438.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task installPackage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp439 = new InternalStructs.installPackage_args();
        await tmp439.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp440 = new InternalStructs.installPackage_result();
        try
        {
          tmp440.Success = await _iAsync.installPackage(tmp439.Id, tmp439.AuthToken, tmp439.PackageData, tmp439.OverridePasscodeEnc, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp440.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp441)
        {
          var tmp442 = $"Error occurred in {GetType().FullName}: {tmp441.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp441, tmp442);
          else
            Console.Error.WriteLine(tmp442);
          var tmp443 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Exception, seqid), cancellationToken);
          await tmp443.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class apiVersion_args : TBase
      {

        public apiVersion_args()
        {
        }

        public apiVersion_args DeepCopy()
        {
          var tmp444 = new apiVersion_args();
          return tmp444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp445 = new TStruct("apiVersion_args");
            await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp446 = new StringBuilder("apiVersion_args(");
          tmp446.Append(')');
          return tmp446.ToString();
        }
      }


      public partial class apiVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public apiVersion_result()
        {
        }

        public apiVersion_result DeepCopy()
        {
          var tmp448 = new apiVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp448.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp448.__isset.success = this.__isset.success;
          return tmp448;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp449 = new TStruct("apiVersion_result");
            await oprot.WriteStructBeginAsync(tmp449, cancellationToken);
            var tmp450 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp450.Name = "Success";
                tmp450.Type = TType.Struct;
                tmp450.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp450, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp451 = new StringBuilder("apiVersion_result(");
          int tmp452 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp452++) { tmp451.Append(", "); }
            tmp451.Append("Success: ");
            Success.ToString(tmp451);
          }
          tmp451.Append(')');
          return tmp451.ToString();
        }
      }


      public partial class registerExtension_args : TBase
      {
        private string _canonicalName;
        private string _launchKey;
        private global::Yaskawa.Ext.API.Version _version;
        private string _vendor;
        private HashSet<string> _supportedLanguages;

        public string CanonicalName
        {
          get
          {
            return _canonicalName;
          }
          set
          {
            __isset.canonicalName = true;
            this._canonicalName = value;
          }
        }

        public string LaunchKey
        {
          get
          {
            return _launchKey;
          }
          set
          {
            __isset.launchKey = true;
            this._launchKey = value;
          }
        }

        public global::Yaskawa.Ext.API.Version Version
        {
          get
          {
            return _version;
          }
          set
          {
            __isset.version = true;
            this._version = value;
          }
        }

        public string Vendor
        {
          get
          {
            return _vendor;
          }
          set
          {
            __isset.vendor = true;
            this._vendor = value;
          }
        }

        public HashSet<string> SupportedLanguages
        {
          get
          {
            return _supportedLanguages;
          }
          set
          {
            __isset.supportedLanguages = true;
            this._supportedLanguages = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool canonicalName;
          public bool launchKey;
          public bool version;
          public bool vendor;
          public bool supportedLanguages;
        }

        public registerExtension_args()
        {
        }

        public registerExtension_args DeepCopy()
        {
          var tmp453 = new registerExtension_args();
          if((CanonicalName != null) && __isset.canonicalName)
          {
            tmp453.CanonicalName = this.CanonicalName;
          }
          tmp453.__isset.canonicalName = this.__isset.canonicalName;
          if((LaunchKey != null) && __isset.launchKey)
          {
            tmp453.LaunchKey = this.LaunchKey;
          }
          tmp453.__isset.launchKey = this.__isset.launchKey;
          if((Version != null) && __isset.version)
          {
            tmp453.Version = (global::Yaskawa.Ext.API.Version)this.Version.DeepCopy();
          }
          tmp453.__isset.version = this.__isset.version;
          if((Vendor != null) && __isset.vendor)
          {
            tmp453.Vendor = this.Vendor;
          }
          tmp453.__isset.vendor = this.__isset.vendor;
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            tmp453.SupportedLanguages = this.SupportedLanguages.DeepCopy();
          }
          tmp453.__isset.supportedLanguages = this.__isset.supportedLanguages;
          return tmp453;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CanonicalName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    LaunchKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Version = new global::Yaskawa.Ext.API.Version();
                    await Version.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Vendor = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set454 = await iprot.ReadSetBeginAsync(cancellationToken);
                      SupportedLanguages = new HashSet<string>(_set454.Count);
                      for(int _i455 = 0; _i455 < _set454.Count; ++_i455)
                      {
                        string _elem456;
                        _elem456 = await iprot.ReadStringAsync(cancellationToken);
                        SupportedLanguages.Add(_elem456);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp457 = new TStruct("registerExtension_args");
            await oprot.WriteStructBeginAsync(tmp457, cancellationToken);
            var tmp458 = new TField();
            if((CanonicalName != null) && __isset.canonicalName)
            {
              tmp458.Name = "canonicalName";
              tmp458.Type = TType.String;
              tmp458.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
              await oprot.WriteStringAsync(CanonicalName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              tmp458.Name = "launchKey";
              tmp458.Type = TType.String;
              tmp458.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
              await oprot.WriteStringAsync(LaunchKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Version != null) && __isset.version)
            {
              tmp458.Name = "version";
              tmp458.Type = TType.Struct;
              tmp458.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
              await Version.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Vendor != null) && __isset.vendor)
            {
              tmp458.Name = "vendor";
              tmp458.Type = TType.String;
              tmp458.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
              await oprot.WriteStringAsync(Vendor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              tmp458.Name = "supportedLanguages";
              tmp458.Type = TType.Set;
              tmp458.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, SupportedLanguages.Count), cancellationToken);
              foreach (string _iter459 in SupportedLanguages)
              {
                await oprot.WriteStringAsync(_iter459, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.canonicalName == other.__isset.canonicalName) && ((!__isset.canonicalName) || (global::System.Object.Equals(CanonicalName, other.CanonicalName))))
            && ((__isset.launchKey == other.__isset.launchKey) && ((!__isset.launchKey) || (global::System.Object.Equals(LaunchKey, other.LaunchKey))))
            && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
            && ((__isset.vendor == other.__isset.vendor) && ((!__isset.vendor) || (global::System.Object.Equals(Vendor, other.Vendor))))
            && ((__isset.supportedLanguages == other.__isset.supportedLanguages) && ((!__isset.supportedLanguages) || (TCollections.Equals(SupportedLanguages, other.SupportedLanguages))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CanonicalName != null) && __isset.canonicalName)
            {
              hashcode = (hashcode * 397) + CanonicalName.GetHashCode();
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              hashcode = (hashcode * 397) + LaunchKey.GetHashCode();
            }
            if((Version != null) && __isset.version)
            {
              hashcode = (hashcode * 397) + Version.GetHashCode();
            }
            if((Vendor != null) && __isset.vendor)
            {
              hashcode = (hashcode * 397) + Vendor.GetHashCode();
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(SupportedLanguages);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp460 = new StringBuilder("registerExtension_args(");
          int tmp461 = 0;
          if((CanonicalName != null) && __isset.canonicalName)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("CanonicalName: ");
            CanonicalName.ToString(tmp460);
          }
          if((LaunchKey != null) && __isset.launchKey)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("LaunchKey: ");
            LaunchKey.ToString(tmp460);
          }
          if((Version != null) && __isset.version)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("Version: ");
            Version.ToString(tmp460);
          }
          if((Vendor != null) && __isset.vendor)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("Vendor: ");
            Vendor.ToString(tmp460);
          }
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            if(0 < tmp461++) { tmp460.Append(", "); }
            tmp460.Append("SupportedLanguages: ");
            SupportedLanguages.ToString(tmp460);
          }
          tmp460.Append(')');
          return tmp460.ToString();
        }
      }


      public partial class registerExtension_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public registerExtension_result()
        {
        }

        public registerExtension_result DeepCopy()
        {
          var tmp462 = new registerExtension_result();
          if(__isset.success)
          {
            tmp462.Success = this.Success;
          }
          tmp462.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp462.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp462.__isset.e = this.__isset.e;
          return tmp462;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp463 = new TStruct("registerExtension_result");
            await oprot.WriteStructBeginAsync(tmp463, cancellationToken);
            var tmp464 = new TField();

            if(this.__isset.success)
            {
              tmp464.Name = "Success";
              tmp464.Type = TType.I64;
              tmp464.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp464, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp464.Name = "E";
                tmp464.Type = TType.Struct;
                tmp464.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp464, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp465 = new StringBuilder("registerExtension_result(");
          int tmp466 = 0;
          if(__isset.success)
          {
            if(0 < tmp466++) { tmp465.Append(", "); }
            tmp465.Append("Success: ");
            Success.ToString(tmp465);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp466++) { tmp465.Append(", "); }
            tmp465.Append("E: ");
            E.ToString(tmp465);
          }
          tmp465.Append(')');
          return tmp465.ToString();
        }
      }


      public partial class unregisterExtension_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unregisterExtension_args()
        {
        }

        public unregisterExtension_args DeepCopy()
        {
          var tmp467 = new unregisterExtension_args();
          if(__isset.id)
          {
            tmp467.Id = this.Id;
          }
          tmp467.__isset.id = this.__isset.id;
          return tmp467;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp468 = new TStruct("unregisterExtension_args");
            await oprot.WriteStructBeginAsync(tmp468, cancellationToken);
            var tmp469 = new TField();
            if(__isset.id)
            {
              tmp469.Name = "id";
              tmp469.Type = TType.I64;
              tmp469.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp469, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp470 = new StringBuilder("unregisterExtension_args(");
          int tmp471 = 0;
          if(__isset.id)
          {
            if(0 < tmp471++) { tmp470.Append(", "); }
            tmp470.Append("Id: ");
            Id.ToString(tmp470);
          }
          tmp470.Append(')');
          return tmp470.ToString();
        }
      }


      public partial class unregisterExtension_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterExtension_result()
        {
        }

        public unregisterExtension_result DeepCopy()
        {
          var tmp472 = new unregisterExtension_result();
          if((E != null) && __isset.e)
          {
            tmp472.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp472.__isset.e = this.__isset.e;
          return tmp472;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp473 = new TStruct("unregisterExtension_result");
            await oprot.WriteStructBeginAsync(tmp473, cancellationToken);
            var tmp474 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp474.Name = "E";
                tmp474.Type = TType.Struct;
                tmp474.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp474, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp475 = new StringBuilder("unregisterExtension_result(");
          int tmp476 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp476++) { tmp475.Append(", "); }
            tmp475.Append("E: ");
            E.ToString(tmp475);
          }
          tmp475.Append(')');
          return tmp475.ToString();
        }
      }


      public partial class ping_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp477 = new ping_args();
          if(__isset.id)
          {
            tmp477.Id = this.Id;
          }
          tmp477.__isset.id = this.__isset.id;
          return tmp477;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp478 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp478, cancellationToken);
            var tmp479 = new TField();
            if(__isset.id)
            {
              tmp479.Name = "id";
              tmp479.Type = TType.I64;
              tmp479.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp479, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp480 = new StringBuilder("ping_args(");
          int tmp481 = 0;
          if(__isset.id)
          {
            if(0 < tmp481++) { tmp480.Append(", "); }
            tmp480.Append("Id: ");
            Id.ToString(tmp480);
          }
          tmp480.Append(')');
          return tmp480.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp482 = new ping_result();
          if((E != null) && __isset.e)
          {
            tmp482.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp482.__isset.e = this.__isset.e;
          return tmp482;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp483 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp483, cancellationToken);
            var tmp484 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp484.Name = "E";
                tmp484.Type = TType.Struct;
                tmp484.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp484, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp485 = new StringBuilder("ping_result(");
          int tmp486 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp486++) { tmp485.Append(", "); }
            tmp485.Append("E: ");
            E.ToString(tmp485);
          }
          tmp485.Append(')');
          return tmp485.ToString();
        }
      }


      public partial class controller_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public controller_args()
        {
        }

        public controller_args DeepCopy()
        {
          var tmp487 = new controller_args();
          if(__isset.id)
          {
            tmp487.Id = this.Id;
          }
          tmp487.__isset.id = this.__isset.id;
          return tmp487;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp488 = new TStruct("controller_args");
            await oprot.WriteStructBeginAsync(tmp488, cancellationToken);
            var tmp489 = new TField();
            if(__isset.id)
            {
              tmp489.Name = "id";
              tmp489.Type = TType.I64;
              tmp489.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp489, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp490 = new StringBuilder("controller_args(");
          int tmp491 = 0;
          if(__isset.id)
          {
            if(0 < tmp491++) { tmp490.Append(", "); }
            tmp490.Append("Id: ");
            Id.ToString(tmp490);
          }
          tmp490.Append(')');
          return tmp490.ToString();
        }
      }


      public partial class controller_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public controller_result()
        {
        }

        public controller_result DeepCopy()
        {
          var tmp492 = new controller_result();
          if(__isset.success)
          {
            tmp492.Success = this.Success;
          }
          tmp492.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp492.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp492.__isset.e = this.__isset.e;
          return tmp492;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp493 = new TStruct("controller_result");
            await oprot.WriteStructBeginAsync(tmp493, cancellationToken);
            var tmp494 = new TField();

            if(this.__isset.success)
            {
              tmp494.Name = "Success";
              tmp494.Type = TType.I64;
              tmp494.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp494, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp494.Name = "E";
                tmp494.Type = TType.Struct;
                tmp494.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp494, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp495 = new StringBuilder("controller_result(");
          int tmp496 = 0;
          if(__isset.success)
          {
            if(0 < tmp496++) { tmp495.Append(", "); }
            tmp495.Append("Success: ");
            Success.ToString(tmp495);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp496++) { tmp495.Append(", "); }
            tmp495.Append("E: ");
            E.ToString(tmp495);
          }
          tmp495.Append(')');
          return tmp495.ToString();
        }
      }


      public partial class pendant_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public pendant_args()
        {
        }

        public pendant_args DeepCopy()
        {
          var tmp497 = new pendant_args();
          if(__isset.id)
          {
            tmp497.Id = this.Id;
          }
          tmp497.__isset.id = this.__isset.id;
          return tmp497;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp498 = new TStruct("pendant_args");
            await oprot.WriteStructBeginAsync(tmp498, cancellationToken);
            var tmp499 = new TField();
            if(__isset.id)
            {
              tmp499.Name = "id";
              tmp499.Type = TType.I64;
              tmp499.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp499, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp500 = new StringBuilder("pendant_args(");
          int tmp501 = 0;
          if(__isset.id)
          {
            if(0 < tmp501++) { tmp500.Append(", "); }
            tmp500.Append("Id: ");
            Id.ToString(tmp500);
          }
          tmp500.Append(')');
          return tmp500.ToString();
        }
      }


      public partial class pendant_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public pendant_result()
        {
        }

        public pendant_result DeepCopy()
        {
          var tmp502 = new pendant_result();
          if(__isset.success)
          {
            tmp502.Success = this.Success;
          }
          tmp502.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp502.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp502.__isset.e = this.__isset.e;
          return tmp502;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp503 = new TStruct("pendant_result");
            await oprot.WriteStructBeginAsync(tmp503, cancellationToken);
            var tmp504 = new TField();

            if(this.__isset.success)
            {
              tmp504.Name = "Success";
              tmp504.Type = TType.I64;
              tmp504.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp504.Name = "E";
                tmp504.Type = TType.Struct;
                tmp504.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp505 = new StringBuilder("pendant_result(");
          int tmp506 = 0;
          if(__isset.success)
          {
            if(0 < tmp506++) { tmp505.Append(", "); }
            tmp505.Append("Success: ");
            Success.ToString(tmp505);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp506++) { tmp505.Append(", "); }
            tmp505.Append("E: ");
            E.ToString(tmp505);
          }
          tmp505.Append(')');
          return tmp505.ToString();
        }
      }


      public partial class log_args : TBase
      {
        private long _id;
        private global::Yaskawa.Ext.API.LoggingLevel _level;
        private string _message;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.LoggingLevel"/>
        /// </summary>
        public global::Yaskawa.Ext.API.LoggingLevel Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool level;
          public bool message;
        }

        public log_args()
        {
        }

        public log_args DeepCopy()
        {
          var tmp507 = new log_args();
          if(__isset.id)
          {
            tmp507.Id = this.Id;
          }
          tmp507.__isset.id = this.__isset.id;
          if(__isset.level)
          {
            tmp507.Level = this.Level;
          }
          tmp507.__isset.level = this.__isset.level;
          if((Message != null) && __isset.message)
          {
            tmp507.Message = this.Message;
          }
          tmp507.__isset.message = this.__isset.message;
          return tmp507;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::Yaskawa.Ext.API.LoggingLevel)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp508 = new TStruct("log_args");
            await oprot.WriteStructBeginAsync(tmp508, cancellationToken);
            var tmp509 = new TField();
            if(__isset.id)
            {
              tmp509.Name = "id";
              tmp509.Type = TType.I64;
              tmp509.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp509, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.level)
            {
              tmp509.Name = "level";
              tmp509.Type = TType.I32;
              tmp509.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp509, cancellationToken);
              await oprot.WriteI32Async((int)Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp509.Name = "message";
              tmp509.Type = TType.String;
              tmp509.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp509, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is log_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp510 = new StringBuilder("log_args(");
          int tmp511 = 0;
          if(__isset.id)
          {
            if(0 < tmp511++) { tmp510.Append(", "); }
            tmp510.Append("Id: ");
            Id.ToString(tmp510);
          }
          if(__isset.level)
          {
            if(0 < tmp511++) { tmp510.Append(", "); }
            tmp510.Append("Level: ");
            Level.ToString(tmp510);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp511++) { tmp510.Append(", "); }
            tmp510.Append("Message: ");
            Message.ToString(tmp510);
          }
          tmp510.Append(')');
          return tmp510.ToString();
        }
      }


      public partial class subscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public subscribeLoggingEvents_args()
        {
        }

        public subscribeLoggingEvents_args DeepCopy()
        {
          var tmp512 = new subscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp512.Id = this.Id;
          }
          tmp512.__isset.id = this.__isset.id;
          return tmp512;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp513 = new TStruct("subscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp513, cancellationToken);
            var tmp514 = new TField();
            if(__isset.id)
            {
              tmp514.Name = "id";
              tmp514.Type = TType.I64;
              tmp514.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp514, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp515 = new StringBuilder("subscribeLoggingEvents_args(");
          int tmp516 = 0;
          if(__isset.id)
          {
            if(0 < tmp516++) { tmp515.Append(", "); }
            tmp515.Append("Id: ");
            Id.ToString(tmp515);
          }
          tmp515.Append(')');
          return tmp515.ToString();
        }
      }


      public partial class subscribeLoggingEvents_result : TBase
      {

        public subscribeLoggingEvents_result()
        {
        }

        public subscribeLoggingEvents_result DeepCopy()
        {
          var tmp517 = new subscribeLoggingEvents_result();
          return tmp517;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp518 = new TStruct("subscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp518, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp519 = new StringBuilder("subscribeLoggingEvents_result(");
          tmp519.Append(')');
          return tmp519.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unsubscribeLoggingEvents_args()
        {
        }

        public unsubscribeLoggingEvents_args DeepCopy()
        {
          var tmp521 = new unsubscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp521.Id = this.Id;
          }
          tmp521.__isset.id = this.__isset.id;
          return tmp521;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp522 = new TStruct("unsubscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp522, cancellationToken);
            var tmp523 = new TField();
            if(__isset.id)
            {
              tmp523.Name = "id";
              tmp523.Type = TType.I64;
              tmp523.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp523, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp524 = new StringBuilder("unsubscribeLoggingEvents_args(");
          int tmp525 = 0;
          if(__isset.id)
          {
            if(0 < tmp525++) { tmp524.Append(", "); }
            tmp524.Append("Id: ");
            Id.ToString(tmp524);
          }
          tmp524.Append(')');
          return tmp524.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_result : TBase
      {

        public unsubscribeLoggingEvents_result()
        {
        }

        public unsubscribeLoggingEvents_result DeepCopy()
        {
          var tmp526 = new unsubscribeLoggingEvents_result();
          return tmp526;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp527 = new TStruct("unsubscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp527, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp528 = new StringBuilder("unsubscribeLoggingEvents_result(");
          tmp528.Append(')');
          return tmp528.ToString();
        }
      }


      public partial class logEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public logEvents_args()
        {
        }

        public logEvents_args DeepCopy()
        {
          var tmp530 = new logEvents_args();
          if(__isset.id)
          {
            tmp530.Id = this.Id;
          }
          tmp530.__isset.id = this.__isset.id;
          return tmp530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp531 = new TStruct("logEvents_args");
            await oprot.WriteStructBeginAsync(tmp531, cancellationToken);
            var tmp532 = new TField();
            if(__isset.id)
            {
              tmp532.Name = "id";
              tmp532.Type = TType.I64;
              tmp532.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp532, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp533 = new StringBuilder("logEvents_args(");
          int tmp534 = 0;
          if(__isset.id)
          {
            if(0 < tmp534++) { tmp533.Append(", "); }
            tmp533.Append("Id: ");
            Id.ToString(tmp533);
          }
          tmp533.Append(')');
          return tmp533.ToString();
        }
      }


      public partial class logEvents_result : TBase
      {
        private List<global::Yaskawa.Ext.API.LoggingEvent> _success;

        public List<global::Yaskawa.Ext.API.LoggingEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public logEvents_result()
        {
        }

        public logEvents_result DeepCopy()
        {
          var tmp535 = new logEvents_result();
          if((Success != null) && __isset.success)
          {
            tmp535.Success = this.Success.DeepCopy();
          }
          tmp535.__isset.success = this.__isset.success;
          return tmp535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list536 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.LoggingEvent>(_list536.Count);
                      for(int _i537 = 0; _i537 < _list536.Count; ++_i537)
                      {
                        global::Yaskawa.Ext.API.LoggingEvent _elem538;
                        _elem538 = new global::Yaskawa.Ext.API.LoggingEvent();
                        await _elem538.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem538);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp539 = new TStruct("logEvents_result");
            await oprot.WriteStructBeginAsync(tmp539, cancellationToken);
            var tmp540 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp540.Name = "Success";
                tmp540.Type = TType.List;
                tmp540.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp540, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.LoggingEvent _iter541 in Success)
                {
                  await _iter541.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp542 = new StringBuilder("logEvents_result(");
          int tmp543 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp543++) { tmp542.Append(", "); }
            tmp542.Append("Success: ");
            Success.ToString(tmp542);
          }
          tmp542.Append(')');
          return tmp542.ToString();
        }
      }


      public partial class listAvailableStorage_args : TBase
      {
        private long _eid;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
        }

        public listAvailableStorage_args()
        {
        }

        public listAvailableStorage_args DeepCopy()
        {
          var tmp544 = new listAvailableStorage_args();
          if(__isset.eid)
          {
            tmp544.Eid = this.Eid;
          }
          tmp544.__isset.eid = this.__isset.eid;
          return tmp544;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp545 = new TStruct("listAvailableStorage_args");
            await oprot.WriteStructBeginAsync(tmp545, cancellationToken);
            var tmp546 = new TField();
            if(__isset.eid)
            {
              tmp546.Name = "eid";
              tmp546.Type = TType.I64;
              tmp546.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp546, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAvailableStorage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp547 = new StringBuilder("listAvailableStorage_args(");
          int tmp548 = 0;
          if(__isset.eid)
          {
            if(0 < tmp548++) { tmp547.Append(", "); }
            tmp547.Append("Eid: ");
            Eid.ToString(tmp547);
          }
          tmp547.Append(')');
          return tmp547.ToString();
        }
      }


      public partial class listAvailableStorage_result : TBase
      {
        private List<global::Yaskawa.Ext.API.storageInfo> _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public List<global::Yaskawa.Ext.API.storageInfo> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public listAvailableStorage_result()
        {
        }

        public listAvailableStorage_result DeepCopy()
        {
          var tmp549 = new listAvailableStorage_result();
          if((Success != null) && __isset.success)
          {
            tmp549.Success = this.Success.DeepCopy();
          }
          tmp549.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp549.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp549.__isset.e = this.__isset.e;
          return tmp549;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list550 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.storageInfo>(_list550.Count);
                      for(int _i551 = 0; _i551 < _list550.Count; ++_i551)
                      {
                        global::Yaskawa.Ext.API.storageInfo _elem552;
                        _elem552 = new global::Yaskawa.Ext.API.storageInfo();
                        await _elem552.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem552);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp553 = new TStruct("listAvailableStorage_result");
            await oprot.WriteStructBeginAsync(tmp553, cancellationToken);
            var tmp554 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp554.Name = "Success";
                tmp554.Type = TType.List;
                tmp554.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp554, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.storageInfo _iter555 in Success)
                {
                  await _iter555.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp554.Name = "E";
                tmp554.Type = TType.Struct;
                tmp554.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp554, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAvailableStorage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp556 = new StringBuilder("listAvailableStorage_result(");
          int tmp557 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp557++) { tmp556.Append(", "); }
            tmp556.Append("Success: ");
            Success.ToString(tmp556);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp557++) { tmp556.Append(", "); }
            tmp556.Append("E: ");
            E.ToString(tmp556);
          }
          tmp556.Append(')');
          return tmp556.ToString();
        }
      }


      public partial class listFiles_args : TBase
      {
        private long _eid;
        private string _path;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public string Path
        {
          get
          {
            return _path;
          }
          set
          {
            __isset.path = true;
            this._path = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool path;
        }

        public listFiles_args()
        {
        }

        public listFiles_args DeepCopy()
        {
          var tmp558 = new listFiles_args();
          if(__isset.eid)
          {
            tmp558.Eid = this.Eid;
          }
          tmp558.__isset.eid = this.__isset.eid;
          if((Path != null) && __isset.path)
          {
            tmp558.Path = this.Path;
          }
          tmp558.__isset.path = this.__isset.path;
          return tmp558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Path = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp559 = new TStruct("listFiles_args");
            await oprot.WriteStructBeginAsync(tmp559, cancellationToken);
            var tmp560 = new TField();
            if(__isset.eid)
            {
              tmp560.Name = "eid";
              tmp560.Type = TType.I64;
              tmp560.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp560, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Path != null) && __isset.path)
            {
              tmp560.Name = "path";
              tmp560.Type = TType.String;
              tmp560.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp560, cancellationToken);
              await oprot.WriteStringAsync(Path, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFiles_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if((Path != null) && __isset.path)
            {
              hashcode = (hashcode * 397) + Path.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp561 = new StringBuilder("listFiles_args(");
          int tmp562 = 0;
          if(__isset.eid)
          {
            if(0 < tmp562++) { tmp561.Append(", "); }
            tmp561.Append("Eid: ");
            Eid.ToString(tmp561);
          }
          if((Path != null) && __isset.path)
          {
            if(0 < tmp562++) { tmp561.Append(", "); }
            tmp561.Append("Path: ");
            Path.ToString(tmp561);
          }
          tmp561.Append(')');
          return tmp561.ToString();
        }
      }


      public partial class listFiles_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public listFiles_result()
        {
        }

        public listFiles_result DeepCopy()
        {
          var tmp563 = new listFiles_result();
          if((Success != null) && __isset.success)
          {
            tmp563.Success = this.Success.DeepCopy();
          }
          tmp563.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp563.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp563.__isset.e = this.__isset.e;
          return tmp563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list564 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list564.Count);
                      for(int _i565 = 0; _i565 < _list564.Count; ++_i565)
                      {
                        string _elem566;
                        _elem566 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem566);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp567 = new TStruct("listFiles_result");
            await oprot.WriteStructBeginAsync(tmp567, cancellationToken);
            var tmp568 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp568.Name = "Success";
                tmp568.Type = TType.List;
                tmp568.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp568, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter569 in Success)
                {
                  await oprot.WriteStringAsync(_iter569, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp568.Name = "E";
                tmp568.Type = TType.Struct;
                tmp568.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp568, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFiles_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp570 = new StringBuilder("listFiles_result(");
          int tmp571 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp571++) { tmp570.Append(", "); }
            tmp570.Append("Success: ");
            Success.ToString(tmp570);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp571++) { tmp570.Append(", "); }
            tmp570.Append("E: ");
            E.ToString(tmp570);
          }
          tmp570.Append(')');
          return tmp570.ToString();
        }
      }


      public partial class openFile_args : TBase
      {
        private long _eid;
        private string _path;
        private string _flags;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public string Path
        {
          get
          {
            return _path;
          }
          set
          {
            __isset.path = true;
            this._path = value;
          }
        }

        public string Flags
        {
          get
          {
            return _flags;
          }
          set
          {
            __isset.flags = true;
            this._flags = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool path;
          public bool flags;
        }

        public openFile_args()
        {
        }

        public openFile_args DeepCopy()
        {
          var tmp572 = new openFile_args();
          if(__isset.eid)
          {
            tmp572.Eid = this.Eid;
          }
          tmp572.__isset.eid = this.__isset.eid;
          if((Path != null) && __isset.path)
          {
            tmp572.Path = this.Path;
          }
          tmp572.__isset.path = this.__isset.path;
          if((Flags != null) && __isset.flags)
          {
            tmp572.Flags = this.Flags;
          }
          tmp572.__isset.flags = this.__isset.flags;
          return tmp572;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Path = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Flags = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp573 = new TStruct("openFile_args");
            await oprot.WriteStructBeginAsync(tmp573, cancellationToken);
            var tmp574 = new TField();
            if(__isset.eid)
            {
              tmp574.Name = "eid";
              tmp574.Type = TType.I64;
              tmp574.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Path != null) && __isset.path)
            {
              tmp574.Name = "path";
              tmp574.Type = TType.String;
              tmp574.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
              await oprot.WriteStringAsync(Path, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Flags != null) && __isset.flags)
            {
              tmp574.Name = "flags";
              tmp574.Type = TType.String;
              tmp574.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
              await oprot.WriteStringAsync(Flags, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))))
            && ((__isset.flags == other.__isset.flags) && ((!__isset.flags) || (global::System.Object.Equals(Flags, other.Flags))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if((Path != null) && __isset.path)
            {
              hashcode = (hashcode * 397) + Path.GetHashCode();
            }
            if((Flags != null) && __isset.flags)
            {
              hashcode = (hashcode * 397) + Flags.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp575 = new StringBuilder("openFile_args(");
          int tmp576 = 0;
          if(__isset.eid)
          {
            if(0 < tmp576++) { tmp575.Append(", "); }
            tmp575.Append("Eid: ");
            Eid.ToString(tmp575);
          }
          if((Path != null) && __isset.path)
          {
            if(0 < tmp576++) { tmp575.Append(", "); }
            tmp575.Append("Path: ");
            Path.ToString(tmp575);
          }
          if((Flags != null) && __isset.flags)
          {
            if(0 < tmp576++) { tmp575.Append(", "); }
            tmp575.Append("Flags: ");
            Flags.ToString(tmp575);
          }
          tmp575.Append(')');
          return tmp575.ToString();
        }
      }


      public partial class openFile_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public openFile_result()
        {
        }

        public openFile_result DeepCopy()
        {
          var tmp577 = new openFile_result();
          if(__isset.success)
          {
            tmp577.Success = this.Success;
          }
          tmp577.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp577.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp577.__isset.e = this.__isset.e;
          return tmp577;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp578 = new TStruct("openFile_result");
            await oprot.WriteStructBeginAsync(tmp578, cancellationToken);
            var tmp579 = new TField();

            if(this.__isset.success)
            {
              tmp579.Name = "Success";
              tmp579.Type = TType.I64;
              tmp579.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp579.Name = "E";
                tmp579.Type = TType.Struct;
                tmp579.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp580 = new StringBuilder("openFile_result(");
          int tmp581 = 0;
          if(__isset.success)
          {
            if(0 < tmp581++) { tmp580.Append(", "); }
            tmp580.Append("Success: ");
            Success.ToString(tmp580);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp581++) { tmp580.Append(", "); }
            tmp580.Append("E: ");
            E.ToString(tmp580);
          }
          tmp580.Append(')');
          return tmp580.ToString();
        }
      }


      public partial class closeFile_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public closeFile_args()
        {
        }

        public closeFile_args DeepCopy()
        {
          var tmp582 = new closeFile_args();
          if(__isset.eid)
          {
            tmp582.Eid = this.Eid;
          }
          tmp582.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp582.Id = this.Id;
          }
          tmp582.__isset.id = this.__isset.id;
          return tmp582;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp583 = new TStruct("closeFile_args");
            await oprot.WriteStructBeginAsync(tmp583, cancellationToken);
            var tmp584 = new TField();
            if(__isset.eid)
            {
              tmp584.Name = "eid";
              tmp584.Type = TType.I64;
              tmp584.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp584.Name = "id";
              tmp584.Type = TType.I64;
              tmp584.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp585 = new StringBuilder("closeFile_args(");
          int tmp586 = 0;
          if(__isset.eid)
          {
            if(0 < tmp586++) { tmp585.Append(", "); }
            tmp585.Append("Eid: ");
            Eid.ToString(tmp585);
          }
          if(__isset.id)
          {
            if(0 < tmp586++) { tmp585.Append(", "); }
            tmp585.Append("Id: ");
            Id.ToString(tmp585);
          }
          tmp585.Append(')');
          return tmp585.ToString();
        }
      }


      public partial class closeFile_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public closeFile_result()
        {
        }

        public closeFile_result DeepCopy()
        {
          var tmp587 = new closeFile_result();
          if((E != null) && __isset.e)
          {
            tmp587.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp587.__isset.e = this.__isset.e;
          return tmp587;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp588 = new TStruct("closeFile_result");
            await oprot.WriteStructBeginAsync(tmp588, cancellationToken);
            var tmp589 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp589.Name = "E";
                tmp589.Type = TType.Struct;
                tmp589.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp589, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp590 = new StringBuilder("closeFile_result(");
          int tmp591 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp591++) { tmp590.Append(", "); }
            tmp590.Append("E: ");
            E.ToString(tmp590);
          }
          tmp590.Append(')');
          return tmp590.ToString();
        }
      }


      public partial class isOpen_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public isOpen_args()
        {
        }

        public isOpen_args DeepCopy()
        {
          var tmp592 = new isOpen_args();
          if(__isset.eid)
          {
            tmp592.Eid = this.Eid;
          }
          tmp592.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp592.Id = this.Id;
          }
          tmp592.__isset.id = this.__isset.id;
          return tmp592;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp593 = new TStruct("isOpen_args");
            await oprot.WriteStructBeginAsync(tmp593, cancellationToken);
            var tmp594 = new TField();
            if(__isset.eid)
            {
              tmp594.Name = "eid";
              tmp594.Type = TType.I64;
              tmp594.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp594.Name = "id";
              tmp594.Type = TType.I64;
              tmp594.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is isOpen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp595 = new StringBuilder("isOpen_args(");
          int tmp596 = 0;
          if(__isset.eid)
          {
            if(0 < tmp596++) { tmp595.Append(", "); }
            tmp595.Append("Eid: ");
            Eid.ToString(tmp595);
          }
          if(__isset.id)
          {
            if(0 < tmp596++) { tmp595.Append(", "); }
            tmp595.Append("Id: ");
            Id.ToString(tmp595);
          }
          tmp595.Append(')');
          return tmp595.ToString();
        }
      }


      public partial class isOpen_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public isOpen_result()
        {
        }

        public isOpen_result DeepCopy()
        {
          var tmp597 = new isOpen_result();
          if(__isset.success)
          {
            tmp597.Success = this.Success;
          }
          tmp597.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp597.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp597.__isset.e = this.__isset.e;
          return tmp597;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp598 = new TStruct("isOpen_result");
            await oprot.WriteStructBeginAsync(tmp598, cancellationToken);
            var tmp599 = new TField();

            if(this.__isset.success)
            {
              tmp599.Name = "Success";
              tmp599.Type = TType.Bool;
              tmp599.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp599.Name = "E";
                tmp599.Type = TType.Struct;
                tmp599.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is isOpen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp600 = new StringBuilder("isOpen_result(");
          int tmp601 = 0;
          if(__isset.success)
          {
            if(0 < tmp601++) { tmp600.Append(", "); }
            tmp600.Append("Success: ");
            Success.ToString(tmp600);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp601++) { tmp600.Append(", "); }
            tmp600.Append("E: ");
            E.ToString(tmp600);
          }
          tmp600.Append(')');
          return tmp600.ToString();
        }
      }


      public partial class read_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public read_args()
        {
        }

        public read_args DeepCopy()
        {
          var tmp602 = new read_args();
          if(__isset.eid)
          {
            tmp602.Eid = this.Eid;
          }
          tmp602.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp602.Id = this.Id;
          }
          tmp602.__isset.id = this.__isset.id;
          return tmp602;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp603 = new TStruct("read_args");
            await oprot.WriteStructBeginAsync(tmp603, cancellationToken);
            var tmp604 = new TField();
            if(__isset.eid)
            {
              tmp604.Name = "eid";
              tmp604.Type = TType.I64;
              tmp604.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp604.Name = "id";
              tmp604.Type = TType.I64;
              tmp604.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is read_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp605 = new StringBuilder("read_args(");
          int tmp606 = 0;
          if(__isset.eid)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("Eid: ");
            Eid.ToString(tmp605);
          }
          if(__isset.id)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("Id: ");
            Id.ToString(tmp605);
          }
          tmp605.Append(')');
          return tmp605.ToString();
        }
      }


      public partial class read_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public read_result()
        {
        }

        public read_result DeepCopy()
        {
          var tmp607 = new read_result();
          if((Success != null) && __isset.success)
          {
            tmp607.Success = this.Success;
          }
          tmp607.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp607.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp607.__isset.e = this.__isset.e;
          return tmp607;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp608 = new TStruct("read_result");
            await oprot.WriteStructBeginAsync(tmp608, cancellationToken);
            var tmp609 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp609.Name = "Success";
                tmp609.Type = TType.String;
                tmp609.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp609, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp609.Name = "E";
                tmp609.Type = TType.Struct;
                tmp609.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp609, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is read_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp610 = new StringBuilder("read_result(");
          int tmp611 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp611++) { tmp610.Append(", "); }
            tmp610.Append("Success: ");
            Success.ToString(tmp610);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp611++) { tmp610.Append(", "); }
            tmp610.Append("E: ");
            E.ToString(tmp610);
          }
          tmp610.Append(')');
          return tmp610.ToString();
        }
      }


      public partial class readChunk_args : TBase
      {
        private long _eid;
        private long _id;
        private long _offset;
        private long _len;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public long Offset
        {
          get
          {
            return _offset;
          }
          set
          {
            __isset.offset = true;
            this._offset = value;
          }
        }

        public long Len
        {
          get
          {
            return _len;
          }
          set
          {
            __isset.len = true;
            this._len = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
          public bool offset;
          public bool len;
        }

        public readChunk_args()
        {
        }

        public readChunk_args DeepCopy()
        {
          var tmp612 = new readChunk_args();
          if(__isset.eid)
          {
            tmp612.Eid = this.Eid;
          }
          tmp612.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp612.Id = this.Id;
          }
          tmp612.__isset.id = this.__isset.id;
          if(__isset.offset)
          {
            tmp612.Offset = this.Offset;
          }
          tmp612.__isset.offset = this.__isset.offset;
          if(__isset.len)
          {
            tmp612.Len = this.Len;
          }
          tmp612.__isset.len = this.__isset.len;
          return tmp612;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Offset = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I64)
                  {
                    Len = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp613 = new TStruct("readChunk_args");
            await oprot.WriteStructBeginAsync(tmp613, cancellationToken);
            var tmp614 = new TField();
            if(__isset.eid)
            {
              tmp614.Name = "eid";
              tmp614.Type = TType.I64;
              tmp614.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp614.Name = "id";
              tmp614.Type = TType.I64;
              tmp614.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.offset)
            {
              tmp614.Name = "offset";
              tmp614.Type = TType.I64;
              tmp614.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
              await oprot.WriteI64Async(Offset, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.len)
            {
              tmp614.Name = "len";
              tmp614.Type = TType.I64;
              tmp614.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
              await oprot.WriteI64Async(Len, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is readChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.offset == other.__isset.offset) && ((!__isset.offset) || (global::System.Object.Equals(Offset, other.Offset))))
            && ((__isset.len == other.__isset.len) && ((!__isset.len) || (global::System.Object.Equals(Len, other.Len))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.offset)
            {
              hashcode = (hashcode * 397) + Offset.GetHashCode();
            }
            if(__isset.len)
            {
              hashcode = (hashcode * 397) + Len.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp615 = new StringBuilder("readChunk_args(");
          int tmp616 = 0;
          if(__isset.eid)
          {
            if(0 < tmp616++) { tmp615.Append(", "); }
            tmp615.Append("Eid: ");
            Eid.ToString(tmp615);
          }
          if(__isset.id)
          {
            if(0 < tmp616++) { tmp615.Append(", "); }
            tmp615.Append("Id: ");
            Id.ToString(tmp615);
          }
          if(__isset.offset)
          {
            if(0 < tmp616++) { tmp615.Append(", "); }
            tmp615.Append("Offset: ");
            Offset.ToString(tmp615);
          }
          if(__isset.len)
          {
            if(0 < tmp616++) { tmp615.Append(", "); }
            tmp615.Append("Len: ");
            Len.ToString(tmp615);
          }
          tmp615.Append(')');
          return tmp615.ToString();
        }
      }


      public partial class readChunk_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public readChunk_result()
        {
        }

        public readChunk_result DeepCopy()
        {
          var tmp617 = new readChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp617.Success = this.Success;
          }
          tmp617.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp617.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp617.__isset.e = this.__isset.e;
          return tmp617;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp618 = new TStruct("readChunk_result");
            await oprot.WriteStructBeginAsync(tmp618, cancellationToken);
            var tmp619 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp619.Name = "Success";
                tmp619.Type = TType.String;
                tmp619.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp619, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp619.Name = "E";
                tmp619.Type = TType.Struct;
                tmp619.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp619, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is readChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp620 = new StringBuilder("readChunk_result(");
          int tmp621 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp621++) { tmp620.Append(", "); }
            tmp620.Append("Success: ");
            Success.ToString(tmp620);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp621++) { tmp620.Append(", "); }
            tmp620.Append("E: ");
            E.ToString(tmp620);
          }
          tmp620.Append(')');
          return tmp620.ToString();
        }
      }


      public partial class write_args : TBase
      {
        private long _eid;
        private long _id;
        private string _data;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
          public bool data;
        }

        public write_args()
        {
        }

        public write_args DeepCopy()
        {
          var tmp622 = new write_args();
          if(__isset.eid)
          {
            tmp622.Eid = this.Eid;
          }
          tmp622.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp622.Id = this.Id;
          }
          tmp622.__isset.id = this.__isset.id;
          if((Data != null) && __isset.data)
          {
            tmp622.Data = this.Data;
          }
          tmp622.__isset.data = this.__isset.data;
          return tmp622;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Data = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp623 = new TStruct("write_args");
            await oprot.WriteStructBeginAsync(tmp623, cancellationToken);
            var tmp624 = new TField();
            if(__isset.eid)
            {
              tmp624.Name = "eid";
              tmp624.Type = TType.I64;
              tmp624.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp624.Name = "id";
              tmp624.Type = TType.I64;
              tmp624.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp624.Name = "data";
              tmp624.Type = TType.String;
              tmp624.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
              await oprot.WriteStringAsync(Data, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is write_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp625 = new StringBuilder("write_args(");
          int tmp626 = 0;
          if(__isset.eid)
          {
            if(0 < tmp626++) { tmp625.Append(", "); }
            tmp625.Append("Eid: ");
            Eid.ToString(tmp625);
          }
          if(__isset.id)
          {
            if(0 < tmp626++) { tmp625.Append(", "); }
            tmp625.Append("Id: ");
            Id.ToString(tmp625);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp626++) { tmp625.Append(", "); }
            tmp625.Append("Data: ");
            Data.ToString(tmp625);
          }
          tmp625.Append(')');
          return tmp625.ToString();
        }
      }


      public partial class write_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public write_result()
        {
        }

        public write_result DeepCopy()
        {
          var tmp627 = new write_result();
          if((E != null) && __isset.e)
          {
            tmp627.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp627.__isset.e = this.__isset.e;
          return tmp627;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp628 = new TStruct("write_result");
            await oprot.WriteStructBeginAsync(tmp628, cancellationToken);
            var tmp629 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp629.Name = "E";
                tmp629.Type = TType.Struct;
                tmp629.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp629, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is write_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp630 = new StringBuilder("write_result(");
          int tmp631 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp631++) { tmp630.Append(", "); }
            tmp630.Append("E: ");
            E.ToString(tmp630);
          }
          tmp630.Append(')');
          return tmp630.ToString();
        }
      }


      public partial class flush_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public flush_args()
        {
        }

        public flush_args DeepCopy()
        {
          var tmp632 = new flush_args();
          if(__isset.eid)
          {
            tmp632.Eid = this.Eid;
          }
          tmp632.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp632.Id = this.Id;
          }
          tmp632.__isset.id = this.__isset.id;
          return tmp632;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp633 = new TStruct("flush_args");
            await oprot.WriteStructBeginAsync(tmp633, cancellationToken);
            var tmp634 = new TField();
            if(__isset.eid)
            {
              tmp634.Name = "eid";
              tmp634.Type = TType.I64;
              tmp634.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp634, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp634.Name = "id";
              tmp634.Type = TType.I64;
              tmp634.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp634, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is flush_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp635 = new StringBuilder("flush_args(");
          int tmp636 = 0;
          if(__isset.eid)
          {
            if(0 < tmp636++) { tmp635.Append(", "); }
            tmp635.Append("Eid: ");
            Eid.ToString(tmp635);
          }
          if(__isset.id)
          {
            if(0 < tmp636++) { tmp635.Append(", "); }
            tmp635.Append("Id: ");
            Id.ToString(tmp635);
          }
          tmp635.Append(')');
          return tmp635.ToString();
        }
      }


      public partial class flush_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public flush_result()
        {
        }

        public flush_result DeepCopy()
        {
          var tmp637 = new flush_result();
          if((E != null) && __isset.e)
          {
            tmp637.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp637.__isset.e = this.__isset.e;
          return tmp637;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp638 = new TStruct("flush_result");
            await oprot.WriteStructBeginAsync(tmp638, cancellationToken);
            var tmp639 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp639.Name = "E";
                tmp639.Type = TType.Struct;
                tmp639.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp639, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is flush_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp640 = new StringBuilder("flush_result(");
          int tmp641 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp641++) { tmp640.Append(", "); }
            tmp640.Append("E: ");
            E.ToString(tmp640);
          }
          tmp640.Append(')');
          return tmp640.ToString();
        }
      }


      public partial class publicKey_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public publicKey_args()
        {
        }

        public publicKey_args DeepCopy()
        {
          var tmp642 = new publicKey_args();
          if(__isset.id)
          {
            tmp642.Id = this.Id;
          }
          tmp642.__isset.id = this.__isset.id;
          return tmp642;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp643 = new TStruct("publicKey_args");
            await oprot.WriteStructBeginAsync(tmp643, cancellationToken);
            var tmp644 = new TField();
            if(__isset.id)
            {
              tmp644.Name = "id";
              tmp644.Type = TType.I64;
              tmp644.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp644, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp645 = new StringBuilder("publicKey_args(");
          int tmp646 = 0;
          if(__isset.id)
          {
            if(0 < tmp646++) { tmp645.Append(", "); }
            tmp645.Append("Id: ");
            Id.ToString(tmp645);
          }
          tmp645.Append(')');
          return tmp645.ToString();
        }
      }


      public partial class publicKey_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public publicKey_result()
        {
        }

        public publicKey_result DeepCopy()
        {
          var tmp647 = new publicKey_result();
          if((Success != null) && __isset.success)
          {
            tmp647.Success = this.Success;
          }
          tmp647.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp647.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp647.__isset.e = this.__isset.e;
          return tmp647;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp648 = new TStruct("publicKey_result");
            await oprot.WriteStructBeginAsync(tmp648, cancellationToken);
            var tmp649 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp649.Name = "Success";
                tmp649.Type = TType.String;
                tmp649.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp649, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp649.Name = "E";
                tmp649.Type = TType.Struct;
                tmp649.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp649, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp650 = new StringBuilder("publicKey_result(");
          int tmp651 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp651++) { tmp650.Append(", "); }
            tmp650.Append("Success: ");
            Success.ToString(tmp650);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp651++) { tmp650.Append(", "); }
            tmp650.Append("E: ");
            E.ToString(tmp650);
          }
          tmp650.Append(')');
          return tmp650.ToString();
        }
      }


      public partial class oneTimeAuthToken_args : TBase
      {
        private long _id;
        private string _oneTimeSalt;
        private byte[] _publicKey;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string OneTimeSalt
        {
          get
          {
            return _oneTimeSalt;
          }
          set
          {
            __isset.oneTimeSalt = true;
            this._oneTimeSalt = value;
          }
        }

        public byte[] PublicKey
        {
          get
          {
            return _publicKey;
          }
          set
          {
            __isset.publicKey = true;
            this._publicKey = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool oneTimeSalt;
          public bool publicKey;
        }

        public oneTimeAuthToken_args()
        {
        }

        public oneTimeAuthToken_args DeepCopy()
        {
          var tmp652 = new oneTimeAuthToken_args();
          if(__isset.id)
          {
            tmp652.Id = this.Id;
          }
          tmp652.__isset.id = this.__isset.id;
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            tmp652.OneTimeSalt = this.OneTimeSalt;
          }
          tmp652.__isset.oneTimeSalt = this.__isset.oneTimeSalt;
          if((PublicKey != null) && __isset.publicKey)
          {
            tmp652.PublicKey = this.PublicKey.ToArray();
          }
          tmp652.__isset.publicKey = this.__isset.publicKey;
          return tmp652;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    OneTimeSalt = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PublicKey = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp653 = new TStruct("oneTimeAuthToken_args");
            await oprot.WriteStructBeginAsync(tmp653, cancellationToken);
            var tmp654 = new TField();
            if(__isset.id)
            {
              tmp654.Name = "id";
              tmp654.Type = TType.I64;
              tmp654.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp654, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              tmp654.Name = "oneTimeSalt";
              tmp654.Type = TType.String;
              tmp654.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp654, cancellationToken);
              await oprot.WriteStringAsync(OneTimeSalt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              tmp654.Name = "publicKey";
              tmp654.Type = TType.String;
              tmp654.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp654, cancellationToken);
              await oprot.WriteBinaryAsync(PublicKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.oneTimeSalt == other.__isset.oneTimeSalt) && ((!__isset.oneTimeSalt) || (global::System.Object.Equals(OneTimeSalt, other.OneTimeSalt))))
            && ((__isset.publicKey == other.__isset.publicKey) && ((!__isset.publicKey) || (TCollections.Equals(PublicKey, other.PublicKey))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              hashcode = (hashcode * 397) + OneTimeSalt.GetHashCode();
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              hashcode = (hashcode * 397) + PublicKey.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp655 = new StringBuilder("oneTimeAuthToken_args(");
          int tmp656 = 0;
          if(__isset.id)
          {
            if(0 < tmp656++) { tmp655.Append(", "); }
            tmp655.Append("Id: ");
            Id.ToString(tmp655);
          }
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            if(0 < tmp656++) { tmp655.Append(", "); }
            tmp655.Append("OneTimeSalt: ");
            OneTimeSalt.ToString(tmp655);
          }
          if((PublicKey != null) && __isset.publicKey)
          {
            if(0 < tmp656++) { tmp655.Append(", "); }
            tmp655.Append("PublicKey: ");
            PublicKey.ToString(tmp655);
          }
          tmp655.Append(')');
          return tmp655.ToString();
        }
      }


      public partial class oneTimeAuthToken_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public oneTimeAuthToken_result()
        {
        }

        public oneTimeAuthToken_result DeepCopy()
        {
          var tmp657 = new oneTimeAuthToken_result();
          if((Success != null) && __isset.success)
          {
            tmp657.Success = this.Success;
          }
          tmp657.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp657.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp657.__isset.e = this.__isset.e;
          return tmp657;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp658 = new TStruct("oneTimeAuthToken_result");
            await oprot.WriteStructBeginAsync(tmp658, cancellationToken);
            var tmp659 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp659.Name = "Success";
                tmp659.Type = TType.String;
                tmp659.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp659, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp659.Name = "E";
                tmp659.Type = TType.Struct;
                tmp659.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp659, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp660 = new StringBuilder("oneTimeAuthToken_result(");
          int tmp661 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp661++) { tmp660.Append(", "); }
            tmp660.Append("Success: ");
            Success.ToString(tmp660);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp661++) { tmp660.Append(", "); }
            tmp660.Append("E: ");
            E.ToString(tmp660);
          }
          tmp660.Append(')');
          return tmp660.ToString();
        }
      }


      public partial class installPackage_args : TBase
      {
        private long _id;
        private string _authToken;
        private byte[] _packageData;
        private string _overridePasscodeEnc;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string AuthToken
        {
          get
          {
            return _authToken;
          }
          set
          {
            __isset.authToken = true;
            this._authToken = value;
          }
        }

        public byte[] PackageData
        {
          get
          {
            return _packageData;
          }
          set
          {
            __isset.packageData = true;
            this._packageData = value;
          }
        }

        public string OverridePasscodeEnc
        {
          get
          {
            return _overridePasscodeEnc;
          }
          set
          {
            __isset.overridePasscodeEnc = true;
            this._overridePasscodeEnc = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool authToken;
          public bool packageData;
          public bool overridePasscodeEnc;
        }

        public installPackage_args()
        {
        }

        public installPackage_args DeepCopy()
        {
          var tmp662 = new installPackage_args();
          if(__isset.id)
          {
            tmp662.Id = this.Id;
          }
          tmp662.__isset.id = this.__isset.id;
          if((AuthToken != null) && __isset.authToken)
          {
            tmp662.AuthToken = this.AuthToken;
          }
          tmp662.__isset.authToken = this.__isset.authToken;
          if((PackageData != null) && __isset.packageData)
          {
            tmp662.PackageData = this.PackageData.ToArray();
          }
          tmp662.__isset.packageData = this.__isset.packageData;
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            tmp662.OverridePasscodeEnc = this.OverridePasscodeEnc;
          }
          tmp662.__isset.overridePasscodeEnc = this.__isset.overridePasscodeEnc;
          return tmp662;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    AuthToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PackageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    OverridePasscodeEnc = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp663 = new TStruct("installPackage_args");
            await oprot.WriteStructBeginAsync(tmp663, cancellationToken);
            var tmp664 = new TField();
            if(__isset.id)
            {
              tmp664.Name = "id";
              tmp664.Type = TType.I64;
              tmp664.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((AuthToken != null) && __isset.authToken)
            {
              tmp664.Name = "authToken";
              tmp664.Type = TType.String;
              tmp664.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              await oprot.WriteStringAsync(AuthToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PackageData != null) && __isset.packageData)
            {
              tmp664.Name = "packageData";
              tmp664.Type = TType.String;
              tmp664.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              await oprot.WriteBinaryAsync(PackageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              tmp664.Name = "overridePasscodeEnc";
              tmp664.Type = TType.String;
              tmp664.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              await oprot.WriteStringAsync(OverridePasscodeEnc, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.authToken == other.__isset.authToken) && ((!__isset.authToken) || (global::System.Object.Equals(AuthToken, other.AuthToken))))
            && ((__isset.packageData == other.__isset.packageData) && ((!__isset.packageData) || (TCollections.Equals(PackageData, other.PackageData))))
            && ((__isset.overridePasscodeEnc == other.__isset.overridePasscodeEnc) && ((!__isset.overridePasscodeEnc) || (global::System.Object.Equals(OverridePasscodeEnc, other.OverridePasscodeEnc))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((AuthToken != null) && __isset.authToken)
            {
              hashcode = (hashcode * 397) + AuthToken.GetHashCode();
            }
            if((PackageData != null) && __isset.packageData)
            {
              hashcode = (hashcode * 397) + PackageData.GetHashCode();
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              hashcode = (hashcode * 397) + OverridePasscodeEnc.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp665 = new StringBuilder("installPackage_args(");
          int tmp666 = 0;
          if(__isset.id)
          {
            if(0 < tmp666++) { tmp665.Append(", "); }
            tmp665.Append("Id: ");
            Id.ToString(tmp665);
          }
          if((AuthToken != null) && __isset.authToken)
          {
            if(0 < tmp666++) { tmp665.Append(", "); }
            tmp665.Append("AuthToken: ");
            AuthToken.ToString(tmp665);
          }
          if((PackageData != null) && __isset.packageData)
          {
            if(0 < tmp666++) { tmp665.Append(", "); }
            tmp665.Append("PackageData: ");
            PackageData.ToString(tmp665);
          }
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            if(0 < tmp666++) { tmp665.Append(", "); }
            tmp665.Append("OverridePasscodeEnc: ");
            OverridePasscodeEnc.ToString(tmp665);
          }
          tmp665.Append(')');
          return tmp665.ToString();
        }
      }


      public partial class installPackage_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public installPackage_result()
        {
        }

        public installPackage_result DeepCopy()
        {
          var tmp667 = new installPackage_result();
          if((Success != null) && __isset.success)
          {
            tmp667.Success = this.Success.DeepCopy();
          }
          tmp667.__isset.success = this.__isset.success;
          return tmp667;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list668 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list668.Count);
                      for(int _i669 = 0; _i669 < _list668.Count; ++_i669)
                      {
                        string _elem670;
                        _elem670 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem670);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp671 = new TStruct("installPackage_result");
            await oprot.WriteStructBeginAsync(tmp671, cancellationToken);
            var tmp672 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp672.Name = "Success";
                tmp672.Type = TType.List;
                tmp672.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp672, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter673 in Success)
                {
                  await oprot.WriteStringAsync(_iter673, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp674 = new StringBuilder("installPackage_result(");
          int tmp675 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp675++) { tmp674.Append(", "); }
            tmp674.Append("Success: ");
            Success.ToString(tmp674);
          }
          tmp674.Append(')');
          return tmp674.ToString();
        }
      }

    }

  }
}
