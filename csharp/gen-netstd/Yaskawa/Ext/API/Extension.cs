/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Extension
  {
    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of API the service implements.
      /// Smart Pendant | API version
      /// 2.0           | 2.0.4
      /// 2.1           | 2.1.0
      /// </summary>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default);

      /// <summary>
      /// Register extension with Smart Pendant API service.
      /// Extension must exist in the extension database (i.e. through installation)
      /// </summary>
      /// <param name="canonicalName"></param>
      /// <param name="launchKey"></param>
      /// <param name="version"></param>
      /// <param name="vendor"></param>
      /// <param name="supportedLanguages"></param>
      global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicate liveliness
      /// API service will automatically unregister extensions that are unresponsive for some period.
      /// If extension is not regularly calling events(), call ping() to indicate the extension is operational.
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Robot Conroller API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Pendant UI API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Log message to standard pendant logging facility
      /// Visible to end-users upon plain-text log file export.
      /// Note that Debug level logging is ignored unless in Developer access level.
      /// </summary>
      /// <param name="id"></param>
      /// <param name="level"></param>
      /// <param name="message"></param>
      global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to receive log message events via events()
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of logging events that have occured since last call
      /// NB: For development troubleshooting only, logging events
      /// only available when development access enabled
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default)
      {
        await send_apiVersion(cancellationToken);
        return await recv_apiVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_apiVersion(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp220 = new InternalStructs.apiVersion_args() {
        };
        
        await tmp220.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_apiVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp221 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp221.Type == TMessageType.Exception)
        {
          var tmp222 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp222;
        }

        var tmp223 = new InternalStructs.apiVersion_result();
        await tmp223.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp223.__isset.success)
        {
          return tmp223.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apiVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await send_registerExtension(canonicalName, launchKey, version, vendor, supportedLanguages, cancellationToken);
        return await recv_registerExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp224 = new InternalStructs.registerExtension_args() {
          CanonicalName = canonicalName,
          LaunchKey = launchKey,
          Version = version,
          Vendor = vendor,
          SupportedLanguages = supportedLanguages,
        };
        
        await tmp224.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_registerExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp225 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp225.Type == TMessageType.Exception)
        {
          var tmp226 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp226;
        }

        var tmp227 = new InternalStructs.registerExtension_result();
        await tmp227.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp227.__isset.success)
        {
          return tmp227.Success;
        }
        if (tmp227.__isset.e)
        {
          throw tmp227.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerExtension failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await send_unregisterExtension(id, cancellationToken);
        await recv_unregisterExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp228 = new InternalStructs.unregisterExtension_args() {
          Id = id,
        };
        
        await tmp228.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp229 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp229.Type == TMessageType.Exception)
        {
          var tmp230 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp230;
        }

        var tmp231 = new InternalStructs.unregisterExtension_result();
        await tmp231.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp231.__isset.e)
        {
          throw tmp231.E;
        }
      }

      public async global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default)
      {
        await send_ping(id, cancellationToken);
        await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp232 = new InternalStructs.ping_args() {
          Id = id,
        };
        
        await tmp232.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp233 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp233.Type == TMessageType.Exception)
        {
          var tmp234 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp234;
        }

        var tmp235 = new InternalStructs.ping_result();
        await tmp235.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp235.__isset.e)
        {
          throw tmp235.E;
        }
      }

      public async global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default)
      {
        await send_controller(id, cancellationToken);
        return await recv_controller(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controller(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp236 = new InternalStructs.controller_args() {
          Id = id,
        };
        
        await tmp236.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_controller(CancellationToken cancellationToken = default)
      {
        
        var tmp237 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp237.Type == TMessageType.Exception)
        {
          var tmp238 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp238;
        }

        var tmp239 = new InternalStructs.controller_result();
        await tmp239.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp239.__isset.success)
        {
          return tmp239.Success;
        }
        if (tmp239.__isset.e)
        {
          throw tmp239.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controller failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default)
      {
        await send_pendant(id, cancellationToken);
        return await recv_pendant(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendant(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp240 = new InternalStructs.pendant_args() {
          Id = id,
        };
        
        await tmp240.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_pendant(CancellationToken cancellationToken = default)
      {
        
        var tmp241 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp241.Type == TMessageType.Exception)
        {
          var tmp242 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp242;
        }

        var tmp243 = new InternalStructs.pendant_result();
        await tmp243.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp243.__isset.success)
        {
          return tmp243.Success;
        }
        if (tmp243.__isset.e)
        {
          throw tmp243.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendant failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await send_log(id, level, message, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("log", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp244 = new InternalStructs.log_args() {
          Id = id,
          Level = level,
          Message = message,
        };
        
        await tmp244.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_subscribeLoggingEvents(id, cancellationToken);
        await recv_subscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp245 = new InternalStructs.subscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp245.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp246 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp246.Type == TMessageType.Exception)
        {
          var tmp247 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp247;
        }

        var tmp248 = new InternalStructs.subscribeLoggingEvents_result();
        await tmp248.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeLoggingEvents(id, cancellationToken);
        await recv_unsubscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp249 = new InternalStructs.unsubscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp249.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp250 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp250.Type == TMessageType.Exception)
        {
          var tmp251 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp251;
        }

        var tmp252 = new InternalStructs.unsubscribeLoggingEvents_result();
        await tmp252.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_logEvents(id, cancellationToken);
        return await recv_logEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_logEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp253 = new InternalStructs.logEvents_args() {
          Id = id,
        };
        
        await tmp253.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> recv_logEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp254 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp254.Type == TMessageType.Exception)
        {
          var tmp255 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp255;
        }

        var tmp256 = new InternalStructs.logEvents_result();
        await tmp256.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp256.__isset.success)
        {
          return tmp256.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "logEvents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default)
      {
        await send_publicKey(id, cancellationToken);
        return await recv_publicKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_publicKey(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp257 = new InternalStructs.publicKey_args() {
          Id = id,
        };
        
        await tmp257.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_publicKey(CancellationToken cancellationToken = default)
      {
        
        var tmp258 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp258.Type == TMessageType.Exception)
        {
          var tmp259 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp259;
        }

        var tmp260 = new InternalStructs.publicKey_result();
        await tmp260.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp260.__isset.success)
        {
          return tmp260.Success;
        }
        if (tmp260.__isset.e)
        {
          throw tmp260.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "publicKey failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await send_oneTimeAuthToken(id, oneTimeSalt, publicKey, cancellationToken);
        return await recv_oneTimeAuthToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp261 = new InternalStructs.oneTimeAuthToken_args() {
          Id = id,
          OneTimeSalt = oneTimeSalt,
          PublicKey = publicKey,
        };
        
        await tmp261.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_oneTimeAuthToken(CancellationToken cancellationToken = default)
      {
        
        var tmp262 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp262.Type == TMessageType.Exception)
        {
          var tmp263 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp263;
        }

        var tmp264 = new InternalStructs.oneTimeAuthToken_result();
        await tmp264.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp264.__isset.success)
        {
          return tmp264.Success;
        }
        if (tmp264.__isset.e)
        {
          throw tmp264.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "oneTimeAuthToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await send_installPackage(id, authToken, packageData, overridePasscodeEnc, cancellationToken);
        return await recv_installPackage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp265 = new InternalStructs.installPackage_args() {
          Id = id,
          AuthToken = authToken,
          PackageData = packageData,
          OverridePasscodeEnc = overridePasscodeEnc,
        };
        
        await tmp265.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_installPackage(CancellationToken cancellationToken = default)
      {
        
        var tmp266 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp266.Type == TMessageType.Exception)
        {
          var tmp267 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp267;
        }

        var tmp268 = new InternalStructs.installPackage_result();
        await tmp268.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp268.__isset.success)
        {
          return tmp268.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "installPackage failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["apiVersion"] = apiVersion_ProcessAsync;
        processMap_["registerExtension"] = registerExtension_ProcessAsync;
        processMap_["unregisterExtension"] = unregisterExtension_ProcessAsync;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["controller"] = controller_ProcessAsync;
        processMap_["pendant"] = pendant_ProcessAsync;
        processMap_["log"] = log_ProcessAsync;
        processMap_["subscribeLoggingEvents"] = subscribeLoggingEvents_ProcessAsync;
        processMap_["unsubscribeLoggingEvents"] = unsubscribeLoggingEvents_ProcessAsync;
        processMap_["logEvents"] = logEvents_ProcessAsync;
        processMap_["publicKey"] = publicKey_ProcessAsync;
        processMap_["oneTimeAuthToken"] = oneTimeAuthToken_ProcessAsync;
        processMap_["installPackage"] = installPackage_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task apiVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp269 = new InternalStructs.apiVersion_args();
        await tmp269.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp270 = new InternalStructs.apiVersion_result();
        try
        {
          tmp270.Success = await _iAsync.apiVersion(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp270.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp271)
        {
          var tmp272 = $"Error occurred in {GetType().FullName}: {tmp271.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp271, tmp272);
          else
            Console.Error.WriteLine(tmp272);
          var tmp273 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp273.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp274 = new InternalStructs.registerExtension_args();
        await tmp274.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp275 = new InternalStructs.registerExtension_result();
        try
        {
          try
          {
            tmp275.Success = await _iAsync.registerExtension(tmp274.CanonicalName, tmp274.LaunchKey, tmp274.Version, tmp274.Vendor, tmp274.SupportedLanguages, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp276)
          {
            tmp275.E = tmp276;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp275.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp277)
        {
          var tmp278 = $"Error occurred in {GetType().FullName}: {tmp277.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp277, tmp278);
          else
            Console.Error.WriteLine(tmp278);
          var tmp279 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp279.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp280 = new InternalStructs.unregisterExtension_args();
        await tmp280.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp281 = new InternalStructs.unregisterExtension_result();
        try
        {
          try
          {
            await _iAsync.unregisterExtension(tmp280.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp282)
          {
            tmp281.E = tmp282;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp281.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp283)
        {
          var tmp284 = $"Error occurred in {GetType().FullName}: {tmp283.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp283, tmp284);
          else
            Console.Error.WriteLine(tmp284);
          var tmp285 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp285.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp286 = new InternalStructs.ping_args();
        await tmp286.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp287 = new InternalStructs.ping_result();
        try
        {
          try
          {
            await _iAsync.ping(tmp286.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp288)
          {
            tmp287.E = tmp288;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp287.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp289)
        {
          var tmp290 = $"Error occurred in {GetType().FullName}: {tmp289.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp289, tmp290);
          else
            Console.Error.WriteLine(tmp290);
          var tmp291 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp291.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controller_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp292 = new InternalStructs.controller_args();
        await tmp292.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp293 = new InternalStructs.controller_result();
        try
        {
          try
          {
            tmp293.Success = await _iAsync.controller(tmp292.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp294)
          {
            tmp293.E = tmp294;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Reply, seqid), cancellationToken); 
          await tmp293.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp295)
        {
          var tmp296 = $"Error occurred in {GetType().FullName}: {tmp295.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp295, tmp296);
          else
            Console.Error.WriteLine(tmp296);
          var tmp297 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Exception, seqid), cancellationToken);
          await tmp297.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pendant_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp298 = new InternalStructs.pendant_args();
        await tmp298.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp299 = new InternalStructs.pendant_result();
        try
        {
          try
          {
            tmp299.Success = await _iAsync.pendant(tmp298.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp300)
          {
            tmp299.E = tmp300;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Reply, seqid), cancellationToken); 
          await tmp299.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp301)
        {
          var tmp302 = $"Error occurred in {GetType().FullName}: {tmp301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp301, tmp302);
          else
            Console.Error.WriteLine(tmp302);
          var tmp303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Exception, seqid), cancellationToken);
          await tmp303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp304 = new InternalStructs.log_args();
        await tmp304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.log(tmp304.Id, tmp304.Level, tmp304.Message, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp306)
        {
          var tmp307 = $"Error occurred in {GetType().FullName}: {tmp306.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp306, tmp307);
          else
            Console.Error.WriteLine(tmp307);
        }
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp308 = new InternalStructs.subscribeLoggingEvents_args();
        await tmp308.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp309 = new InternalStructs.subscribeLoggingEvents_result();
        try
        {
          await _iAsync.subscribeLoggingEvents(tmp308.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp309.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp310)
        {
          var tmp311 = $"Error occurred in {GetType().FullName}: {tmp310.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp310, tmp311);
          else
            Console.Error.WriteLine(tmp311);
          var tmp312 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp312.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp313 = new InternalStructs.unsubscribeLoggingEvents_args();
        await tmp313.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp314 = new InternalStructs.unsubscribeLoggingEvents_result();
        try
        {
          await _iAsync.unsubscribeLoggingEvents(tmp313.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp314.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp315)
        {
          var tmp316 = $"Error occurred in {GetType().FullName}: {tmp315.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp315, tmp316);
          else
            Console.Error.WriteLine(tmp316);
          var tmp317 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp317.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task logEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp318 = new InternalStructs.logEvents_args();
        await tmp318.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp319 = new InternalStructs.logEvents_result();
        try
        {
          tmp319.Success = await _iAsync.logEvents(tmp318.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp319.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp320)
        {
          var tmp321 = $"Error occurred in {GetType().FullName}: {tmp320.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp320, tmp321);
          else
            Console.Error.WriteLine(tmp321);
          var tmp322 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp322.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task publicKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp323 = new InternalStructs.publicKey_args();
        await tmp323.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp324 = new InternalStructs.publicKey_result();
        try
        {
          try
          {
            tmp324.Success = await _iAsync.publicKey(tmp323.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp325)
          {
            tmp324.E = tmp325;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp324.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp326)
        {
          var tmp327 = $"Error occurred in {GetType().FullName}: {tmp326.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp326, tmp327);
          else
            Console.Error.WriteLine(tmp327);
          var tmp328 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp328.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task oneTimeAuthToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp329 = new InternalStructs.oneTimeAuthToken_args();
        await tmp329.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp330 = new InternalStructs.oneTimeAuthToken_result();
        try
        {
          try
          {
            tmp330.Success = await _iAsync.oneTimeAuthToken(tmp329.Id, tmp329.OneTimeSalt, tmp329.PublicKey, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp331)
          {
            tmp330.E = tmp331;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp330.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp332)
        {
          var tmp333 = $"Error occurred in {GetType().FullName}: {tmp332.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp332, tmp333);
          else
            Console.Error.WriteLine(tmp333);
          var tmp334 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp334.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task installPackage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp335 = new InternalStructs.installPackage_args();
        await tmp335.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp336 = new InternalStructs.installPackage_result();
        try
        {
          tmp336.Success = await _iAsync.installPackage(tmp335.Id, tmp335.AuthToken, tmp335.PackageData, tmp335.OverridePasscodeEnc, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp336.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp337)
        {
          var tmp338 = $"Error occurred in {GetType().FullName}: {tmp337.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp337, tmp338);
          else
            Console.Error.WriteLine(tmp338);
          var tmp339 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Exception, seqid), cancellationToken);
          await tmp339.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class apiVersion_args : TBase
      {

        public apiVersion_args()
        {
        }

        public apiVersion_args DeepCopy()
        {
          var tmp340 = new apiVersion_args();
          return tmp340;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp341 = new TStruct("apiVersion_args");
            await oprot.WriteStructBeginAsync(tmp341, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp342 = new StringBuilder("apiVersion_args(");
          tmp342.Append(')');
          return tmp342.ToString();
        }
      }


      public partial class apiVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public apiVersion_result()
        {
        }

        public apiVersion_result DeepCopy()
        {
          var tmp344 = new apiVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp344.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp344.__isset.success = this.__isset.success;
          return tmp344;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp345 = new TStruct("apiVersion_result");
            await oprot.WriteStructBeginAsync(tmp345, cancellationToken);
            var tmp346 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp346.Name = "Success";
                tmp346.Type = TType.Struct;
                tmp346.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp346, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp347 = new StringBuilder("apiVersion_result(");
          int tmp348 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp348++) { tmp347.Append(", "); }
            tmp347.Append("Success: ");
            Success.ToString(tmp347);
          }
          tmp347.Append(')');
          return tmp347.ToString();
        }
      }


      public partial class registerExtension_args : TBase
      {
        private string _canonicalName;
        private string _launchKey;
        private global::Yaskawa.Ext.API.Version _version;
        private string _vendor;
        private HashSet<string> _supportedLanguages;

        public string CanonicalName
        {
          get
          {
            return _canonicalName;
          }
          set
          {
            __isset.canonicalName = true;
            this._canonicalName = value;
          }
        }

        public string LaunchKey
        {
          get
          {
            return _launchKey;
          }
          set
          {
            __isset.launchKey = true;
            this._launchKey = value;
          }
        }

        public global::Yaskawa.Ext.API.Version Version
        {
          get
          {
            return _version;
          }
          set
          {
            __isset.version = true;
            this._version = value;
          }
        }

        public string Vendor
        {
          get
          {
            return _vendor;
          }
          set
          {
            __isset.vendor = true;
            this._vendor = value;
          }
        }

        public HashSet<string> SupportedLanguages
        {
          get
          {
            return _supportedLanguages;
          }
          set
          {
            __isset.supportedLanguages = true;
            this._supportedLanguages = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool canonicalName;
          public bool launchKey;
          public bool version;
          public bool vendor;
          public bool supportedLanguages;
        }

        public registerExtension_args()
        {
        }

        public registerExtension_args DeepCopy()
        {
          var tmp349 = new registerExtension_args();
          if((CanonicalName != null) && __isset.canonicalName)
          {
            tmp349.CanonicalName = this.CanonicalName;
          }
          tmp349.__isset.canonicalName = this.__isset.canonicalName;
          if((LaunchKey != null) && __isset.launchKey)
          {
            tmp349.LaunchKey = this.LaunchKey;
          }
          tmp349.__isset.launchKey = this.__isset.launchKey;
          if((Version != null) && __isset.version)
          {
            tmp349.Version = (global::Yaskawa.Ext.API.Version)this.Version.DeepCopy();
          }
          tmp349.__isset.version = this.__isset.version;
          if((Vendor != null) && __isset.vendor)
          {
            tmp349.Vendor = this.Vendor;
          }
          tmp349.__isset.vendor = this.__isset.vendor;
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            tmp349.SupportedLanguages = this.SupportedLanguages.DeepCopy();
          }
          tmp349.__isset.supportedLanguages = this.__isset.supportedLanguages;
          return tmp349;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CanonicalName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    LaunchKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Version = new global::Yaskawa.Ext.API.Version();
                    await Version.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Vendor = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set350 = await iprot.ReadSetBeginAsync(cancellationToken);
                      SupportedLanguages = new HashSet<string>(_set350.Count);
                      for(int _i351 = 0; _i351 < _set350.Count; ++_i351)
                      {
                        string _elem352;
                        _elem352 = await iprot.ReadStringAsync(cancellationToken);
                        SupportedLanguages.Add(_elem352);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp353 = new TStruct("registerExtension_args");
            await oprot.WriteStructBeginAsync(tmp353, cancellationToken);
            var tmp354 = new TField();
            if((CanonicalName != null) && __isset.canonicalName)
            {
              tmp354.Name = "canonicalName";
              tmp354.Type = TType.String;
              tmp354.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
              await oprot.WriteStringAsync(CanonicalName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              tmp354.Name = "launchKey";
              tmp354.Type = TType.String;
              tmp354.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
              await oprot.WriteStringAsync(LaunchKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Version != null) && __isset.version)
            {
              tmp354.Name = "version";
              tmp354.Type = TType.Struct;
              tmp354.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
              await Version.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Vendor != null) && __isset.vendor)
            {
              tmp354.Name = "vendor";
              tmp354.Type = TType.String;
              tmp354.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
              await oprot.WriteStringAsync(Vendor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              tmp354.Name = "supportedLanguages";
              tmp354.Type = TType.Set;
              tmp354.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, SupportedLanguages.Count), cancellationToken);
              foreach (string _iter355 in SupportedLanguages)
              {
                await oprot.WriteStringAsync(_iter355, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.canonicalName == other.__isset.canonicalName) && ((!__isset.canonicalName) || (global::System.Object.Equals(CanonicalName, other.CanonicalName))))
            && ((__isset.launchKey == other.__isset.launchKey) && ((!__isset.launchKey) || (global::System.Object.Equals(LaunchKey, other.LaunchKey))))
            && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
            && ((__isset.vendor == other.__isset.vendor) && ((!__isset.vendor) || (global::System.Object.Equals(Vendor, other.Vendor))))
            && ((__isset.supportedLanguages == other.__isset.supportedLanguages) && ((!__isset.supportedLanguages) || (TCollections.Equals(SupportedLanguages, other.SupportedLanguages))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CanonicalName != null) && __isset.canonicalName)
            {
              hashcode = (hashcode * 397) + CanonicalName.GetHashCode();
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              hashcode = (hashcode * 397) + LaunchKey.GetHashCode();
            }
            if((Version != null) && __isset.version)
            {
              hashcode = (hashcode * 397) + Version.GetHashCode();
            }
            if((Vendor != null) && __isset.vendor)
            {
              hashcode = (hashcode * 397) + Vendor.GetHashCode();
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(SupportedLanguages);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp356 = new StringBuilder("registerExtension_args(");
          int tmp357 = 0;
          if((CanonicalName != null) && __isset.canonicalName)
          {
            if(0 < tmp357++) { tmp356.Append(", "); }
            tmp356.Append("CanonicalName: ");
            CanonicalName.ToString(tmp356);
          }
          if((LaunchKey != null) && __isset.launchKey)
          {
            if(0 < tmp357++) { tmp356.Append(", "); }
            tmp356.Append("LaunchKey: ");
            LaunchKey.ToString(tmp356);
          }
          if((Version != null) && __isset.version)
          {
            if(0 < tmp357++) { tmp356.Append(", "); }
            tmp356.Append("Version: ");
            Version.ToString(tmp356);
          }
          if((Vendor != null) && __isset.vendor)
          {
            if(0 < tmp357++) { tmp356.Append(", "); }
            tmp356.Append("Vendor: ");
            Vendor.ToString(tmp356);
          }
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            if(0 < tmp357++) { tmp356.Append(", "); }
            tmp356.Append("SupportedLanguages: ");
            SupportedLanguages.ToString(tmp356);
          }
          tmp356.Append(')');
          return tmp356.ToString();
        }
      }


      public partial class registerExtension_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public registerExtension_result()
        {
        }

        public registerExtension_result DeepCopy()
        {
          var tmp358 = new registerExtension_result();
          if(__isset.success)
          {
            tmp358.Success = this.Success;
          }
          tmp358.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp358.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp358.__isset.e = this.__isset.e;
          return tmp358;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp359 = new TStruct("registerExtension_result");
            await oprot.WriteStructBeginAsync(tmp359, cancellationToken);
            var tmp360 = new TField();

            if(this.__isset.success)
            {
              tmp360.Name = "Success";
              tmp360.Type = TType.I64;
              tmp360.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp360, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp360.Name = "E";
                tmp360.Type = TType.Struct;
                tmp360.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp360, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp361 = new StringBuilder("registerExtension_result(");
          int tmp362 = 0;
          if(__isset.success)
          {
            if(0 < tmp362++) { tmp361.Append(", "); }
            tmp361.Append("Success: ");
            Success.ToString(tmp361);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp362++) { tmp361.Append(", "); }
            tmp361.Append("E: ");
            E.ToString(tmp361);
          }
          tmp361.Append(')');
          return tmp361.ToString();
        }
      }


      public partial class unregisterExtension_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unregisterExtension_args()
        {
        }

        public unregisterExtension_args DeepCopy()
        {
          var tmp363 = new unregisterExtension_args();
          if(__isset.id)
          {
            tmp363.Id = this.Id;
          }
          tmp363.__isset.id = this.__isset.id;
          return tmp363;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp364 = new TStruct("unregisterExtension_args");
            await oprot.WriteStructBeginAsync(tmp364, cancellationToken);
            var tmp365 = new TField();
            if(__isset.id)
            {
              tmp365.Name = "id";
              tmp365.Type = TType.I64;
              tmp365.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp365, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp366 = new StringBuilder("unregisterExtension_args(");
          int tmp367 = 0;
          if(__isset.id)
          {
            if(0 < tmp367++) { tmp366.Append(", "); }
            tmp366.Append("Id: ");
            Id.ToString(tmp366);
          }
          tmp366.Append(')');
          return tmp366.ToString();
        }
      }


      public partial class unregisterExtension_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterExtension_result()
        {
        }

        public unregisterExtension_result DeepCopy()
        {
          var tmp368 = new unregisterExtension_result();
          if((E != null) && __isset.e)
          {
            tmp368.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp368.__isset.e = this.__isset.e;
          return tmp368;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp369 = new TStruct("unregisterExtension_result");
            await oprot.WriteStructBeginAsync(tmp369, cancellationToken);
            var tmp370 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp370.Name = "E";
                tmp370.Type = TType.Struct;
                tmp370.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp370, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp371 = new StringBuilder("unregisterExtension_result(");
          int tmp372 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp372++) { tmp371.Append(", "); }
            tmp371.Append("E: ");
            E.ToString(tmp371);
          }
          tmp371.Append(')');
          return tmp371.ToString();
        }
      }


      public partial class ping_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp373 = new ping_args();
          if(__isset.id)
          {
            tmp373.Id = this.Id;
          }
          tmp373.__isset.id = this.__isset.id;
          return tmp373;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp374 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp374, cancellationToken);
            var tmp375 = new TField();
            if(__isset.id)
            {
              tmp375.Name = "id";
              tmp375.Type = TType.I64;
              tmp375.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp375, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp376 = new StringBuilder("ping_args(");
          int tmp377 = 0;
          if(__isset.id)
          {
            if(0 < tmp377++) { tmp376.Append(", "); }
            tmp376.Append("Id: ");
            Id.ToString(tmp376);
          }
          tmp376.Append(')');
          return tmp376.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp378 = new ping_result();
          if((E != null) && __isset.e)
          {
            tmp378.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp378.__isset.e = this.__isset.e;
          return tmp378;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp379 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp379, cancellationToken);
            var tmp380 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp380.Name = "E";
                tmp380.Type = TType.Struct;
                tmp380.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp380, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp381 = new StringBuilder("ping_result(");
          int tmp382 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp382++) { tmp381.Append(", "); }
            tmp381.Append("E: ");
            E.ToString(tmp381);
          }
          tmp381.Append(')');
          return tmp381.ToString();
        }
      }


      public partial class controller_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public controller_args()
        {
        }

        public controller_args DeepCopy()
        {
          var tmp383 = new controller_args();
          if(__isset.id)
          {
            tmp383.Id = this.Id;
          }
          tmp383.__isset.id = this.__isset.id;
          return tmp383;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp384 = new TStruct("controller_args");
            await oprot.WriteStructBeginAsync(tmp384, cancellationToken);
            var tmp385 = new TField();
            if(__isset.id)
            {
              tmp385.Name = "id";
              tmp385.Type = TType.I64;
              tmp385.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp385, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp386 = new StringBuilder("controller_args(");
          int tmp387 = 0;
          if(__isset.id)
          {
            if(0 < tmp387++) { tmp386.Append(", "); }
            tmp386.Append("Id: ");
            Id.ToString(tmp386);
          }
          tmp386.Append(')');
          return tmp386.ToString();
        }
      }


      public partial class controller_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public controller_result()
        {
        }

        public controller_result DeepCopy()
        {
          var tmp388 = new controller_result();
          if(__isset.success)
          {
            tmp388.Success = this.Success;
          }
          tmp388.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp388.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp388.__isset.e = this.__isset.e;
          return tmp388;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp389 = new TStruct("controller_result");
            await oprot.WriteStructBeginAsync(tmp389, cancellationToken);
            var tmp390 = new TField();

            if(this.__isset.success)
            {
              tmp390.Name = "Success";
              tmp390.Type = TType.I64;
              tmp390.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp390, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp390.Name = "E";
                tmp390.Type = TType.Struct;
                tmp390.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp390, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp391 = new StringBuilder("controller_result(");
          int tmp392 = 0;
          if(__isset.success)
          {
            if(0 < tmp392++) { tmp391.Append(", "); }
            tmp391.Append("Success: ");
            Success.ToString(tmp391);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp392++) { tmp391.Append(", "); }
            tmp391.Append("E: ");
            E.ToString(tmp391);
          }
          tmp391.Append(')');
          return tmp391.ToString();
        }
      }


      public partial class pendant_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public pendant_args()
        {
        }

        public pendant_args DeepCopy()
        {
          var tmp393 = new pendant_args();
          if(__isset.id)
          {
            tmp393.Id = this.Id;
          }
          tmp393.__isset.id = this.__isset.id;
          return tmp393;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp394 = new TStruct("pendant_args");
            await oprot.WriteStructBeginAsync(tmp394, cancellationToken);
            var tmp395 = new TField();
            if(__isset.id)
            {
              tmp395.Name = "id";
              tmp395.Type = TType.I64;
              tmp395.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp395, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp396 = new StringBuilder("pendant_args(");
          int tmp397 = 0;
          if(__isset.id)
          {
            if(0 < tmp397++) { tmp396.Append(", "); }
            tmp396.Append("Id: ");
            Id.ToString(tmp396);
          }
          tmp396.Append(')');
          return tmp396.ToString();
        }
      }


      public partial class pendant_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public pendant_result()
        {
        }

        public pendant_result DeepCopy()
        {
          var tmp398 = new pendant_result();
          if(__isset.success)
          {
            tmp398.Success = this.Success;
          }
          tmp398.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp398.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp398.__isset.e = this.__isset.e;
          return tmp398;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp399 = new TStruct("pendant_result");
            await oprot.WriteStructBeginAsync(tmp399, cancellationToken);
            var tmp400 = new TField();

            if(this.__isset.success)
            {
              tmp400.Name = "Success";
              tmp400.Type = TType.I64;
              tmp400.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp400.Name = "E";
                tmp400.Type = TType.Struct;
                tmp400.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp400, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp401 = new StringBuilder("pendant_result(");
          int tmp402 = 0;
          if(__isset.success)
          {
            if(0 < tmp402++) { tmp401.Append(", "); }
            tmp401.Append("Success: ");
            Success.ToString(tmp401);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp402++) { tmp401.Append(", "); }
            tmp401.Append("E: ");
            E.ToString(tmp401);
          }
          tmp401.Append(')');
          return tmp401.ToString();
        }
      }


      public partial class log_args : TBase
      {
        private long _id;
        private global::Yaskawa.Ext.API.LoggingLevel _level;
        private string _message;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.LoggingLevel"/>
        /// </summary>
        public global::Yaskawa.Ext.API.LoggingLevel Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool level;
          public bool message;
        }

        public log_args()
        {
        }

        public log_args DeepCopy()
        {
          var tmp403 = new log_args();
          if(__isset.id)
          {
            tmp403.Id = this.Id;
          }
          tmp403.__isset.id = this.__isset.id;
          if(__isset.level)
          {
            tmp403.Level = this.Level;
          }
          tmp403.__isset.level = this.__isset.level;
          if((Message != null) && __isset.message)
          {
            tmp403.Message = this.Message;
          }
          tmp403.__isset.message = this.__isset.message;
          return tmp403;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::Yaskawa.Ext.API.LoggingLevel)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp404 = new TStruct("log_args");
            await oprot.WriteStructBeginAsync(tmp404, cancellationToken);
            var tmp405 = new TField();
            if(__isset.id)
            {
              tmp405.Name = "id";
              tmp405.Type = TType.I64;
              tmp405.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.level)
            {
              tmp405.Name = "level";
              tmp405.Type = TType.I32;
              tmp405.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
              await oprot.WriteI32Async((int)Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp405.Name = "message";
              tmp405.Type = TType.String;
              tmp405.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is log_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp406 = new StringBuilder("log_args(");
          int tmp407 = 0;
          if(__isset.id)
          {
            if(0 < tmp407++) { tmp406.Append(", "); }
            tmp406.Append("Id: ");
            Id.ToString(tmp406);
          }
          if(__isset.level)
          {
            if(0 < tmp407++) { tmp406.Append(", "); }
            tmp406.Append("Level: ");
            Level.ToString(tmp406);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp407++) { tmp406.Append(", "); }
            tmp406.Append("Message: ");
            Message.ToString(tmp406);
          }
          tmp406.Append(')');
          return tmp406.ToString();
        }
      }


      public partial class subscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public subscribeLoggingEvents_args()
        {
        }

        public subscribeLoggingEvents_args DeepCopy()
        {
          var tmp408 = new subscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp408.Id = this.Id;
          }
          tmp408.__isset.id = this.__isset.id;
          return tmp408;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp409 = new TStruct("subscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp409, cancellationToken);
            var tmp410 = new TField();
            if(__isset.id)
            {
              tmp410.Name = "id";
              tmp410.Type = TType.I64;
              tmp410.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp410, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp411 = new StringBuilder("subscribeLoggingEvents_args(");
          int tmp412 = 0;
          if(__isset.id)
          {
            if(0 < tmp412++) { tmp411.Append(", "); }
            tmp411.Append("Id: ");
            Id.ToString(tmp411);
          }
          tmp411.Append(')');
          return tmp411.ToString();
        }
      }


      public partial class subscribeLoggingEvents_result : TBase
      {

        public subscribeLoggingEvents_result()
        {
        }

        public subscribeLoggingEvents_result DeepCopy()
        {
          var tmp413 = new subscribeLoggingEvents_result();
          return tmp413;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp414 = new TStruct("subscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp414, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp415 = new StringBuilder("subscribeLoggingEvents_result(");
          tmp415.Append(')');
          return tmp415.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unsubscribeLoggingEvents_args()
        {
        }

        public unsubscribeLoggingEvents_args DeepCopy()
        {
          var tmp417 = new unsubscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp417.Id = this.Id;
          }
          tmp417.__isset.id = this.__isset.id;
          return tmp417;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp418 = new TStruct("unsubscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp418, cancellationToken);
            var tmp419 = new TField();
            if(__isset.id)
            {
              tmp419.Name = "id";
              tmp419.Type = TType.I64;
              tmp419.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp419, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp420 = new StringBuilder("unsubscribeLoggingEvents_args(");
          int tmp421 = 0;
          if(__isset.id)
          {
            if(0 < tmp421++) { tmp420.Append(", "); }
            tmp420.Append("Id: ");
            Id.ToString(tmp420);
          }
          tmp420.Append(')');
          return tmp420.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_result : TBase
      {

        public unsubscribeLoggingEvents_result()
        {
        }

        public unsubscribeLoggingEvents_result DeepCopy()
        {
          var tmp422 = new unsubscribeLoggingEvents_result();
          return tmp422;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp423 = new TStruct("unsubscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp423, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp424 = new StringBuilder("unsubscribeLoggingEvents_result(");
          tmp424.Append(')');
          return tmp424.ToString();
        }
      }


      public partial class logEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public logEvents_args()
        {
        }

        public logEvents_args DeepCopy()
        {
          var tmp426 = new logEvents_args();
          if(__isset.id)
          {
            tmp426.Id = this.Id;
          }
          tmp426.__isset.id = this.__isset.id;
          return tmp426;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp427 = new TStruct("logEvents_args");
            await oprot.WriteStructBeginAsync(tmp427, cancellationToken);
            var tmp428 = new TField();
            if(__isset.id)
            {
              tmp428.Name = "id";
              tmp428.Type = TType.I64;
              tmp428.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp428, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp429 = new StringBuilder("logEvents_args(");
          int tmp430 = 0;
          if(__isset.id)
          {
            if(0 < tmp430++) { tmp429.Append(", "); }
            tmp429.Append("Id: ");
            Id.ToString(tmp429);
          }
          tmp429.Append(')');
          return tmp429.ToString();
        }
      }


      public partial class logEvents_result : TBase
      {
        private List<global::Yaskawa.Ext.API.LoggingEvent> _success;

        public List<global::Yaskawa.Ext.API.LoggingEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public logEvents_result()
        {
        }

        public logEvents_result DeepCopy()
        {
          var tmp431 = new logEvents_result();
          if((Success != null) && __isset.success)
          {
            tmp431.Success = this.Success.DeepCopy();
          }
          tmp431.__isset.success = this.__isset.success;
          return tmp431;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list432 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.LoggingEvent>(_list432.Count);
                      for(int _i433 = 0; _i433 < _list432.Count; ++_i433)
                      {
                        global::Yaskawa.Ext.API.LoggingEvent _elem434;
                        _elem434 = new global::Yaskawa.Ext.API.LoggingEvent();
                        await _elem434.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem434);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp435 = new TStruct("logEvents_result");
            await oprot.WriteStructBeginAsync(tmp435, cancellationToken);
            var tmp436 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp436.Name = "Success";
                tmp436.Type = TType.List;
                tmp436.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp436, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.LoggingEvent _iter437 in Success)
                {
                  await _iter437.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp438 = new StringBuilder("logEvents_result(");
          int tmp439 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp439++) { tmp438.Append(", "); }
            tmp438.Append("Success: ");
            Success.ToString(tmp438);
          }
          tmp438.Append(')');
          return tmp438.ToString();
        }
      }


      public partial class publicKey_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public publicKey_args()
        {
        }

        public publicKey_args DeepCopy()
        {
          var tmp440 = new publicKey_args();
          if(__isset.id)
          {
            tmp440.Id = this.Id;
          }
          tmp440.__isset.id = this.__isset.id;
          return tmp440;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp441 = new TStruct("publicKey_args");
            await oprot.WriteStructBeginAsync(tmp441, cancellationToken);
            var tmp442 = new TField();
            if(__isset.id)
            {
              tmp442.Name = "id";
              tmp442.Type = TType.I64;
              tmp442.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp443 = new StringBuilder("publicKey_args(");
          int tmp444 = 0;
          if(__isset.id)
          {
            if(0 < tmp444++) { tmp443.Append(", "); }
            tmp443.Append("Id: ");
            Id.ToString(tmp443);
          }
          tmp443.Append(')');
          return tmp443.ToString();
        }
      }


      public partial class publicKey_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public publicKey_result()
        {
        }

        public publicKey_result DeepCopy()
        {
          var tmp445 = new publicKey_result();
          if((Success != null) && __isset.success)
          {
            tmp445.Success = this.Success;
          }
          tmp445.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp445.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp445.__isset.e = this.__isset.e;
          return tmp445;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp446 = new TStruct("publicKey_result");
            await oprot.WriteStructBeginAsync(tmp446, cancellationToken);
            var tmp447 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp447.Name = "Success";
                tmp447.Type = TType.String;
                tmp447.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp447, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp447.Name = "E";
                tmp447.Type = TType.Struct;
                tmp447.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp447, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp448 = new StringBuilder("publicKey_result(");
          int tmp449 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp449++) { tmp448.Append(", "); }
            tmp448.Append("Success: ");
            Success.ToString(tmp448);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp449++) { tmp448.Append(", "); }
            tmp448.Append("E: ");
            E.ToString(tmp448);
          }
          tmp448.Append(')');
          return tmp448.ToString();
        }
      }


      public partial class oneTimeAuthToken_args : TBase
      {
        private long _id;
        private string _oneTimeSalt;
        private byte[] _publicKey;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string OneTimeSalt
        {
          get
          {
            return _oneTimeSalt;
          }
          set
          {
            __isset.oneTimeSalt = true;
            this._oneTimeSalt = value;
          }
        }

        public byte[] PublicKey
        {
          get
          {
            return _publicKey;
          }
          set
          {
            __isset.publicKey = true;
            this._publicKey = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool oneTimeSalt;
          public bool publicKey;
        }

        public oneTimeAuthToken_args()
        {
        }

        public oneTimeAuthToken_args DeepCopy()
        {
          var tmp450 = new oneTimeAuthToken_args();
          if(__isset.id)
          {
            tmp450.Id = this.Id;
          }
          tmp450.__isset.id = this.__isset.id;
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            tmp450.OneTimeSalt = this.OneTimeSalt;
          }
          tmp450.__isset.oneTimeSalt = this.__isset.oneTimeSalt;
          if((PublicKey != null) && __isset.publicKey)
          {
            tmp450.PublicKey = this.PublicKey.ToArray();
          }
          tmp450.__isset.publicKey = this.__isset.publicKey;
          return tmp450;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    OneTimeSalt = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PublicKey = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp451 = new TStruct("oneTimeAuthToken_args");
            await oprot.WriteStructBeginAsync(tmp451, cancellationToken);
            var tmp452 = new TField();
            if(__isset.id)
            {
              tmp452.Name = "id";
              tmp452.Type = TType.I64;
              tmp452.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp452, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              tmp452.Name = "oneTimeSalt";
              tmp452.Type = TType.String;
              tmp452.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp452, cancellationToken);
              await oprot.WriteStringAsync(OneTimeSalt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              tmp452.Name = "publicKey";
              tmp452.Type = TType.String;
              tmp452.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp452, cancellationToken);
              await oprot.WriteBinaryAsync(PublicKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.oneTimeSalt == other.__isset.oneTimeSalt) && ((!__isset.oneTimeSalt) || (global::System.Object.Equals(OneTimeSalt, other.OneTimeSalt))))
            && ((__isset.publicKey == other.__isset.publicKey) && ((!__isset.publicKey) || (TCollections.Equals(PublicKey, other.PublicKey))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              hashcode = (hashcode * 397) + OneTimeSalt.GetHashCode();
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              hashcode = (hashcode * 397) + PublicKey.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp453 = new StringBuilder("oneTimeAuthToken_args(");
          int tmp454 = 0;
          if(__isset.id)
          {
            if(0 < tmp454++) { tmp453.Append(", "); }
            tmp453.Append("Id: ");
            Id.ToString(tmp453);
          }
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            if(0 < tmp454++) { tmp453.Append(", "); }
            tmp453.Append("OneTimeSalt: ");
            OneTimeSalt.ToString(tmp453);
          }
          if((PublicKey != null) && __isset.publicKey)
          {
            if(0 < tmp454++) { tmp453.Append(", "); }
            tmp453.Append("PublicKey: ");
            PublicKey.ToString(tmp453);
          }
          tmp453.Append(')');
          return tmp453.ToString();
        }
      }


      public partial class oneTimeAuthToken_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public oneTimeAuthToken_result()
        {
        }

        public oneTimeAuthToken_result DeepCopy()
        {
          var tmp455 = new oneTimeAuthToken_result();
          if((Success != null) && __isset.success)
          {
            tmp455.Success = this.Success;
          }
          tmp455.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp455.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp455.__isset.e = this.__isset.e;
          return tmp455;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp456 = new TStruct("oneTimeAuthToken_result");
            await oprot.WriteStructBeginAsync(tmp456, cancellationToken);
            var tmp457 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp457.Name = "Success";
                tmp457.Type = TType.String;
                tmp457.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp457, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp457.Name = "E";
                tmp457.Type = TType.Struct;
                tmp457.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp457, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp458 = new StringBuilder("oneTimeAuthToken_result(");
          int tmp459 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp459++) { tmp458.Append(", "); }
            tmp458.Append("Success: ");
            Success.ToString(tmp458);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp459++) { tmp458.Append(", "); }
            tmp458.Append("E: ");
            E.ToString(tmp458);
          }
          tmp458.Append(')');
          return tmp458.ToString();
        }
      }


      public partial class installPackage_args : TBase
      {
        private long _id;
        private string _authToken;
        private byte[] _packageData;
        private string _overridePasscodeEnc;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string AuthToken
        {
          get
          {
            return _authToken;
          }
          set
          {
            __isset.authToken = true;
            this._authToken = value;
          }
        }

        public byte[] PackageData
        {
          get
          {
            return _packageData;
          }
          set
          {
            __isset.packageData = true;
            this._packageData = value;
          }
        }

        public string OverridePasscodeEnc
        {
          get
          {
            return _overridePasscodeEnc;
          }
          set
          {
            __isset.overridePasscodeEnc = true;
            this._overridePasscodeEnc = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool authToken;
          public bool packageData;
          public bool overridePasscodeEnc;
        }

        public installPackage_args()
        {
        }

        public installPackage_args DeepCopy()
        {
          var tmp460 = new installPackage_args();
          if(__isset.id)
          {
            tmp460.Id = this.Id;
          }
          tmp460.__isset.id = this.__isset.id;
          if((AuthToken != null) && __isset.authToken)
          {
            tmp460.AuthToken = this.AuthToken;
          }
          tmp460.__isset.authToken = this.__isset.authToken;
          if((PackageData != null) && __isset.packageData)
          {
            tmp460.PackageData = this.PackageData.ToArray();
          }
          tmp460.__isset.packageData = this.__isset.packageData;
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            tmp460.OverridePasscodeEnc = this.OverridePasscodeEnc;
          }
          tmp460.__isset.overridePasscodeEnc = this.__isset.overridePasscodeEnc;
          return tmp460;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    AuthToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PackageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    OverridePasscodeEnc = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp461 = new TStruct("installPackage_args");
            await oprot.WriteStructBeginAsync(tmp461, cancellationToken);
            var tmp462 = new TField();
            if(__isset.id)
            {
              tmp462.Name = "id";
              tmp462.Type = TType.I64;
              tmp462.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp462, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((AuthToken != null) && __isset.authToken)
            {
              tmp462.Name = "authToken";
              tmp462.Type = TType.String;
              tmp462.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp462, cancellationToken);
              await oprot.WriteStringAsync(AuthToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PackageData != null) && __isset.packageData)
            {
              tmp462.Name = "packageData";
              tmp462.Type = TType.String;
              tmp462.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp462, cancellationToken);
              await oprot.WriteBinaryAsync(PackageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              tmp462.Name = "overridePasscodeEnc";
              tmp462.Type = TType.String;
              tmp462.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp462, cancellationToken);
              await oprot.WriteStringAsync(OverridePasscodeEnc, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.authToken == other.__isset.authToken) && ((!__isset.authToken) || (global::System.Object.Equals(AuthToken, other.AuthToken))))
            && ((__isset.packageData == other.__isset.packageData) && ((!__isset.packageData) || (TCollections.Equals(PackageData, other.PackageData))))
            && ((__isset.overridePasscodeEnc == other.__isset.overridePasscodeEnc) && ((!__isset.overridePasscodeEnc) || (global::System.Object.Equals(OverridePasscodeEnc, other.OverridePasscodeEnc))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((AuthToken != null) && __isset.authToken)
            {
              hashcode = (hashcode * 397) + AuthToken.GetHashCode();
            }
            if((PackageData != null) && __isset.packageData)
            {
              hashcode = (hashcode * 397) + PackageData.GetHashCode();
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              hashcode = (hashcode * 397) + OverridePasscodeEnc.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp463 = new StringBuilder("installPackage_args(");
          int tmp464 = 0;
          if(__isset.id)
          {
            if(0 < tmp464++) { tmp463.Append(", "); }
            tmp463.Append("Id: ");
            Id.ToString(tmp463);
          }
          if((AuthToken != null) && __isset.authToken)
          {
            if(0 < tmp464++) { tmp463.Append(", "); }
            tmp463.Append("AuthToken: ");
            AuthToken.ToString(tmp463);
          }
          if((PackageData != null) && __isset.packageData)
          {
            if(0 < tmp464++) { tmp463.Append(", "); }
            tmp463.Append("PackageData: ");
            PackageData.ToString(tmp463);
          }
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            if(0 < tmp464++) { tmp463.Append(", "); }
            tmp463.Append("OverridePasscodeEnc: ");
            OverridePasscodeEnc.ToString(tmp463);
          }
          tmp463.Append(')');
          return tmp463.ToString();
        }
      }


      public partial class installPackage_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public installPackage_result()
        {
        }

        public installPackage_result DeepCopy()
        {
          var tmp465 = new installPackage_result();
          if((Success != null) && __isset.success)
          {
            tmp465.Success = this.Success.DeepCopy();
          }
          tmp465.__isset.success = this.__isset.success;
          return tmp465;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list466 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list466.Count);
                      for(int _i467 = 0; _i467 < _list466.Count; ++_i467)
                      {
                        string _elem468;
                        _elem468 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem468);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp469 = new TStruct("installPackage_result");
            await oprot.WriteStructBeginAsync(tmp469, cancellationToken);
            var tmp470 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp470.Name = "Success";
                tmp470.Type = TType.List;
                tmp470.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter471 in Success)
                {
                  await oprot.WriteStringAsync(_iter471, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp472 = new StringBuilder("installPackage_result(");
          int tmp473 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp473++) { tmp472.Append(", "); }
            tmp472.Append("Success: ");
            Success.ToString(tmp472);
          }
          tmp472.Append(')');
          return tmp472.ToString();
        }
      }

    }

  }
}
