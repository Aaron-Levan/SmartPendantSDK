/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{
  public partial class Extension
  {
    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Version of API the service implements.
      /// Smart Pendant | API version
      /// 2.0           | 2.0.4
      /// 2.1           | 2.1.0
      /// 2.2           | 2.2.0
      /// 2.3           | 2.3.0
      /// 3.0           | 3.0.0
      /// </summary>
      global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default);

      /// <summary>
      /// Register extension with Smart Pendant API service.
      /// Extension must exist in the extension database (i.e. through installation)
      /// </summary>
      /// <param name="canonicalName"></param>
      /// <param name="launchKey"></param>
      /// <param name="version"></param>
      /// <param name="vendor"></param>
      /// <param name="supportedLanguages"></param>
      global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Indicate liveliness
      /// API service will automatically unregister extensions that are unresponsive for some period.
      /// If extension is not regularly calling events(), call ping() to indicate the extension is operational.
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Robot Conroller API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain ID handle for Pendant UI API
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Log message to standard pendant logging facility
      /// Visible to end-users upon plain-text log file export.
      /// Note that Debug level logging is ignored unless in Developer access level.
      /// Note it is asynchronous so no errors/exceptions are thrown.
      /// </summary>
      /// <param name="id"></param>
      /// <param name="level"></param>
      /// <param name="message"></param>
      global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default);

      /// <summary>
      /// Subscribe to receive log message events via events()
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain list of logging events that have occured since last call
      /// NB: For development troubleshooting only, logging events
      /// only available when development access enabled
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Obtain a list of ExternalStorageDevice structs corresponding to USB storage
      /// available to the pendant/and or controller.  If no storage is available this
      /// list will have no elements.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> listAvailableStorage(long eid, CancellationToken cancellationToken = default);

      /// <summary>
      /// list files/directories in external storage for the specified storage path
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="path"></param>
      global::System.Threading.Tasks.Task<List<string>> listFiles(long eid, string path, CancellationToken cancellationToken = default);

      /// <summary>
      /// Open files for reading and/or writing
      /// the argument path is the full path to the file of interest
      /// the argument flags can be 'r' (read) or 'w' (write w/ append)
      /// (the FileID will return -1 if it failed to open the file)
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="path"></param>
      /// <param name="flags"></param>
      global::System.Threading.Tasks.Task<long> openFile(long eid, string path, string flags, CancellationToken cancellationToken = default);

      /// <summary>
      /// Close files from reading and/or writing
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task closeFile(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Check if the file is available for read/write.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<bool> isOpen(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read all data from the file.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<string> read(long eid, long id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Read a chunk of data from the file.
      /// the argument offset indicates the number of bytes into the file
      /// the argument len indicates the number of bytes to read
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      /// <param name="offset"></param>
      /// <param name="len"></param>
      global::System.Threading.Tasks.Task<string> readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default);

      /// <summary>
      /// Write a string to a file.  This will create a new file (and or directory)
      /// if missing, but will simply append if the file already exists.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      /// <param name="data"></param>
      global::System.Threading.Tasks.Task write(long eid, long id, string data, CancellationToken cancellationToken = default);

      /// <summary>
      /// Write the file to disk.  For files not local to the pendant this
      /// will FTP them to the controller.
      /// (API version 2.3 and later)
      /// </summary>
      /// <param name="eid"></param>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task flush(long eid, long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// The Extension API.
    /// 
    /// Use this interface to initially register the extension with the main pendant
    /// API Service and obtain handle IDs to the Controller and Pendant services.
    /// 
    /// Note in this function-level documentation, functions of the Controller Service
    /// take an initial ControllerID parameter, Pendant Service functions take an initial PendantID etc.
    /// However, if you are using a Yaskawa supplied client library these may be wrapped as
    /// object methods and hence the initial id should be omitted.
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> apiVersion(CancellationToken cancellationToken = default)
      {
        await send_apiVersion(cancellationToken);
        return await recv_apiVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_apiVersion(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp225 = new InternalStructs.apiVersion_args() {
        };
        
        await tmp225.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Yaskawa.Ext.API.Version> recv_apiVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp226 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp226.Type == TMessageType.Exception)
        {
          var tmp227 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp227;
        }

        var tmp228 = new InternalStructs.apiVersion_result();
        await tmp228.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp228.__isset.success)
        {
          return tmp228.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apiVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await send_registerExtension(canonicalName, launchKey, version, vendor, supportedLanguages, cancellationToken);
        return await recv_registerExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerExtension(string canonicalName, string launchKey, global::Yaskawa.Ext.API.Version version, string vendor, HashSet<string> supportedLanguages, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp229 = new InternalStructs.registerExtension_args() {
          CanonicalName = canonicalName,
          LaunchKey = launchKey,
          Version = version,
          Vendor = vendor,
          SupportedLanguages = supportedLanguages,
        };
        
        await tmp229.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_registerExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp230 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp230.Type == TMessageType.Exception)
        {
          var tmp231 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp231;
        }

        var tmp232 = new InternalStructs.registerExtension_result();
        await tmp232.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp232.__isset.success)
        {
          return tmp232.Success;
        }
        if (tmp232.__isset.e)
        {
          throw tmp232.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerExtension failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await send_unregisterExtension(id, cancellationToken);
        await recv_unregisterExtension(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unregisterExtension(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp233 = new InternalStructs.unregisterExtension_args() {
          Id = id,
        };
        
        await tmp233.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unregisterExtension(CancellationToken cancellationToken = default)
      {
        
        var tmp234 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp234.Type == TMessageType.Exception)
        {
          var tmp235 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp235;
        }

        var tmp236 = new InternalStructs.unregisterExtension_result();
        await tmp236.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp236.__isset.e)
        {
          throw tmp236.E;
        }
      }

      public async global::System.Threading.Tasks.Task ping(long id, CancellationToken cancellationToken = default)
      {
        await send_ping(id, cancellationToken);
        await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp237 = new InternalStructs.ping_args() {
          Id = id,
        };
        
        await tmp237.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp238 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp238.Type == TMessageType.Exception)
        {
          var tmp239 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp239;
        }

        var tmp240 = new InternalStructs.ping_result();
        await tmp240.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp240.__isset.e)
        {
          throw tmp240.E;
        }
      }

      public async global::System.Threading.Tasks.Task<long> controller(long id, CancellationToken cancellationToken = default)
      {
        await send_controller(id, cancellationToken);
        return await recv_controller(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_controller(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp241 = new InternalStructs.controller_args() {
          Id = id,
        };
        
        await tmp241.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_controller(CancellationToken cancellationToken = default)
      {
        
        var tmp242 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp242.Type == TMessageType.Exception)
        {
          var tmp243 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp243;
        }

        var tmp244 = new InternalStructs.controller_result();
        await tmp244.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp244.__isset.success)
        {
          return tmp244.Success;
        }
        if (tmp244.__isset.e)
        {
          throw tmp244.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "controller failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> pendant(long id, CancellationToken cancellationToken = default)
      {
        await send_pendant(id, cancellationToken);
        return await recv_pendant(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_pendant(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp245 = new InternalStructs.pendant_args() {
          Id = id,
        };
        
        await tmp245.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_pendant(CancellationToken cancellationToken = default)
      {
        
        var tmp246 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp246.Type == TMessageType.Exception)
        {
          var tmp247 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp247;
        }

        var tmp248 = new InternalStructs.pendant_result();
        await tmp248.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp248.__isset.success)
        {
          return tmp248.Success;
        }
        if (tmp248.__isset.e)
        {
          throw tmp248.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pendant failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await send_log(id, level, message, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_log(long id, global::Yaskawa.Ext.API.LoggingLevel level, string message, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("log", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp249 = new InternalStructs.log_args() {
          Id = id,
          Level = level,
          Message = message,
        };
        
        await tmp249.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_subscribeLoggingEvents(id, cancellationToken);
        await recv_subscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_subscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp250 = new InternalStructs.subscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp250.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_subscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp251 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp251.Type == TMessageType.Exception)
        {
          var tmp252 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp252;
        }

        var tmp253 = new InternalStructs.subscribeLoggingEvents_result();
        await tmp253.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_unsubscribeLoggingEvents(id, cancellationToken);
        await recv_unsubscribeLoggingEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsubscribeLoggingEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp254 = new InternalStructs.unsubscribeLoggingEvents_args() {
          Id = id,
        };
        
        await tmp254.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_unsubscribeLoggingEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp255 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp255.Type == TMessageType.Exception)
        {
          var tmp256 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp256;
        }

        var tmp257 = new InternalStructs.unsubscribeLoggingEvents_result();
        await tmp257.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> logEvents(long id, CancellationToken cancellationToken = default)
      {
        await send_logEvents(id, cancellationToken);
        return await recv_logEvents(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_logEvents(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp258 = new InternalStructs.logEvents_args() {
          Id = id,
        };
        
        await tmp258.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.LoggingEvent>> recv_logEvents(CancellationToken cancellationToken = default)
      {
        
        var tmp259 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp259.Type == TMessageType.Exception)
        {
          var tmp260 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp260;
        }

        var tmp261 = new InternalStructs.logEvents_result();
        await tmp261.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp261.__isset.success)
        {
          return tmp261.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "logEvents failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> listAvailableStorage(long eid, CancellationToken cancellationToken = default)
      {
        await send_listAvailableStorage(eid, cancellationToken);
        return await recv_listAvailableStorage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listAvailableStorage(long eid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp262 = new InternalStructs.listAvailableStorage_args() {
          Eid = eid,
        };
        
        await tmp262.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Yaskawa.Ext.API.storageInfo>> recv_listAvailableStorage(CancellationToken cancellationToken = default)
      {
        
        var tmp263 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp263.Type == TMessageType.Exception)
        {
          var tmp264 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp264;
        }

        var tmp265 = new InternalStructs.listAvailableStorage_result();
        await tmp265.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp265.__isset.success)
        {
          return tmp265.Success;
        }
        if (tmp265.__isset.e)
        {
          throw tmp265.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listAvailableStorage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> listFiles(long eid, string path, CancellationToken cancellationToken = default)
      {
        await send_listFiles(eid, path, cancellationToken);
        return await recv_listFiles(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listFiles(long eid, string path, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp266 = new InternalStructs.listFiles_args() {
          Eid = eid,
          Path = path,
        };
        
        await tmp266.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_listFiles(CancellationToken cancellationToken = default)
      {
        
        var tmp267 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp267.Type == TMessageType.Exception)
        {
          var tmp268 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp268;
        }

        var tmp269 = new InternalStructs.listFiles_result();
        await tmp269.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp269.__isset.success)
        {
          return tmp269.Success;
        }
        if (tmp269.__isset.e)
        {
          throw tmp269.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listFiles failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> openFile(long eid, string path, string flags, CancellationToken cancellationToken = default)
      {
        await send_openFile(eid, path, flags, cancellationToken);
        return await recv_openFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_openFile(long eid, string path, string flags, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp270 = new InternalStructs.openFile_args() {
          Eid = eid,
          Path = path,
          Flags = flags,
        };
        
        await tmp270.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_openFile(CancellationToken cancellationToken = default)
      {
        
        var tmp271 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp271.Type == TMessageType.Exception)
        {
          var tmp272 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp272;
        }

        var tmp273 = new InternalStructs.openFile_result();
        await tmp273.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp273.__isset.success)
        {
          return tmp273.Success;
        }
        if (tmp273.__isset.e)
        {
          throw tmp273.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openFile failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task closeFile(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_closeFile(eid, id, cancellationToken);
        await recv_closeFile(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_closeFile(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp274 = new InternalStructs.closeFile_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp274.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_closeFile(CancellationToken cancellationToken = default)
      {
        
        var tmp275 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp275.Type == TMessageType.Exception)
        {
          var tmp276 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp276;
        }

        var tmp277 = new InternalStructs.closeFile_result();
        await tmp277.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp277.__isset.e)
        {
          throw tmp277.E;
        }
      }

      public async global::System.Threading.Tasks.Task<bool> isOpen(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_isOpen(eid, id, cancellationToken);
        return await recv_isOpen(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_isOpen(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp278 = new InternalStructs.isOpen_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp278.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_isOpen(CancellationToken cancellationToken = default)
      {
        
        var tmp279 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp279.Type == TMessageType.Exception)
        {
          var tmp280 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp280;
        }

        var tmp281 = new InternalStructs.isOpen_result();
        await tmp281.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp281.__isset.success)
        {
          return tmp281.Success;
        }
        if (tmp281.__isset.e)
        {
          throw tmp281.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isOpen failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> read(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_read(eid, id, cancellationToken);
        return await recv_read(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_read(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp282 = new InternalStructs.read_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp282.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_read(CancellationToken cancellationToken = default)
      {
        
        var tmp283 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp283.Type == TMessageType.Exception)
        {
          var tmp284 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp284;
        }

        var tmp285 = new InternalStructs.read_result();
        await tmp285.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp285.__isset.success)
        {
          return tmp285.Success;
        }
        if (tmp285.__isset.e)
        {
          throw tmp285.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default)
      {
        await send_readChunk(eid, id, offset, len, cancellationToken);
        return await recv_readChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_readChunk(long eid, long id, long offset, long len, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp286 = new InternalStructs.readChunk_args() {
          Eid = eid,
          Id = id,
          Offset = offset,
          Len = len,
        };
        
        await tmp286.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_readChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp287 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp287.Type == TMessageType.Exception)
        {
          var tmp288 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp288;
        }

        var tmp289 = new InternalStructs.readChunk_result();
        await tmp289.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp289.__isset.success)
        {
          return tmp289.Success;
        }
        if (tmp289.__isset.e)
        {
          throw tmp289.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "readChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task write(long eid, long id, string data, CancellationToken cancellationToken = default)
      {
        await send_write(eid, id, data, cancellationToken);
        await recv_write(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_write(long eid, long id, string data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp290 = new InternalStructs.write_args() {
          Eid = eid,
          Id = id,
          Data = data,
        };
        
        await tmp290.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_write(CancellationToken cancellationToken = default)
      {
        
        var tmp291 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp291.Type == TMessageType.Exception)
        {
          var tmp292 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp292;
        }

        var tmp293 = new InternalStructs.write_result();
        await tmp293.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp293.__isset.e)
        {
          throw tmp293.E;
        }
      }

      public async global::System.Threading.Tasks.Task flush(long eid, long id, CancellationToken cancellationToken = default)
      {
        await send_flush(eid, id, cancellationToken);
        await recv_flush(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_flush(long eid, long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp294 = new InternalStructs.flush_args() {
          Eid = eid,
          Id = id,
        };
        
        await tmp294.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_flush(CancellationToken cancellationToken = default)
      {
        
        var tmp295 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp295.Type == TMessageType.Exception)
        {
          var tmp296 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp296;
        }

        var tmp297 = new InternalStructs.flush_result();
        await tmp297.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp297.__isset.e)
        {
          throw tmp297.E;
        }
      }

      public async global::System.Threading.Tasks.Task<string> publicKey(long id, CancellationToken cancellationToken = default)
      {
        await send_publicKey(id, cancellationToken);
        return await recv_publicKey(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_publicKey(long id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp298 = new InternalStructs.publicKey_args() {
          Id = id,
        };
        
        await tmp298.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_publicKey(CancellationToken cancellationToken = default)
      {
        
        var tmp299 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp299.Type == TMessageType.Exception)
        {
          var tmp300 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp300;
        }

        var tmp301 = new InternalStructs.publicKey_result();
        await tmp301.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp301.__isset.success)
        {
          return tmp301.Success;
        }
        if (tmp301.__isset.e)
        {
          throw tmp301.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "publicKey failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await send_oneTimeAuthToken(id, oneTimeSalt, publicKey, cancellationToken);
        return await recv_oneTimeAuthToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_oneTimeAuthToken(long id, string oneTimeSalt, byte[] publicKey, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp302 = new InternalStructs.oneTimeAuthToken_args() {
          Id = id,
          OneTimeSalt = oneTimeSalt,
          PublicKey = publicKey,
        };
        
        await tmp302.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_oneTimeAuthToken(CancellationToken cancellationToken = default)
      {
        
        var tmp303 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp303.Type == TMessageType.Exception)
        {
          var tmp304 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp304;
        }

        var tmp305 = new InternalStructs.oneTimeAuthToken_result();
        await tmp305.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp305.__isset.success)
        {
          return tmp305.Success;
        }
        if (tmp305.__isset.e)
        {
          throw tmp305.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "oneTimeAuthToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await send_installPackage(id, authToken, packageData, overridePasscodeEnc, cancellationToken);
        return await recv_installPackage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_installPackage(long id, string authToken, byte[] packageData, string overridePasscodeEnc, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp306 = new InternalStructs.installPackage_args() {
          Id = id,
          AuthToken = authToken,
          PackageData = packageData,
          OverridePasscodeEnc = overridePasscodeEnc,
        };
        
        await tmp306.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_installPackage(CancellationToken cancellationToken = default)
      {
        
        var tmp307 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp307.Type == TMessageType.Exception)
        {
          var tmp308 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp308;
        }

        var tmp309 = new InternalStructs.installPackage_result();
        await tmp309.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp309.__isset.success)
        {
          return tmp309.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "installPackage failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["apiVersion"] = apiVersion_ProcessAsync;
        processMap_["registerExtension"] = registerExtension_ProcessAsync;
        processMap_["unregisterExtension"] = unregisterExtension_ProcessAsync;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["controller"] = controller_ProcessAsync;
        processMap_["pendant"] = pendant_ProcessAsync;
        processMap_["log"] = log_ProcessAsync;
        processMap_["subscribeLoggingEvents"] = subscribeLoggingEvents_ProcessAsync;
        processMap_["unsubscribeLoggingEvents"] = unsubscribeLoggingEvents_ProcessAsync;
        processMap_["logEvents"] = logEvents_ProcessAsync;
        processMap_["listAvailableStorage"] = listAvailableStorage_ProcessAsync;
        processMap_["listFiles"] = listFiles_ProcessAsync;
        processMap_["openFile"] = openFile_ProcessAsync;
        processMap_["closeFile"] = closeFile_ProcessAsync;
        processMap_["isOpen"] = isOpen_ProcessAsync;
        processMap_["read"] = read_ProcessAsync;
        processMap_["readChunk"] = readChunk_ProcessAsync;
        processMap_["write"] = write_ProcessAsync;
        processMap_["flush"] = flush_ProcessAsync;
        processMap_["publicKey"] = publicKey_ProcessAsync;
        processMap_["oneTimeAuthToken"] = oneTimeAuthToken_ProcessAsync;
        processMap_["installPackage"] = installPackage_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task apiVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp310 = new InternalStructs.apiVersion_args();
        await tmp310.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp311 = new InternalStructs.apiVersion_result();
        try
        {
          tmp311.Success = await _iAsync.apiVersion(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp311.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp312)
        {
          var tmp313 = $"Error occurred in {GetType().FullName}: {tmp312.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp312, tmp313);
          else
            Console.Error.WriteLine(tmp313);
          var tmp314 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("apiVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp314.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task registerExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp315 = new InternalStructs.registerExtension_args();
        await tmp315.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp316 = new InternalStructs.registerExtension_result();
        try
        {
          try
          {
            tmp316.Success = await _iAsync.registerExtension(tmp315.CanonicalName, tmp315.LaunchKey, tmp315.Version, tmp315.Vendor, tmp315.SupportedLanguages, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.IllegalArgument tmp317)
          {
            tmp316.E = tmp317;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp316.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp318)
        {
          var tmp319 = $"Error occurred in {GetType().FullName}: {tmp318.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp318, tmp319);
          else
            Console.Error.WriteLine(tmp319);
          var tmp320 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp320.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unregisterExtension_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp321 = new InternalStructs.unregisterExtension_args();
        await tmp321.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp322 = new InternalStructs.unregisterExtension_result();
        try
        {
          try
          {
            await _iAsync.unregisterExtension(tmp321.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp323)
          {
            tmp322.E = tmp323;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Reply, seqid), cancellationToken); 
          await tmp322.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp324)
        {
          var tmp325 = $"Error occurred in {GetType().FullName}: {tmp324.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp324, tmp325);
          else
            Console.Error.WriteLine(tmp325);
          var tmp326 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unregisterExtension", TMessageType.Exception, seqid), cancellationToken);
          await tmp326.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp327 = new InternalStructs.ping_args();
        await tmp327.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp328 = new InternalStructs.ping_result();
        try
        {
          try
          {
            await _iAsync.ping(tmp327.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp329)
          {
            tmp328.E = tmp329;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp328.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp330)
        {
          var tmp331 = $"Error occurred in {GetType().FullName}: {tmp330.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp330, tmp331);
          else
            Console.Error.WriteLine(tmp331);
          var tmp332 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp332.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task controller_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp333 = new InternalStructs.controller_args();
        await tmp333.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp334 = new InternalStructs.controller_result();
        try
        {
          try
          {
            tmp334.Success = await _iAsync.controller(tmp333.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp335)
          {
            tmp334.E = tmp335;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Reply, seqid), cancellationToken); 
          await tmp334.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp336)
        {
          var tmp337 = $"Error occurred in {GetType().FullName}: {tmp336.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp336, tmp337);
          else
            Console.Error.WriteLine(tmp337);
          var tmp338 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("controller", TMessageType.Exception, seqid), cancellationToken);
          await tmp338.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task pendant_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp339 = new InternalStructs.pendant_args();
        await tmp339.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp340 = new InternalStructs.pendant_result();
        try
        {
          try
          {
            tmp340.Success = await _iAsync.pendant(tmp339.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp341)
          {
            tmp340.E = tmp341;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Reply, seqid), cancellationToken); 
          await tmp340.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp342)
        {
          var tmp343 = $"Error occurred in {GetType().FullName}: {tmp342.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp342, tmp343);
          else
            Console.Error.WriteLine(tmp343);
          var tmp344 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("pendant", TMessageType.Exception, seqid), cancellationToken);
          await tmp344.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp345 = new InternalStructs.log_args();
        await tmp345.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.log(tmp345.Id, tmp345.Level, tmp345.Message, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp347)
        {
          var tmp348 = $"Error occurred in {GetType().FullName}: {tmp347.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp347, tmp348);
          else
            Console.Error.WriteLine(tmp348);
        }
      }

      public async global::System.Threading.Tasks.Task subscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp349 = new InternalStructs.subscribeLoggingEvents_args();
        await tmp349.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp350 = new InternalStructs.subscribeLoggingEvents_result();
        try
        {
          await _iAsync.subscribeLoggingEvents(tmp349.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp350.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp351)
        {
          var tmp352 = $"Error occurred in {GetType().FullName}: {tmp351.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp351, tmp352);
          else
            Console.Error.WriteLine(tmp352);
          var tmp353 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("subscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp353.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsubscribeLoggingEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp354 = new InternalStructs.unsubscribeLoggingEvents_args();
        await tmp354.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp355 = new InternalStructs.unsubscribeLoggingEvents_result();
        try
        {
          await _iAsync.unsubscribeLoggingEvents(tmp354.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp355.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp356)
        {
          var tmp357 = $"Error occurred in {GetType().FullName}: {tmp356.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp356, tmp357);
          else
            Console.Error.WriteLine(tmp357);
          var tmp358 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsubscribeLoggingEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp358.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task logEvents_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp359 = new InternalStructs.logEvents_args();
        await tmp359.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp360 = new InternalStructs.logEvents_result();
        try
        {
          tmp360.Success = await _iAsync.logEvents(tmp359.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Reply, seqid), cancellationToken); 
          await tmp360.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp361)
        {
          var tmp362 = $"Error occurred in {GetType().FullName}: {tmp361.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp361, tmp362);
          else
            Console.Error.WriteLine(tmp362);
          var tmp363 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("logEvents", TMessageType.Exception, seqid), cancellationToken);
          await tmp363.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listAvailableStorage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp364 = new InternalStructs.listAvailableStorage_args();
        await tmp364.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp365 = new InternalStructs.listAvailableStorage_result();
        try
        {
          try
          {
            tmp365.Success = await _iAsync.listAvailableStorage(tmp364.Eid, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp366)
          {
            tmp365.E = tmp366;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp365.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp367)
        {
          var tmp368 = $"Error occurred in {GetType().FullName}: {tmp367.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp367, tmp368);
          else
            Console.Error.WriteLine(tmp368);
          var tmp369 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listAvailableStorage", TMessageType.Exception, seqid), cancellationToken);
          await tmp369.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listFiles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp370 = new InternalStructs.listFiles_args();
        await tmp370.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp371 = new InternalStructs.listFiles_result();
        try
        {
          try
          {
            tmp371.Success = await _iAsync.listFiles(tmp370.Eid, tmp370.Path, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp372)
          {
            tmp371.E = tmp372;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Reply, seqid), cancellationToken); 
          await tmp371.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp373)
        {
          var tmp374 = $"Error occurred in {GetType().FullName}: {tmp373.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp373, tmp374);
          else
            Console.Error.WriteLine(tmp374);
          var tmp375 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listFiles", TMessageType.Exception, seqid), cancellationToken);
          await tmp375.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task openFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp376 = new InternalStructs.openFile_args();
        await tmp376.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp377 = new InternalStructs.openFile_result();
        try
        {
          try
          {
            tmp377.Success = await _iAsync.openFile(tmp376.Eid, tmp376.Path, tmp376.Flags, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp378)
          {
            tmp377.E = tmp378;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp377.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp379)
        {
          var tmp380 = $"Error occurred in {GetType().FullName}: {tmp379.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp379, tmp380);
          else
            Console.Error.WriteLine(tmp380);
          var tmp381 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("openFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp381.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task closeFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp382 = new InternalStructs.closeFile_args();
        await tmp382.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp383 = new InternalStructs.closeFile_result();
        try
        {
          try
          {
            await _iAsync.closeFile(tmp382.Eid, tmp382.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp384)
          {
            tmp383.E = tmp384;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Reply, seqid), cancellationToken); 
          await tmp383.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp385)
        {
          var tmp386 = $"Error occurred in {GetType().FullName}: {tmp385.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp385, tmp386);
          else
            Console.Error.WriteLine(tmp386);
          var tmp387 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("closeFile", TMessageType.Exception, seqid), cancellationToken);
          await tmp387.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task isOpen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp388 = new InternalStructs.isOpen_args();
        await tmp388.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp389 = new InternalStructs.isOpen_result();
        try
        {
          try
          {
            tmp389.Success = await _iAsync.isOpen(tmp388.Eid, tmp388.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp390)
          {
            tmp389.E = tmp390;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Reply, seqid), cancellationToken); 
          await tmp389.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp391)
        {
          var tmp392 = $"Error occurred in {GetType().FullName}: {tmp391.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp391, tmp392);
          else
            Console.Error.WriteLine(tmp392);
          var tmp393 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("isOpen", TMessageType.Exception, seqid), cancellationToken);
          await tmp393.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp394 = new InternalStructs.read_args();
        await tmp394.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp395 = new InternalStructs.read_result();
        try
        {
          try
          {
            tmp395.Success = await _iAsync.read(tmp394.Eid, tmp394.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp396)
          {
            tmp395.E = tmp396;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp395.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp397)
        {
          var tmp398 = $"Error occurred in {GetType().FullName}: {tmp397.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp397, tmp398);
          else
            Console.Error.WriteLine(tmp398);
          var tmp399 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("read", TMessageType.Exception, seqid), cancellationToken);
          await tmp399.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task readChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp400 = new InternalStructs.readChunk_args();
        await tmp400.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp401 = new InternalStructs.readChunk_result();
        try
        {
          try
          {
            tmp401.Success = await _iAsync.readChunk(tmp400.Eid, tmp400.Id, tmp400.Offset, tmp400.Len, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp402)
          {
            tmp401.E = tmp402;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp401.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp403)
        {
          var tmp404 = $"Error occurred in {GetType().FullName}: {tmp403.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp403, tmp404);
          else
            Console.Error.WriteLine(tmp404);
          var tmp405 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("readChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp405.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp406 = new InternalStructs.write_args();
        await tmp406.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp407 = new InternalStructs.write_result();
        try
        {
          try
          {
            await _iAsync.write(tmp406.Eid, tmp406.Id, tmp406.Data, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp408)
          {
            tmp407.E = tmp408;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp407.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp409)
        {
          var tmp410 = $"Error occurred in {GetType().FullName}: {tmp409.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp409, tmp410);
          else
            Console.Error.WriteLine(tmp410);
          var tmp411 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("write", TMessageType.Exception, seqid), cancellationToken);
          await tmp411.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task flush_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp412 = new InternalStructs.flush_args();
        await tmp412.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp413 = new InternalStructs.flush_result();
        try
        {
          try
          {
            await _iAsync.flush(tmp412.Eid, tmp412.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp414)
          {
            tmp413.E = tmp414;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Reply, seqid), cancellationToken); 
          await tmp413.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp415)
        {
          var tmp416 = $"Error occurred in {GetType().FullName}: {tmp415.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp415, tmp416);
          else
            Console.Error.WriteLine(tmp416);
          var tmp417 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("flush", TMessageType.Exception, seqid), cancellationToken);
          await tmp417.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task publicKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp418 = new InternalStructs.publicKey_args();
        await tmp418.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp419 = new InternalStructs.publicKey_result();
        try
        {
          try
          {
            tmp419.Success = await _iAsync.publicKey(tmp418.Id, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp420)
          {
            tmp419.E = tmp420;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp419.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp421)
        {
          var tmp422 = $"Error occurred in {GetType().FullName}: {tmp421.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp421, tmp422);
          else
            Console.Error.WriteLine(tmp422);
          var tmp423 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("publicKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp423.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task oneTimeAuthToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp424 = new InternalStructs.oneTimeAuthToken_args();
        await tmp424.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp425 = new InternalStructs.oneTimeAuthToken_result();
        try
        {
          try
          {
            tmp425.Success = await _iAsync.oneTimeAuthToken(tmp424.Id, tmp424.OneTimeSalt, tmp424.PublicKey, cancellationToken);
          }
          catch (global::Yaskawa.Ext.API.InvalidID tmp426)
          {
            tmp425.E = tmp426;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp425.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp427)
        {
          var tmp428 = $"Error occurred in {GetType().FullName}: {tmp427.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp427, tmp428);
          else
            Console.Error.WriteLine(tmp428);
          var tmp429 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("oneTimeAuthToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp429.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task installPackage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp430 = new InternalStructs.installPackage_args();
        await tmp430.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp431 = new InternalStructs.installPackage_result();
        try
        {
          tmp431.Success = await _iAsync.installPackage(tmp430.Id, tmp430.AuthToken, tmp430.PackageData, tmp430.OverridePasscodeEnc, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp431.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp432)
        {
          var tmp433 = $"Error occurred in {GetType().FullName}: {tmp432.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp432, tmp433);
          else
            Console.Error.WriteLine(tmp433);
          var tmp434 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("installPackage", TMessageType.Exception, seqid), cancellationToken);
          await tmp434.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class apiVersion_args : TBase
      {

        public apiVersion_args()
        {
        }

        public apiVersion_args DeepCopy()
        {
          var tmp435 = new apiVersion_args();
          return tmp435;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp436 = new TStruct("apiVersion_args");
            await oprot.WriteStructBeginAsync(tmp436, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp437 = new StringBuilder("apiVersion_args(");
          tmp437.Append(')');
          return tmp437.ToString();
        }
      }


      public partial class apiVersion_result : TBase
      {
        private global::Yaskawa.Ext.API.Version _success;

        public global::Yaskawa.Ext.API.Version Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public apiVersion_result()
        {
        }

        public apiVersion_result DeepCopy()
        {
          var tmp439 = new apiVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp439.Success = (global::Yaskawa.Ext.API.Version)this.Success.DeepCopy();
          }
          tmp439.__isset.success = this.__isset.success;
          return tmp439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Yaskawa.Ext.API.Version();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("apiVersion_result");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            var tmp441 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp441.Name = "Success";
                tmp441.Type = TType.Struct;
                tmp441.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is apiVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("apiVersion_result(");
          int tmp443 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("Success: ");
            Success.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class registerExtension_args : TBase
      {
        private string _canonicalName;
        private string _launchKey;
        private global::Yaskawa.Ext.API.Version _version;
        private string _vendor;
        private HashSet<string> _supportedLanguages;

        public string CanonicalName
        {
          get
          {
            return _canonicalName;
          }
          set
          {
            __isset.canonicalName = true;
            this._canonicalName = value;
          }
        }

        public string LaunchKey
        {
          get
          {
            return _launchKey;
          }
          set
          {
            __isset.launchKey = true;
            this._launchKey = value;
          }
        }

        public global::Yaskawa.Ext.API.Version Version
        {
          get
          {
            return _version;
          }
          set
          {
            __isset.version = true;
            this._version = value;
          }
        }

        public string Vendor
        {
          get
          {
            return _vendor;
          }
          set
          {
            __isset.vendor = true;
            this._vendor = value;
          }
        }

        public HashSet<string> SupportedLanguages
        {
          get
          {
            return _supportedLanguages;
          }
          set
          {
            __isset.supportedLanguages = true;
            this._supportedLanguages = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool canonicalName;
          public bool launchKey;
          public bool version;
          public bool vendor;
          public bool supportedLanguages;
        }

        public registerExtension_args()
        {
        }

        public registerExtension_args DeepCopy()
        {
          var tmp444 = new registerExtension_args();
          if((CanonicalName != null) && __isset.canonicalName)
          {
            tmp444.CanonicalName = this.CanonicalName;
          }
          tmp444.__isset.canonicalName = this.__isset.canonicalName;
          if((LaunchKey != null) && __isset.launchKey)
          {
            tmp444.LaunchKey = this.LaunchKey;
          }
          tmp444.__isset.launchKey = this.__isset.launchKey;
          if((Version != null) && __isset.version)
          {
            tmp444.Version = (global::Yaskawa.Ext.API.Version)this.Version.DeepCopy();
          }
          tmp444.__isset.version = this.__isset.version;
          if((Vendor != null) && __isset.vendor)
          {
            tmp444.Vendor = this.Vendor;
          }
          tmp444.__isset.vendor = this.__isset.vendor;
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            tmp444.SupportedLanguages = this.SupportedLanguages.DeepCopy();
          }
          tmp444.__isset.supportedLanguages = this.__isset.supportedLanguages;
          return tmp444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CanonicalName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    LaunchKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Version = new global::Yaskawa.Ext.API.Version();
                    await Version.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Vendor = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Set)
                  {
                    {
                      var _set445 = await iprot.ReadSetBeginAsync(cancellationToken);
                      SupportedLanguages = new HashSet<string>(_set445.Count);
                      for(int _i446 = 0; _i446 < _set445.Count; ++_i446)
                      {
                        string _elem447;
                        _elem447 = await iprot.ReadStringAsync(cancellationToken);
                        SupportedLanguages.Add(_elem447);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp448 = new TStruct("registerExtension_args");
            await oprot.WriteStructBeginAsync(tmp448, cancellationToken);
            var tmp449 = new TField();
            if((CanonicalName != null) && __isset.canonicalName)
            {
              tmp449.Name = "canonicalName";
              tmp449.Type = TType.String;
              tmp449.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
              await oprot.WriteStringAsync(CanonicalName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              tmp449.Name = "launchKey";
              tmp449.Type = TType.String;
              tmp449.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
              await oprot.WriteStringAsync(LaunchKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Version != null) && __isset.version)
            {
              tmp449.Name = "version";
              tmp449.Type = TType.Struct;
              tmp449.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
              await Version.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Vendor != null) && __isset.vendor)
            {
              tmp449.Name = "vendor";
              tmp449.Type = TType.String;
              tmp449.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
              await oprot.WriteStringAsync(Vendor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              tmp449.Name = "supportedLanguages";
              tmp449.Type = TType.Set;
              tmp449.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
              await oprot.WriteSetBeginAsync(new TSet(TType.String, SupportedLanguages.Count), cancellationToken);
              foreach (string _iter450 in SupportedLanguages)
              {
                await oprot.WriteStringAsync(_iter450, cancellationToken);
              }
              await oprot.WriteSetEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.canonicalName == other.__isset.canonicalName) && ((!__isset.canonicalName) || (global::System.Object.Equals(CanonicalName, other.CanonicalName))))
            && ((__isset.launchKey == other.__isset.launchKey) && ((!__isset.launchKey) || (global::System.Object.Equals(LaunchKey, other.LaunchKey))))
            && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
            && ((__isset.vendor == other.__isset.vendor) && ((!__isset.vendor) || (global::System.Object.Equals(Vendor, other.Vendor))))
            && ((__isset.supportedLanguages == other.__isset.supportedLanguages) && ((!__isset.supportedLanguages) || (TCollections.Equals(SupportedLanguages, other.SupportedLanguages))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CanonicalName != null) && __isset.canonicalName)
            {
              hashcode = (hashcode * 397) + CanonicalName.GetHashCode();
            }
            if((LaunchKey != null) && __isset.launchKey)
            {
              hashcode = (hashcode * 397) + LaunchKey.GetHashCode();
            }
            if((Version != null) && __isset.version)
            {
              hashcode = (hashcode * 397) + Version.GetHashCode();
            }
            if((Vendor != null) && __isset.vendor)
            {
              hashcode = (hashcode * 397) + Vendor.GetHashCode();
            }
            if((SupportedLanguages != null) && __isset.supportedLanguages)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(SupportedLanguages);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp451 = new StringBuilder("registerExtension_args(");
          int tmp452 = 0;
          if((CanonicalName != null) && __isset.canonicalName)
          {
            if(0 < tmp452++) { tmp451.Append(", "); }
            tmp451.Append("CanonicalName: ");
            CanonicalName.ToString(tmp451);
          }
          if((LaunchKey != null) && __isset.launchKey)
          {
            if(0 < tmp452++) { tmp451.Append(", "); }
            tmp451.Append("LaunchKey: ");
            LaunchKey.ToString(tmp451);
          }
          if((Version != null) && __isset.version)
          {
            if(0 < tmp452++) { tmp451.Append(", "); }
            tmp451.Append("Version: ");
            Version.ToString(tmp451);
          }
          if((Vendor != null) && __isset.vendor)
          {
            if(0 < tmp452++) { tmp451.Append(", "); }
            tmp451.Append("Vendor: ");
            Vendor.ToString(tmp451);
          }
          if((SupportedLanguages != null) && __isset.supportedLanguages)
          {
            if(0 < tmp452++) { tmp451.Append(", "); }
            tmp451.Append("SupportedLanguages: ");
            SupportedLanguages.ToString(tmp451);
          }
          tmp451.Append(')');
          return tmp451.ToString();
        }
      }


      public partial class registerExtension_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.IllegalArgument _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.IllegalArgument E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public registerExtension_result()
        {
        }

        public registerExtension_result DeepCopy()
        {
          var tmp453 = new registerExtension_result();
          if(__isset.success)
          {
            tmp453.Success = this.Success;
          }
          tmp453.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp453.E = (global::Yaskawa.Ext.API.IllegalArgument)this.E.DeepCopy();
          }
          tmp453.__isset.e = this.__isset.e;
          return tmp453;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.IllegalArgument();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp454 = new TStruct("registerExtension_result");
            await oprot.WriteStructBeginAsync(tmp454, cancellationToken);
            var tmp455 = new TField();

            if(this.__isset.success)
            {
              tmp455.Name = "Success";
              tmp455.Type = TType.I64;
              tmp455.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp455, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp455.Name = "E";
                tmp455.Type = TType.Struct;
                tmp455.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp455, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp456 = new StringBuilder("registerExtension_result(");
          int tmp457 = 0;
          if(__isset.success)
          {
            if(0 < tmp457++) { tmp456.Append(", "); }
            tmp456.Append("Success: ");
            Success.ToString(tmp456);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp457++) { tmp456.Append(", "); }
            tmp456.Append("E: ");
            E.ToString(tmp456);
          }
          tmp456.Append(')');
          return tmp456.ToString();
        }
      }


      public partial class unregisterExtension_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unregisterExtension_args()
        {
        }

        public unregisterExtension_args DeepCopy()
        {
          var tmp458 = new unregisterExtension_args();
          if(__isset.id)
          {
            tmp458.Id = this.Id;
          }
          tmp458.__isset.id = this.__isset.id;
          return tmp458;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp459 = new TStruct("unregisterExtension_args");
            await oprot.WriteStructBeginAsync(tmp459, cancellationToken);
            var tmp460 = new TField();
            if(__isset.id)
            {
              tmp460.Name = "id";
              tmp460.Type = TType.I64;
              tmp460.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp460, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp461 = new StringBuilder("unregisterExtension_args(");
          int tmp462 = 0;
          if(__isset.id)
          {
            if(0 < tmp462++) { tmp461.Append(", "); }
            tmp461.Append("Id: ");
            Id.ToString(tmp461);
          }
          tmp461.Append(')');
          return tmp461.ToString();
        }
      }


      public partial class unregisterExtension_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public unregisterExtension_result()
        {
        }

        public unregisterExtension_result DeepCopy()
        {
          var tmp463 = new unregisterExtension_result();
          if((E != null) && __isset.e)
          {
            tmp463.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp463.__isset.e = this.__isset.e;
          return tmp463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp464 = new TStruct("unregisterExtension_result");
            await oprot.WriteStructBeginAsync(tmp464, cancellationToken);
            var tmp465 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp465.Name = "E";
                tmp465.Type = TType.Struct;
                tmp465.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp465, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unregisterExtension_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp466 = new StringBuilder("unregisterExtension_result(");
          int tmp467 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp467++) { tmp466.Append(", "); }
            tmp466.Append("E: ");
            E.ToString(tmp466);
          }
          tmp466.Append(')');
          return tmp466.ToString();
        }
      }


      public partial class ping_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp468 = new ping_args();
          if(__isset.id)
          {
            tmp468.Id = this.Id;
          }
          tmp468.__isset.id = this.__isset.id;
          return tmp468;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp469 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp469, cancellationToken);
            var tmp470 = new TField();
            if(__isset.id)
            {
              tmp470.Name = "id";
              tmp470.Type = TType.I64;
              tmp470.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp471 = new StringBuilder("ping_args(");
          int tmp472 = 0;
          if(__isset.id)
          {
            if(0 < tmp472++) { tmp471.Append(", "); }
            tmp471.Append("Id: ");
            Id.ToString(tmp471);
          }
          tmp471.Append(')');
          return tmp471.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp473 = new ping_result();
          if((E != null) && __isset.e)
          {
            tmp473.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp473.__isset.e = this.__isset.e;
          return tmp473;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp474 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp474, cancellationToken);
            var tmp475 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp475.Name = "E";
                tmp475.Type = TType.Struct;
                tmp475.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp475, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp476 = new StringBuilder("ping_result(");
          int tmp477 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp477++) { tmp476.Append(", "); }
            tmp476.Append("E: ");
            E.ToString(tmp476);
          }
          tmp476.Append(')');
          return tmp476.ToString();
        }
      }


      public partial class controller_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public controller_args()
        {
        }

        public controller_args DeepCopy()
        {
          var tmp478 = new controller_args();
          if(__isset.id)
          {
            tmp478.Id = this.Id;
          }
          tmp478.__isset.id = this.__isset.id;
          return tmp478;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp479 = new TStruct("controller_args");
            await oprot.WriteStructBeginAsync(tmp479, cancellationToken);
            var tmp480 = new TField();
            if(__isset.id)
            {
              tmp480.Name = "id";
              tmp480.Type = TType.I64;
              tmp480.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp481 = new StringBuilder("controller_args(");
          int tmp482 = 0;
          if(__isset.id)
          {
            if(0 < tmp482++) { tmp481.Append(", "); }
            tmp481.Append("Id: ");
            Id.ToString(tmp481);
          }
          tmp481.Append(')');
          return tmp481.ToString();
        }
      }


      public partial class controller_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public controller_result()
        {
        }

        public controller_result DeepCopy()
        {
          var tmp483 = new controller_result();
          if(__isset.success)
          {
            tmp483.Success = this.Success;
          }
          tmp483.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp483.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp483.__isset.e = this.__isset.e;
          return tmp483;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp484 = new TStruct("controller_result");
            await oprot.WriteStructBeginAsync(tmp484, cancellationToken);
            var tmp485 = new TField();

            if(this.__isset.success)
            {
              tmp485.Name = "Success";
              tmp485.Type = TType.I64;
              tmp485.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp485, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp485.Name = "E";
                tmp485.Type = TType.Struct;
                tmp485.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp485, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is controller_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp486 = new StringBuilder("controller_result(");
          int tmp487 = 0;
          if(__isset.success)
          {
            if(0 < tmp487++) { tmp486.Append(", "); }
            tmp486.Append("Success: ");
            Success.ToString(tmp486);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp487++) { tmp486.Append(", "); }
            tmp486.Append("E: ");
            E.ToString(tmp486);
          }
          tmp486.Append(')');
          return tmp486.ToString();
        }
      }


      public partial class pendant_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public pendant_args()
        {
        }

        public pendant_args DeepCopy()
        {
          var tmp488 = new pendant_args();
          if(__isset.id)
          {
            tmp488.Id = this.Id;
          }
          tmp488.__isset.id = this.__isset.id;
          return tmp488;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp489 = new TStruct("pendant_args");
            await oprot.WriteStructBeginAsync(tmp489, cancellationToken);
            var tmp490 = new TField();
            if(__isset.id)
            {
              tmp490.Name = "id";
              tmp490.Type = TType.I64;
              tmp490.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp490, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp491 = new StringBuilder("pendant_args(");
          int tmp492 = 0;
          if(__isset.id)
          {
            if(0 < tmp492++) { tmp491.Append(", "); }
            tmp491.Append("Id: ");
            Id.ToString(tmp491);
          }
          tmp491.Append(')');
          return tmp491.ToString();
        }
      }


      public partial class pendant_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public pendant_result()
        {
        }

        public pendant_result DeepCopy()
        {
          var tmp493 = new pendant_result();
          if(__isset.success)
          {
            tmp493.Success = this.Success;
          }
          tmp493.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp493.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp493.__isset.e = this.__isset.e;
          return tmp493;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp494 = new TStruct("pendant_result");
            await oprot.WriteStructBeginAsync(tmp494, cancellationToken);
            var tmp495 = new TField();

            if(this.__isset.success)
            {
              tmp495.Name = "Success";
              tmp495.Type = TType.I64;
              tmp495.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp495, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp495.Name = "E";
                tmp495.Type = TType.Struct;
                tmp495.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp495, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is pendant_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp496 = new StringBuilder("pendant_result(");
          int tmp497 = 0;
          if(__isset.success)
          {
            if(0 < tmp497++) { tmp496.Append(", "); }
            tmp496.Append("Success: ");
            Success.ToString(tmp496);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp497++) { tmp496.Append(", "); }
            tmp496.Append("E: ");
            E.ToString(tmp496);
          }
          tmp496.Append(')');
          return tmp496.ToString();
        }
      }


      public partial class log_args : TBase
      {
        private long _id;
        private global::Yaskawa.Ext.API.LoggingLevel _level;
        private string _message;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Yaskawa.Ext.API.LoggingLevel"/>
        /// </summary>
        public global::Yaskawa.Ext.API.LoggingLevel Level
        {
          get
          {
            return _level;
          }
          set
          {
            __isset.level = true;
            this._level = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool level;
          public bool message;
        }

        public log_args()
        {
        }

        public log_args DeepCopy()
        {
          var tmp498 = new log_args();
          if(__isset.id)
          {
            tmp498.Id = this.Id;
          }
          tmp498.__isset.id = this.__isset.id;
          if(__isset.level)
          {
            tmp498.Level = this.Level;
          }
          tmp498.__isset.level = this.__isset.level;
          if((Message != null) && __isset.message)
          {
            tmp498.Message = this.Message;
          }
          tmp498.__isset.message = this.__isset.message;
          return tmp498;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::Yaskawa.Ext.API.LoggingLevel)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp499 = new TStruct("log_args");
            await oprot.WriteStructBeginAsync(tmp499, cancellationToken);
            var tmp500 = new TField();
            if(__isset.id)
            {
              tmp500.Name = "id";
              tmp500.Type = TType.I64;
              tmp500.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.level)
            {
              tmp500.Name = "level";
              tmp500.Type = TType.I32;
              tmp500.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
              await oprot.WriteI32Async((int)Level, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp500.Name = "message";
              tmp500.Type = TType.String;
              tmp500.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is log_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.level == other.__isset.level) && ((!__isset.level) || (global::System.Object.Equals(Level, other.Level))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.level)
            {
              hashcode = (hashcode * 397) + Level.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp501 = new StringBuilder("log_args(");
          int tmp502 = 0;
          if(__isset.id)
          {
            if(0 < tmp502++) { tmp501.Append(", "); }
            tmp501.Append("Id: ");
            Id.ToString(tmp501);
          }
          if(__isset.level)
          {
            if(0 < tmp502++) { tmp501.Append(", "); }
            tmp501.Append("Level: ");
            Level.ToString(tmp501);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp502++) { tmp501.Append(", "); }
            tmp501.Append("Message: ");
            Message.ToString(tmp501);
          }
          tmp501.Append(')');
          return tmp501.ToString();
        }
      }


      public partial class subscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public subscribeLoggingEvents_args()
        {
        }

        public subscribeLoggingEvents_args DeepCopy()
        {
          var tmp503 = new subscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp503.Id = this.Id;
          }
          tmp503.__isset.id = this.__isset.id;
          return tmp503;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp504 = new TStruct("subscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp504, cancellationToken);
            var tmp505 = new TField();
            if(__isset.id)
            {
              tmp505.Name = "id";
              tmp505.Type = TType.I64;
              tmp505.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp505, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp506 = new StringBuilder("subscribeLoggingEvents_args(");
          int tmp507 = 0;
          if(__isset.id)
          {
            if(0 < tmp507++) { tmp506.Append(", "); }
            tmp506.Append("Id: ");
            Id.ToString(tmp506);
          }
          tmp506.Append(')');
          return tmp506.ToString();
        }
      }


      public partial class subscribeLoggingEvents_result : TBase
      {

        public subscribeLoggingEvents_result()
        {
        }

        public subscribeLoggingEvents_result DeepCopy()
        {
          var tmp508 = new subscribeLoggingEvents_result();
          return tmp508;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp509 = new TStruct("subscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp509, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is subscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp510 = new StringBuilder("subscribeLoggingEvents_result(");
          tmp510.Append(')');
          return tmp510.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public unsubscribeLoggingEvents_args()
        {
        }

        public unsubscribeLoggingEvents_args DeepCopy()
        {
          var tmp512 = new unsubscribeLoggingEvents_args();
          if(__isset.id)
          {
            tmp512.Id = this.Id;
          }
          tmp512.__isset.id = this.__isset.id;
          return tmp512;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp513 = new TStruct("unsubscribeLoggingEvents_args");
            await oprot.WriteStructBeginAsync(tmp513, cancellationToken);
            var tmp514 = new TField();
            if(__isset.id)
            {
              tmp514.Name = "id";
              tmp514.Type = TType.I64;
              tmp514.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp514, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp515 = new StringBuilder("unsubscribeLoggingEvents_args(");
          int tmp516 = 0;
          if(__isset.id)
          {
            if(0 < tmp516++) { tmp515.Append(", "); }
            tmp515.Append("Id: ");
            Id.ToString(tmp515);
          }
          tmp515.Append(')');
          return tmp515.ToString();
        }
      }


      public partial class unsubscribeLoggingEvents_result : TBase
      {

        public unsubscribeLoggingEvents_result()
        {
        }

        public unsubscribeLoggingEvents_result DeepCopy()
        {
          var tmp517 = new unsubscribeLoggingEvents_result();
          return tmp517;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp518 = new TStruct("unsubscribeLoggingEvents_result");
            await oprot.WriteStructBeginAsync(tmp518, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsubscribeLoggingEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp519 = new StringBuilder("unsubscribeLoggingEvents_result(");
          tmp519.Append(')');
          return tmp519.ToString();
        }
      }


      public partial class logEvents_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public logEvents_args()
        {
        }

        public logEvents_args DeepCopy()
        {
          var tmp521 = new logEvents_args();
          if(__isset.id)
          {
            tmp521.Id = this.Id;
          }
          tmp521.__isset.id = this.__isset.id;
          return tmp521;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp522 = new TStruct("logEvents_args");
            await oprot.WriteStructBeginAsync(tmp522, cancellationToken);
            var tmp523 = new TField();
            if(__isset.id)
            {
              tmp523.Name = "id";
              tmp523.Type = TType.I64;
              tmp523.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp523, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp524 = new StringBuilder("logEvents_args(");
          int tmp525 = 0;
          if(__isset.id)
          {
            if(0 < tmp525++) { tmp524.Append(", "); }
            tmp524.Append("Id: ");
            Id.ToString(tmp524);
          }
          tmp524.Append(')');
          return tmp524.ToString();
        }
      }


      public partial class logEvents_result : TBase
      {
        private List<global::Yaskawa.Ext.API.LoggingEvent> _success;

        public List<global::Yaskawa.Ext.API.LoggingEvent> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public logEvents_result()
        {
        }

        public logEvents_result DeepCopy()
        {
          var tmp526 = new logEvents_result();
          if((Success != null) && __isset.success)
          {
            tmp526.Success = this.Success.DeepCopy();
          }
          tmp526.__isset.success = this.__isset.success;
          return tmp526;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list527 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.LoggingEvent>(_list527.Count);
                      for(int _i528 = 0; _i528 < _list527.Count; ++_i528)
                      {
                        global::Yaskawa.Ext.API.LoggingEvent _elem529;
                        _elem529 = new global::Yaskawa.Ext.API.LoggingEvent();
                        await _elem529.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem529);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp530 = new TStruct("logEvents_result");
            await oprot.WriteStructBeginAsync(tmp530, cancellationToken);
            var tmp531 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp531.Name = "Success";
                tmp531.Type = TType.List;
                tmp531.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp531, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.LoggingEvent _iter532 in Success)
                {
                  await _iter532.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is logEvents_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp533 = new StringBuilder("logEvents_result(");
          int tmp534 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp534++) { tmp533.Append(", "); }
            tmp533.Append("Success: ");
            Success.ToString(tmp533);
          }
          tmp533.Append(')');
          return tmp533.ToString();
        }
      }


      public partial class listAvailableStorage_args : TBase
      {
        private long _eid;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
        }

        public listAvailableStorage_args()
        {
        }

        public listAvailableStorage_args DeepCopy()
        {
          var tmp535 = new listAvailableStorage_args();
          if(__isset.eid)
          {
            tmp535.Eid = this.Eid;
          }
          tmp535.__isset.eid = this.__isset.eid;
          return tmp535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp536 = new TStruct("listAvailableStorage_args");
            await oprot.WriteStructBeginAsync(tmp536, cancellationToken);
            var tmp537 = new TField();
            if(__isset.eid)
            {
              tmp537.Name = "eid";
              tmp537.Type = TType.I64;
              tmp537.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp537, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAvailableStorage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp538 = new StringBuilder("listAvailableStorage_args(");
          int tmp539 = 0;
          if(__isset.eid)
          {
            if(0 < tmp539++) { tmp538.Append(", "); }
            tmp538.Append("Eid: ");
            Eid.ToString(tmp538);
          }
          tmp538.Append(')');
          return tmp538.ToString();
        }
      }


      public partial class listAvailableStorage_result : TBase
      {
        private List<global::Yaskawa.Ext.API.storageInfo> _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public List<global::Yaskawa.Ext.API.storageInfo> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public listAvailableStorage_result()
        {
        }

        public listAvailableStorage_result DeepCopy()
        {
          var tmp540 = new listAvailableStorage_result();
          if((Success != null) && __isset.success)
          {
            tmp540.Success = this.Success.DeepCopy();
          }
          tmp540.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp540.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp540.__isset.e = this.__isset.e;
          return tmp540;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list541 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Yaskawa.Ext.API.storageInfo>(_list541.Count);
                      for(int _i542 = 0; _i542 < _list541.Count; ++_i542)
                      {
                        global::Yaskawa.Ext.API.storageInfo _elem543;
                        _elem543 = new global::Yaskawa.Ext.API.storageInfo();
                        await _elem543.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem543);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp544 = new TStruct("listAvailableStorage_result");
            await oprot.WriteStructBeginAsync(tmp544, cancellationToken);
            var tmp545 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp545.Name = "Success";
                tmp545.Type = TType.List;
                tmp545.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp545, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::Yaskawa.Ext.API.storageInfo _iter546 in Success)
                {
                  await _iter546.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp545.Name = "E";
                tmp545.Type = TType.Struct;
                tmp545.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp545, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAvailableStorage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp547 = new StringBuilder("listAvailableStorage_result(");
          int tmp548 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp548++) { tmp547.Append(", "); }
            tmp547.Append("Success: ");
            Success.ToString(tmp547);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp548++) { tmp547.Append(", "); }
            tmp547.Append("E: ");
            E.ToString(tmp547);
          }
          tmp547.Append(')');
          return tmp547.ToString();
        }
      }


      public partial class listFiles_args : TBase
      {
        private long _eid;
        private string _path;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public string Path
        {
          get
          {
            return _path;
          }
          set
          {
            __isset.path = true;
            this._path = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool path;
        }

        public listFiles_args()
        {
        }

        public listFiles_args DeepCopy()
        {
          var tmp549 = new listFiles_args();
          if(__isset.eid)
          {
            tmp549.Eid = this.Eid;
          }
          tmp549.__isset.eid = this.__isset.eid;
          if((Path != null) && __isset.path)
          {
            tmp549.Path = this.Path;
          }
          tmp549.__isset.path = this.__isset.path;
          return tmp549;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Path = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp550 = new TStruct("listFiles_args");
            await oprot.WriteStructBeginAsync(tmp550, cancellationToken);
            var tmp551 = new TField();
            if(__isset.eid)
            {
              tmp551.Name = "eid";
              tmp551.Type = TType.I64;
              tmp551.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp551, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Path != null) && __isset.path)
            {
              tmp551.Name = "path";
              tmp551.Type = TType.String;
              tmp551.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp551, cancellationToken);
              await oprot.WriteStringAsync(Path, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFiles_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if((Path != null) && __isset.path)
            {
              hashcode = (hashcode * 397) + Path.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp552 = new StringBuilder("listFiles_args(");
          int tmp553 = 0;
          if(__isset.eid)
          {
            if(0 < tmp553++) { tmp552.Append(", "); }
            tmp552.Append("Eid: ");
            Eid.ToString(tmp552);
          }
          if((Path != null) && __isset.path)
          {
            if(0 < tmp553++) { tmp552.Append(", "); }
            tmp552.Append("Path: ");
            Path.ToString(tmp552);
          }
          tmp552.Append(')');
          return tmp552.ToString();
        }
      }


      public partial class listFiles_result : TBase
      {
        private List<string> _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public listFiles_result()
        {
        }

        public listFiles_result DeepCopy()
        {
          var tmp554 = new listFiles_result();
          if((Success != null) && __isset.success)
          {
            tmp554.Success = this.Success.DeepCopy();
          }
          tmp554.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp554.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp554.__isset.e = this.__isset.e;
          return tmp554;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list555 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list555.Count);
                      for(int _i556 = 0; _i556 < _list555.Count; ++_i556)
                      {
                        string _elem557;
                        _elem557 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem557);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp558 = new TStruct("listFiles_result");
            await oprot.WriteStructBeginAsync(tmp558, cancellationToken);
            var tmp559 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp559.Name = "Success";
                tmp559.Type = TType.List;
                tmp559.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp559, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter560 in Success)
                {
                  await oprot.WriteStringAsync(_iter560, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp559.Name = "E";
                tmp559.Type = TType.Struct;
                tmp559.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp559, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFiles_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp561 = new StringBuilder("listFiles_result(");
          int tmp562 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp562++) { tmp561.Append(", "); }
            tmp561.Append("Success: ");
            Success.ToString(tmp561);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp562++) { tmp561.Append(", "); }
            tmp561.Append("E: ");
            E.ToString(tmp561);
          }
          tmp561.Append(')');
          return tmp561.ToString();
        }
      }


      public partial class openFile_args : TBase
      {
        private long _eid;
        private string _path;
        private string _flags;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public string Path
        {
          get
          {
            return _path;
          }
          set
          {
            __isset.path = true;
            this._path = value;
          }
        }

        public string Flags
        {
          get
          {
            return _flags;
          }
          set
          {
            __isset.flags = true;
            this._flags = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool path;
          public bool flags;
        }

        public openFile_args()
        {
        }

        public openFile_args DeepCopy()
        {
          var tmp563 = new openFile_args();
          if(__isset.eid)
          {
            tmp563.Eid = this.Eid;
          }
          tmp563.__isset.eid = this.__isset.eid;
          if((Path != null) && __isset.path)
          {
            tmp563.Path = this.Path;
          }
          tmp563.__isset.path = this.__isset.path;
          if((Flags != null) && __isset.flags)
          {
            tmp563.Flags = this.Flags;
          }
          tmp563.__isset.flags = this.__isset.flags;
          return tmp563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Path = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Flags = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp564 = new TStruct("openFile_args");
            await oprot.WriteStructBeginAsync(tmp564, cancellationToken);
            var tmp565 = new TField();
            if(__isset.eid)
            {
              tmp565.Name = "eid";
              tmp565.Type = TType.I64;
              tmp565.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp565, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Path != null) && __isset.path)
            {
              tmp565.Name = "path";
              tmp565.Type = TType.String;
              tmp565.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp565, cancellationToken);
              await oprot.WriteStringAsync(Path, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Flags != null) && __isset.flags)
            {
              tmp565.Name = "flags";
              tmp565.Type = TType.String;
              tmp565.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp565, cancellationToken);
              await oprot.WriteStringAsync(Flags, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))))
            && ((__isset.flags == other.__isset.flags) && ((!__isset.flags) || (global::System.Object.Equals(Flags, other.Flags))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if((Path != null) && __isset.path)
            {
              hashcode = (hashcode * 397) + Path.GetHashCode();
            }
            if((Flags != null) && __isset.flags)
            {
              hashcode = (hashcode * 397) + Flags.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp566 = new StringBuilder("openFile_args(");
          int tmp567 = 0;
          if(__isset.eid)
          {
            if(0 < tmp567++) { tmp566.Append(", "); }
            tmp566.Append("Eid: ");
            Eid.ToString(tmp566);
          }
          if((Path != null) && __isset.path)
          {
            if(0 < tmp567++) { tmp566.Append(", "); }
            tmp566.Append("Path: ");
            Path.ToString(tmp566);
          }
          if((Flags != null) && __isset.flags)
          {
            if(0 < tmp567++) { tmp566.Append(", "); }
            tmp566.Append("Flags: ");
            Flags.ToString(tmp566);
          }
          tmp566.Append(')');
          return tmp566.ToString();
        }
      }


      public partial class openFile_result : TBase
      {
        private long _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public openFile_result()
        {
        }

        public openFile_result DeepCopy()
        {
          var tmp568 = new openFile_result();
          if(__isset.success)
          {
            tmp568.Success = this.Success;
          }
          tmp568.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp568.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp568.__isset.e = this.__isset.e;
          return tmp568;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp569 = new TStruct("openFile_result");
            await oprot.WriteStructBeginAsync(tmp569, cancellationToken);
            var tmp570 = new TField();

            if(this.__isset.success)
            {
              tmp570.Name = "Success";
              tmp570.Type = TType.I64;
              tmp570.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp570, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp570.Name = "E";
                tmp570.Type = TType.Struct;
                tmp570.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp570, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is openFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp571 = new StringBuilder("openFile_result(");
          int tmp572 = 0;
          if(__isset.success)
          {
            if(0 < tmp572++) { tmp571.Append(", "); }
            tmp571.Append("Success: ");
            Success.ToString(tmp571);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp572++) { tmp571.Append(", "); }
            tmp571.Append("E: ");
            E.ToString(tmp571);
          }
          tmp571.Append(')');
          return tmp571.ToString();
        }
      }


      public partial class closeFile_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public closeFile_args()
        {
        }

        public closeFile_args DeepCopy()
        {
          var tmp573 = new closeFile_args();
          if(__isset.eid)
          {
            tmp573.Eid = this.Eid;
          }
          tmp573.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp573.Id = this.Id;
          }
          tmp573.__isset.id = this.__isset.id;
          return tmp573;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp574 = new TStruct("closeFile_args");
            await oprot.WriteStructBeginAsync(tmp574, cancellationToken);
            var tmp575 = new TField();
            if(__isset.eid)
            {
              tmp575.Name = "eid";
              tmp575.Type = TType.I64;
              tmp575.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp575, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp575.Name = "id";
              tmp575.Type = TType.I64;
              tmp575.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp575, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeFile_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp576 = new StringBuilder("closeFile_args(");
          int tmp577 = 0;
          if(__isset.eid)
          {
            if(0 < tmp577++) { tmp576.Append(", "); }
            tmp576.Append("Eid: ");
            Eid.ToString(tmp576);
          }
          if(__isset.id)
          {
            if(0 < tmp577++) { tmp576.Append(", "); }
            tmp576.Append("Id: ");
            Id.ToString(tmp576);
          }
          tmp576.Append(')');
          return tmp576.ToString();
        }
      }


      public partial class closeFile_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public closeFile_result()
        {
        }

        public closeFile_result DeepCopy()
        {
          var tmp578 = new closeFile_result();
          if((E != null) && __isset.e)
          {
            tmp578.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp578.__isset.e = this.__isset.e;
          return tmp578;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp579 = new TStruct("closeFile_result");
            await oprot.WriteStructBeginAsync(tmp579, cancellationToken);
            var tmp580 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp580.Name = "E";
                tmp580.Type = TType.Struct;
                tmp580.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp580, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is closeFile_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp581 = new StringBuilder("closeFile_result(");
          int tmp582 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp582++) { tmp581.Append(", "); }
            tmp581.Append("E: ");
            E.ToString(tmp581);
          }
          tmp581.Append(')');
          return tmp581.ToString();
        }
      }


      public partial class isOpen_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public isOpen_args()
        {
        }

        public isOpen_args DeepCopy()
        {
          var tmp583 = new isOpen_args();
          if(__isset.eid)
          {
            tmp583.Eid = this.Eid;
          }
          tmp583.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp583.Id = this.Id;
          }
          tmp583.__isset.id = this.__isset.id;
          return tmp583;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp584 = new TStruct("isOpen_args");
            await oprot.WriteStructBeginAsync(tmp584, cancellationToken);
            var tmp585 = new TField();
            if(__isset.eid)
            {
              tmp585.Name = "eid";
              tmp585.Type = TType.I64;
              tmp585.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp585.Name = "id";
              tmp585.Type = TType.I64;
              tmp585.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is isOpen_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp586 = new StringBuilder("isOpen_args(");
          int tmp587 = 0;
          if(__isset.eid)
          {
            if(0 < tmp587++) { tmp586.Append(", "); }
            tmp586.Append("Eid: ");
            Eid.ToString(tmp586);
          }
          if(__isset.id)
          {
            if(0 < tmp587++) { tmp586.Append(", "); }
            tmp586.Append("Id: ");
            Id.ToString(tmp586);
          }
          tmp586.Append(')');
          return tmp586.ToString();
        }
      }


      public partial class isOpen_result : TBase
      {
        private bool _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public isOpen_result()
        {
        }

        public isOpen_result DeepCopy()
        {
          var tmp588 = new isOpen_result();
          if(__isset.success)
          {
            tmp588.Success = this.Success;
          }
          tmp588.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp588.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp588.__isset.e = this.__isset.e;
          return tmp588;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp589 = new TStruct("isOpen_result");
            await oprot.WriteStructBeginAsync(tmp589, cancellationToken);
            var tmp590 = new TField();

            if(this.__isset.success)
            {
              tmp590.Name = "Success";
              tmp590.Type = TType.Bool;
              tmp590.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp590, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp590.Name = "E";
                tmp590.Type = TType.Struct;
                tmp590.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp590, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is isOpen_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp591 = new StringBuilder("isOpen_result(");
          int tmp592 = 0;
          if(__isset.success)
          {
            if(0 < tmp592++) { tmp591.Append(", "); }
            tmp591.Append("Success: ");
            Success.ToString(tmp591);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp592++) { tmp591.Append(", "); }
            tmp591.Append("E: ");
            E.ToString(tmp591);
          }
          tmp591.Append(')');
          return tmp591.ToString();
        }
      }


      public partial class read_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public read_args()
        {
        }

        public read_args DeepCopy()
        {
          var tmp593 = new read_args();
          if(__isset.eid)
          {
            tmp593.Eid = this.Eid;
          }
          tmp593.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp593.Id = this.Id;
          }
          tmp593.__isset.id = this.__isset.id;
          return tmp593;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp594 = new TStruct("read_args");
            await oprot.WriteStructBeginAsync(tmp594, cancellationToken);
            var tmp595 = new TField();
            if(__isset.eid)
            {
              tmp595.Name = "eid";
              tmp595.Type = TType.I64;
              tmp595.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp595, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp595.Name = "id";
              tmp595.Type = TType.I64;
              tmp595.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp595, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is read_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp596 = new StringBuilder("read_args(");
          int tmp597 = 0;
          if(__isset.eid)
          {
            if(0 < tmp597++) { tmp596.Append(", "); }
            tmp596.Append("Eid: ");
            Eid.ToString(tmp596);
          }
          if(__isset.id)
          {
            if(0 < tmp597++) { tmp596.Append(", "); }
            tmp596.Append("Id: ");
            Id.ToString(tmp596);
          }
          tmp596.Append(')');
          return tmp596.ToString();
        }
      }


      public partial class read_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public read_result()
        {
        }

        public read_result DeepCopy()
        {
          var tmp598 = new read_result();
          if((Success != null) && __isset.success)
          {
            tmp598.Success = this.Success;
          }
          tmp598.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp598.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp598.__isset.e = this.__isset.e;
          return tmp598;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp599 = new TStruct("read_result");
            await oprot.WriteStructBeginAsync(tmp599, cancellationToken);
            var tmp600 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp600.Name = "Success";
                tmp600.Type = TType.String;
                tmp600.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp600, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp600.Name = "E";
                tmp600.Type = TType.Struct;
                tmp600.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp600, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is read_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp601 = new StringBuilder("read_result(");
          int tmp602 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp602++) { tmp601.Append(", "); }
            tmp601.Append("Success: ");
            Success.ToString(tmp601);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp602++) { tmp601.Append(", "); }
            tmp601.Append("E: ");
            E.ToString(tmp601);
          }
          tmp601.Append(')');
          return tmp601.ToString();
        }
      }


      public partial class readChunk_args : TBase
      {
        private long _eid;
        private long _id;
        private long _offset;
        private long _len;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public long Offset
        {
          get
          {
            return _offset;
          }
          set
          {
            __isset.offset = true;
            this._offset = value;
          }
        }

        public long Len
        {
          get
          {
            return _len;
          }
          set
          {
            __isset.len = true;
            this._len = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
          public bool offset;
          public bool len;
        }

        public readChunk_args()
        {
        }

        public readChunk_args DeepCopy()
        {
          var tmp603 = new readChunk_args();
          if(__isset.eid)
          {
            tmp603.Eid = this.Eid;
          }
          tmp603.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp603.Id = this.Id;
          }
          tmp603.__isset.id = this.__isset.id;
          if(__isset.offset)
          {
            tmp603.Offset = this.Offset;
          }
          tmp603.__isset.offset = this.__isset.offset;
          if(__isset.len)
          {
            tmp603.Len = this.Len;
          }
          tmp603.__isset.len = this.__isset.len;
          return tmp603;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I64)
                  {
                    Offset = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I64)
                  {
                    Len = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp604 = new TStruct("readChunk_args");
            await oprot.WriteStructBeginAsync(tmp604, cancellationToken);
            var tmp605 = new TField();
            if(__isset.eid)
            {
              tmp605.Name = "eid";
              tmp605.Type = TType.I64;
              tmp605.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp605, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp605.Name = "id";
              tmp605.Type = TType.I64;
              tmp605.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp605, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.offset)
            {
              tmp605.Name = "offset";
              tmp605.Type = TType.I64;
              tmp605.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp605, cancellationToken);
              await oprot.WriteI64Async(Offset, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.len)
            {
              tmp605.Name = "len";
              tmp605.Type = TType.I64;
              tmp605.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp605, cancellationToken);
              await oprot.WriteI64Async(Len, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is readChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.offset == other.__isset.offset) && ((!__isset.offset) || (global::System.Object.Equals(Offset, other.Offset))))
            && ((__isset.len == other.__isset.len) && ((!__isset.len) || (global::System.Object.Equals(Len, other.Len))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.offset)
            {
              hashcode = (hashcode * 397) + Offset.GetHashCode();
            }
            if(__isset.len)
            {
              hashcode = (hashcode * 397) + Len.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp606 = new StringBuilder("readChunk_args(");
          int tmp607 = 0;
          if(__isset.eid)
          {
            if(0 < tmp607++) { tmp606.Append(", "); }
            tmp606.Append("Eid: ");
            Eid.ToString(tmp606);
          }
          if(__isset.id)
          {
            if(0 < tmp607++) { tmp606.Append(", "); }
            tmp606.Append("Id: ");
            Id.ToString(tmp606);
          }
          if(__isset.offset)
          {
            if(0 < tmp607++) { tmp606.Append(", "); }
            tmp606.Append("Offset: ");
            Offset.ToString(tmp606);
          }
          if(__isset.len)
          {
            if(0 < tmp607++) { tmp606.Append(", "); }
            tmp606.Append("Len: ");
            Len.ToString(tmp606);
          }
          tmp606.Append(')');
          return tmp606.ToString();
        }
      }


      public partial class readChunk_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public readChunk_result()
        {
        }

        public readChunk_result DeepCopy()
        {
          var tmp608 = new readChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp608.Success = this.Success;
          }
          tmp608.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp608.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp608.__isset.e = this.__isset.e;
          return tmp608;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp609 = new TStruct("readChunk_result");
            await oprot.WriteStructBeginAsync(tmp609, cancellationToken);
            var tmp610 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp610.Name = "Success";
                tmp610.Type = TType.String;
                tmp610.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp610.Name = "E";
                tmp610.Type = TType.Struct;
                tmp610.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is readChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp611 = new StringBuilder("readChunk_result(");
          int tmp612 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp612++) { tmp611.Append(", "); }
            tmp611.Append("Success: ");
            Success.ToString(tmp611);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp612++) { tmp611.Append(", "); }
            tmp611.Append("E: ");
            E.ToString(tmp611);
          }
          tmp611.Append(')');
          return tmp611.ToString();
        }
      }


      public partial class write_args : TBase
      {
        private long _eid;
        private long _id;
        private string _data;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Data
        {
          get
          {
            return _data;
          }
          set
          {
            __isset.data = true;
            this._data = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
          public bool data;
        }

        public write_args()
        {
        }

        public write_args DeepCopy()
        {
          var tmp613 = new write_args();
          if(__isset.eid)
          {
            tmp613.Eid = this.Eid;
          }
          tmp613.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp613.Id = this.Id;
          }
          tmp613.__isset.id = this.__isset.id;
          if((Data != null) && __isset.data)
          {
            tmp613.Data = this.Data;
          }
          tmp613.__isset.data = this.__isset.data;
          return tmp613;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Data = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp614 = new TStruct("write_args");
            await oprot.WriteStructBeginAsync(tmp614, cancellationToken);
            var tmp615 = new TField();
            if(__isset.eid)
            {
              tmp615.Name = "eid";
              tmp615.Type = TType.I64;
              tmp615.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp615, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp615.Name = "id";
              tmp615.Type = TType.I64;
              tmp615.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp615, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Data != null) && __isset.data)
            {
              tmp615.Name = "data";
              tmp615.Type = TType.String;
              tmp615.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp615, cancellationToken);
              await oprot.WriteStringAsync(Data, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is write_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Data != null) && __isset.data)
            {
              hashcode = (hashcode * 397) + Data.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp616 = new StringBuilder("write_args(");
          int tmp617 = 0;
          if(__isset.eid)
          {
            if(0 < tmp617++) { tmp616.Append(", "); }
            tmp616.Append("Eid: ");
            Eid.ToString(tmp616);
          }
          if(__isset.id)
          {
            if(0 < tmp617++) { tmp616.Append(", "); }
            tmp616.Append("Id: ");
            Id.ToString(tmp616);
          }
          if((Data != null) && __isset.data)
          {
            if(0 < tmp617++) { tmp616.Append(", "); }
            tmp616.Append("Data: ");
            Data.ToString(tmp616);
          }
          tmp616.Append(')');
          return tmp616.ToString();
        }
      }


      public partial class write_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public write_result()
        {
        }

        public write_result DeepCopy()
        {
          var tmp618 = new write_result();
          if((E != null) && __isset.e)
          {
            tmp618.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp618.__isset.e = this.__isset.e;
          return tmp618;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp619 = new TStruct("write_result");
            await oprot.WriteStructBeginAsync(tmp619, cancellationToken);
            var tmp620 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp620.Name = "E";
                tmp620.Type = TType.Struct;
                tmp620.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp620, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is write_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp621 = new StringBuilder("write_result(");
          int tmp622 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp622++) { tmp621.Append(", "); }
            tmp621.Append("E: ");
            E.ToString(tmp621);
          }
          tmp621.Append(')');
          return tmp621.ToString();
        }
      }


      public partial class flush_args : TBase
      {
        private long _eid;
        private long _id;

        public long Eid
        {
          get
          {
            return _eid;
          }
          set
          {
            __isset.eid = true;
            this._eid = value;
          }
        }

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool eid;
          public bool id;
        }

        public flush_args()
        {
        }

        public flush_args DeepCopy()
        {
          var tmp623 = new flush_args();
          if(__isset.eid)
          {
            tmp623.Eid = this.Eid;
          }
          tmp623.__isset.eid = this.__isset.eid;
          if(__isset.id)
          {
            tmp623.Id = this.Id;
          }
          tmp623.__isset.id = this.__isset.id;
          return tmp623;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Eid = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp624 = new TStruct("flush_args");
            await oprot.WriteStructBeginAsync(tmp624, cancellationToken);
            var tmp625 = new TField();
            if(__isset.eid)
            {
              tmp625.Name = "eid";
              tmp625.Type = TType.I64;
              tmp625.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp625, cancellationToken);
              await oprot.WriteI64Async(Eid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.id)
            {
              tmp625.Name = "id";
              tmp625.Type = TType.I64;
              tmp625.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp625, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is flush_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.eid == other.__isset.eid) && ((!__isset.eid) || (global::System.Object.Equals(Eid, other.Eid))))
            && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.eid)
            {
              hashcode = (hashcode * 397) + Eid.GetHashCode();
            }
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp626 = new StringBuilder("flush_args(");
          int tmp627 = 0;
          if(__isset.eid)
          {
            if(0 < tmp627++) { tmp626.Append(", "); }
            tmp626.Append("Eid: ");
            Eid.ToString(tmp626);
          }
          if(__isset.id)
          {
            if(0 < tmp627++) { tmp626.Append(", "); }
            tmp626.Append("Id: ");
            Id.ToString(tmp626);
          }
          tmp626.Append(')');
          return tmp626.ToString();
        }
      }


      public partial class flush_result : TBase
      {
        private global::Yaskawa.Ext.API.InvalidID _e;

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public flush_result()
        {
        }

        public flush_result DeepCopy()
        {
          var tmp628 = new flush_result();
          if((E != null) && __isset.e)
          {
            tmp628.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp628.__isset.e = this.__isset.e;
          return tmp628;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp629 = new TStruct("flush_result");
            await oprot.WriteStructBeginAsync(tmp629, cancellationToken);
            var tmp630 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp630.Name = "E";
                tmp630.Type = TType.Struct;
                tmp630.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp630, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is flush_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp631 = new StringBuilder("flush_result(");
          int tmp632 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp632++) { tmp631.Append(", "); }
            tmp631.Append("E: ");
            E.ToString(tmp631);
          }
          tmp631.Append(')');
          return tmp631.ToString();
        }
      }


      public partial class publicKey_args : TBase
      {
        private long _id;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public publicKey_args()
        {
        }

        public publicKey_args DeepCopy()
        {
          var tmp633 = new publicKey_args();
          if(__isset.id)
          {
            tmp633.Id = this.Id;
          }
          tmp633.__isset.id = this.__isset.id;
          return tmp633;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp634 = new TStruct("publicKey_args");
            await oprot.WriteStructBeginAsync(tmp634, cancellationToken);
            var tmp635 = new TField();
            if(__isset.id)
            {
              tmp635.Name = "id";
              tmp635.Type = TType.I64;
              tmp635.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp635, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp636 = new StringBuilder("publicKey_args(");
          int tmp637 = 0;
          if(__isset.id)
          {
            if(0 < tmp637++) { tmp636.Append(", "); }
            tmp636.Append("Id: ");
            Id.ToString(tmp636);
          }
          tmp636.Append(')');
          return tmp636.ToString();
        }
      }


      public partial class publicKey_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public publicKey_result()
        {
        }

        public publicKey_result DeepCopy()
        {
          var tmp638 = new publicKey_result();
          if((Success != null) && __isset.success)
          {
            tmp638.Success = this.Success;
          }
          tmp638.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp638.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp638.__isset.e = this.__isset.e;
          return tmp638;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp639 = new TStruct("publicKey_result");
            await oprot.WriteStructBeginAsync(tmp639, cancellationToken);
            var tmp640 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp640.Name = "Success";
                tmp640.Type = TType.String;
                tmp640.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp640, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp640.Name = "E";
                tmp640.Type = TType.Struct;
                tmp640.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp640, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is publicKey_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp641 = new StringBuilder("publicKey_result(");
          int tmp642 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp642++) { tmp641.Append(", "); }
            tmp641.Append("Success: ");
            Success.ToString(tmp641);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp642++) { tmp641.Append(", "); }
            tmp641.Append("E: ");
            E.ToString(tmp641);
          }
          tmp641.Append(')');
          return tmp641.ToString();
        }
      }


      public partial class oneTimeAuthToken_args : TBase
      {
        private long _id;
        private string _oneTimeSalt;
        private byte[] _publicKey;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string OneTimeSalt
        {
          get
          {
            return _oneTimeSalt;
          }
          set
          {
            __isset.oneTimeSalt = true;
            this._oneTimeSalt = value;
          }
        }

        public byte[] PublicKey
        {
          get
          {
            return _publicKey;
          }
          set
          {
            __isset.publicKey = true;
            this._publicKey = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool oneTimeSalt;
          public bool publicKey;
        }

        public oneTimeAuthToken_args()
        {
        }

        public oneTimeAuthToken_args DeepCopy()
        {
          var tmp643 = new oneTimeAuthToken_args();
          if(__isset.id)
          {
            tmp643.Id = this.Id;
          }
          tmp643.__isset.id = this.__isset.id;
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            tmp643.OneTimeSalt = this.OneTimeSalt;
          }
          tmp643.__isset.oneTimeSalt = this.__isset.oneTimeSalt;
          if((PublicKey != null) && __isset.publicKey)
          {
            tmp643.PublicKey = this.PublicKey.ToArray();
          }
          tmp643.__isset.publicKey = this.__isset.publicKey;
          return tmp643;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    OneTimeSalt = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PublicKey = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp644 = new TStruct("oneTimeAuthToken_args");
            await oprot.WriteStructBeginAsync(tmp644, cancellationToken);
            var tmp645 = new TField();
            if(__isset.id)
            {
              tmp645.Name = "id";
              tmp645.Type = TType.I64;
              tmp645.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp645, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              tmp645.Name = "oneTimeSalt";
              tmp645.Type = TType.String;
              tmp645.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp645, cancellationToken);
              await oprot.WriteStringAsync(OneTimeSalt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              tmp645.Name = "publicKey";
              tmp645.Type = TType.String;
              tmp645.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp645, cancellationToken);
              await oprot.WriteBinaryAsync(PublicKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.oneTimeSalt == other.__isset.oneTimeSalt) && ((!__isset.oneTimeSalt) || (global::System.Object.Equals(OneTimeSalt, other.OneTimeSalt))))
            && ((__isset.publicKey == other.__isset.publicKey) && ((!__isset.publicKey) || (TCollections.Equals(PublicKey, other.PublicKey))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((OneTimeSalt != null) && __isset.oneTimeSalt)
            {
              hashcode = (hashcode * 397) + OneTimeSalt.GetHashCode();
            }
            if((PublicKey != null) && __isset.publicKey)
            {
              hashcode = (hashcode * 397) + PublicKey.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp646 = new StringBuilder("oneTimeAuthToken_args(");
          int tmp647 = 0;
          if(__isset.id)
          {
            if(0 < tmp647++) { tmp646.Append(", "); }
            tmp646.Append("Id: ");
            Id.ToString(tmp646);
          }
          if((OneTimeSalt != null) && __isset.oneTimeSalt)
          {
            if(0 < tmp647++) { tmp646.Append(", "); }
            tmp646.Append("OneTimeSalt: ");
            OneTimeSalt.ToString(tmp646);
          }
          if((PublicKey != null) && __isset.publicKey)
          {
            if(0 < tmp647++) { tmp646.Append(", "); }
            tmp646.Append("PublicKey: ");
            PublicKey.ToString(tmp646);
          }
          tmp646.Append(')');
          return tmp646.ToString();
        }
      }


      public partial class oneTimeAuthToken_result : TBase
      {
        private string _success;
        private global::Yaskawa.Ext.API.InvalidID _e;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Yaskawa.Ext.API.InvalidID E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public oneTimeAuthToken_result()
        {
        }

        public oneTimeAuthToken_result DeepCopy()
        {
          var tmp648 = new oneTimeAuthToken_result();
          if((Success != null) && __isset.success)
          {
            tmp648.Success = this.Success;
          }
          tmp648.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp648.E = (global::Yaskawa.Ext.API.InvalidID)this.E.DeepCopy();
          }
          tmp648.__isset.e = this.__isset.e;
          return tmp648;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::Yaskawa.Ext.API.InvalidID();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp649 = new TStruct("oneTimeAuthToken_result");
            await oprot.WriteStructBeginAsync(tmp649, cancellationToken);
            var tmp650 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp650.Name = "Success";
                tmp650.Type = TType.String;
                tmp650.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp650, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp650.Name = "E";
                tmp650.Type = TType.Struct;
                tmp650.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp650, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is oneTimeAuthToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp651 = new StringBuilder("oneTimeAuthToken_result(");
          int tmp652 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp652++) { tmp651.Append(", "); }
            tmp651.Append("Success: ");
            Success.ToString(tmp651);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp652++) { tmp651.Append(", "); }
            tmp651.Append("E: ");
            E.ToString(tmp651);
          }
          tmp651.Append(')');
          return tmp651.ToString();
        }
      }


      public partial class installPackage_args : TBase
      {
        private long _id;
        private string _authToken;
        private byte[] _packageData;
        private string _overridePasscodeEnc;

        public long Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string AuthToken
        {
          get
          {
            return _authToken;
          }
          set
          {
            __isset.authToken = true;
            this._authToken = value;
          }
        }

        public byte[] PackageData
        {
          get
          {
            return _packageData;
          }
          set
          {
            __isset.packageData = true;
            this._packageData = value;
          }
        }

        public string OverridePasscodeEnc
        {
          get
          {
            return _overridePasscodeEnc;
          }
          set
          {
            __isset.overridePasscodeEnc = true;
            this._overridePasscodeEnc = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool authToken;
          public bool packageData;
          public bool overridePasscodeEnc;
        }

        public installPackage_args()
        {
        }

        public installPackage_args DeepCopy()
        {
          var tmp653 = new installPackage_args();
          if(__isset.id)
          {
            tmp653.Id = this.Id;
          }
          tmp653.__isset.id = this.__isset.id;
          if((AuthToken != null) && __isset.authToken)
          {
            tmp653.AuthToken = this.AuthToken;
          }
          tmp653.__isset.authToken = this.__isset.authToken;
          if((PackageData != null) && __isset.packageData)
          {
            tmp653.PackageData = this.PackageData.ToArray();
          }
          tmp653.__isset.packageData = this.__isset.packageData;
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            tmp653.OverridePasscodeEnc = this.OverridePasscodeEnc;
          }
          tmp653.__isset.overridePasscodeEnc = this.__isset.overridePasscodeEnc;
          return tmp653;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Id = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    AuthToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    PackageData = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    OverridePasscodeEnc = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp654 = new TStruct("installPackage_args");
            await oprot.WriteStructBeginAsync(tmp654, cancellationToken);
            var tmp655 = new TField();
            if(__isset.id)
            {
              tmp655.Name = "id";
              tmp655.Type = TType.I64;
              tmp655.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
              await oprot.WriteI64Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((AuthToken != null) && __isset.authToken)
            {
              tmp655.Name = "authToken";
              tmp655.Type = TType.String;
              tmp655.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
              await oprot.WriteStringAsync(AuthToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PackageData != null) && __isset.packageData)
            {
              tmp655.Name = "packageData";
              tmp655.Type = TType.String;
              tmp655.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
              await oprot.WriteBinaryAsync(PackageData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              tmp655.Name = "overridePasscodeEnc";
              tmp655.Type = TType.String;
              tmp655.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
              await oprot.WriteStringAsync(OverridePasscodeEnc, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.authToken == other.__isset.authToken) && ((!__isset.authToken) || (global::System.Object.Equals(AuthToken, other.AuthToken))))
            && ((__isset.packageData == other.__isset.packageData) && ((!__isset.packageData) || (TCollections.Equals(PackageData, other.PackageData))))
            && ((__isset.overridePasscodeEnc == other.__isset.overridePasscodeEnc) && ((!__isset.overridePasscodeEnc) || (global::System.Object.Equals(OverridePasscodeEnc, other.OverridePasscodeEnc))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((AuthToken != null) && __isset.authToken)
            {
              hashcode = (hashcode * 397) + AuthToken.GetHashCode();
            }
            if((PackageData != null) && __isset.packageData)
            {
              hashcode = (hashcode * 397) + PackageData.GetHashCode();
            }
            if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
            {
              hashcode = (hashcode * 397) + OverridePasscodeEnc.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp656 = new StringBuilder("installPackage_args(");
          int tmp657 = 0;
          if(__isset.id)
          {
            if(0 < tmp657++) { tmp656.Append(", "); }
            tmp656.Append("Id: ");
            Id.ToString(tmp656);
          }
          if((AuthToken != null) && __isset.authToken)
          {
            if(0 < tmp657++) { tmp656.Append(", "); }
            tmp656.Append("AuthToken: ");
            AuthToken.ToString(tmp656);
          }
          if((PackageData != null) && __isset.packageData)
          {
            if(0 < tmp657++) { tmp656.Append(", "); }
            tmp656.Append("PackageData: ");
            PackageData.ToString(tmp656);
          }
          if((OverridePasscodeEnc != null) && __isset.overridePasscodeEnc)
          {
            if(0 < tmp657++) { tmp656.Append(", "); }
            tmp656.Append("OverridePasscodeEnc: ");
            OverridePasscodeEnc.ToString(tmp656);
          }
          tmp656.Append(')');
          return tmp656.ToString();
        }
      }


      public partial class installPackage_result : TBase
      {
        private List<string> _success;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public installPackage_result()
        {
        }

        public installPackage_result DeepCopy()
        {
          var tmp658 = new installPackage_result();
          if((Success != null) && __isset.success)
          {
            tmp658.Success = this.Success.DeepCopy();
          }
          tmp658.__isset.success = this.__isset.success;
          return tmp658;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list659 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list659.Count);
                      for(int _i660 = 0; _i660 < _list659.Count; ++_i660)
                      {
                        string _elem661;
                        _elem661 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem661);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp662 = new TStruct("installPackage_result");
            await oprot.WriteStructBeginAsync(tmp662, cancellationToken);
            var tmp663 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp663.Name = "Success";
                tmp663.Type = TType.List;
                tmp663.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp663, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter664 in Success)
                {
                  await oprot.WriteStringAsync(_iter664, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is installPackage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp665 = new StringBuilder("installPackage_result(");
          int tmp666 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp666++) { tmp665.Append(", "); }
            tmp665.Append("Success: ");
            Success.ToString(tmp665);
          }
          tmp665.Append(')');
          return tmp665.ToString();
        }
      }

    }

  }
}
