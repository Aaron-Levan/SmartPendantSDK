/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  public partial class VectorOrient : TBase
  {
    private List<double> _v;
    private global::Yaskawa.Ext.API.Orient _o;

    public List<double> V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public global::Yaskawa.Ext.API.Orient O
    {
      get
      {
        return _o;
      }
      set
      {
        __isset.o = true;
        this._o = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool v;
      public bool o;
    }

    public VectorOrient()
    {
    }

    public VectorOrient DeepCopy()
    {
      var tmp31 = new VectorOrient();
      if((V != null) && __isset.v)
      {
        tmp31.V = this.V.DeepCopy();
      }
      tmp31.__isset.v = this.__isset.v;
      if((O != null) && __isset.o)
      {
        tmp31.O = (global::Yaskawa.Ext.API.Orient)this.O.DeepCopy();
      }
      tmp31.__isset.o = this.__isset.o;
      return tmp31;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                  V = new List<double>(_list32.Count);
                  for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    double _elem34;
                    _elem34 = await iprot.ReadDoubleAsync(cancellationToken);
                    V.Add(_elem34);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                O = new global::Yaskawa.Ext.API.Orient();
                await O.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp35 = new TStruct("VectorOrient");
        await oprot.WriteStructBeginAsync(tmp35, cancellationToken);
        var tmp36 = new TField();
        if((V != null) && __isset.v)
        {
          tmp36.Name = "v";
          tmp36.Type = TType.List;
          tmp36.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, V.Count), cancellationToken);
          foreach (double _iter37 in V)
          {
            await oprot.WriteDoubleAsync(_iter37, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((O != null) && __isset.o)
        {
          tmp36.Name = "o";
          tmp36.Type = TType.Struct;
          tmp36.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await O.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is VectorOrient other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.v == other.__isset.v) && ((!__isset.v) || (global::System.Object.Equals(V, other.V))))
        && ((__isset.o == other.__isset.o) && ((!__isset.o) || (global::System.Object.Equals(O, other.O))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((V != null) && __isset.v)
        {
          hashcode = (hashcode * 397) + V.GetHashCode();
        }
        if((O != null) && __isset.o)
        {
          hashcode = (hashcode * 397) + O.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp38 = new StringBuilder("VectorOrient(");
      int tmp39 = 0;
      if((V != null) && __isset.v)
      {
        if(0 < tmp39++) { tmp38.Append(", "); }
        tmp38.Append("V: ");
        V.ToString(tmp38);
      }
      if((O != null) && __isset.o)
      {
        if(0 < tmp39++) { tmp38.Append(", "); }
        tmp38.Append("O: ");
        O.ToString(tmp38);
      }
      tmp38.Append(')');
      return tmp38.ToString();
    }
  }

}
