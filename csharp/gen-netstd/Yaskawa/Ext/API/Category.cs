/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  public partial class Category : TBase
  {
    private double _v;
    private string _color;
    private bool _hidden;

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public string Color
    {
      get
      {
        return _color;
      }
      set
      {
        __isset.color = true;
        this._color = value;
      }
    }

    public bool Hidden
    {
      get
      {
        return _hidden;
      }
      set
      {
        __isset.hidden = true;
        this._hidden = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool v;
      public bool color;
      public bool hidden;
    }

    public Category()
    {
    }

    public Category DeepCopy()
    {
      var tmp128 = new Category();
      if(__isset.v)
      {
        tmp128.V = this.V;
      }
      tmp128.__isset.v = this.__isset.v;
      if((Color != null) && __isset.color)
      {
        tmp128.Color = this.Color;
      }
      tmp128.__isset.color = this.__isset.color;
      if(__isset.hidden)
      {
        tmp128.Hidden = this.Hidden;
      }
      tmp128.__isset.hidden = this.__isset.hidden;
      return tmp128;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double)
              {
                V = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Color = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Hidden = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp129 = new TStruct("Category");
        await oprot.WriteStructBeginAsync(tmp129, cancellationToken);
        var tmp130 = new TField();
        if(__isset.v)
        {
          tmp130.Name = "v";
          tmp130.Type = TType.Double;
          tmp130.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteDoubleAsync(V, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Color != null) && __isset.color)
        {
          tmp130.Name = "color";
          tmp130.Type = TType.String;
          tmp130.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteStringAsync(Color, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hidden)
        {
          tmp130.Name = "hidden";
          tmp130.Type = TType.Bool;
          tmp130.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteBoolAsync(Hidden, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Category other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.v == other.__isset.v) && ((!__isset.v) || (global::System.Object.Equals(V, other.V))))
        && ((__isset.color == other.__isset.color) && ((!__isset.color) || (global::System.Object.Equals(Color, other.Color))))
        && ((__isset.hidden == other.__isset.hidden) && ((!__isset.hidden) || (global::System.Object.Equals(Hidden, other.Hidden))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.v)
        {
          hashcode = (hashcode * 397) + V.GetHashCode();
        }
        if((Color != null) && __isset.color)
        {
          hashcode = (hashcode * 397) + Color.GetHashCode();
        }
        if(__isset.hidden)
        {
          hashcode = (hashcode * 397) + Hidden.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp131 = new StringBuilder("Category(");
      int tmp132 = 0;
      if(__isset.v)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("V: ");
        V.ToString(tmp131);
      }
      if((Color != null) && __isset.color)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("Color: ");
        Color.ToString(tmp131);
      }
      if(__isset.hidden)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("Hidden: ");
        Hidden.ToString(tmp131);
      }
      tmp131.Append(')');
      return tmp131.ToString();
    }
  }

}
