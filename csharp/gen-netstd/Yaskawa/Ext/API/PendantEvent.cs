/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  public partial class PendantEvent : TBase
  {
    private Dictionary<string, global::Yaskawa.Ext.API.Any> _props;

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.PendantEventType"/>
    /// </summary>
    public global::Yaskawa.Ext.API.PendantEventType EventType { get; set; }

    public Dictionary<string, global::Yaskawa.Ext.API.Any> Props
    {
      get
      {
        return _props;
      }
      set
      {
        __isset.props = true;
        this._props = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool props;
    }

    public PendantEvent()
    {
    }

    public PendantEvent(global::Yaskawa.Ext.API.PendantEventType eventType) : this()
    {
      this.EventType = eventType;
    }

    public PendantEvent DeepCopy()
    {
      var tmp144 = new PendantEvent();
      tmp144.EventType = this.EventType;
      if((Props != null) && __isset.props)
      {
        tmp144.Props = this.Props.DeepCopy();
      }
      tmp144.__isset.props = this.__isset.props;
      return tmp144;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_eventType = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                EventType = (global::Yaskawa.Ext.API.PendantEventType)await iprot.ReadI32Async(cancellationToken);
                isset_eventType = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  var _map145 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Props = new Dictionary<string, global::Yaskawa.Ext.API.Any>(_map145.Count);
                  for(int _i146 = 0; _i146 < _map145.Count; ++_i146)
                  {
                    string _key147;
                    global::Yaskawa.Ext.API.Any _val148;
                    _key147 = await iprot.ReadStringAsync(cancellationToken);
                    _val148 = new global::Yaskawa.Ext.API.Any();
                    await _val148.ReadAsync(iprot, cancellationToken);
                    Props[_key147] = _val148;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_eventType)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp149 = new TStruct("PendantEvent");
        await oprot.WriteStructBeginAsync(tmp149, cancellationToken);
        var tmp150 = new TField();
        tmp150.Name = "eventType";
        tmp150.Type = TType.I32;
        tmp150.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp150, cancellationToken);
        await oprot.WriteI32Async((int)EventType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Props != null) && __isset.props)
        {
          tmp150.Name = "props";
          tmp150.Type = TType.Map;
          tmp150.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp150, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Props.Count), cancellationToken);
          foreach (string _iter151 in Props.Keys)
          {
            await oprot.WriteStringAsync(_iter151, cancellationToken);
            await Props[_iter151].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PendantEvent other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(EventType, other.EventType)
        && ((__isset.props == other.__isset.props) && ((!__isset.props) || (TCollections.Equals(Props, other.Props))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + EventType.GetHashCode();
        if((Props != null) && __isset.props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Props);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp152 = new StringBuilder("PendantEvent(");
      tmp152.Append(", EventType: ");
      EventType.ToString(tmp152);
      if((Props != null) && __isset.props)
      {
        tmp152.Append(", Props: ");
        Props.ToString(tmp152);
      }
      tmp152.Append(')');
      return tmp152.ToString();
    }
  }

}
