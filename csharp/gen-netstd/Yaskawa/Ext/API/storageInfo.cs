/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// External File Storage: name, location and volume details
  /// (API version 2.3 and later)
  /// </summary>
  public partial class storageInfo : TBase
  {
    private string _path;
    private string _volname;
    private string _volsize;

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    public string Volname
    {
      get
      {
        return _volname;
      }
      set
      {
        __isset.volname = true;
        this._volname = value;
      }
    }

    public string Volsize
    {
      get
      {
        return _volsize;
      }
      set
      {
        __isset.volsize = true;
        this._volsize = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool path;
      public bool volname;
      public bool volsize;
    }

    public storageInfo()
    {
    }

    public storageInfo DeepCopy()
    {
      var tmp143 = new storageInfo();
      if((Path != null) && __isset.path)
      {
        tmp143.Path = this.Path;
      }
      tmp143.__isset.path = this.__isset.path;
      if((Volname != null) && __isset.volname)
      {
        tmp143.Volname = this.Volname;
      }
      tmp143.__isset.volname = this.__isset.volname;
      if((Volsize != null) && __isset.volsize)
      {
        tmp143.Volsize = this.Volsize;
      }
      tmp143.__isset.volsize = this.__isset.volsize;
      return tmp143;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Path = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Volname = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Volsize = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp144 = new TStruct("storageInfo");
        await oprot.WriteStructBeginAsync(tmp144, cancellationToken);
        var tmp145 = new TField();
        if((Path != null) && __isset.path)
        {
          tmp145.Name = "path";
          tmp145.Type = TType.String;
          tmp145.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteStringAsync(Path, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Volname != null) && __isset.volname)
        {
          tmp145.Name = "volname";
          tmp145.Type = TType.String;
          tmp145.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteStringAsync(Volname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Volsize != null) && __isset.volsize)
        {
          tmp145.Name = "volsize";
          tmp145.Type = TType.String;
          tmp145.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteStringAsync(Volsize, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is storageInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))))
        && ((__isset.volname == other.__isset.volname) && ((!__isset.volname) || (global::System.Object.Equals(Volname, other.Volname))))
        && ((__isset.volsize == other.__isset.volsize) && ((!__isset.volsize) || (global::System.Object.Equals(Volsize, other.Volsize))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Path != null) && __isset.path)
        {
          hashcode = (hashcode * 397) + Path.GetHashCode();
        }
        if((Volname != null) && __isset.volname)
        {
          hashcode = (hashcode * 397) + Volname.GetHashCode();
        }
        if((Volsize != null) && __isset.volsize)
        {
          hashcode = (hashcode * 397) + Volsize.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp146 = new StringBuilder("storageInfo(");
      int tmp147 = 0;
      if((Path != null) && __isset.path)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Path: ");
        Path.ToString(tmp146);
      }
      if((Volname != null) && __isset.volname)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Volname: ");
        Volname.ToString(tmp146);
      }
      if((Volsize != null) && __isset.volsize)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Volsize: ");
        Volsize.ToString(tmp146);
      }
      tmp146.Append(')');
      return tmp146.ToString();
    }
  }

}
