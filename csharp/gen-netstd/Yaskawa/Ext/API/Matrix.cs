/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  public partial class Matrix : TBase
  {
    private long _rows;
    private long _cols;
    private List<List<double>> _m;

    public long Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    public long Cols
    {
      get
      {
        return _cols;
      }
      set
      {
        __isset.cols = true;
        this._cols = value;
      }
    }

    public List<List<double>> M
    {
      get
      {
        return _m;
      }
      set
      {
        __isset.m = true;
        this._m = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool rows;
      public bool cols;
      public bool m;
    }

    public Matrix()
    {
    }

    public Matrix DeepCopy()
    {
      var tmp9 = new Matrix();
      if(__isset.rows)
      {
        tmp9.Rows = this.Rows;
      }
      tmp9.__isset.rows = this.__isset.rows;
      if(__isset.cols)
      {
        tmp9.Cols = this.Cols;
      }
      tmp9.__isset.cols = this.__isset.cols;
      if((M != null) && __isset.m)
      {
        tmp9.M = this.M.DeepCopy();
      }
      tmp9.__isset.m = this.__isset.m;
      return tmp9;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Rows = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Cols = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list10 = await iprot.ReadListBeginAsync(cancellationToken);
                  M = new List<List<double>>(_list10.Count);
                  for(int _i11 = 0; _i11 < _list10.Count; ++_i11)
                  {
                    List<double> _elem12;
                    {
                      var _list13 = await iprot.ReadListBeginAsync(cancellationToken);
                      _elem12 = new List<double>(_list13.Count);
                      for(int _i14 = 0; _i14 < _list13.Count; ++_i14)
                      {
                        double _elem15;
                        _elem15 = await iprot.ReadDoubleAsync(cancellationToken);
                        _elem12.Add(_elem15);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    M.Add(_elem12);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp16 = new TStruct("Matrix");
        await oprot.WriteStructBeginAsync(tmp16, cancellationToken);
        var tmp17 = new TField();
        if(__isset.rows)
        {
          tmp17.Name = "rows";
          tmp17.Type = TType.I64;
          tmp17.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteI64Async(Rows, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.cols)
        {
          tmp17.Name = "cols";
          tmp17.Type = TType.I64;
          tmp17.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteI64Async(Cols, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((M != null) && __isset.m)
        {
          tmp17.Name = "m";
          tmp17.Type = TType.List;
          tmp17.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.List, M.Count), cancellationToken);
          foreach (List<double> _iter18 in M)
          {
            await oprot.WriteListBeginAsync(new TList(TType.Double, _iter18.Count), cancellationToken);
            foreach (double _iter19 in _iter18)
            {
              await oprot.WriteDoubleAsync(_iter19, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Matrix other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.rows == other.__isset.rows) && ((!__isset.rows) || (global::System.Object.Equals(Rows, other.Rows))))
        && ((__isset.cols == other.__isset.cols) && ((!__isset.cols) || (global::System.Object.Equals(Cols, other.Cols))))
        && ((__isset.m == other.__isset.m) && ((!__isset.m) || (TCollections.Equals(M, other.M))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.rows)
        {
          hashcode = (hashcode * 397) + Rows.GetHashCode();
        }
        if(__isset.cols)
        {
          hashcode = (hashcode * 397) + Cols.GetHashCode();
        }
        if((M != null) && __isset.m)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(M);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp20 = new StringBuilder("Matrix(");
      int tmp21 = 0;
      if(__isset.rows)
      {
        if(0 < tmp21++) { tmp20.Append(", "); }
        tmp20.Append("Rows: ");
        Rows.ToString(tmp20);
      }
      if(__isset.cols)
      {
        if(0 < tmp21++) { tmp20.Append(", "); }
        tmp20.Append("Cols: ");
        Cols.ToString(tmp20);
      }
      if((M != null) && __isset.m)
      {
        if(0 < tmp21++) { tmp20.Append(", "); }
        tmp20.Append("M: ");
        M.ToString(tmp20);
      }
      tmp20.Append(')');
      return tmp20.ToString();
    }
  }

}
