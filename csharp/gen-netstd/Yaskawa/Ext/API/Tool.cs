/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Yaskawa.Ext.API
{

  /// <summary>
  /// Default units kg, m and radian
  /// (offsetUnit and orientUnit only available for API version 3.0 and later)
  /// </summary>
  public partial class Tool : TBase
  {
    private int _index;
    private string _name;
    private double _weight;
    private List<double> _offset;
    private global::Yaskawa.Ext.API.Orient _orient;
    private List<double> _centerOfMass;
    private List<double> _momentOfInertia;
    private string _blockIOName;
    private global::Yaskawa.Ext.API.DistanceUnit _offsetUnit;
    private global::Yaskawa.Ext.API.OrientationUnit _orientUnit;

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public double Weight
    {
      get
      {
        return _weight;
      }
      set
      {
        __isset.weight = true;
        this._weight = value;
      }
    }

    public List<double> Offset
    {
      get
      {
        return _offset;
      }
      set
      {
        __isset.offset = true;
        this._offset = value;
      }
    }

    public global::Yaskawa.Ext.API.Orient Orient
    {
      get
      {
        return _orient;
      }
      set
      {
        __isset.orient = true;
        this._orient = value;
      }
    }

    public List<double> CenterOfMass
    {
      get
      {
        return _centerOfMass;
      }
      set
      {
        __isset.centerOfMass = true;
        this._centerOfMass = value;
      }
    }

    public List<double> MomentOfInertia
    {
      get
      {
        return _momentOfInertia;
      }
      set
      {
        __isset.momentOfInertia = true;
        this._momentOfInertia = value;
      }
    }

    public string BlockIOName
    {
      get
      {
        return _blockIOName;
      }
      set
      {
        __isset.blockIOName = true;
        this._blockIOName = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.DistanceUnit"/>
    /// </summary>
    public global::Yaskawa.Ext.API.DistanceUnit OffsetUnit
    {
      get
      {
        return _offsetUnit;
      }
      set
      {
        __isset.offsetUnit = true;
        this._offsetUnit = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Yaskawa.Ext.API.OrientationUnit"/>
    /// </summary>
    public global::Yaskawa.Ext.API.OrientationUnit OrientUnit
    {
      get
      {
        return _orientUnit;
      }
      set
      {
        __isset.orientUnit = true;
        this._orientUnit = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool index;
      public bool name;
      public bool weight;
      public bool offset;
      public bool orient;
      public bool centerOfMass;
      public bool momentOfInertia;
      public bool blockIOName;
      public bool offsetUnit;
      public bool orientUnit;
    }

    public Tool()
    {
    }

    public Tool DeepCopy()
    {
      var tmp202 = new Tool();
      if(__isset.index)
      {
        tmp202.Index = this.Index;
      }
      tmp202.__isset.index = this.__isset.index;
      if((Name != null) && __isset.name)
      {
        tmp202.Name = this.Name;
      }
      tmp202.__isset.name = this.__isset.name;
      if(__isset.weight)
      {
        tmp202.Weight = this.Weight;
      }
      tmp202.__isset.weight = this.__isset.weight;
      if((Offset != null) && __isset.offset)
      {
        tmp202.Offset = this.Offset.DeepCopy();
      }
      tmp202.__isset.offset = this.__isset.offset;
      if((Orient != null) && __isset.orient)
      {
        tmp202.Orient = (global::Yaskawa.Ext.API.Orient)this.Orient.DeepCopy();
      }
      tmp202.__isset.orient = this.__isset.orient;
      if((CenterOfMass != null) && __isset.centerOfMass)
      {
        tmp202.CenterOfMass = this.CenterOfMass.DeepCopy();
      }
      tmp202.__isset.centerOfMass = this.__isset.centerOfMass;
      if((MomentOfInertia != null) && __isset.momentOfInertia)
      {
        tmp202.MomentOfInertia = this.MomentOfInertia.DeepCopy();
      }
      tmp202.__isset.momentOfInertia = this.__isset.momentOfInertia;
      if((BlockIOName != null) && __isset.blockIOName)
      {
        tmp202.BlockIOName = this.BlockIOName;
      }
      tmp202.__isset.blockIOName = this.__isset.blockIOName;
      if(__isset.offsetUnit)
      {
        tmp202.OffsetUnit = this.OffsetUnit;
      }
      tmp202.__isset.offsetUnit = this.__isset.offsetUnit;
      if(__isset.orientUnit)
      {
        tmp202.OrientUnit = this.OrientUnit;
      }
      tmp202.__isset.orientUnit = this.__isset.orientUnit;
      return tmp202;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Index = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                Weight = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  var _list203 = await iprot.ReadListBeginAsync(cancellationToken);
                  Offset = new List<double>(_list203.Count);
                  for(int _i204 = 0; _i204 < _list203.Count; ++_i204)
                  {
                    double _elem205;
                    _elem205 = await iprot.ReadDoubleAsync(cancellationToken);
                    Offset.Add(_elem205);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Orient = new global::Yaskawa.Ext.API.Orient();
                await Orient.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  var _list206 = await iprot.ReadListBeginAsync(cancellationToken);
                  CenterOfMass = new List<double>(_list206.Count);
                  for(int _i207 = 0; _i207 < _list206.Count; ++_i207)
                  {
                    double _elem208;
                    _elem208 = await iprot.ReadDoubleAsync(cancellationToken);
                    CenterOfMass.Add(_elem208);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  var _list209 = await iprot.ReadListBeginAsync(cancellationToken);
                  MomentOfInertia = new List<double>(_list209.Count);
                  for(int _i210 = 0; _i210 < _list209.Count; ++_i210)
                  {
                    double _elem211;
                    _elem211 = await iprot.ReadDoubleAsync(cancellationToken);
                    MomentOfInertia.Add(_elem211);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                BlockIOName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                OffsetUnit = (global::Yaskawa.Ext.API.DistanceUnit)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I32)
              {
                OrientUnit = (global::Yaskawa.Ext.API.OrientationUnit)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp212 = new TStruct("Tool");
        await oprot.WriteStructBeginAsync(tmp212, cancellationToken);
        var tmp213 = new TField();
        if(__isset.index)
        {
          tmp213.Name = "index";
          tmp213.Type = TType.I32;
          tmp213.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI32Async(Index, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp213.Name = "name";
          tmp213.Type = TType.String;
          tmp213.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.weight)
        {
          tmp213.Name = "weight";
          tmp213.Type = TType.Double;
          tmp213.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteDoubleAsync(Weight, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Offset != null) && __isset.offset)
        {
          tmp213.Name = "offset";
          tmp213.Type = TType.List;
          tmp213.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, Offset.Count), cancellationToken);
          foreach (double _iter214 in Offset)
          {
            await oprot.WriteDoubleAsync(_iter214, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Orient != null) && __isset.orient)
        {
          tmp213.Name = "orient";
          tmp213.Type = TType.Struct;
          tmp213.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await Orient.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CenterOfMass != null) && __isset.centerOfMass)
        {
          tmp213.Name = "centerOfMass";
          tmp213.Type = TType.List;
          tmp213.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, CenterOfMass.Count), cancellationToken);
          foreach (double _iter215 in CenterOfMass)
          {
            await oprot.WriteDoubleAsync(_iter215, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MomentOfInertia != null) && __isset.momentOfInertia)
        {
          tmp213.Name = "momentOfInertia";
          tmp213.Type = TType.List;
          tmp213.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Double, MomentOfInertia.Count), cancellationToken);
          foreach (double _iter216 in MomentOfInertia)
          {
            await oprot.WriteDoubleAsync(_iter216, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BlockIOName != null) && __isset.blockIOName)
        {
          tmp213.Name = "blockIOName";
          tmp213.Type = TType.String;
          tmp213.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteStringAsync(BlockIOName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.offsetUnit)
        {
          tmp213.Name = "offsetUnit";
          tmp213.Type = TType.I32;
          tmp213.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI32Async((int)OffsetUnit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.orientUnit)
        {
          tmp213.Name = "orientUnit";
          tmp213.Type = TType.I32;
          tmp213.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI32Async((int)OrientUnit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Tool other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.index == other.__isset.index) && ((!__isset.index) || (global::System.Object.Equals(Index, other.Index))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.weight == other.__isset.weight) && ((!__isset.weight) || (global::System.Object.Equals(Weight, other.Weight))))
        && ((__isset.offset == other.__isset.offset) && ((!__isset.offset) || (global::System.Object.Equals(Offset, other.Offset))))
        && ((__isset.orient == other.__isset.orient) && ((!__isset.orient) || (global::System.Object.Equals(Orient, other.Orient))))
        && ((__isset.centerOfMass == other.__isset.centerOfMass) && ((!__isset.centerOfMass) || (global::System.Object.Equals(CenterOfMass, other.CenterOfMass))))
        && ((__isset.momentOfInertia == other.__isset.momentOfInertia) && ((!__isset.momentOfInertia) || (global::System.Object.Equals(MomentOfInertia, other.MomentOfInertia))))
        && ((__isset.blockIOName == other.__isset.blockIOName) && ((!__isset.blockIOName) || (global::System.Object.Equals(BlockIOName, other.BlockIOName))))
        && ((__isset.offsetUnit == other.__isset.offsetUnit) && ((!__isset.offsetUnit) || (global::System.Object.Equals(OffsetUnit, other.OffsetUnit))))
        && ((__isset.orientUnit == other.__isset.orientUnit) && ((!__isset.orientUnit) || (global::System.Object.Equals(OrientUnit, other.OrientUnit))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.index)
        {
          hashcode = (hashcode * 397) + Index.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if(__isset.weight)
        {
          hashcode = (hashcode * 397) + Weight.GetHashCode();
        }
        if((Offset != null) && __isset.offset)
        {
          hashcode = (hashcode * 397) + Offset.GetHashCode();
        }
        if((Orient != null) && __isset.orient)
        {
          hashcode = (hashcode * 397) + Orient.GetHashCode();
        }
        if((CenterOfMass != null) && __isset.centerOfMass)
        {
          hashcode = (hashcode * 397) + CenterOfMass.GetHashCode();
        }
        if((MomentOfInertia != null) && __isset.momentOfInertia)
        {
          hashcode = (hashcode * 397) + MomentOfInertia.GetHashCode();
        }
        if((BlockIOName != null) && __isset.blockIOName)
        {
          hashcode = (hashcode * 397) + BlockIOName.GetHashCode();
        }
        if(__isset.offsetUnit)
        {
          hashcode = (hashcode * 397) + OffsetUnit.GetHashCode();
        }
        if(__isset.orientUnit)
        {
          hashcode = (hashcode * 397) + OrientUnit.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp217 = new StringBuilder("Tool(");
      int tmp218 = 0;
      if(__isset.index)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Index: ");
        Index.ToString(tmp217);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Name: ");
        Name.ToString(tmp217);
      }
      if(__isset.weight)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Weight: ");
        Weight.ToString(tmp217);
      }
      if((Offset != null) && __isset.offset)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Offset: ");
        Offset.ToString(tmp217);
      }
      if((Orient != null) && __isset.orient)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Orient: ");
        Orient.ToString(tmp217);
      }
      if((CenterOfMass != null) && __isset.centerOfMass)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("CenterOfMass: ");
        CenterOfMass.ToString(tmp217);
      }
      if((MomentOfInertia != null) && __isset.momentOfInertia)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("MomentOfInertia: ");
        MomentOfInertia.ToString(tmp217);
      }
      if((BlockIOName != null) && __isset.blockIOName)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("BlockIOName: ");
        BlockIOName.ToString(tmp217);
      }
      if(__isset.offsetUnit)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("OffsetUnit: ");
        OffsetUnit.ToString(tmp217);
      }
      if(__isset.orientUnit)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("OrientUnit: ");
        OrientUnit.ToString(tmp217);
      }
      tmp217.Append(')');
      return tmp217.ToString();
    }
  }

}
