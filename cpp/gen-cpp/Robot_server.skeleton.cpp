// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Robot.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::yaskawa::ext::api;

class RobotHandler : virtual public RobotIf {
 public:
  RobotHandler() {
    // Your initialization goes here
  }

  /**
   * The model string of this robot
   * 
   * @param r
   */
  void model(std::string& _return, const RobotIndex r) {
    // Your implementation goes here
    printf("model\n");
  }

  /**
   * Number of degrees-of-freedom / axes
   * 
   * @param r
   */
  int32_t dof(const RobotIndex r) {
    // Your implementation goes here
    printf("dof\n");
  }

  /**
   * Current position of the robot in joint coordinate frame (i.e. axis angles)
   * 
   * @param r
   * @param unit
   */
  void jointPosition(Position& _return, const RobotIndex r, const OrientationUnit::type unit) {
    // Your implementation goes here
    printf("jointPosition\n");
  }

  /**
   * Coordinates of the ToolTip (TCP) of of the specified tool
   * in the given coordinate frame (using active tool if none specified)
   * 
   * @param r
   * @param frame
   * @param tool
   */
  void toolTipPosition(Position& _return, const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool) {
    // Your implementation goes here
    printf("toolTipPosition\n");
  }

  /**
   * Does this robot support force limiting? (collaborative robot?)
   * 
   * @param r
   */
  bool forceLimitingAvailable(const RobotIndex r) {
    // Your implementation goes here
    printf("forceLimitingAvailable\n");
  }

  /**
   * Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
   * 
   * @param r
   */
  bool forceLimitingActive(const RobotIndex r) {
    // Your implementation goes here
    printf("forceLimitingActive\n");
  }

  /**
   * Is the robot stopped due to an over-limit event?
   * 
   * @param r
   */
  bool forceLimitingStopped(const RobotIndex r) {
    // Your implementation goes here
    printf("forceLimitingStopped\n");
  }

  /**
   * Is an end-of-arm switch box installed?
   * 
   * @param r
   */
  bool switchBoxAvailable(const RobotIndex r) {
    // Your implementation goes here
    printf("switchBoxAvailable\n");
  }

  /**
   * Index of the currently active tool
   * 
   * @param r
   */
  ToolIndex activeTool(const RobotIndex r) {
    // Your implementation goes here
    printf("activeTool\n");
  }

  /**
   * Set the currently active tool
   * 
   * @param r
   * @param tool
   */
  void setActiveTool(const RobotIndex r, const ToolIndex tool) {
    // Your implementation goes here
    printf("setActiveTool\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<RobotHandler> handler(new RobotHandler());
  ::std::shared_ptr<TProcessor> processor(new RobotProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

