/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Robot_H
#define Robot_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "extension_types.h"

namespace yaskawa { namespace ext { namespace api {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

/**
 * Represents a single robot
 * 
 * Often there will only be one robot connected to a given controller
 * but, for example, the YRC Controller is capable of supporting up-to 8 robots (or 72 axes).
 */
class RobotIf {
 public:
  virtual ~RobotIf() {}

  /**
   * The model string of this robot
   * 
   * @param r
   */
  virtual void model(std::string& _return, const RobotIndex r) = 0;

  /**
   * Number of degrees-of-freedom / axes
   * 
   * @param r
   */
  virtual int32_t dof(const RobotIndex r) = 0;

  /**
   * Current position of the robot in joint coordinate frame (i.e. axis angles)
   * 
   * @param r
   * @param unit
   */
  virtual void jointPosition(Position& _return, const RobotIndex r, const OrientationUnit::type unit) = 0;

  /**
   * Coordinates of the ToolTip (TCP) of of the specified tool
   * in the given coordinate frame (using active tool if none specified)
   * 
   * @param r
   * @param frame
   * @param tool
   */
  virtual void toolTipPosition(Position& _return, const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool) = 0;

  /**
   * Does this robot support force limiting? (collaborative robot?)
   * 
   * @param r
   */
  virtual bool forceLimitingAvailable(const RobotIndex r) = 0;

  /**
   * Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
   * 
   * @param r
   */
  virtual bool forceLimitingActive(const RobotIndex r) = 0;

  /**
   * Is the robot stopped due to an over-limit event?
   * 
   * @param r
   */
  virtual bool forceLimitingStopped(const RobotIndex r) = 0;

  /**
   * Is an end-of-arm switch box installed?
   * 
   * @param r
   */
  virtual bool switchBoxAvailable(const RobotIndex r) = 0;

  /**
   * Index of the currently active tool
   * 
   * @param r
   */
  virtual ToolIndex activeTool(const RobotIndex r) = 0;

  /**
   * Set the currently active tool
   * 
   * @param r
   * @param tool
   */
  virtual void setActiveTool(const RobotIndex r, const ToolIndex tool) = 0;
};

class RobotIfFactory {
 public:
  typedef RobotIf Handler;

  virtual ~RobotIfFactory() {}

  virtual RobotIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RobotIf* /* handler */) = 0;
  };

class RobotIfSingletonFactory : virtual public RobotIfFactory {
 public:
  RobotIfSingletonFactory(const ::std::shared_ptr<RobotIf>& iface) : iface_(iface) {}
  virtual ~RobotIfSingletonFactory() {}

  virtual RobotIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(RobotIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<RobotIf> iface_;
};

class RobotNull : virtual public RobotIf {
 public:
  virtual ~RobotNull() {}
  void model(std::string& /* _return */, const RobotIndex /* r */) override {
    return;
  }
  int32_t dof(const RobotIndex /* r */) override {
    int32_t _return = 0;
    return _return;
  }
  void jointPosition(Position& /* _return */, const RobotIndex /* r */, const OrientationUnit::type /* unit */) override {
    return;
  }
  void toolTipPosition(Position& /* _return */, const RobotIndex /* r */, const CoordinateFrame& /* frame */, const ToolIndex /* tool */) override {
    return;
  }
  bool forceLimitingAvailable(const RobotIndex /* r */) override {
    bool _return = false;
    return _return;
  }
  bool forceLimitingActive(const RobotIndex /* r */) override {
    bool _return = false;
    return _return;
  }
  bool forceLimitingStopped(const RobotIndex /* r */) override {
    bool _return = false;
    return _return;
  }
  bool switchBoxAvailable(const RobotIndex /* r */) override {
    bool _return = false;
    return _return;
  }
  ToolIndex activeTool(const RobotIndex /* r */) override {
    ToolIndex _return = 0;
    return _return;
  }
  void setActiveTool(const RobotIndex /* r */, const ToolIndex /* tool */) override {
    return;
  }
};

typedef struct _Robot_model_args__isset {
  _Robot_model_args__isset() : r(false) {}
  bool r :1;
} _Robot_model_args__isset;

class Robot_model_args {
 public:

  Robot_model_args(const Robot_model_args&) noexcept;
  Robot_model_args& operator=(const Robot_model_args&) noexcept;
  Robot_model_args() noexcept
                   : r(0) {
  }

  virtual ~Robot_model_args() noexcept;
  RobotIndex r;

  _Robot_model_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_model_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_model_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_model_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_model_pargs {
 public:


  virtual ~Robot_model_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_model_result__isset {
  _Robot_model_result__isset() : success(false) {}
  bool success :1;
} _Robot_model_result__isset;

class Robot_model_result {
 public:

  Robot_model_result(const Robot_model_result&);
  Robot_model_result& operator=(const Robot_model_result&);
  Robot_model_result() noexcept
                     : success() {
  }

  virtual ~Robot_model_result() noexcept;
  std::string success;

  _Robot_model_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Robot_model_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_model_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_model_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_model_presult__isset {
  _Robot_model_presult__isset() : success(false) {}
  bool success :1;
} _Robot_model_presult__isset;

class Robot_model_presult {
 public:


  virtual ~Robot_model_presult() noexcept;
  std::string* success;

  _Robot_model_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_dof_args__isset {
  _Robot_dof_args__isset() : r(false) {}
  bool r :1;
} _Robot_dof_args__isset;

class Robot_dof_args {
 public:

  Robot_dof_args(const Robot_dof_args&) noexcept;
  Robot_dof_args& operator=(const Robot_dof_args&) noexcept;
  Robot_dof_args() noexcept
                 : r(0) {
  }

  virtual ~Robot_dof_args() noexcept;
  RobotIndex r;

  _Robot_dof_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_dof_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_dof_pargs {
 public:


  virtual ~Robot_dof_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_dof_result__isset {
  _Robot_dof_result__isset() : success(false) {}
  bool success :1;
} _Robot_dof_result__isset;

class Robot_dof_result {
 public:

  Robot_dof_result(const Robot_dof_result&) noexcept;
  Robot_dof_result& operator=(const Robot_dof_result&) noexcept;
  Robot_dof_result() noexcept
                   : success(0) {
  }

  virtual ~Robot_dof_result() noexcept;
  int32_t success;

  _Robot_dof_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Robot_dof_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_dof_presult__isset {
  _Robot_dof_presult__isset() : success(false) {}
  bool success :1;
} _Robot_dof_presult__isset;

class Robot_dof_presult {
 public:


  virtual ~Robot_dof_presult() noexcept;
  int32_t* success;

  _Robot_dof_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_jointPosition_args__isset {
  _Robot_jointPosition_args__isset() : r(false), unit(false) {}
  bool r :1;
  bool unit :1;
} _Robot_jointPosition_args__isset;

class Robot_jointPosition_args {
 public:

  Robot_jointPosition_args(const Robot_jointPosition_args&) noexcept;
  Robot_jointPosition_args& operator=(const Robot_jointPosition_args&) noexcept;
  Robot_jointPosition_args() noexcept
                           : r(0),
                             unit(static_cast<OrientationUnit::type>(0)) {
  }

  virtual ~Robot_jointPosition_args() noexcept;
  RobotIndex r;
  /**
   * 
   * @see OrientationUnit
   */
  OrientationUnit::type unit;

  _Robot_jointPosition_args__isset __isset;

  void __set_r(const RobotIndex val);

  void __set_unit(const OrientationUnit::type val);

  bool operator == (const Robot_jointPosition_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Robot_jointPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_jointPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_jointPosition_pargs {
 public:


  virtual ~Robot_jointPosition_pargs() noexcept;
  const RobotIndex* r;
  /**
   * 
   * @see OrientationUnit
   */
  const OrientationUnit::type* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_jointPosition_result__isset {
  _Robot_jointPosition_result__isset() : success(false) {}
  bool success :1;
} _Robot_jointPosition_result__isset;

class Robot_jointPosition_result {
 public:

  Robot_jointPosition_result(const Robot_jointPosition_result&);
  Robot_jointPosition_result& operator=(const Robot_jointPosition_result&);
  Robot_jointPosition_result() noexcept {
  }

  virtual ~Robot_jointPosition_result() noexcept;
  Position success;

  _Robot_jointPosition_result__isset __isset;

  void __set_success(const Position& val);

  bool operator == (const Robot_jointPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_jointPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_jointPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_jointPosition_presult__isset {
  _Robot_jointPosition_presult__isset() : success(false) {}
  bool success :1;
} _Robot_jointPosition_presult__isset;

class Robot_jointPosition_presult {
 public:


  virtual ~Robot_jointPosition_presult() noexcept;
  Position* success;

  _Robot_jointPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_toolTipPosition_args__isset {
  _Robot_toolTipPosition_args__isset() : r(false), frame(false), tool(false) {}
  bool r :1;
  bool frame :1;
  bool tool :1;
} _Robot_toolTipPosition_args__isset;

class Robot_toolTipPosition_args {
 public:

  Robot_toolTipPosition_args(const Robot_toolTipPosition_args&);
  Robot_toolTipPosition_args& operator=(const Robot_toolTipPosition_args&);
  Robot_toolTipPosition_args() noexcept
                             : r(0),
                               tool(0) {
  }

  virtual ~Robot_toolTipPosition_args() noexcept;
  RobotIndex r;
  CoordinateFrame frame;
  ToolIndex tool;

  _Robot_toolTipPosition_args__isset __isset;

  void __set_r(const RobotIndex val);

  void __set_frame(const CoordinateFrame& val);

  void __set_tool(const ToolIndex val);

  bool operator == (const Robot_toolTipPosition_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    if (!(frame == rhs.frame))
      return false;
    if (!(tool == rhs.tool))
      return false;
    return true;
  }
  bool operator != (const Robot_toolTipPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_toolTipPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_toolTipPosition_pargs {
 public:


  virtual ~Robot_toolTipPosition_pargs() noexcept;
  const RobotIndex* r;
  const CoordinateFrame* frame;
  const ToolIndex* tool;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_toolTipPosition_result__isset {
  _Robot_toolTipPosition_result__isset() : success(false) {}
  bool success :1;
} _Robot_toolTipPosition_result__isset;

class Robot_toolTipPosition_result {
 public:

  Robot_toolTipPosition_result(const Robot_toolTipPosition_result&);
  Robot_toolTipPosition_result& operator=(const Robot_toolTipPosition_result&);
  Robot_toolTipPosition_result() noexcept {
  }

  virtual ~Robot_toolTipPosition_result() noexcept;
  Position success;

  _Robot_toolTipPosition_result__isset __isset;

  void __set_success(const Position& val);

  bool operator == (const Robot_toolTipPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_toolTipPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_toolTipPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_toolTipPosition_presult__isset {
  _Robot_toolTipPosition_presult__isset() : success(false) {}
  bool success :1;
} _Robot_toolTipPosition_presult__isset;

class Robot_toolTipPosition_presult {
 public:


  virtual ~Robot_toolTipPosition_presult() noexcept;
  Position* success;

  _Robot_toolTipPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_forceLimitingAvailable_args__isset {
  _Robot_forceLimitingAvailable_args__isset() : r(false) {}
  bool r :1;
} _Robot_forceLimitingAvailable_args__isset;

class Robot_forceLimitingAvailable_args {
 public:

  Robot_forceLimitingAvailable_args(const Robot_forceLimitingAvailable_args&) noexcept;
  Robot_forceLimitingAvailable_args& operator=(const Robot_forceLimitingAvailable_args&) noexcept;
  Robot_forceLimitingAvailable_args() noexcept
                                    : r(0) {
  }

  virtual ~Robot_forceLimitingAvailable_args() noexcept;
  RobotIndex r;

  _Robot_forceLimitingAvailable_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_forceLimitingAvailable_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_forceLimitingAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_forceLimitingAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_forceLimitingAvailable_pargs {
 public:


  virtual ~Robot_forceLimitingAvailable_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_forceLimitingAvailable_result__isset {
  _Robot_forceLimitingAvailable_result__isset() : success(false) {}
  bool success :1;
} _Robot_forceLimitingAvailable_result__isset;

class Robot_forceLimitingAvailable_result {
 public:

  Robot_forceLimitingAvailable_result(const Robot_forceLimitingAvailable_result&) noexcept;
  Robot_forceLimitingAvailable_result& operator=(const Robot_forceLimitingAvailable_result&) noexcept;
  Robot_forceLimitingAvailable_result() noexcept
                                      : success(0) {
  }

  virtual ~Robot_forceLimitingAvailable_result() noexcept;
  bool success;

  _Robot_forceLimitingAvailable_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Robot_forceLimitingAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_forceLimitingAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_forceLimitingAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_forceLimitingAvailable_presult__isset {
  _Robot_forceLimitingAvailable_presult__isset() : success(false) {}
  bool success :1;
} _Robot_forceLimitingAvailable_presult__isset;

class Robot_forceLimitingAvailable_presult {
 public:


  virtual ~Robot_forceLimitingAvailable_presult() noexcept;
  bool* success;

  _Robot_forceLimitingAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_forceLimitingActive_args__isset {
  _Robot_forceLimitingActive_args__isset() : r(false) {}
  bool r :1;
} _Robot_forceLimitingActive_args__isset;

class Robot_forceLimitingActive_args {
 public:

  Robot_forceLimitingActive_args(const Robot_forceLimitingActive_args&) noexcept;
  Robot_forceLimitingActive_args& operator=(const Robot_forceLimitingActive_args&) noexcept;
  Robot_forceLimitingActive_args() noexcept
                                 : r(0) {
  }

  virtual ~Robot_forceLimitingActive_args() noexcept;
  RobotIndex r;

  _Robot_forceLimitingActive_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_forceLimitingActive_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_forceLimitingActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_forceLimitingActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_forceLimitingActive_pargs {
 public:


  virtual ~Robot_forceLimitingActive_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_forceLimitingActive_result__isset {
  _Robot_forceLimitingActive_result__isset() : success(false) {}
  bool success :1;
} _Robot_forceLimitingActive_result__isset;

class Robot_forceLimitingActive_result {
 public:

  Robot_forceLimitingActive_result(const Robot_forceLimitingActive_result&) noexcept;
  Robot_forceLimitingActive_result& operator=(const Robot_forceLimitingActive_result&) noexcept;
  Robot_forceLimitingActive_result() noexcept
                                   : success(0) {
  }

  virtual ~Robot_forceLimitingActive_result() noexcept;
  bool success;

  _Robot_forceLimitingActive_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Robot_forceLimitingActive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_forceLimitingActive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_forceLimitingActive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_forceLimitingActive_presult__isset {
  _Robot_forceLimitingActive_presult__isset() : success(false) {}
  bool success :1;
} _Robot_forceLimitingActive_presult__isset;

class Robot_forceLimitingActive_presult {
 public:


  virtual ~Robot_forceLimitingActive_presult() noexcept;
  bool* success;

  _Robot_forceLimitingActive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_forceLimitingStopped_args__isset {
  _Robot_forceLimitingStopped_args__isset() : r(false) {}
  bool r :1;
} _Robot_forceLimitingStopped_args__isset;

class Robot_forceLimitingStopped_args {
 public:

  Robot_forceLimitingStopped_args(const Robot_forceLimitingStopped_args&) noexcept;
  Robot_forceLimitingStopped_args& operator=(const Robot_forceLimitingStopped_args&) noexcept;
  Robot_forceLimitingStopped_args() noexcept
                                  : r(0) {
  }

  virtual ~Robot_forceLimitingStopped_args() noexcept;
  RobotIndex r;

  _Robot_forceLimitingStopped_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_forceLimitingStopped_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_forceLimitingStopped_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_forceLimitingStopped_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_forceLimitingStopped_pargs {
 public:


  virtual ~Robot_forceLimitingStopped_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_forceLimitingStopped_result__isset {
  _Robot_forceLimitingStopped_result__isset() : success(false) {}
  bool success :1;
} _Robot_forceLimitingStopped_result__isset;

class Robot_forceLimitingStopped_result {
 public:

  Robot_forceLimitingStopped_result(const Robot_forceLimitingStopped_result&) noexcept;
  Robot_forceLimitingStopped_result& operator=(const Robot_forceLimitingStopped_result&) noexcept;
  Robot_forceLimitingStopped_result() noexcept
                                    : success(0) {
  }

  virtual ~Robot_forceLimitingStopped_result() noexcept;
  bool success;

  _Robot_forceLimitingStopped_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Robot_forceLimitingStopped_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_forceLimitingStopped_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_forceLimitingStopped_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_forceLimitingStopped_presult__isset {
  _Robot_forceLimitingStopped_presult__isset() : success(false) {}
  bool success :1;
} _Robot_forceLimitingStopped_presult__isset;

class Robot_forceLimitingStopped_presult {
 public:


  virtual ~Robot_forceLimitingStopped_presult() noexcept;
  bool* success;

  _Robot_forceLimitingStopped_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_switchBoxAvailable_args__isset {
  _Robot_switchBoxAvailable_args__isset() : r(false) {}
  bool r :1;
} _Robot_switchBoxAvailable_args__isset;

class Robot_switchBoxAvailable_args {
 public:

  Robot_switchBoxAvailable_args(const Robot_switchBoxAvailable_args&) noexcept;
  Robot_switchBoxAvailable_args& operator=(const Robot_switchBoxAvailable_args&) noexcept;
  Robot_switchBoxAvailable_args() noexcept
                                : r(0) {
  }

  virtual ~Robot_switchBoxAvailable_args() noexcept;
  RobotIndex r;

  _Robot_switchBoxAvailable_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_switchBoxAvailable_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_switchBoxAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_switchBoxAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_switchBoxAvailable_pargs {
 public:


  virtual ~Robot_switchBoxAvailable_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_switchBoxAvailable_result__isset {
  _Robot_switchBoxAvailable_result__isset() : success(false) {}
  bool success :1;
} _Robot_switchBoxAvailable_result__isset;

class Robot_switchBoxAvailable_result {
 public:

  Robot_switchBoxAvailable_result(const Robot_switchBoxAvailable_result&) noexcept;
  Robot_switchBoxAvailable_result& operator=(const Robot_switchBoxAvailable_result&) noexcept;
  Robot_switchBoxAvailable_result() noexcept
                                  : success(0) {
  }

  virtual ~Robot_switchBoxAvailable_result() noexcept;
  bool success;

  _Robot_switchBoxAvailable_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Robot_switchBoxAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_switchBoxAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_switchBoxAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_switchBoxAvailable_presult__isset {
  _Robot_switchBoxAvailable_presult__isset() : success(false) {}
  bool success :1;
} _Robot_switchBoxAvailable_presult__isset;

class Robot_switchBoxAvailable_presult {
 public:


  virtual ~Robot_switchBoxAvailable_presult() noexcept;
  bool* success;

  _Robot_switchBoxAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_activeTool_args__isset {
  _Robot_activeTool_args__isset() : r(false) {}
  bool r :1;
} _Robot_activeTool_args__isset;

class Robot_activeTool_args {
 public:

  Robot_activeTool_args(const Robot_activeTool_args&) noexcept;
  Robot_activeTool_args& operator=(const Robot_activeTool_args&) noexcept;
  Robot_activeTool_args() noexcept
                        : r(0) {
  }

  virtual ~Robot_activeTool_args() noexcept;
  RobotIndex r;

  _Robot_activeTool_args__isset __isset;

  void __set_r(const RobotIndex val);

  bool operator == (const Robot_activeTool_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const Robot_activeTool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_activeTool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_activeTool_pargs {
 public:


  virtual ~Robot_activeTool_pargs() noexcept;
  const RobotIndex* r;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_activeTool_result__isset {
  _Robot_activeTool_result__isset() : success(false) {}
  bool success :1;
} _Robot_activeTool_result__isset;

class Robot_activeTool_result {
 public:

  Robot_activeTool_result(const Robot_activeTool_result&) noexcept;
  Robot_activeTool_result& operator=(const Robot_activeTool_result&) noexcept;
  Robot_activeTool_result() noexcept
                          : success(0) {
  }

  virtual ~Robot_activeTool_result() noexcept;
  ToolIndex success;

  _Robot_activeTool_result__isset __isset;

  void __set_success(const ToolIndex val);

  bool operator == (const Robot_activeTool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Robot_activeTool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_activeTool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Robot_activeTool_presult__isset {
  _Robot_activeTool_presult__isset() : success(false) {}
  bool success :1;
} _Robot_activeTool_presult__isset;

class Robot_activeTool_presult {
 public:


  virtual ~Robot_activeTool_presult() noexcept;
  ToolIndex* success;

  _Robot_activeTool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Robot_setActiveTool_args__isset {
  _Robot_setActiveTool_args__isset() : r(false), tool(false) {}
  bool r :1;
  bool tool :1;
} _Robot_setActiveTool_args__isset;

class Robot_setActiveTool_args {
 public:

  Robot_setActiveTool_args(const Robot_setActiveTool_args&) noexcept;
  Robot_setActiveTool_args& operator=(const Robot_setActiveTool_args&) noexcept;
  Robot_setActiveTool_args() noexcept
                           : r(0),
                             tool(0) {
  }

  virtual ~Robot_setActiveTool_args() noexcept;
  RobotIndex r;
  ToolIndex tool;

  _Robot_setActiveTool_args__isset __isset;

  void __set_r(const RobotIndex val);

  void __set_tool(const ToolIndex val);

  bool operator == (const Robot_setActiveTool_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    if (!(tool == rhs.tool))
      return false;
    return true;
  }
  bool operator != (const Robot_setActiveTool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_setActiveTool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_setActiveTool_pargs {
 public:


  virtual ~Robot_setActiveTool_pargs() noexcept;
  const RobotIndex* r;
  const ToolIndex* tool;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_setActiveTool_result {
 public:

  Robot_setActiveTool_result(const Robot_setActiveTool_result&) noexcept;
  Robot_setActiveTool_result& operator=(const Robot_setActiveTool_result&) noexcept;
  Robot_setActiveTool_result() noexcept {
  }

  virtual ~Robot_setActiveTool_result() noexcept;

  bool operator == (const Robot_setActiveTool_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Robot_setActiveTool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Robot_setActiveTool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Robot_setActiveTool_presult {
 public:


  virtual ~Robot_setActiveTool_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RobotClient : virtual public RobotIf {
 public:
  RobotClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RobotClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * The model string of this robot
   * 
   * @param r
   */
  void model(std::string& _return, const RobotIndex r) override;
  void send_model(const RobotIndex r);
  void recv_model(std::string& _return);
  /**
   * Number of degrees-of-freedom / axes
   * 
   * @param r
   */
  int32_t dof(const RobotIndex r) override;
  void send_dof(const RobotIndex r);
  int32_t recv_dof();
  /**
   * Current position of the robot in joint coordinate frame (i.e. axis angles)
   * 
   * @param r
   * @param unit
   */
  void jointPosition(Position& _return, const RobotIndex r, const OrientationUnit::type unit) override;
  void send_jointPosition(const RobotIndex r, const OrientationUnit::type unit);
  void recv_jointPosition(Position& _return);
  /**
   * Coordinates of the ToolTip (TCP) of of the specified tool
   * in the given coordinate frame (using active tool if none specified)
   * 
   * @param r
   * @param frame
   * @param tool
   */
  void toolTipPosition(Position& _return, const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool) override;
  void send_toolTipPosition(const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool);
  void recv_toolTipPosition(Position& _return);
  /**
   * Does this robot support force limiting? (collaborative robot?)
   * 
   * @param r
   */
  bool forceLimitingAvailable(const RobotIndex r) override;
  void send_forceLimitingAvailable(const RobotIndex r);
  bool recv_forceLimitingAvailable();
  /**
   * Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
   * 
   * @param r
   */
  bool forceLimitingActive(const RobotIndex r) override;
  void send_forceLimitingActive(const RobotIndex r);
  bool recv_forceLimitingActive();
  /**
   * Is the robot stopped due to an over-limit event?
   * 
   * @param r
   */
  bool forceLimitingStopped(const RobotIndex r) override;
  void send_forceLimitingStopped(const RobotIndex r);
  bool recv_forceLimitingStopped();
  /**
   * Is an end-of-arm switch box installed?
   * 
   * @param r
   */
  bool switchBoxAvailable(const RobotIndex r) override;
  void send_switchBoxAvailable(const RobotIndex r);
  bool recv_switchBoxAvailable();
  /**
   * Index of the currently active tool
   * 
   * @param r
   */
  ToolIndex activeTool(const RobotIndex r) override;
  void send_activeTool(const RobotIndex r);
  ToolIndex recv_activeTool();
  /**
   * Set the currently active tool
   * 
   * @param r
   * @param tool
   */
  void setActiveTool(const RobotIndex r, const ToolIndex tool) override;
  void send_setActiveTool(const RobotIndex r, const ToolIndex tool);
  void recv_setActiveTool();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RobotProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<RobotIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (RobotProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_model(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_jointPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_toolTipPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forceLimitingAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forceLimitingActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forceLimitingStopped(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_switchBoxAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_activeTool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setActiveTool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RobotProcessor(::std::shared_ptr<RobotIf> iface) :
    iface_(iface) {
    processMap_["model"] = &RobotProcessor::process_model;
    processMap_["dof"] = &RobotProcessor::process_dof;
    processMap_["jointPosition"] = &RobotProcessor::process_jointPosition;
    processMap_["toolTipPosition"] = &RobotProcessor::process_toolTipPosition;
    processMap_["forceLimitingAvailable"] = &RobotProcessor::process_forceLimitingAvailable;
    processMap_["forceLimitingActive"] = &RobotProcessor::process_forceLimitingActive;
    processMap_["forceLimitingStopped"] = &RobotProcessor::process_forceLimitingStopped;
    processMap_["switchBoxAvailable"] = &RobotProcessor::process_switchBoxAvailable;
    processMap_["activeTool"] = &RobotProcessor::process_activeTool;
    processMap_["setActiveTool"] = &RobotProcessor::process_setActiveTool;
  }

  virtual ~RobotProcessor() {}
};

class RobotProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RobotProcessorFactory(const ::std::shared_ptr< RobotIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< RobotIfFactory > handlerFactory_;
};

class RobotMultiface : virtual public RobotIf {
 public:
  RobotMultiface(std::vector<std::shared_ptr<RobotIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RobotMultiface() {}
 protected:
  std::vector<std::shared_ptr<RobotIf> > ifaces_;
  RobotMultiface() {}
  void add(::std::shared_ptr<RobotIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  /**
   * The model string of this robot
   * 
   * @param r
   */
  void model(std::string& _return, const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->model(_return, r);
    }
    ifaces_[i]->model(_return, r);
    return;
  }

  /**
   * Number of degrees-of-freedom / axes
   * 
   * @param r
   */
  int32_t dof(const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dof(r);
    }
    return ifaces_[i]->dof(r);
  }

  /**
   * Current position of the robot in joint coordinate frame (i.e. axis angles)
   * 
   * @param r
   * @param unit
   */
  void jointPosition(Position& _return, const RobotIndex r, const OrientationUnit::type unit) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->jointPosition(_return, r, unit);
    }
    ifaces_[i]->jointPosition(_return, r, unit);
    return;
  }

  /**
   * Coordinates of the ToolTip (TCP) of of the specified tool
   * in the given coordinate frame (using active tool if none specified)
   * 
   * @param r
   * @param frame
   * @param tool
   */
  void toolTipPosition(Position& _return, const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->toolTipPosition(_return, r, frame, tool);
    }
    ifaces_[i]->toolTipPosition(_return, r, frame, tool);
    return;
  }

  /**
   * Does this robot support force limiting? (collaborative robot?)
   * 
   * @param r
   */
  bool forceLimitingAvailable(const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forceLimitingAvailable(r);
    }
    return ifaces_[i]->forceLimitingAvailable(r);
  }

  /**
   * Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
   * 
   * @param r
   */
  bool forceLimitingActive(const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forceLimitingActive(r);
    }
    return ifaces_[i]->forceLimitingActive(r);
  }

  /**
   * Is the robot stopped due to an over-limit event?
   * 
   * @param r
   */
  bool forceLimitingStopped(const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forceLimitingStopped(r);
    }
    return ifaces_[i]->forceLimitingStopped(r);
  }

  /**
   * Is an end-of-arm switch box installed?
   * 
   * @param r
   */
  bool switchBoxAvailable(const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->switchBoxAvailable(r);
    }
    return ifaces_[i]->switchBoxAvailable(r);
  }

  /**
   * Index of the currently active tool
   * 
   * @param r
   */
  ToolIndex activeTool(const RobotIndex r) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->activeTool(r);
    }
    return ifaces_[i]->activeTool(r);
  }

  /**
   * Set the currently active tool
   * 
   * @param r
   * @param tool
   */
  void setActiveTool(const RobotIndex r, const ToolIndex tool) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setActiveTool(r, tool);
    }
    ifaces_[i]->setActiveTool(r, tool);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RobotConcurrentClient : virtual public RobotIf {
 public:
  RobotConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  RobotConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * The model string of this robot
   * 
   * @param r
   */
  void model(std::string& _return, const RobotIndex r) override;
  int32_t send_model(const RobotIndex r);
  void recv_model(std::string& _return, const int32_t seqid);
  /**
   * Number of degrees-of-freedom / axes
   * 
   * @param r
   */
  int32_t dof(const RobotIndex r) override;
  int32_t send_dof(const RobotIndex r);
  int32_t recv_dof(const int32_t seqid);
  /**
   * Current position of the robot in joint coordinate frame (i.e. axis angles)
   * 
   * @param r
   * @param unit
   */
  void jointPosition(Position& _return, const RobotIndex r, const OrientationUnit::type unit) override;
  int32_t send_jointPosition(const RobotIndex r, const OrientationUnit::type unit);
  void recv_jointPosition(Position& _return, const int32_t seqid);
  /**
   * Coordinates of the ToolTip (TCP) of of the specified tool
   * in the given coordinate frame (using active tool if none specified)
   * 
   * @param r
   * @param frame
   * @param tool
   */
  void toolTipPosition(Position& _return, const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool) override;
  int32_t send_toolTipPosition(const RobotIndex r, const CoordinateFrame& frame, const ToolIndex tool);
  void recv_toolTipPosition(Position& _return, const int32_t seqid);
  /**
   * Does this robot support force limiting? (collaborative robot?)
   * 
   * @param r
   */
  bool forceLimitingAvailable(const RobotIndex r) override;
  int32_t send_forceLimitingAvailable(const RobotIndex r);
  bool recv_forceLimitingAvailable(const int32_t seqid);
  /**
   * Is force limiting currently active? (i.e. PFL - Power & Force Limiting)
   * 
   * @param r
   */
  bool forceLimitingActive(const RobotIndex r) override;
  int32_t send_forceLimitingActive(const RobotIndex r);
  bool recv_forceLimitingActive(const int32_t seqid);
  /**
   * Is the robot stopped due to an over-limit event?
   * 
   * @param r
   */
  bool forceLimitingStopped(const RobotIndex r) override;
  int32_t send_forceLimitingStopped(const RobotIndex r);
  bool recv_forceLimitingStopped(const int32_t seqid);
  /**
   * Is an end-of-arm switch box installed?
   * 
   * @param r
   */
  bool switchBoxAvailable(const RobotIndex r) override;
  int32_t send_switchBoxAvailable(const RobotIndex r);
  bool recv_switchBoxAvailable(const int32_t seqid);
  /**
   * Index of the currently active tool
   * 
   * @param r
   */
  ToolIndex activeTool(const RobotIndex r) override;
  int32_t send_activeTool(const RobotIndex r);
  ToolIndex recv_activeTool(const int32_t seqid);
  /**
   * Set the currently active tool
   * 
   * @param r
   * @param tool
   */
  void setActiveTool(const RobotIndex r, const ToolIndex tool) override;
  int32_t send_setActiveTool(const RobotIndex r, const ToolIndex tool);
  void recv_setActiveTool(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
